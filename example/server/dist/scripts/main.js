/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const WNS = __webpack_require__(1).WNS;
WNS({
    samplePath: "samples/",
});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("WNS", [], factory);
	else if(typeof exports === 'object')
		exports["WNS"] = factory();
	else
		root["WNS"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const utils = {
    mtof: (note) => Math.pow(2, (note) / 12) * 440,
    ftom: (note) => Math.sqrt(note / 440) / 12,
    choose: (array) => {
        return array[Math.floor(Math.random() * array.length)];
    },
    getRateFromFrequencies: (freq, baseFreq) => {
        return freq / baseFreq;
    },
    getClosestMember: (subject, set) => {
        return set.reduce((accum, member) => {
            const prevDistance = accum - subject;
            const currentDistance = member - subject;
            return Math.abs(currentDistance) < Math.abs(prevDistance) ? member : accum;
        }, set[0]);
    },
    findInCollection: (collection, predicateFunction) => {
        return collection.reduce((accum, member) => predicateFunction(member) ? member : accum);
    },
    mapToDomain: (set, domain) => {
        const setOffset = Math.min(...domain) - Math.min(...set);
        const domainRange = (Math.max(...domain) - Math.min(...domain));
        const setRange = (Math.max(...set) - Math.min(...set));
        return set.map(member => utils.getClosestMember((((member - Math.min(...set)) / setRange) * domainRange) + setOffset, domain));
    },
    flipCoin: (probability = 0.5) => (Math.random() < probability) ? false : true,
    makeFunction: (value) => {
        if (typeof value === "function") {
            return value;
        }
        else {
            return () => value;
        }
    }
};
/* harmony default export */ __webpack_exports__["a"] = (utils);
const windex = (weights) => {
    let sumOfWeights = weights.reduce((prev, curr) => prev + curr);
    let randNum = Math.random() * sumOfWeights;
    let weightSum = 0;
    for (let i = 0; i < weights.length; i++) {
        weightSum += weights[i];
        weightSum = +weightSum.toFixed(2);
        if (randNum <= weightSum) {
            return i;
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = windex;

const normalize = (coll) => {
    let collSum = coll.reduce((a, b) => a + b);
    return collSum > 0 ? coll.map((weight) => weight / collSum) : coll.map(() => 0);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = normalize;

const isEquivalent = (a, b) => {
    // Create arrays of property names
    var aProps = Object.getOwnPropertyNames(a);
    var bProps = Object.getOwnPropertyNames(b);
    // If number of properties is different,
    // objects are not equivalent
    if (aProps.length != bProps.length) {
        return false;
    }
    for (var i = 0; i < aProps.length; i++) {
        var propName = aProps[i];
        // If values of same property are not equal,
        // objects are not equivalent
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    // If we made it this far, objects
    // are considered equivalent
    return true;
};
/* harmony export (immutable) */ __webpack_exports__["c"] = isEquivalent;

const getSequentialRandomIndex = (lastIndex, length) => {
    const possibleIndexes = Array(length).fill(0).map((item, i) => i).filter(item => item !== lastIndex);
    return utils.choose(possibleIndexes);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getSequentialRandomIndex;



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WNS", function() { return WNS; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Scene__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Synth__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MultiSampler__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__spectralData_json__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__spectralData_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__spectralData_json__);






;
const defaultConfig = {
    samplePath: "samples/",
};
const WNS = (config) => {
    config = config ? Object.assign({}, defaultConfig, config) : defaultConfig;
    const backgroundSamples = __WEBPACK_IMPORTED_MODULE_4__spectralData_json___default.a;
    // Setup
    const populationSize = 16;
    const context = new AudioContext();
    const chordOscillators = Array(populationSize).fill(0).map(() => new __WEBPACK_IMPORTED_MODULE_1__Synth__["a" /* default */](context));
    const multiSamplerOpts = {
        samples: [
            //{ files: [ config.samplePath + "pipeG.mp3" ], freq: 199 },
            //{ files: [ config.samplePath + "pipeD.mp3" ], freq: 306 },
            //{ files: [ config.samplePath + "pipeA.mp3" ], freq: 445 },
            //{ files: [ config.samplePath + "pipeE.mp3" ], freq: 666 },
            { files: [config.samplePath + "piano2-324.mp3"], freq: 324 },
            { files: [config.samplePath + "piano3-814.mp3"], freq: 814 },
        ],
    };
    const melodyOscillators = Array(populationSize).fill(0).map(() => __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* default */].flipCoin() ? new __WEBPACK_IMPORTED_MODULE_2__MultiSampler__["a" /* default */](context, multiSamplerOpts) : new __WEBPACK_IMPORTED_MODULE_1__Synth__["a" /* default */](context));
    const sourceSamples = backgroundSamples.map(sampleData => new __WEBPACK_IMPORTED_MODULE_2__MultiSampler__["a" /* default */](context, {
        samples: [
            { files: [config.samplePath + sampleData.audioFile], freq: 1 },
        ],
    }));
    let sampleIndex = 0;
    const playNewScene = () => {
        sampleIndex = Object(__WEBPACK_IMPORTED_MODULE_3__utils__["b" /* getSequentialRandomIndex */])(sampleIndex, backgroundSamples.length);
        //const target = [193, 423, 1668, 2333, 2665, 3078, 4038, 6319, 193+1, 423+1, 1668+1, 2333+1, 2665+1, 3078+1, 4038+1, 6319+1 ]; // in frequency
        const backgroundSample = backgroundSamples[sampleIndex];
        console.log(backgroundSample.audioFile);
        const initialPopulation = Array(80).fill(backgroundSample.spectrum.map(bin => bin.freq));
        // Target is the overtones of the most prominent frequency in the spectrum
        const target = backgroundSample.spectrum
            .reduce((accum, bin) => accum[0].magnitude < bin.magnitude ? [bin] : accum, [{ freq: 0, magnitude: -100 }])
            .map(bin => bin.freq)
            .map((strongestFreq) => Array(backgroundSample.spectrum.length).fill(0).map((item, i) => strongestFreq * (i + 1)))[0];
        const sceneConfig = {
            initialPopulation: initialPopulation.map(item => item.map(item2 => {
                return (Math.random() * (target[target.length - 1] - target[0])) + (target[0] - 20);
            })),
            populationSize: 16,
            maxGenerations: 2,
            target,
            timeBetweenEvents: () => (Math.random() * 15) + 5,
            gapBetweenEvents: () => __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* default */].choose([45, 10]),
            melodyOscillators,
            chordOscillators,
            onFinish: playNewScene
        };
        sourceSamples[sampleIndex].play({ freq: 1, time: 60 * 3 * 1000, vol: 0.3 });
        // Start the scene
        new __WEBPACK_IMPORTED_MODULE_0__Scene__["a" /* Scene */](sceneConfig).play();
    };
    playNewScene();
};
/* harmony default export */ __webpack_exports__["default"] = (WNS);



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__patterns__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);


class Scene {
    constructor(config) {
        this.config = config;
        this.config.timeBetweenEvents = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].makeFunction(this.config.timeBetweenEvents);
        this.config.gapBetweenEvents = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].makeFunction(this.config.gapBetweenEvents);
        this.notes = Object(__WEBPACK_IMPORTED_MODULE_0__patterns__["a" /* Pgenetic */])(config.initialPopulation, config.target);
        this.config.maxGenerations = config.maxGenerations;
        this.currentGeneration = 0;
        this.config.onFinish = config.onFinish;
    }
    play() {
        const nextGen = this.notes.next().value;
        const newNotes = nextGen;
        let i = 0;
        let k = (Math.random() > 0.5) ? 0 : 1;
        this.config.chordOscillators.map((osc) => {
            const octave = Math.ceil(Math.random() * 5);
            osc.play({ freq: newNotes[i] / octave, time: this.config.timeBetweenEvents(), pan: ((k % 2) * 2) - 1, vol: 0.2 });
            i++;
            k++;
        });
        this.playMelody(newNotes, this.currentGeneration);
        console.log('GENETIC GENERATION: ', this.currentGeneration, nextGen);
        if (this.currentGeneration <= (this.config.maxGenerations - 1)) {
            window.setTimeout(() => {
                this.currentGeneration++;
                this.play();
            }, (this.config.timeBetweenEvents() + this.config.gapBetweenEvents()) * 1000);
        }
        else {
            this.currentGeneration++;
            this.endOfScene();
        }
        return this;
    }
    playMelody(notes, generation) {
        const newNotes = notes;
        // Taken from the sequence of pitches in "Forever in Blue Jeans" by Neil Diamond
        const idealMelody = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].mapToDomain([0, 4, 2, 0, 7, 4, 2, 7, 7, 4, 2, 2, 4, 4, 2, 0], newNotes);
        const randomShiftAmount = Math.floor(Math.random() * (idealMelody.length));
        const initialState = [...idealMelody.slice(randomShiftAmount), ...idealMelody.slice(0, -(idealMelody.length - randomShiftAmount))];
        const markovMelody = Object(__WEBPACK_IMPORTED_MODULE_0__patterns__["b" /* Pmarkov */])(idealMelody, 1, initialState.slice(-2));
        let i = 0;
        const playNextNote = (generation) => {
            const octave = Math.ceil(Math.random() * 3) + Math.ceil(Math.random() * 3) + 2;
            const nextNote = markovMelody.next().value;
            if (nextNote !== undefined && __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].flipCoin(0.75)) {
                console.log('playing note', nextNote);
                this.config.melodyOscillators[i % this.config.melodyOscillators.length].play({
                    freq: nextNote / octave,
                    time: 3 + (Math.random() * 14),
                    pan: 0,
                    vol: 0.15
                });
            }
            i++;
            window.setTimeout(() => {
                if (generation === this.currentGeneration && this.currentGeneration <= this.config.maxGenerations) {
                    playNextNote(generation);
                }
            }, ((Math.random() * 2) + 0.5) * 1000);
        };
        playNextNote(generation);
    }
    endOfScene() {
        const onFinishCallback = this.config.onFinish;
        this.config.chordOscillators.map(synth => synth.stop(1));
        window.setTimeout(onFinishCallback, 1000);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Scene;



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Markov__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Genetic__ = __webpack_require__(5);
/*
 * Basic Patterns implementation for Gibberish
 */


const Pattern = (pattern) => [() => pattern.next().value];
/* unused harmony export Pattern */

const Pseq = function* Pseq(values, repetitions) {
    var index = 0;
    var result = () => values[index++ % values.length];
    if (repetitions == undefined) {
        while (true) {
            yield result();
        }
    }
    else {
        for (var i = 0; i < repetitions; i++) {
            yield result();
        }
    }
};
/* unused harmony export Pseq */

const Prand = function* Prand(values, repetitions) {
    var result = () => values[Math.floor(Math.random() * values.length)];
    if (repetitions == undefined) {
        while (true) {
            yield result();
        }
    }
    else {
        for (var i = 0; i < repetitions; i++) {
            yield result();
        }
    }
};
/* unused harmony export Prand */

const Pmarkov = function* Pmarkov(seed, order, initialState) {
    let markovChain = new __WEBPACK_IMPORTED_MODULE_0__Markov__["a" /* Markov */](seed, order);
    let lastState = initialState;
    while (true) {
        let nextState = markovChain.getNextState(lastState);
        lastState = [...lastState.slice(1), nextState];
        yield nextState;
    }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = Pmarkov;

const Pgenetic = function* Pgenetic(inputPopulation, goal) {
    let genetic = new __WEBPACK_IMPORTED_MODULE_1__Genetic__["a" /* Genetic */](inputPopulation, goal);
    let lastState = goal;
    while (true) {
        let nextState = genetic.getNextState(lastState);
        lastState = [lastState[lastState.length - 1], nextState];
        yield nextState;
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Pgenetic;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Markov; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);

class Markov {
    constructor(input, order) {
        this.dictionary = [],
            this.combinations = [];
        // Set a default last state for stream behavior
        this.lastState = [];
        for (let i = 0; i < order; i++) {
            this.lastState.push(input[i]);
        }
        this.transitionMatrix = this.createTransitionMatrix(input, order);
    }
    createTransitionMatrix(input, order) {
        this.dictionary = input;
        // Compute all possible combinations of the dictionary
        this.combinations = [];
        for (let i = 0; i < this.dictionary.length; i++) {
            for (let k = 0; k < this.dictionary.length; k++) {
                this.combinations.push([this.dictionary[i], this.dictionary[k]]);
            }
        }
        console.log('combos', this.combinations);
        // Setup the transitionMatrix (should be based on order)
        //TODO: This is hardcoded to 1st order. Make dynamic.
        let transitionMatrix = [];
        for (let i = 0; i < this.combinations.length; i++) {
            let dictionaryLengthArray = [];
            for (let k = 0; k < this.dictionary.length; k++) {
                dictionaryLengthArray.push(0);
            }
            transitionMatrix.push(dictionaryLengthArray);
        }
        // Tally the given combinations to add into the transitionMatrix
        for (let i = 0; i < input.length; i++) {
            let currentState;
            if (i == 0) {
                currentState = [input[input.length - 1], input[i]];
            }
            else {
                currentState = [input[i - (order - 1)], input[i]];
            }
            let indexOfCurrentState = this.combinations.findIndex((item) => {
                return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* isEquivalent */])(currentState, item);
            });
            // We are assuming a wrapping input
            let nextState = input[(i + 1) % input.length];
            let dictionaryIndexOfNextState = this.dictionary.indexOf(nextState);
            // increment the amount of times this transition has occurred
            transitionMatrix[indexOfCurrentState][dictionaryIndexOfNextState]++;
        }
        transitionMatrix = transitionMatrix.map(__WEBPACK_IMPORTED_MODULE_0__utils__["d" /* normalize */]);
        return transitionMatrix;
    }
    getNextState(state) {
        const transitionMatrix = this.transitionMatrix;
        let indexOfCurrentState = this.combinations.findIndex((item) => {
            return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* isEquivalent */])(state, item);
        });
        let probabilities = transitionMatrix[indexOfCurrentState];
        let nextIndex = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["e" /* windex */])(probabilities);
        return this.dictionary[nextIndex];
    }
    asPattern() {
        let self = this;
        return function* asPattern(initialState) {
            self.lastState = initialState;
            while (true) {
                let nextState = self.getNextState(self.lastState);
                self.lastState = [self.lastState[self.lastState.length - 1], nextState];
                yield nextState;
            }
        };
    }
}
;



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Genetic; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);

class Genetic {
    constructor(inputPopulation, goal) {
        this.population = inputPopulation;
        this.scores = Array(inputPopulation.length).fill(0);
        this.goal = goal;
        this.lastState = inputPopulation[Math.floor(Math.random() * (inputPopulation.length - 1))];
    }
    // Accumulate and return the score for a single collection
    getTotalFitnessRating(collection, goal) {
        let score = 0; // lower is better
        let normalizedCollection = collection.map((num) => num - Math.min.apply(null, collection));
        for (let i = normalizedCollection.length - 1; i >= 0; i--) {
            score += this.getDistance(normalizedCollection[i], goal[i]);
        }
        return score;
    }
    // TODO: test
    // Using the given scores, get the most "fit" two generations out of the population
    getTopTwoGenerations(scores, population) {
        let indexOfHighestScore = 0;
        for (let i = scores.length - 1; i >= 0; i--) {
            if (scores[indexOfHighestScore] < scores[i]) {
                indexOfHighestScore = i;
            }
            // If there are two of the same scores, choose one randomly
            if (scores[indexOfHighestScore] === scores[i]) {
                const coinFlip = Math.random();
                indexOfHighestScore = (coinFlip > 0.5) ? indexOfHighestScore : i;
            }
        }
        let indexOfNextHighestScore = 0;
        const topGenerationScore = scores[indexOfHighestScore];
        const coinFlipForMutate = __WEBPACK_IMPORTED_MODULE_0__utils__["a" /* default */].flipCoin(0.25);
        if (coinFlipForMutate) {
            indexOfNextHighestScore = Math.floor(Math.random() * scores.length);
        }
        else {
            for (let i = scores.length - 1; i >= 0; i--) {
                // Ignore any scores that are already the highest score
                if (scores[i] !== topGenerationScore) {
                    if (scores[indexOfNextHighestScore] < scores[i]) {
                        indexOfNextHighestScore = i;
                    }
                    // If there are two of the same scores, choose one randomly
                    if (scores[indexOfNextHighestScore] === scores[i]) {
                        const coinFlip = Math.random();
                        indexOfNextHighestScore = (coinFlip > 0.5) ? indexOfNextHighestScore : i;
                    }
                }
            }
        }
        return [population[indexOfHighestScore], population[indexOfNextHighestScore]];
    }
    // TODO: Make more than one type of mating
    // Take in two arrays (parents) and mate them in a number of different ways to produce multiple offspring
    mateGenerations(parents) {
        const splicedOffspring = this.getSplicedOffspring(parents[0], parents[1]);
        const interlacedOffspring = this.getInterlacedOffspring(parents[0], parents[1]);
        // Generate more than one offspring
        return [splicedOffspring, interlacedOffspring];
    }
    // Splice two equal-length arrays together and return the result
    getInterlacedOffspring(parentOne, parentTwo) {
        const interlacedOffspring = Array(parentOne.length);
        for (let i = interlacedOffspring.length - 1; i >= 0; i--) {
            interlacedOffspring[i] = (i % 2) === 0 ? parentOne[i] : parentTwo[i];
        }
        return interlacedOffspring;
    }
    getSplicedOffspring(parentOne, parentTwo) {
        const coinFlip = Math.random() > 0.5 ? 1 : 0;
        const parents = coinFlip == 0 ? [parentOne, parentTwo] : [parentTwo, parentOne];
        const splitPoint = Math.floor(parentOne.length / 2);
        const splicedOffspring = [...(parents[0].slice(0, splitPoint)), ...(parents[1].slice(splitPoint - 1, parents[1].length - 1))];
        return splicedOffspring;
    }
    // Returns a numerical distance between an input and a goal
    getDistance(input, goal) {
        let rating = goal - input;
        return rating;
    }
    // Calculate and return the scores for all current collections
    getPopulationScores(population, goal) {
        let scores = Array(population.length).fill(0);
        for (let i = (population.length - 1); i >= 0; i--) {
            scores[i] = this.getTotalFitnessRating(population[i], goal);
        }
        return scores;
    }
    getNextGeneration(population, goal) {
        const populationScores = this.getPopulationScores(population, goal);
        const topTwoGenerations = this.getTopTwoGenerations(populationScores, population);
        const newGenerations = this.mateGenerations(topTwoGenerations);
        for (let i = 0; i < (newGenerations.length - 1); i++) {
            this.population.splice(Math.floor(Math.random() * (this.population.length - 1)), 1);
        }
        this.population = [...this.population, ...newGenerations];
        // For now randomly select one of the best generations
        const bestFitGeneration = newGenerations[Math.floor(Math.random() * (newGenerations.length * 0.999))];
        return bestFitGeneration;
    }
    getNextState(state) {
        // TODO: Use state to add into the population
        const nextState = this.getNextGeneration(this.population, this.goal);
        return nextState;
    }
    asPattern() {
        const self = this;
        return function* asPattern(initialState) {
            self.lastState = initialState;
            while (true) {
                const nextState = self.getNextState(self.lastState);
                self.lastState = nextState;
                yield nextState;
            }
        };
    }
}
;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Synth {
    constructor(context) {
        this.context = context;
    }
    init() {
        this.oscillator = this.context.createOscillator();
        this.gainNode = this.context.createGain();
        this.panner = this.context.createStereoPanner();
        this.oscillator.connect(this.gainNode);
        this.gainNode.connect(this.panner);
        this.panner.connect(this.context.destination);
        this.oscillator.type = 'sine';
        this.gainNode.gain.value = 0;
    }
    play(opt) {
        const { freq = 220, time = 1, pan = 0, vol = 1 } = opt;
        this.init();
        let gain = 1;
        this.oscillator.frequency.value = freq;
        // some stupid basic pyschoacoustic shaping
        if (freq > 200)
            gain = gain * 0.12;
        //this.gainNode.gain.setValueAtTime(1, this.context.currentTime);
        this.panner.pan.value = pan;
        this.oscillator.start(0);
        this.gainNode.gain.setTargetAtTime(vol * gain * (0.55 - (Math.random() * 0.01)), this.context.currentTime, time * 0.85);
        var self = this;
        window.setTimeout(function () {
            self.stop(time * 0.25);
        }, (time - (time * 0.25)) * 1000);
        return this;
    }
    stop(time) {
        this.gainNode.gain.setTargetAtTime(0, this.context.currentTime, time * 0.9);
        this.oscillator.stop(this.context.currentTime + (time * 4));
        return this;
    }
}
/* harmony default export */ __webpack_exports__["a"] = (Synth);


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_howler__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_howler__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);


class MultiSampler {
    constructor(context, opt) {
        this.context = context;
        this.players = opt.samples.map(sampleConfig => ({ player: new __WEBPACK_IMPORTED_MODULE_0_howler__["Howl"]({ src: sampleConfig.files }), baseFreq: sampleConfig.freq }));
        console.log(this.players);
    }
    play(opt) {
        const { freq = 220, time = 1, pan = 0, vol = 1 } = opt;
        let gain = 1;
        const samplePlayer = this.findClosestSamplePlayer(freq);
        const currentlyPlayingSampleID = samplePlayer.player.play();
        samplePlayer.player.loop(false, currentlyPlayingSampleID);
        samplePlayer.player.rate(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].getRateFromFrequencies(freq, samplePlayer.baseFreq), currentlyPlayingSampleID);
        // some stupid basic pyschoacoustic shaping
        if (freq > 200)
            gain = gain * 0.2;
        samplePlayer.player.fade(0, gain * vol, 200, currentlyPlayingSampleID);
        samplePlayer.player.stereo(pan, currentlyPlayingSampleID);
        window.setTimeout(function () {
            samplePlayer.player.fade(gain * vol, 0, 200, currentlyPlayingSampleID);
            this.stop(time, samplePlayer, currentlyPlayingSampleID);
        }.bind(this), (time * 1000) + 200); // adding a 100 ms buffer to avoid any issues
        return this;
    }
    stop(time, samplePlayer, currentlyPlayingSampleID) {
        window.setTimeout(function () {
            samplePlayer.player.stop();
        }.bind(this), 300); // adding a 100 ms buffer to avoid any issues
        return this;
    }
    findClosestSamplePlayer(freq) {
        // Can only get the closest frequency in the set of Players' frequencies so get that frequency, then filter the players
        const closestPlayerFrequency = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].getClosestMember(freq, this.players.map(player => player.baseFreq));
        return __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].findInCollection(this.players, member => member === closestPlayerFrequency);
    }
}
/* harmony default export */ __webpack_exports__["a"] = (MultiSampler);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 *  howler.js v2.0.12
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Create a global ID counter.
      self._counter = 1000;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

      // Public properties.
      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null;

      // Set to false to disable the auto iOS enabler.
      self.mobileAutoEnable = true;

      // Setup the various state values for global tracking.
      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // Don't update any of the nodes if we are muted.
        if (self._muted) {
          return self;
        }

        // When using Web Audio, we just need to adjust the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (self.usingWebAudio) {
        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function() {
      var self = this || Howler;

      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].unload();
      }

      // Create a new AudioContext to make sure it is fully reset.
      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function() {
      var self = this || Howler;

      // Keeps track of the suspend/resume state of the AudioContext.
      self.state = self.ctx ? self.ctx.state || 'running' : 'running';

      // Automatically begin the 30-second suspend process
      self._autoSuspend();

      // Check if audio is available.
      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio();

            // Check if the canplaythrough event is available.
            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch(e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      }

      // Test to make sure audio isn't disabled in Internet Explorer.
      try {
        var test = new Audio();
        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {}

      // Check for supported codecs.
      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = null;

      // Must wrap in a try/catch because IE11 in server mode throws an error.
      try {
        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };

      return self;
    },

    /**
     * Mobile browsers will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableMobileAudio: function() {
      var self = this || Howler;

      // Only run this on mobile devices if audio isn't already eanbled.
      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));
      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {
        return;
      }

      self._mobileEnabled = false;

      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      }

      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684
      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.
      var unlock = function() {
        // Fix Android can not play in suspend state.
        Howler._autoResume();

        // Create an empty buffer.
        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function() {
          source.disconnect(0);

          // Update the unlocked state and prevent this check from happening again.
          self._mobileEnabled = true;
          self.mobileAutoEnable = false;

          // Remove the touch start listener.
          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
        };
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);

      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      // Check if any sounds are playing.
      for (var i=0; i<self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j=0; j<self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      }

      // If no sound has played after 30 seconds, suspend the context.
      self._suspendTimer = setTimeout(function() {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';
        self.ctx.suspend().then(function() {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;
            self._autoResume();
          }
        });
      }, 30000);

      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended') {
        self.ctx.resume().then(function() {
          self.state = 'running';

          // Emit to all Howls that the audio has resumed.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // If we don't have an AudioContext created yet, run the setup.
      if (!Howler.ctx) {
        setupAudioContext();
      }

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhrWithCredentials = o.xhrWithCredentials || false;

      // Setup all other default properties.
      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = [];
      self._playLock = false;

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
      self._onresume = [];

      // Web Audio or HTML5 Audio?
      self._webAudio = Howler.usingWebAudio && !self._html5;

      // Automatically try to enable audio on iOS.
      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {
        Howler._enableMobileAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // If they selected autoplay, add a play event to the load queue.
      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function() {
            self.play();
          }
        });
      }

      // Load the source file unless otherwise specified.
      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];
          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
            continue;
          }

          // Extract the file extension from the URL or base64 data URI.
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Log a warning if no extension was found.
        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        }

        // Check if this extension is available.
        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');
        return;
      }

      self._src = url;
      self._state = 'loading';

      // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.
      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      }

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function(sprite, internal) {
      var self = this;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.
        var num = 0;
        for (var i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
            num++;
            id = self._sounds[i]._id;
          }
        }

        if (num === 1) {
          sprite = null;
        } else {
          id = null;
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.
      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite;

        // Makr this sounded as not ended in case another sound is played before this one loads.
        sound._ended = false;

        // Add the sound to the queue to be played on load.
        var soundId = sound._id;
        self._queue.push({
          event: 'play',
          action: function() {
            self.play(soundId);
          }
        });

        return soundId;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          self._loadQueue('play');
        }

        return sound._id;
      }

      // Make sure the AudioContext isn't suspended, and resume it if it is.
      if (self._webAudio) {
        Howler._autoResume();
      }

      // Determine how long to play for and where to start playing.
      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
      var timeout = (duration * 1000) / Math.abs(sound._rate);

      // Update the parameters of the sound
      sound._paused = false;
      sound._ended = false;
      sound._sprite = sprite;
      sound._seek = seek;
      sound._start = self._sprite[sprite][0] / 1000;
      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._loop = !!(sound._loop || self._sprite[sprite][2]);

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function() {
              self._emit('play', sound._id);
            }, 0);
          }
        };

        if (Howler.state === 'running') {
          playWebAudio();
        } else {
          self.once('resume', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate;

          // Mobile browsers will throw an error if this is called without user interaction.
          try {
            var play = node.play();

            // Support older browsers that don't support promises, and thus don't have this issue.
            if (typeof Promise !== 'undefined' && play instanceof Promise) {
              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
              self._playLock = true;

              // Releases the lock and executes queued actions.
              var runLoadQueue = function() {
                self._playLock = false;
                if (!internal) {
                  self._emit('play', sound._id);
                }
              };
              play.then(runLoadQueue, runLoadQueue);
            } else if (!internal) {
              self._emit('play', sound._id);
            }

            // Setting rate before playing won't work in IE, so we set it again here.
            node.playbackRate = sound._rate;

            // If the node is still paused, then we can assume there was a playback issue.
            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                'on mobile devices where playback was not within a user interaction.');
              return;
            }

            // Setup the end timer on sprites or listen for the ended event.
            if (sprite !== '__default' || sound._loop) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            } else {
              self._endTimers[sound._id] = function() {
                // Fire ended on this audio node.
                self._ended(sound);

                // Clear this listener.
                node.removeEventListener('ended', self._endTimers[sound._id], false);
              };
              node.addEventListener('ended', self._endTimers[sound._id], false);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        };

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
        if (node.readyState >= 3 || loadedNoReadyState) {
          playHtml5();
        } else {
          var listener = function() {
            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };
          node.addEventListener(Howler._canPlayEvent, listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'pause',
          action: function() {
            self.pause(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              }

              // Clean up the buffer source.
              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        }

        // Fire the pause event, unless `true` is passed as the 2nd argument.
        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function(id, internal) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to stop when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'stop',
          action: function() {
            self.stop(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;
              sound._node.pause();
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to mute when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'mute',
          action: function() {
            self.mute(muted, id);
          }
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          // Cancel active fade and set the volume to the end value.
          if (sound._interval) {
            self._stopFade(sound._id);
          }

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'volume',
            action: function() {
              self.volume.apply(self, args);
            }
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            // Stop currently running fades.
            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to fade when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'fade',
          action: function() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      }

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          }

          // If we are using Web Audio, let the native methods do the actual fade.
          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     * @param  {Boolean} isGroup   If true, set the volume on the group.
     */
    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
      var self = this;
      var vol = from;
      var diff = to - from;
      var steps = Math.abs(diff / 0.01);
      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
      var lastTick = Date.now();

      // Store the value being faded to.
      sound._fadeTo = to;

      // Update the volume value on each interval tick.
      sound._interval = setInterval(function() {
        // Update the volume based on the time since the last tick.
        var tick = (Date.now() - lastTick) / len;
        lastTick = Date.now();
        vol += diff * tick;

        // Make sure the volume is in the right bounds.
        vol = Math.max(0, vol);
        vol = Math.min(1, vol);

        // Round to within 2 decimal points.
        vol = Math.round(vol * 100) / 100;

        // Change the volume.
        if (self._webAudio) {
          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        }

        // Set the group's volume.
        if (isGroup) {
          self._volume = vol;
        }

        // When the fade is complete, stop it and fire event.
        if ((to < from && vol <= to) || (to > from && vol >= to)) {
          clearInterval(sound._interval);
          sound._interval = null;
          sound._fadeTo = null;
          self.volume(to, sound._id);
          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function(id) {
      var self = this;
      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;
        self.volume(sound._fadeTo, id);
        sound._fadeTo = null;
        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;
            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function() {
      var self = this;
      var args = arguments;
      var rate, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the playback rate or return the current value.
      var sound;
      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'rate',
            action: function() {
              self.rate.apply(self, args);
            }
          });

          return self;
        }

        // Set the group rate.
        if (typeof id === 'undefined') {
          self._rate = rate;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            sound._rateSeek = self.seek(id[i]);
            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            sound._rate = rate;

            // Change the playback rate.
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            }

            // Reset the timers.
            var seek = self.seek(id[i]);
            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
            var timeout = (duration * 1000) / Math.abs(sound._rate);

            // Start a new end timer if sound is already playing.
            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);
              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // If the sound hasn't loaded, add it to the load queue to seek when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'seek',
          action: function() {
            self.seek.apply(self, args);
          }
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          sound._ended = false;
          self._clearTimer(id);

          // Restart the playback if the sound was playing.
          if (playing) {
            self.play(id, true);
          }

          // Update the seek position for HTML5 Audio.
          if (!self._webAudio && sound._node) {
            sound._node.currentTime = seek;
          }

          // Wait for the play lock to be unset before emitting (HTML5 Audio).
          if (playing && !self._webAudio) {
            var emitSeek = function() {
              if (!self._playLock) {
                self._emit('seek', id);
              } else {
                setTimeout(emitSeek, 0);
              }
            };
            setTimeout(emitSeek, 0);
          } else {
            self._emit('seek', id);
          }
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function(id) {
      var self = this;

      // Check the passed sound ID (if any).
      if (typeof id === 'number') {
        var sound = self._soundById(id);
        return sound ? !sound._paused : false;
      }

      // Otherwise, loop through all sounds and check if any are playing.
      for (var i=0; i<self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function(id) {
      var self = this;
      var duration = self._duration;

      // If we pass an ID, get the sound and return the sprite length.
      var sound = self._soundById(id);
      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
          if (!checkIE) {
            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
          }

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);

        // Remove the references in the global Howler object.
        var index = Howler._howls.indexOf(self);
        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
      }

      // Delete this sound from the cache (if no other Howl is using it).
      var remCache = true;
      for (i=0; i<Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      }

      // Clear global errors.
      Howler.noAudio = false;

      // Clear out `self`.
      self._state = 'unloaded';
      self._sounds = [];
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0;

      // Allow passing just an event and ID.
      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i=0; i<events.length; i++) {
          var isId = (id === events[i].id);
          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);
        for (i=0; i<keys.length; i++) {
          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Setup the event listener.
      self.on(event, fn, id, 1);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=events.length-1; i>=0; i--) {
        // Only fire the listener if the correct ID is used.
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);

          // If this event was setup with `once`, remove it.
          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      // Pass the event type into load queue so that it can continue stepping.
      self._loadQueue(event);

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function(event) {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0];

        // Remove this task if a matching event was passed.
        if (task.event === event) {
          self._queue.shift();
          self._loadQueue();
        }

        // Run the task if no event type is passed.
        if (!event) {
          task.action();
        }
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function(sound) {
      var self = this;
      var sprite = sound._sprite;

      // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.
      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      }

      // Should this sound loop?
      var loop = !!(sound._loop || self._sprite[sprite][2]);

      // Fire the ended event.
      self._emit('end', sound._id);

      // Restart the playback for HTML5 Audio loop.
      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      }

      // Restart this timer if on a Web Audio loop.
      if (self._webAudio && loop) {
        self._emit('play', sound._id);
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;

        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      }

      // Mark the node as paused.
      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        self._clearTimer(sound._id);

        // Clean up the buffer source.
        self._cleanBuffer(sound._node);

        // Attempt to auto-suspend AudioContext if no sounds are still playing.
        Howler._autoSuspend();
      }

      // When using a sprite, end the track.
      if (!self._webAudio && !loop) {
        self.stop(sound._id);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        // Clear the timeout or remove the ended listener.
        if (typeof self._endTimers[id] !== 'function') {
          clearTimeout(self._endTimers[id]);
        } else {
          var sound = self._soundById(id);
          if (sound && sound._node) {
            sound._node.removeEventListener('ended', self._endTimers[id], false);
          }
        }

        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop;
      }
      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function(node) {
      var self = this;

      if (Howler._scratchBuffer) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);
        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
      }
      node.bufferSource = null;

      return self;
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a unique ID for this sound.
      self._id = ++Howler._counter;

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
        self._node.paused = true;
        self._node.connect(Howler.masterGain);
      } else {
        self._node = new Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume * Howler.volume();

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = ++Howler._counter;

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';
        parent._emit('load');
        parent._loadQueue();
      }

      // Clear the event listener.
      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  var cache = {};

  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */
  var loadBuffer = function(self) {
    var url = self._src;

    // Check if the buffer has already been cached and use it instead.
    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration;

      // Load the sound into this Howl.
      loadSound(self);

      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);
      for (var i=0; i<data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.withCredentials = self._xhrWithCredentials;
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];
        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
          return;
        }

        decodeAudioData(xhr.response, self);
      };
      xhr.onerror = function() {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };
      safeXhrSend(xhr);
    }
  };

  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */
  var safeXhrSend = function(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };

  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */
  var decodeAudioData = function(arraybuffer, self) {
    // Decode the buffer into an audio source.
    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      }
    }, function() {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    });
  };

  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */
  var loadSound = function(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    }

    // Setup a sprite if none is defined.
    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {__default: [0, self._duration * 1000]};
    }

    // Fire the loaded event.
    if (self._state !== 'loaded') {
      self._state = 'loaded';
      self._emit('load');
      self._loadQueue();
    }
  };

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  var setupAudioContext = function() {
    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch(e) {
      Howler.usingWebAudio = false;
    }

    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.
    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
        Howler.usingWebAudio = false;
      }
    }

    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    if (Howler.usingWebAudio) {
      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
      Howler.masterGain.connect(Howler.ctx.destination);
    }

    // Re-run the setup on Howler.
    Howler._setup();
  };

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  // Add support for CommonJS libraries such as browserify.
  if (true) {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Define globally in case AMD is not available or unused.
  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  }
})();


/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.0.12
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup default properties.
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */
  HowlerGlobal.prototype.stereo = function(pan) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Loop through all Howls and update their stereo panning.
    for (var i=self._howls.length-1; i>=0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };

  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */
  HowlerGlobal.prototype.pos = function(x, y, z) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._pos[1] : y;
    z = (typeof z !== 'number') ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];

      if (typeof self.ctx.listener.positionX !== 'undefined') {
        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
      }
    } else {
      return self._pos;
    }

    return self;
  };

  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */
  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    var or = self._orientation;
    y = (typeof y !== 'number') ? or[1] : y;
    z = (typeof z !== 'number') ? or[2] : z;
    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];

      if (typeof self.ctx.listener.forwardX !== 'undefined') {
        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
      }
    } else {
      return or;
    }

    return self;
  };

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */
  Howl.prototype.init = (function(_super) {
    return function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      };

      // Setup event listeners.
      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

      // Complete initilization with howler.js core's init function.
      return _super.call(this, o);
    };
  })(Howl.prototype.init);

  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */
  Howl.prototype.stereo = function(pan, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function() {
          self.stereo(pan, id);
        }
      });

      return self;
    }

    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    // Setup the group's stereo panning if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    }

    // Change the streo panning of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower';

            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              if (typeof sound._panner.positionX !== 'undefined') {
                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
              } else {
                sound._panner.setPosition(pan, 0, 0);
              }
            } else {
              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */
  Howl.prototype.pos = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? 0 : y;
    z = (typeof z !== 'number') ? -0.5 : z;

    // Setup the group's spatial position if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    }

    // Change the spatial position of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.positionX !== 'undefined') {
              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(x, y, z);
            }
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */
  Howl.prototype.orientation = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._orientation[1] : y;
    z = (typeof z !== 'number') ? self._orientation[2] : z;

    // Setup the group's spatial orientation if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    }

    // Change the spatial orientation of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
            sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
            sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   *
   * @return {Howl/Object} Returns self or current panner attributes.
   */
  Howl.prototype.pannerAttr = function() {
    var self = this;
    var args = arguments;
    var o, id, sound;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // Determine the values based on arguments.
    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0];

        // Set the grou's panner attribute values.
        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    }

    // Update the values of the specified sounds.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        };

        // Update the panner values or create a new panner if none exists.
        var panner = sound._panner;
        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          }

          // Create a new panner node.
          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */
  Sound.prototype.init = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Setup user-defined default properties.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete initilization with howler.js core Sound's init function.
      _super.call(this);

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  })(Sound.prototype.init);

  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */
  Sound.prototype.reset = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Reset all spatial plugin properties on this sound.
      self._orientation = parent._orientation;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete resetting of the sound.
      return _super.call(this);
    };
  })(Sound.prototype.reset);

  /** Helper Methods **/
  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */
  var setupPanner = function(sound, type) {
    type = type || 'spatial';

    // Create the new panner node.
    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;

      if (typeof sound._panner.positionX !== 'undefined') {
        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
      }

      if (typeof sound._panner.orientationX !== 'undefined') {
        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
      }
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    }

    sound._panner.connect(sound._node);

    // Update the connections.
    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id, true);
    }
  };
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = [{"audioFile":"coop.mp3","spectrum":[{"freq":86.132812,"magnitude":-28.932537},{"freq":236.865234,"magnitude":-32.327995},{"freq":452.197266,"magnitude":-36.28949},{"freq":344.53125,"magnitude":-36.789261},{"freq":559.863281,"magnitude":-38.61684},{"freq":732.128906,"magnitude":-39.494778},{"freq":796.728516,"magnitude":-39.511993},{"freq":1076.660156,"magnitude":-48.423088},{"freq":1184.326172,"magnitude":-50.484188},{"freq":1248.925781,"magnitude":-50.664841},{"freq":1464.257812,"magnitude":-51.075733},{"freq":1399.658203,"magnitude":-51.329906},{"freq":1658.056641,"magnitude":-51.729897},{"freq":1851.855469,"magnitude":-53.016678},{"freq":2110.253906,"magnitude":-55.621365},{"freq":2024.121094,"magnitude":-57.550549}]},{"audioFile":"counting1.mp3","spectrum":[{"freq":193.798828,"magnitude":-26.017561},{"freq":409.130859,"magnitude":-35.475403},{"freq":602.929688,"magnitude":-43.021927},{"freq":796.728516,"magnitude":-46.480598},{"freq":7192.089844,"magnitude":-52.308483},{"freq":7235.15625,"magnitude":-52.633369},{"freq":8290.283203,"magnitude":-52.669678},{"freq":7105.957031,"magnitude":-52.945122},{"freq":6567.626953,"magnitude":-52.98806},{"freq":6503.027344,"magnitude":-53.184967},{"freq":6416.894531,"magnitude":-53.473446},{"freq":8182.617188,"magnitude":-53.531357},{"freq":5684.765625,"magnitude":-53.602531},{"freq":8139.550781,"magnitude":-54.062778},{"freq":6653.759766,"magnitude":-54.157398},{"freq":5577.099609,"magnitude":-54.469383}]},{"audioFile":"emptyWordsNea.mp3","spectrum":[{"freq":215.332031,"magnitude":-19.520159},{"freq":430.664062,"magnitude":-25.219025},{"freq":602.929688,"magnitude":-31.175522},{"freq":64.599609,"magnitude":-35.193279},{"freq":796.728516,"magnitude":-39.868279},{"freq":1787.255859,"magnitude":-41.391182},{"freq":882.861328,"magnitude":-42.827045},{"freq":1055.126953,"magnitude":-45.009171},{"freq":1679.589844,"magnitude":-45.019444},{"freq":1119.726562,"magnitude":-45.374962},{"freq":1571.923828,"magnitude":-45.392387},{"freq":1421.191406,"magnitude":-46.156982},{"freq":1270.458984,"magnitude":-46.377228},{"freq":1894.921875,"magnitude":-46.470295},{"freq":1485.791016,"magnitude":-47.266369},{"freq":8613.28125,"magnitude":-47.489655}]},{"audioFile":"kitchen1.mp3","spectrum":[{"freq":107.666016,"magnitude":-23.683832},{"freq":150.732422,"magnitude":-23.870668},{"freq":236.865234,"magnitude":-28.458439},{"freq":301.464844,"magnitude":-29.146461},{"freq":430.664062,"magnitude":-31.620726},{"freq":538.330078,"magnitude":-32.279846},{"freq":495.263672,"magnitude":-32.782124},{"freq":645.996094,"magnitude":-33.121647},{"freq":882.861328,"magnitude":-33.882751},{"freq":753.662109,"magnitude":-34.396046},{"freq":1248.925781,"magnitude":-35.733505},{"freq":1830.322266,"magnitude":-36.745499},{"freq":1141.259766,"magnitude":-37.116898},{"freq":1055.126953,"magnitude":-37.11882},{"freq":3251.513672,"magnitude":-38.061096},{"freq":1421.191406,"magnitude":-38.207405}]},{"audioFile":"snow.mp3","spectrum":[{"freq":64.599609,"magnitude":-29.677166},{"freq":344.53125,"magnitude":-40.347485},{"freq":602.929688,"magnitude":-44.040558},{"freq":689.0625,"magnitude":-44.897915},{"freq":925.927734,"magnitude":-48.870106},{"freq":1205.859375,"magnitude":-49.086319},{"freq":1098.193359,"magnitude":-50.976013},{"freq":1291.992188,"magnitude":-52.224236},{"freq":1421.191406,"magnitude":-53.330524},{"freq":1485.791016,"magnitude":-53.476215},{"freq":1378.125,"magnitude":-53.615837},{"freq":1636.523438,"magnitude":-54.583996},{"freq":1744.189453,"magnitude":-55.241005},{"freq":1808.789062,"magnitude":-55.726116},{"freq":1937.988281,"magnitude":-57.665276},{"freq":2024.121094,"magnitude":-59.252815}]}]

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTQ3NDIzMzYwMGQ1OTNhMzcyMjMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NjcmlwdHMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi4vYnVpbGQvd25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQzVEQSxNQUFNLEdBQUcsR0FBRyxtQkFBTyxDQUFDLENBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFFOUMsR0FBRyxDQUFDO0lBQ0YsVUFBVSxFQUFFLFVBQVU7Q0FDdkIsQ0FBQyxDQUFDOzs7Ozs7O0FDTEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEIsRUFBRTtBQUMvRCx5Q0FBeUMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtEQUErRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLDBEQUEwRCxjQUFjO0FBQ3hFLDZGQUE2RixZQUFZLEVBQUU7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQXdEO0FBQ3ZFLGVBQWUsd0RBQXdEO0FBQ3ZFLGVBQWUsd0RBQXdEO0FBQ3ZFLGVBQWUsd0RBQXdEO0FBQ3ZFLGFBQWEsMkRBQTJEO0FBQ3hFLGFBQWEsMkRBQTJEO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDZEQUE2RDtBQUMxRTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx1SUFBdUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRiwyQkFBMkI7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMseUNBQXlDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzR0FBc0c7QUFDNUg7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSwyRkFBMkYsZUFBZSxFQUFFO0FBQzVHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNEJBQTRCO0FBQ25ELDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsOEJBQThCO0FBQ3JEO0FBQ0EsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsMkZBQTJGLGdCQUFnQixFQUFFO0FBQzdHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHFEQUFxRCxRQUFRO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsUUFBUTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUNBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlDQUF5QztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsMkRBQTJELDBCQUEwQixnQ0FBZ0M7QUFDOUs7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5Q0FBeUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtDQUFrQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSw4Q0FBOEMsZ0VBQWdFO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEIsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLGNBQWM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixjQUFjO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLE1BQU07QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0EsaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCxnREFBZ0Q7QUFDaEQsZ0RBQWdEO0FBQ2hELGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsbURBQW1ELHVDQUF1Qyx1Q0FBdUM7QUFDakksbURBQW1ELHVDQUF1Qyx1Q0FBdUM7QUFDakksa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQscURBQXFELHdDQUF3QztBQUM3Rjs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBLHVCQUF1QixpQ0FBaUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QyxrQ0FBa0MsYUFBYTtBQUMvQyxrQ0FBa0MsYUFBYTtBQUMvQyw0Q0FBNEMsa0JBQWtCO0FBQzlELDRDQUE0QyxrQkFBa0I7QUFDOUQsb0NBQW9DLGNBQWM7QUFDbEQsa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0Msc0NBQXNDLGVBQWU7QUFDckQsa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0M7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsS0FBSztBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsd0JBQXdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsU0FBUztBQUN6QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsMkJBQTJCLElBQUksZUFBZTtBQUMxRTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsU0FBUztBQUN6QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsTUFBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLE1BQU07QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrREFBa0QsRUFBRTtBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsR0FBRztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQixjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxLQUFLO0FBQ25CLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsMENBQTBDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLE1BQU07QUFDMUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxhQUFhO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JELGdDQUFnQyxZQUFZO0FBQzVDLGdEQUFnRCxvQkFBb0I7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw0QkFBNEI7O0FBRTVCLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDOzs7QUFHQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxtQkFBbUIsb0NBQW9DLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUseUNBQXlDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsNkNBQTZDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLEVBQUUsd0NBQXdDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsb0NBQW9DLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHVDQUF1QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFOztBQUVqbkgsT0FBTztBQUNQO0FBQ0EsQ0FBQztBQUNELDJDQUEyQyxjQUFjLCszbk8iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDU0NzQyMzM2MDBkNTkzYTM3MjIzIiwiXG5jb25zdCBXTlMgPSByZXF1aXJlKCcuLi8uLi8uLi9idWlsZC93bnMnKS5XTlM7XG5cbldOUyh7XG4gIHNhbXBsZVBhdGg6IFwic2FtcGxlcy9cIixcbn0pO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc2NyaXB0cy9tYWluLnRzIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJXTlNcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiV05TXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIldOU1wiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgdXRpbHMgPSB7XHJcbiAgICBtdG9mOiAobm90ZSkgPT4gTWF0aC5wb3coMiwgKG5vdGUpIC8gMTIpICogNDQwLFxyXG4gICAgZnRvbTogKG5vdGUpID0+IE1hdGguc3FydChub3RlIC8gNDQwKSAvIDEyLFxyXG4gICAgY2hvb3NlOiAoYXJyYXkpID0+IHtcclxuICAgICAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XHJcbiAgICB9LFxyXG4gICAgZ2V0UmF0ZUZyb21GcmVxdWVuY2llczogKGZyZXEsIGJhc2VGcmVxKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGZyZXEgLyBiYXNlRnJlcTtcclxuICAgIH0sXHJcbiAgICBnZXRDbG9zZXN0TWVtYmVyOiAoc3ViamVjdCwgc2V0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNldC5yZWR1Y2UoKGFjY3VtLCBtZW1iZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJldkRpc3RhbmNlID0gYWNjdW0gLSBzdWJqZWN0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGlzdGFuY2UgPSBtZW1iZXIgLSBzdWJqZWN0O1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3VycmVudERpc3RhbmNlKSA8IE1hdGguYWJzKHByZXZEaXN0YW5jZSkgPyBtZW1iZXIgOiBhY2N1bTtcclxuICAgICAgICB9LCBzZXRbMF0pO1xyXG4gICAgfSxcclxuICAgIGZpbmRJbkNvbGxlY3Rpb246IChjb2xsZWN0aW9uLCBwcmVkaWNhdGVGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnJlZHVjZSgoYWNjdW0sIG1lbWJlcikgPT4gcHJlZGljYXRlRnVuY3Rpb24obWVtYmVyKSA/IG1lbWJlciA6IGFjY3VtKTtcclxuICAgIH0sXHJcbiAgICBtYXBUb0RvbWFpbjogKHNldCwgZG9tYWluKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2V0T2Zmc2V0ID0gTWF0aC5taW4oLi4uZG9tYWluKSAtIE1hdGgubWluKC4uLnNldCk7XHJcbiAgICAgICAgY29uc3QgZG9tYWluUmFuZ2UgPSAoTWF0aC5tYXgoLi4uZG9tYWluKSAtIE1hdGgubWluKC4uLmRvbWFpbikpO1xyXG4gICAgICAgIGNvbnN0IHNldFJhbmdlID0gKE1hdGgubWF4KC4uLnNldCkgLSBNYXRoLm1pbiguLi5zZXQpKTtcclxuICAgICAgICByZXR1cm4gc2V0Lm1hcChtZW1iZXIgPT4gdXRpbHMuZ2V0Q2xvc2VzdE1lbWJlcigoKChtZW1iZXIgLSBNYXRoLm1pbiguLi5zZXQpKSAvIHNldFJhbmdlKSAqIGRvbWFpblJhbmdlKSArIHNldE9mZnNldCwgZG9tYWluKSk7XHJcbiAgICB9LFxyXG4gICAgZmxpcENvaW46IChwcm9iYWJpbGl0eSA9IDAuNSkgPT4gKE1hdGgucmFuZG9tKCkgPCBwcm9iYWJpbGl0eSkgPyBmYWxzZSA6IHRydWUsXHJcbiAgICBtYWtlRnVuY3Rpb246ICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKHV0aWxzKTtcclxuY29uc3Qgd2luZGV4ID0gKHdlaWdodHMpID0+IHtcclxuICAgIGxldCBzdW1PZldlaWdodHMgPSB3ZWlnaHRzLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldiArIGN1cnIpO1xyXG4gICAgbGV0IHJhbmROdW0gPSBNYXRoLnJhbmRvbSgpICogc3VtT2ZXZWlnaHRzO1xyXG4gICAgbGV0IHdlaWdodFN1bSA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdlaWdodHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB3ZWlnaHRTdW0gKz0gd2VpZ2h0c1tpXTtcclxuICAgICAgICB3ZWlnaHRTdW0gPSArd2VpZ2h0U3VtLnRvRml4ZWQoMik7XHJcbiAgICAgICAgaWYgKHJhbmROdW0gPD0gd2VpZ2h0U3VtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJlXCJdID0gd2luZGV4O1xuXHJcbmNvbnN0IG5vcm1hbGl6ZSA9IChjb2xsKSA9PiB7XHJcbiAgICBsZXQgY29sbFN1bSA9IGNvbGwucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XHJcbiAgICByZXR1cm4gY29sbFN1bSA+IDAgPyBjb2xsLm1hcCgod2VpZ2h0KSA9PiB3ZWlnaHQgLyBjb2xsU3VtKSA6IGNvbGwubWFwKCgpID0+IDApO1xyXG59O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRcIl0gPSBub3JtYWxpemU7XG5cclxuY29uc3QgaXNFcXVpdmFsZW50ID0gKGEsIGIpID0+IHtcclxuICAgIC8vIENyZWF0ZSBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXNcclxuICAgIHZhciBhUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhKTtcclxuICAgIHZhciBiUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiKTtcclxuICAgIC8vIElmIG51bWJlciBvZiBwcm9wZXJ0aWVzIGlzIGRpZmZlcmVudCxcclxuICAgIC8vIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XHJcbiAgICBpZiAoYVByb3BzLmxlbmd0aCAhPSBiUHJvcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhUHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgcHJvcE5hbWUgPSBhUHJvcHNbaV07XHJcbiAgICAgICAgLy8gSWYgdmFsdWVzIG9mIHNhbWUgcHJvcGVydHkgYXJlIG5vdCBlcXVhbCxcclxuICAgICAgICAvLyBvYmplY3RzIGFyZSBub3QgZXF1aXZhbGVudFxyXG4gICAgICAgIGlmIChhW3Byb3BOYW1lXSAhPT0gYltwcm9wTmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIElmIHdlIG1hZGUgaXQgdGhpcyBmYXIsIG9iamVjdHNcclxuICAgIC8vIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnRcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImNcIl0gPSBpc0VxdWl2YWxlbnQ7XG5cclxuY29uc3QgZ2V0U2VxdWVudGlhbFJhbmRvbUluZGV4ID0gKGxhc3RJbmRleCwgbGVuZ3RoKSA9PiB7XHJcbiAgICBjb25zdCBwb3NzaWJsZUluZGV4ZXMgPSBBcnJheShsZW5ndGgpLmZpbGwoMCkubWFwKChpdGVtLCBpKSA9PiBpKS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBsYXN0SW5kZXgpO1xyXG4gICAgcmV0dXJuIHV0aWxzLmNob29zZShwb3NzaWJsZUluZGV4ZXMpO1xyXG59O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImJcIl0gPSBnZXRTZXF1ZW50aWFsUmFuZG9tSW5kZXg7XG5cclxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJXTlNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBXTlM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fU2NlbmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19TeW50aF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX011bHRpU2FtcGxlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3V0aWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fc3BlY3RyYWxEYXRhX2pzb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fc3BlY3RyYWxEYXRhX2pzb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fc3BlY3RyYWxEYXRhX2pzb25fXyk7XG5cclxuXHJcblxyXG5cclxuXHJcblxyXG47XHJcbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgICBzYW1wbGVQYXRoOiBcInNhbXBsZXMvXCIsXHJcbn07XHJcbmNvbnN0IFdOUyA9IChjb25maWcpID0+IHtcclxuICAgIGNvbmZpZyA9IGNvbmZpZyA/IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDb25maWcsIGNvbmZpZykgOiBkZWZhdWx0Q29uZmlnO1xyXG4gICAgY29uc3QgYmFja2dyb3VuZFNhbXBsZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3NwZWN0cmFsRGF0YV9qc29uX19fZGVmYXVsdC5hO1xyXG4gICAgLy8gU2V0dXBcclxuICAgIGNvbnN0IHBvcHVsYXRpb25TaXplID0gMTY7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgY29uc3QgY2hvcmRPc2NpbGxhdG9ycyA9IEFycmF5KHBvcHVsYXRpb25TaXplKS5maWxsKDApLm1hcCgoKSA9PiBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19TeW50aF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKGNvbnRleHQpKTtcclxuICAgIGNvbnN0IG11bHRpU2FtcGxlck9wdHMgPSB7XHJcbiAgICAgICAgc2FtcGxlczogW1xyXG4gICAgICAgICAgICAvL3sgZmlsZXM6IFsgY29uZmlnLnNhbXBsZVBhdGggKyBcInBpcGVHLm1wM1wiIF0sIGZyZXE6IDE5OSB9LFxyXG4gICAgICAgICAgICAvL3sgZmlsZXM6IFsgY29uZmlnLnNhbXBsZVBhdGggKyBcInBpcGVELm1wM1wiIF0sIGZyZXE6IDMwNiB9LFxyXG4gICAgICAgICAgICAvL3sgZmlsZXM6IFsgY29uZmlnLnNhbXBsZVBhdGggKyBcInBpcGVBLm1wM1wiIF0sIGZyZXE6IDQ0NSB9LFxyXG4gICAgICAgICAgICAvL3sgZmlsZXM6IFsgY29uZmlnLnNhbXBsZVBhdGggKyBcInBpcGVFLm1wM1wiIF0sIGZyZXE6IDY2NiB9LFxyXG4gICAgICAgICAgICB7IGZpbGVzOiBbY29uZmlnLnNhbXBsZVBhdGggKyBcInBpYW5vMi0zMjQubXAzXCJdLCBmcmVxOiAzMjQgfSxcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgXCJwaWFubzMtODE0Lm1wM1wiXSwgZnJlcTogODE0IH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcbiAgICBjb25zdCBtZWxvZHlPc2NpbGxhdG9ycyA9IEFycmF5KHBvcHVsYXRpb25TaXplKS5maWxsKDApLm1hcCgoKSA9PiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZmxpcENvaW4oKSA/IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX011bHRpU2FtcGxlcl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKGNvbnRleHQsIG11bHRpU2FtcGxlck9wdHMpIDogbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fU3ludGhfX1tcImFcIiAvKiBkZWZhdWx0ICovXShjb250ZXh0KSk7XHJcbiAgICBjb25zdCBzb3VyY2VTYW1wbGVzID0gYmFja2dyb3VuZFNhbXBsZXMubWFwKHNhbXBsZURhdGEgPT4gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fTXVsdGlTYW1wbGVyX19bXCJhXCIgLyogZGVmYXVsdCAqL10oY29udGV4dCwge1xyXG4gICAgICAgIHNhbXBsZXM6IFtcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgc2FtcGxlRGF0YS5hdWRpb0ZpbGVdLCBmcmVxOiAxIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0pKTtcclxuICAgIGxldCBzYW1wbGVJbmRleCA9IDA7XHJcbiAgICBjb25zdCBwbGF5TmV3U2NlbmUgPSAoKSA9PiB7XHJcbiAgICAgICAgc2FtcGxlSW5kZXggPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX191dGlsc19fW1wiYlwiIC8qIGdldFNlcXVlbnRpYWxSYW5kb21JbmRleCAqL10pKHNhbXBsZUluZGV4LCBiYWNrZ3JvdW5kU2FtcGxlcy5sZW5ndGgpO1xyXG4gICAgICAgIC8vY29uc3QgdGFyZ2V0ID0gWzE5MywgNDIzLCAxNjY4LCAyMzMzLCAyNjY1LCAzMDc4LCA0MDM4LCA2MzE5LCAxOTMrMSwgNDIzKzEsIDE2NjgrMSwgMjMzMysxLCAyNjY1KzEsIDMwNzgrMSwgNDAzOCsxLCA2MzE5KzEgXTsgLy8gaW4gZnJlcXVlbmN5XHJcbiAgICAgICAgY29uc3QgYmFja2dyb3VuZFNhbXBsZSA9IGJhY2tncm91bmRTYW1wbGVzW3NhbXBsZUluZGV4XTtcclxuICAgICAgICBjb25zb2xlLmxvZyhiYWNrZ3JvdW5kU2FtcGxlLmF1ZGlvRmlsZSk7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFBvcHVsYXRpb24gPSBBcnJheSg4MCkuZmlsbChiYWNrZ3JvdW5kU2FtcGxlLnNwZWN0cnVtLm1hcChiaW4gPT4gYmluLmZyZXEpKTtcclxuICAgICAgICAvLyBUYXJnZXQgaXMgdGhlIG92ZXJ0b25lcyBvZiB0aGUgbW9zdCBwcm9taW5lbnQgZnJlcXVlbmN5IGluIHRoZSBzcGVjdHJ1bVxyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGJhY2tncm91bmRTYW1wbGUuc3BlY3RydW1cclxuICAgICAgICAgICAgLnJlZHVjZSgoYWNjdW0sIGJpbikgPT4gYWNjdW1bMF0ubWFnbml0dWRlIDwgYmluLm1hZ25pdHVkZSA/IFtiaW5dIDogYWNjdW0sIFt7IGZyZXE6IDAsIG1hZ25pdHVkZTogLTEwMCB9XSlcclxuICAgICAgICAgICAgLm1hcChiaW4gPT4gYmluLmZyZXEpXHJcbiAgICAgICAgICAgIC5tYXAoKHN0cm9uZ2VzdEZyZXEpID0+IEFycmF5KGJhY2tncm91bmRTYW1wbGUuc3BlY3RydW0ubGVuZ3RoKS5maWxsKDApLm1hcCgoaXRlbSwgaSkgPT4gc3Ryb25nZXN0RnJlcSAqIChpICsgMSkpKVswXTtcclxuICAgICAgICBjb25zdCBzY2VuZUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgaW5pdGlhbFBvcHVsYXRpb246IGluaXRpYWxQb3B1bGF0aW9uLm1hcChpdGVtID0+IGl0ZW0ubWFwKGl0ZW0yID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoTWF0aC5yYW5kb20oKSAqICh0YXJnZXRbdGFyZ2V0Lmxlbmd0aCAtIDFdIC0gdGFyZ2V0WzBdKSkgKyAodGFyZ2V0WzBdIC0gMjApO1xyXG4gICAgICAgICAgICB9KSksXHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TaXplOiAxNixcclxuICAgICAgICAgICAgbWF4R2VuZXJhdGlvbnM6IDIsXHJcbiAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgdGltZUJldHdlZW5FdmVudHM6ICgpID0+IChNYXRoLnJhbmRvbSgpICogMTUpICsgNSxcclxuICAgICAgICAgICAgZ2FwQmV0d2VlbkV2ZW50czogKCkgPT4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmNob29zZShbNDUsIDEwXSksXHJcbiAgICAgICAgICAgIG1lbG9keU9zY2lsbGF0b3JzLFxyXG4gICAgICAgICAgICBjaG9yZE9zY2lsbGF0b3JzLFxyXG4gICAgICAgICAgICBvbkZpbmlzaDogcGxheU5ld1NjZW5lXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzb3VyY2VTYW1wbGVzW3NhbXBsZUluZGV4XS5wbGF5KHsgZnJlcTogMSwgdGltZTogNjAgKiAzICogMTAwMCwgdm9sOiAwLjMgfSk7XHJcbiAgICAgICAgLy8gU3RhcnQgdGhlIHNjZW5lXHJcbiAgICAgICAgbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fU2NlbmVfX1tcImFcIiAvKiBTY2VuZSAqL10oc2NlbmVDb25maWcpLnBsYXkoKTtcclxuICAgIH07XHJcbiAgICBwbGF5TmV3U2NlbmUoKTtcclxufTtcclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChXTlMpO1xyXG5cclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3BhdHRlcm5zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdXRpbHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cclxuXHJcbmNsYXNzIFNjZW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLnRpbWVCZXR3ZWVuRXZlbnRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLm1ha2VGdW5jdGlvbih0aGlzLmNvbmZpZy50aW1lQmV0d2VlbkV2ZW50cyk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuZ2FwQmV0d2VlbkV2ZW50cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5tYWtlRnVuY3Rpb24odGhpcy5jb25maWcuZ2FwQmV0d2VlbkV2ZW50cyk7XHJcbiAgICAgICAgdGhpcy5ub3RlcyA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3BhdHRlcm5zX19bXCJhXCIgLyogUGdlbmV0aWMgKi9dKShjb25maWcuaW5pdGlhbFBvcHVsYXRpb24sIGNvbmZpZy50YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLm1heEdlbmVyYXRpb25zID0gY29uZmlnLm1heEdlbmVyYXRpb25zO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEdlbmVyYXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLm9uRmluaXNoID0gY29uZmlnLm9uRmluaXNoO1xyXG4gICAgfVxyXG4gICAgcGxheSgpIHtcclxuICAgICAgICBjb25zdCBuZXh0R2VuID0gdGhpcy5ub3Rlcy5uZXh0KCkudmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3Tm90ZXMgPSBuZXh0R2VuO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBsZXQgayA9IChNYXRoLnJhbmRvbSgpID4gMC41KSA/IDAgOiAxO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmNob3JkT3NjaWxsYXRvcnMubWFwKChvc2MpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb2N0YXZlID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiA1KTtcclxuICAgICAgICAgICAgb3NjLnBsYXkoeyBmcmVxOiBuZXdOb3Rlc1tpXSAvIG9jdGF2ZSwgdGltZTogdGhpcy5jb25maWcudGltZUJldHdlZW5FdmVudHMoKSwgcGFuOiAoKGsgJSAyKSAqIDIpIC0gMSwgdm9sOiAwLjIgfSk7XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgaysrO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGxheU1lbG9keShuZXdOb3RlcywgdGhpcy5jdXJyZW50R2VuZXJhdGlvbik7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0dFTkVUSUMgR0VORVJBVElPTjogJywgdGhpcy5jdXJyZW50R2VuZXJhdGlvbiwgbmV4dEdlbik7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEdlbmVyYXRpb24gPD0gKHRoaXMuY29uZmlnLm1heEdlbmVyYXRpb25zIC0gMSkpIHtcclxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50R2VuZXJhdGlvbisrO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgICAgICAgICAgIH0sICh0aGlzLmNvbmZpZy50aW1lQmV0d2VlbkV2ZW50cygpICsgdGhpcy5jb25maWcuZ2FwQmV0d2VlbkV2ZW50cygpKSAqIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50R2VuZXJhdGlvbisrO1xyXG4gICAgICAgICAgICB0aGlzLmVuZE9mU2NlbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwbGF5TWVsb2R5KG5vdGVzLCBnZW5lcmF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgbmV3Tm90ZXMgPSBub3RlcztcclxuICAgICAgICAvLyBUYWtlbiBmcm9tIHRoZSBzZXF1ZW5jZSBvZiBwaXRjaGVzIGluIFwiRm9yZXZlciBpbiBCbHVlIEplYW5zXCIgYnkgTmVpbCBEaWFtb25kXHJcbiAgICAgICAgY29uc3QgaWRlYWxNZWxvZHkgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ubWFwVG9Eb21haW4oWzAsIDQsIDIsIDAsIDcsIDQsIDIsIDcsIDcsIDQsIDIsIDIsIDQsIDQsIDIsIDBdLCBuZXdOb3Rlcyk7XHJcbiAgICAgICAgY29uc3QgcmFuZG9tU2hpZnRBbW91bnQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaWRlYWxNZWxvZHkubGVuZ3RoKSk7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFN0YXRlID0gWy4uLmlkZWFsTWVsb2R5LnNsaWNlKHJhbmRvbVNoaWZ0QW1vdW50KSwgLi4uaWRlYWxNZWxvZHkuc2xpY2UoMCwgLShpZGVhbE1lbG9keS5sZW5ndGggLSByYW5kb21TaGlmdEFtb3VudCkpXTtcclxuICAgICAgICBjb25zdCBtYXJrb3ZNZWxvZHkgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wYXR0ZXJuc19fW1wiYlwiIC8qIFBtYXJrb3YgKi9dKShpZGVhbE1lbG9keSwgMSwgaW5pdGlhbFN0YXRlLnNsaWNlKC0yKSk7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGNvbnN0IHBsYXlOZXh0Tm90ZSA9IChnZW5lcmF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9jdGF2ZSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMykgKyBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDMpICsgMjtcclxuICAgICAgICAgICAgY29uc3QgbmV4dE5vdGUgPSBtYXJrb3ZNZWxvZHkubmV4dCgpLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAobmV4dE5vdGUgIT09IHVuZGVmaW5lZCAmJiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZmxpcENvaW4oMC43NSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5aW5nIG5vdGUnLCBuZXh0Tm90ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5tZWxvZHlPc2NpbGxhdG9yc1tpICUgdGhpcy5jb25maWcubWVsb2R5T3NjaWxsYXRvcnMubGVuZ3RoXS5wbGF5KHtcclxuICAgICAgICAgICAgICAgICAgICBmcmVxOiBuZXh0Tm90ZSAvIG9jdGF2ZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiAzICsgKE1hdGgucmFuZG9tKCkgKiAxNCksXHJcbiAgICAgICAgICAgICAgICAgICAgcGFuOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHZvbDogMC4xNVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGlvbiA9PT0gdGhpcy5jdXJyZW50R2VuZXJhdGlvbiAmJiB0aGlzLmN1cnJlbnRHZW5lcmF0aW9uIDw9IHRoaXMuY29uZmlnLm1heEdlbmVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheU5leHROb3RlKGdlbmVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAoKE1hdGgucmFuZG9tKCkgKiAyKSArIDAuNSkgKiAxMDAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHBsYXlOZXh0Tm90ZShnZW5lcmF0aW9uKTtcclxuICAgIH1cclxuICAgIGVuZE9mU2NlbmUoKSB7XHJcbiAgICAgICAgY29uc3Qgb25GaW5pc2hDYWxsYmFjayA9IHRoaXMuY29uZmlnLm9uRmluaXNoO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmNob3JkT3NjaWxsYXRvcnMubWFwKHN5bnRoID0+IHN5bnRoLnN0b3AoMSkpO1xyXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9uRmluaXNoQ2FsbGJhY2ssIDEwMDApO1xyXG4gICAgfVxyXG59XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFNjZW5lO1xuXHJcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19NYXJrb3ZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19HZW5ldGljX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLypcclxuICogQmFzaWMgUGF0dGVybnMgaW1wbGVtZW50YXRpb24gZm9yIEdpYmJlcmlzaFxyXG4gKi9cclxuXHJcblxyXG5jb25zdCBQYXR0ZXJuID0gKHBhdHRlcm4pID0+IFsoKSA9PiBwYXR0ZXJuLm5leHQoKS52YWx1ZV07XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgUGF0dGVybiAqL1xuXHJcbmNvbnN0IFBzZXEgPSBmdW5jdGlvbiogUHNlcSh2YWx1ZXMsIHJlcGV0aXRpb25zKSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIHJlc3VsdCA9ICgpID0+IHZhbHVlc1tpbmRleCsrICUgdmFsdWVzLmxlbmd0aF07XHJcbiAgICBpZiAocmVwZXRpdGlvbnMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgeWllbGQgcmVzdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBldGl0aW9uczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHJlc3VsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydCBQc2VxICovXG5cclxuY29uc3QgUHJhbmQgPSBmdW5jdGlvbiogUHJhbmQodmFsdWVzLCByZXBldGl0aW9ucykge1xyXG4gICAgdmFyIHJlc3VsdCA9ICgpID0+IHZhbHVlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWx1ZXMubGVuZ3RoKV07XHJcbiAgICBpZiAocmVwZXRpdGlvbnMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgeWllbGQgcmVzdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBldGl0aW9uczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHJlc3VsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydCBQcmFuZCAqL1xuXHJcbmNvbnN0IFBtYXJrb3YgPSBmdW5jdGlvbiogUG1hcmtvdihzZWVkLCBvcmRlciwgaW5pdGlhbFN0YXRlKSB7XHJcbiAgICBsZXQgbWFya292Q2hhaW4gPSBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19NYXJrb3ZfX1tcImFcIiAvKiBNYXJrb3YgKi9dKHNlZWQsIG9yZGVyKTtcclxuICAgIGxldCBsYXN0U3RhdGUgPSBpbml0aWFsU3RhdGU7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGxldCBuZXh0U3RhdGUgPSBtYXJrb3ZDaGFpbi5nZXROZXh0U3RhdGUobGFzdFN0YXRlKTtcclxuICAgICAgICBsYXN0U3RhdGUgPSBbLi4ubGFzdFN0YXRlLnNsaWNlKDEpLCBuZXh0U3RhdGVdO1xyXG4gICAgICAgIHlpZWxkIG5leHRTdGF0ZTtcclxuICAgIH1cclxufTtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJiXCJdID0gUG1hcmtvdjtcblxyXG5jb25zdCBQZ2VuZXRpYyA9IGZ1bmN0aW9uKiBQZ2VuZXRpYyhpbnB1dFBvcHVsYXRpb24sIGdvYWwpIHtcclxuICAgIGxldCBnZW5ldGljID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fR2VuZXRpY19fW1wiYVwiIC8qIEdlbmV0aWMgKi9dKGlucHV0UG9wdWxhdGlvbiwgZ29hbCk7XHJcbiAgICBsZXQgbGFzdFN0YXRlID0gZ29hbDtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgbGV0IG5leHRTdGF0ZSA9IGdlbmV0aWMuZ2V0TmV4dFN0YXRlKGxhc3RTdGF0ZSk7XHJcbiAgICAgICAgbGFzdFN0YXRlID0gW2xhc3RTdGF0ZVtsYXN0U3RhdGUubGVuZ3RoIC0gMV0sIG5leHRTdGF0ZV07XHJcbiAgICAgICAgeWllbGQgbmV4dFN0YXRlO1xyXG4gICAgfVxyXG59O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBQZ2VuZXRpYztcblxyXG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNYXJrb3Y7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cclxuY2xhc3MgTWFya292IHtcclxuICAgIGNvbnN0cnVjdG9yKGlucHV0LCBvcmRlcikge1xyXG4gICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IFtdLFxyXG4gICAgICAgICAgICB0aGlzLmNvbWJpbmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIC8vIFNldCBhIGRlZmF1bHQgbGFzdCBzdGF0ZSBmb3Igc3RyZWFtIGJlaGF2aW9yXHJcbiAgICAgICAgdGhpcy5sYXN0U3RhdGUgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0U3RhdGUucHVzaChpbnB1dFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbk1hdHJpeCA9IHRoaXMuY3JlYXRlVHJhbnNpdGlvbk1hdHJpeChpbnB1dCwgb3JkZXIpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlVHJhbnNpdGlvbk1hdHJpeChpbnB1dCwgb3JkZXIpIHtcclxuICAgICAgICB0aGlzLmRpY3Rpb25hcnkgPSBpbnB1dDtcclxuICAgICAgICAvLyBDb21wdXRlIGFsbCBwb3NzaWJsZSBjb21iaW5hdGlvbnMgb2YgdGhlIGRpY3Rpb25hcnlcclxuICAgICAgICB0aGlzLmNvbWJpbmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaWN0aW9uYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5kaWN0aW9uYXJ5Lmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWJpbmF0aW9ucy5wdXNoKFt0aGlzLmRpY3Rpb25hcnlbaV0sIHRoaXMuZGljdGlvbmFyeVtrXV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb21ib3MnLCB0aGlzLmNvbWJpbmF0aW9ucyk7XHJcbiAgICAgICAgLy8gU2V0dXAgdGhlIHRyYW5zaXRpb25NYXRyaXggKHNob3VsZCBiZSBiYXNlZCBvbiBvcmRlcilcclxuICAgICAgICAvL1RPRE86IFRoaXMgaXMgaGFyZGNvZGVkIHRvIDFzdCBvcmRlci4gTWFrZSBkeW5hbWljLlxyXG4gICAgICAgIGxldCB0cmFuc2l0aW9uTWF0cml4ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbWJpbmF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZGljdGlvbmFyeUxlbmd0aEFycmF5ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5kaWN0aW9uYXJ5Lmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5TGVuZ3RoQXJyYXkucHVzaCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uTWF0cml4LnB1c2goZGljdGlvbmFyeUxlbmd0aEFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGFsbHkgdGhlIGdpdmVuIGNvbWJpbmF0aW9ucyB0byBhZGQgaW50byB0aGUgdHJhbnNpdGlvbk1hdHJpeFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gW2lucHV0W2lucHV0Lmxlbmd0aCAtIDFdLCBpbnB1dFtpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBbaW5wdXRbaSAtIChvcmRlciAtIDEpXSwgaW5wdXRbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBpbmRleE9mQ3VycmVudFN0YXRlID0gdGhpcy5jb21iaW5hdGlvbnMuZmluZEluZGV4KChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbHNfX1tcImNcIiAvKiBpc0VxdWl2YWxlbnQgKi9dKShjdXJyZW50U3RhdGUsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gV2UgYXJlIGFzc3VtaW5nIGEgd3JhcHBpbmcgaW5wdXRcclxuICAgICAgICAgICAgbGV0IG5leHRTdGF0ZSA9IGlucHV0WyhpICsgMSkgJSBpbnB1dC5sZW5ndGhdO1xyXG4gICAgICAgICAgICBsZXQgZGljdGlvbmFyeUluZGV4T2ZOZXh0U3RhdGUgPSB0aGlzLmRpY3Rpb25hcnkuaW5kZXhPZihuZXh0U3RhdGUpO1xyXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgdGhlIGFtb3VudCBvZiB0aW1lcyB0aGlzIHRyYW5zaXRpb24gaGFzIG9jY3VycmVkXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25NYXRyaXhbaW5kZXhPZkN1cnJlbnRTdGF0ZV1bZGljdGlvbmFyeUluZGV4T2ZOZXh0U3RhdGVdKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYW5zaXRpb25NYXRyaXggPSB0cmFuc2l0aW9uTWF0cml4Lm1hcChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3V0aWxzX19bXCJkXCIgLyogbm9ybWFsaXplICovXSk7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25NYXRyaXg7XHJcbiAgICB9XHJcbiAgICBnZXROZXh0U3RhdGUoc3RhdGUpIHtcclxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uTWF0cml4ID0gdGhpcy50cmFuc2l0aW9uTWF0cml4O1xyXG4gICAgICAgIGxldCBpbmRleE9mQ3VycmVudFN0YXRlID0gdGhpcy5jb21iaW5hdGlvbnMuZmluZEluZGV4KChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX191dGlsc19fW1wiY1wiIC8qIGlzRXF1aXZhbGVudCAqL10pKHN0YXRlLCBpdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgcHJvYmFiaWxpdGllcyA9IHRyYW5zaXRpb25NYXRyaXhbaW5kZXhPZkN1cnJlbnRTdGF0ZV07XHJcbiAgICAgICAgbGV0IG5leHRJbmRleCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3V0aWxzX19bXCJlXCIgLyogd2luZGV4ICovXSkocHJvYmFiaWxpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGljdGlvbmFyeVtuZXh0SW5kZXhdO1xyXG4gICAgfVxyXG4gICAgYXNQYXR0ZXJuKCkge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24qIGFzUGF0dGVybihpbml0aWFsU3RhdGUpIHtcclxuICAgICAgICAgICAgc2VsZi5sYXN0U3RhdGUgPSBpbml0aWFsU3RhdGU7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dFN0YXRlID0gc2VsZi5nZXROZXh0U3RhdGUoc2VsZi5sYXN0U3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0U3RhdGUgPSBbc2VsZi5sYXN0U3RhdGVbc2VsZi5sYXN0U3RhdGUubGVuZ3RoIC0gMV0sIG5leHRTdGF0ZV07XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXh0U3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbjtcclxuXHJcblxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEdlbmV0aWM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cclxuY2xhc3MgR2VuZXRpYyB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnB1dFBvcHVsYXRpb24sIGdvYWwpIHtcclxuICAgICAgICB0aGlzLnBvcHVsYXRpb24gPSBpbnB1dFBvcHVsYXRpb247XHJcbiAgICAgICAgdGhpcy5zY29yZXMgPSBBcnJheShpbnB1dFBvcHVsYXRpb24ubGVuZ3RoKS5maWxsKDApO1xyXG4gICAgICAgIHRoaXMuZ29hbCA9IGdvYWw7XHJcbiAgICAgICAgdGhpcy5sYXN0U3RhdGUgPSBpbnB1dFBvcHVsYXRpb25bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGlucHV0UG9wdWxhdGlvbi5sZW5ndGggLSAxKSldO1xyXG4gICAgfVxyXG4gICAgLy8gQWNjdW11bGF0ZSBhbmQgcmV0dXJuIHRoZSBzY29yZSBmb3IgYSBzaW5nbGUgY29sbGVjdGlvblxyXG4gICAgZ2V0VG90YWxGaXRuZXNzUmF0aW5nKGNvbGxlY3Rpb24sIGdvYWwpIHtcclxuICAgICAgICBsZXQgc2NvcmUgPSAwOyAvLyBsb3dlciBpcyBiZXR0ZXJcclxuICAgICAgICBsZXQgbm9ybWFsaXplZENvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLm1hcCgobnVtKSA9PiBudW0gLSBNYXRoLm1pbi5hcHBseShudWxsLCBjb2xsZWN0aW9uKSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vcm1hbGl6ZWRDb2xsZWN0aW9uLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHNjb3JlICs9IHRoaXMuZ2V0RGlzdGFuY2Uobm9ybWFsaXplZENvbGxlY3Rpb25baV0sIGdvYWxbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmU7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiB0ZXN0XHJcbiAgICAvLyBVc2luZyB0aGUgZ2l2ZW4gc2NvcmVzLCBnZXQgdGhlIG1vc3QgXCJmaXRcIiB0d28gZ2VuZXJhdGlvbnMgb3V0IG9mIHRoZSBwb3B1bGF0aW9uXHJcbiAgICBnZXRUb3BUd29HZW5lcmF0aW9ucyhzY29yZXMsIHBvcHVsYXRpb24pIHtcclxuICAgICAgICBsZXQgaW5kZXhPZkhpZ2hlc3RTY29yZSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHNjb3Jlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAoc2NvcmVzW2luZGV4T2ZIaWdoZXN0U2NvcmVdIDwgc2NvcmVzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleE9mSGlnaGVzdFNjb3JlID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgdHdvIG9mIHRoZSBzYW1lIHNjb3JlcywgY2hvb3NlIG9uZSByYW5kb21seVxyXG4gICAgICAgICAgICBpZiAoc2NvcmVzW2luZGV4T2ZIaWdoZXN0U2NvcmVdID09PSBzY29yZXNbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvaW5GbGlwID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgICAgIGluZGV4T2ZIaWdoZXN0U2NvcmUgPSAoY29pbkZsaXAgPiAwLjUpID8gaW5kZXhPZkhpZ2hlc3RTY29yZSA6IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGluZGV4T2ZOZXh0SGlnaGVzdFNjb3JlID0gMDtcclxuICAgICAgICBjb25zdCB0b3BHZW5lcmF0aW9uU2NvcmUgPSBzY29yZXNbaW5kZXhPZkhpZ2hlc3RTY29yZV07XHJcbiAgICAgICAgY29uc3QgY29pbkZsaXBGb3JNdXRhdGUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZmxpcENvaW4oMC4yNSk7XHJcbiAgICAgICAgaWYgKGNvaW5GbGlwRm9yTXV0YXRlKSB7XHJcbiAgICAgICAgICAgIGluZGV4T2ZOZXh0SGlnaGVzdFNjb3JlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2NvcmVzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc2NvcmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgYW55IHNjb3JlcyB0aGF0IGFyZSBhbHJlYWR5IHRoZSBoaWdoZXN0IHNjb3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmVzW2ldICE9PSB0b3BHZW5lcmF0aW9uU2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmVzW2luZGV4T2ZOZXh0SGlnaGVzdFNjb3JlXSA8IHNjb3Jlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mTmV4dEhpZ2hlc3RTY29yZSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSB0d28gb2YgdGhlIHNhbWUgc2NvcmVzLCBjaG9vc2Ugb25lIHJhbmRvbWx5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3Jlc1tpbmRleE9mTmV4dEhpZ2hlc3RTY29yZV0gPT09IHNjb3Jlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2luRmxpcCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4T2ZOZXh0SGlnaGVzdFNjb3JlID0gKGNvaW5GbGlwID4gMC41KSA/IGluZGV4T2ZOZXh0SGlnaGVzdFNjb3JlIDogaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtwb3B1bGF0aW9uW2luZGV4T2ZIaWdoZXN0U2NvcmVdLCBwb3B1bGF0aW9uW2luZGV4T2ZOZXh0SGlnaGVzdFNjb3JlXV07XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiBNYWtlIG1vcmUgdGhhbiBvbmUgdHlwZSBvZiBtYXRpbmdcclxuICAgIC8vIFRha2UgaW4gdHdvIGFycmF5cyAocGFyZW50cykgYW5kIG1hdGUgdGhlbSBpbiBhIG51bWJlciBvZiBkaWZmZXJlbnQgd2F5cyB0byBwcm9kdWNlIG11bHRpcGxlIG9mZnNwcmluZ1xyXG4gICAgbWF0ZUdlbmVyYXRpb25zKHBhcmVudHMpIHtcclxuICAgICAgICBjb25zdCBzcGxpY2VkT2Zmc3ByaW5nID0gdGhpcy5nZXRTcGxpY2VkT2Zmc3ByaW5nKHBhcmVudHNbMF0sIHBhcmVudHNbMV0pO1xyXG4gICAgICAgIGNvbnN0IGludGVybGFjZWRPZmZzcHJpbmcgPSB0aGlzLmdldEludGVybGFjZWRPZmZzcHJpbmcocGFyZW50c1swXSwgcGFyZW50c1sxXSk7XHJcbiAgICAgICAgLy8gR2VuZXJhdGUgbW9yZSB0aGFuIG9uZSBvZmZzcHJpbmdcclxuICAgICAgICByZXR1cm4gW3NwbGljZWRPZmZzcHJpbmcsIGludGVybGFjZWRPZmZzcHJpbmddO1xyXG4gICAgfVxyXG4gICAgLy8gU3BsaWNlIHR3byBlcXVhbC1sZW5ndGggYXJyYXlzIHRvZ2V0aGVyIGFuZCByZXR1cm4gdGhlIHJlc3VsdFxyXG4gICAgZ2V0SW50ZXJsYWNlZE9mZnNwcmluZyhwYXJlbnRPbmUsIHBhcmVudFR3bykge1xyXG4gICAgICAgIGNvbnN0IGludGVybGFjZWRPZmZzcHJpbmcgPSBBcnJheShwYXJlbnRPbmUubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW50ZXJsYWNlZE9mZnNwcmluZy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpbnRlcmxhY2VkT2Zmc3ByaW5nW2ldID0gKGkgJSAyKSA9PT0gMCA/IHBhcmVudE9uZVtpXSA6IHBhcmVudFR3b1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGludGVybGFjZWRPZmZzcHJpbmc7XHJcbiAgICB9XHJcbiAgICBnZXRTcGxpY2VkT2Zmc3ByaW5nKHBhcmVudE9uZSwgcGFyZW50VHdvKSB7XHJcbiAgICAgICAgY29uc3QgY29pbkZsaXAgPSBNYXRoLnJhbmRvbSgpID4gMC41ID8gMSA6IDA7XHJcbiAgICAgICAgY29uc3QgcGFyZW50cyA9IGNvaW5GbGlwID09IDAgPyBbcGFyZW50T25lLCBwYXJlbnRUd29dIDogW3BhcmVudFR3bywgcGFyZW50T25lXTtcclxuICAgICAgICBjb25zdCBzcGxpdFBvaW50ID0gTWF0aC5mbG9vcihwYXJlbnRPbmUubGVuZ3RoIC8gMik7XHJcbiAgICAgICAgY29uc3Qgc3BsaWNlZE9mZnNwcmluZyA9IFsuLi4ocGFyZW50c1swXS5zbGljZSgwLCBzcGxpdFBvaW50KSksIC4uLihwYXJlbnRzWzFdLnNsaWNlKHNwbGl0UG9pbnQgLSAxLCBwYXJlbnRzWzFdLmxlbmd0aCAtIDEpKV07XHJcbiAgICAgICAgcmV0dXJuIHNwbGljZWRPZmZzcHJpbmc7XHJcbiAgICB9XHJcbiAgICAvLyBSZXR1cm5zIGEgbnVtZXJpY2FsIGRpc3RhbmNlIGJldHdlZW4gYW4gaW5wdXQgYW5kIGEgZ29hbFxyXG4gICAgZ2V0RGlzdGFuY2UoaW5wdXQsIGdvYWwpIHtcclxuICAgICAgICBsZXQgcmF0aW5nID0gZ29hbCAtIGlucHV0O1xyXG4gICAgICAgIHJldHVybiByYXRpbmc7XHJcbiAgICB9XHJcbiAgICAvLyBDYWxjdWxhdGUgYW5kIHJldHVybiB0aGUgc2NvcmVzIGZvciBhbGwgY3VycmVudCBjb2xsZWN0aW9uc1xyXG4gICAgZ2V0UG9wdWxhdGlvblNjb3Jlcyhwb3B1bGF0aW9uLCBnb2FsKSB7XHJcbiAgICAgICAgbGV0IHNjb3JlcyA9IEFycmF5KHBvcHVsYXRpb24ubGVuZ3RoKS5maWxsKDApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAocG9wdWxhdGlvbi5sZW5ndGggLSAxKTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgc2NvcmVzW2ldID0gdGhpcy5nZXRUb3RhbEZpdG5lc3NSYXRpbmcocG9wdWxhdGlvbltpXSwgZ29hbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29yZXM7XHJcbiAgICB9XHJcbiAgICBnZXROZXh0R2VuZXJhdGlvbihwb3B1bGF0aW9uLCBnb2FsKSB7XHJcbiAgICAgICAgY29uc3QgcG9wdWxhdGlvblNjb3JlcyA9IHRoaXMuZ2V0UG9wdWxhdGlvblNjb3Jlcyhwb3B1bGF0aW9uLCBnb2FsKTtcclxuICAgICAgICBjb25zdCB0b3BUd29HZW5lcmF0aW9ucyA9IHRoaXMuZ2V0VG9wVHdvR2VuZXJhdGlvbnMocG9wdWxhdGlvblNjb3JlcywgcG9wdWxhdGlvbik7XHJcbiAgICAgICAgY29uc3QgbmV3R2VuZXJhdGlvbnMgPSB0aGlzLm1hdGVHZW5lcmF0aW9ucyh0b3BUd29HZW5lcmF0aW9ucyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAobmV3R2VuZXJhdGlvbnMubGVuZ3RoIC0gMSk7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRpb24uc3BsaWNlKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh0aGlzLnBvcHVsYXRpb24ubGVuZ3RoIC0gMSkpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wb3B1bGF0aW9uID0gWy4uLnRoaXMucG9wdWxhdGlvbiwgLi4ubmV3R2VuZXJhdGlvbnNdO1xyXG4gICAgICAgIC8vIEZvciBub3cgcmFuZG9tbHkgc2VsZWN0IG9uZSBvZiB0aGUgYmVzdCBnZW5lcmF0aW9uc1xyXG4gICAgICAgIGNvbnN0IGJlc3RGaXRHZW5lcmF0aW9uID0gbmV3R2VuZXJhdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG5ld0dlbmVyYXRpb25zLmxlbmd0aCAqIDAuOTk5KSldO1xyXG4gICAgICAgIHJldHVybiBiZXN0Rml0R2VuZXJhdGlvbjtcclxuICAgIH1cclxuICAgIGdldE5leHRTdGF0ZShzdGF0ZSkge1xyXG4gICAgICAgIC8vIFRPRE86IFVzZSBzdGF0ZSB0byBhZGQgaW50byB0aGUgcG9wdWxhdGlvblxyXG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHRoaXMuZ2V0TmV4dEdlbmVyYXRpb24odGhpcy5wb3B1bGF0aW9uLCB0aGlzLmdvYWwpO1xyXG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XHJcbiAgICB9XHJcbiAgICBhc1BhdHRlcm4oKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKiBhc1BhdHRlcm4oaW5pdGlhbFN0YXRlKSB7XHJcbiAgICAgICAgICAgIHNlbGYubGFzdFN0YXRlID0gaW5pdGlhbFN0YXRlO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFN0YXRlID0gc2VsZi5nZXROZXh0U3RhdGUoc2VsZi5sYXN0U3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0U3RhdGUgPSBuZXh0U3RhdGU7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXh0U3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbjtcclxuXHJcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBTeW50aCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIH1cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5vc2NpbGxhdG9yID0gdGhpcy5jb250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuICAgICAgICB0aGlzLnBhbm5lciA9IHRoaXMuY29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3IuY29ubmVjdCh0aGlzLmdhaW5Ob2RlKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5wYW5uZXIpO1xyXG4gICAgICAgIHRoaXMucGFubmVyLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3IudHlwZSA9ICdzaW5lJztcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAwO1xyXG4gICAgfVxyXG4gICAgcGxheShvcHQpIHtcclxuICAgICAgICBjb25zdCB7IGZyZXEgPSAyMjAsIHRpbWUgPSAxLCBwYW4gPSAwLCB2b2wgPSAxIH0gPSBvcHQ7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgbGV0IGdhaW4gPSAxO1xyXG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5mcmVxdWVuY3kudmFsdWUgPSBmcmVxO1xyXG4gICAgICAgIC8vIHNvbWUgc3R1cGlkIGJhc2ljIHB5c2Nob2Fjb3VzdGljIHNoYXBpbmdcclxuICAgICAgICBpZiAoZnJlcSA+IDIwMClcclxuICAgICAgICAgICAgZ2FpbiA9IGdhaW4gKiAwLjEyO1xyXG4gICAgICAgIC8vdGhpcy5nYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDEsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSk7XHJcbiAgICAgICAgdGhpcy5wYW5uZXIucGFuLnZhbHVlID0gcGFuO1xyXG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5zdGFydCgwKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKHZvbCAqIGdhaW4gKiAoMC41NSAtIChNYXRoLnJhbmRvbSgpICogMC4wMSkpLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIHRpbWUgKiAwLjg1KTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnN0b3AodGltZSAqIDAuMjUpO1xyXG4gICAgICAgIH0sICh0aW1lIC0gKHRpbWUgKiAwLjI1KSkgKiAxMDAwKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHN0b3AodGltZSkge1xyXG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoMCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCB0aW1lICogMC45KTtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3Iuc3RvcCh0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyAodGltZSAqIDQpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFN5bnRoKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaG93bGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9ob3dsZXJfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9ob3dsZXJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxyXG5cclxuY2xhc3MgTXVsdGlTYW1wbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIG9wdCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJzID0gb3B0LnNhbXBsZXMubWFwKHNhbXBsZUNvbmZpZyA9PiAoeyBwbGF5ZXI6IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaG93bGVyX19bXCJIb3dsXCJdKHsgc3JjOiBzYW1wbGVDb25maWcuZmlsZXMgfSksIGJhc2VGcmVxOiBzYW1wbGVDb25maWcuZnJlcSB9KSk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wbGF5ZXJzKTtcclxuICAgIH1cclxuICAgIHBsYXkob3B0KSB7XHJcbiAgICAgICAgY29uc3QgeyBmcmVxID0gMjIwLCB0aW1lID0gMSwgcGFuID0gMCwgdm9sID0gMSB9ID0gb3B0O1xyXG4gICAgICAgIGxldCBnYWluID0gMTtcclxuICAgICAgICBjb25zdCBzYW1wbGVQbGF5ZXIgPSB0aGlzLmZpbmRDbG9zZXN0U2FtcGxlUGxheWVyKGZyZXEpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRseVBsYXlpbmdTYW1wbGVJRCA9IHNhbXBsZVBsYXllci5wbGF5ZXIucGxheSgpO1xyXG4gICAgICAgIHNhbXBsZVBsYXllci5wbGF5ZXIubG9vcChmYWxzZSwgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEKTtcclxuICAgICAgICBzYW1wbGVQbGF5ZXIucGxheWVyLnJhdGUoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmdldFJhdGVGcm9tRnJlcXVlbmNpZXMoZnJlcSwgc2FtcGxlUGxheWVyLmJhc2VGcmVxKSwgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEKTtcclxuICAgICAgICAvLyBzb21lIHN0dXBpZCBiYXNpYyBweXNjaG9hY291c3RpYyBzaGFwaW5nXHJcbiAgICAgICAgaWYgKGZyZXEgPiAyMDApXHJcbiAgICAgICAgICAgIGdhaW4gPSBnYWluICogMC4yO1xyXG4gICAgICAgIHNhbXBsZVBsYXllci5wbGF5ZXIuZmFkZSgwLCBnYWluICogdm9sLCAyMDAsIGN1cnJlbnRseVBsYXlpbmdTYW1wbGVJRCk7XHJcbiAgICAgICAgc2FtcGxlUGxheWVyLnBsYXllci5zdGVyZW8ocGFuLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpO1xyXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2FtcGxlUGxheWVyLnBsYXllci5mYWRlKGdhaW4gKiB2b2wsIDAsIDIwMCwgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wKHRpbWUsIHNhbXBsZVBsYXllciwgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEKTtcclxuICAgICAgICB9LmJpbmQodGhpcyksICh0aW1lICogMTAwMCkgKyAyMDApOyAvLyBhZGRpbmcgYSAxMDAgbXMgYnVmZmVyIHRvIGF2b2lkIGFueSBpc3N1ZXNcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHN0b3AodGltZSwgc2FtcGxlUGxheWVyLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpIHtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNhbXBsZVBsYXllci5wbGF5ZXIuc3RvcCgpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgMzAwKTsgLy8gYWRkaW5nIGEgMTAwIG1zIGJ1ZmZlciB0byBhdm9pZCBhbnkgaXNzdWVzXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBmaW5kQ2xvc2VzdFNhbXBsZVBsYXllcihmcmVxKSB7XHJcbiAgICAgICAgLy8gQ2FuIG9ubHkgZ2V0IHRoZSBjbG9zZXN0IGZyZXF1ZW5jeSBpbiB0aGUgc2V0IG9mIFBsYXllcnMnIGZyZXF1ZW5jaWVzIHNvIGdldCB0aGF0IGZyZXF1ZW5jeSwgdGhlbiBmaWx0ZXIgdGhlIHBsYXllcnNcclxuICAgICAgICBjb25zdCBjbG9zZXN0UGxheWVyRnJlcXVlbmN5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmdldENsb3Nlc3RNZW1iZXIoZnJlcSwgdGhpcy5wbGF5ZXJzLm1hcChwbGF5ZXIgPT4gcGxheWVyLmJhc2VGcmVxKSk7XHJcbiAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5maW5kSW5Db2xsZWN0aW9uKHRoaXMucGxheWVycywgbWVtYmVyID0+IG1lbWJlciA9PT0gY2xvc2VzdFBsYXllckZyZXF1ZW5jeSk7XHJcbiAgICB9XHJcbn1cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChNdWx0aVNhbXBsZXIpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHt2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohXG4gKiAgaG93bGVyLmpzIHYyLjAuMTJcbiAqICBob3dsZXJqcy5jb21cbiAqXG4gKiAgKGMpIDIwMTMtMjAxOCwgSmFtZXMgU2ltcHNvbiBvZiBHb2xkRmlyZSBTdHVkaW9zXG4gKiAgZ29sZGZpcmVzdHVkaW9zLmNvbVxuICpcbiAqICBNSVQgTGljZW5zZVxuICovXG5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqIEdsb2JhbCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGdsb2JhbCBjb250cm9sbGVyLiBBbGwgY29udGFpbmVkIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgYXBwbHlcbiAgICogdG8gYWxsIHNvdW5kcyB0aGF0IGFyZSBjdXJyZW50bHkgcGxheWluZyBvciB3aWxsIGJlIGluIHRoZSBmdXR1cmUuXG4gICAqL1xuICB2YXIgSG93bGVyR2xvYmFsID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgZ2xvYmFsIEhvd2xlciBvYmplY3QuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcblxuICAgICAgLy8gQ3JlYXRlIGEgZ2xvYmFsIElEIGNvdW50ZXIuXG4gICAgICBzZWxmLl9jb3VudGVyID0gMTAwMDtcblxuICAgICAgLy8gSW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX2NvZGVjcyA9IHt9O1xuICAgICAgc2VsZi5faG93bHMgPSBbXTtcbiAgICAgIHNlbGYuX211dGVkID0gZmFsc2U7XG4gICAgICBzZWxmLl92b2x1bWUgPSAxO1xuICAgICAgc2VsZi5fY2FuUGxheUV2ZW50ID0gJ2NhbnBsYXl0aHJvdWdoJztcbiAgICAgIHNlbGYuX25hdmlnYXRvciA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yKSA/IHdpbmRvdy5uYXZpZ2F0b3IgOiBudWxsO1xuXG4gICAgICAvLyBQdWJsaWMgcHJvcGVydGllcy5cbiAgICAgIHNlbGYubWFzdGVyR2FpbiA9IG51bGw7XG4gICAgICBzZWxmLm5vQXVkaW8gPSBmYWxzZTtcbiAgICAgIHNlbGYudXNpbmdXZWJBdWRpbyA9IHRydWU7XG4gICAgICBzZWxmLmF1dG9TdXNwZW5kID0gdHJ1ZTtcbiAgICAgIHNlbGYuY3R4ID0gbnVsbDtcblxuICAgICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhlIGF1dG8gaU9TIGVuYWJsZXIuXG4gICAgICBzZWxmLm1vYmlsZUF1dG9FbmFibGUgPSB0cnVlO1xuXG4gICAgICAvLyBTZXR1cCB0aGUgdmFyaW91cyBzdGF0ZSB2YWx1ZXMgZm9yIGdsb2JhbCB0cmFja2luZy5cbiAgICAgIHNlbGYuX3NldHVwKCk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQvc2V0IHRoZSBnbG9iYWwgdm9sdW1lIGZvciBhbGwgc291bmRzLlxuICAgICAqIEBwYXJhbSAge0Zsb2F0fSB2b2wgVm9sdW1lIGZyb20gMC4wIHRvIDEuMC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXIvRmxvYXR9ICAgICBSZXR1cm5zIHNlbGYgb3IgY3VycmVudCB2b2x1bWUuXG4gICAgICovXG4gICAgdm9sdW1lOiBmdW5jdGlvbih2b2wpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG4gICAgICB2b2wgPSBwYXJzZUZsb2F0KHZvbCk7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gQXVkaW9Db250ZXh0IGNyZWF0ZWQgeWV0LCBydW4gdGhlIHNldHVwLlxuICAgICAgaWYgKCFzZWxmLmN0eCkge1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdm9sID49IDAgJiYgdm9sIDw9IDEpIHtcbiAgICAgICAgc2VsZi5fdm9sdW1lID0gdm9sO1xuXG4gICAgICAgIC8vIERvbid0IHVwZGF0ZSBhbnkgb2YgdGhlIG5vZGVzIGlmIHdlIGFyZSBtdXRlZC5cbiAgICAgICAgaWYgKHNlbGYuX211dGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHVzaW5nIFdlYiBBdWRpbywgd2UganVzdCBuZWVkIHRvIGFkanVzdCB0aGUgbWFzdGVyIGdhaW4uXG4gICAgICAgIGlmIChzZWxmLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgICAgICBzZWxmLm1hc3RlckdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZSh2b2wsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFuZCBjaGFuZ2Ugdm9sdW1lIGZvciBhbGwgSFRNTDUgYXVkaW8gbm9kZXMuXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9ob3dscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghc2VsZi5faG93bHNbaV0uX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICAvLyBHZXQgYWxsIG9mIHRoZSBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2hvd2xzW2ldLl9nZXRTb3VuZElkcygpO1xuXG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgY2hhbmdlIHRoZSB2b2x1bWVzLlxuICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqPGlkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9ob3dsc1tpXS5fc291bmRCeUlkKGlkc1tqXSk7XG5cbiAgICAgICAgICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAgICAgc291bmQuX25vZGUudm9sdW1lID0gc291bmQuX3ZvbHVtZSAqIHZvbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5fdm9sdW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgbXV0aW5nIGFuZCB1bm11dGluZyBnbG9iYWxseS5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBtdXRlZCBJcyBtdXRlZCBvciBub3QuXG4gICAgICovXG4gICAgbXV0ZTogZnVuY3Rpb24obXV0ZWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gQXVkaW9Db250ZXh0IGNyZWF0ZWQgeWV0LCBydW4gdGhlIHNldHVwLlxuICAgICAgaWYgKCFzZWxmLmN0eCkge1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9tdXRlZCA9IG11dGVkO1xuXG4gICAgICAvLyBXaXRoIFdlYiBBdWRpbywgd2UganVzdCBuZWVkIHRvIG11dGUgdGhlIG1hc3RlciBnYWluLlxuICAgICAgaWYgKHNlbGYudXNpbmdXZWJBdWRpbykge1xuICAgICAgICBzZWxmLm1hc3RlckdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZShtdXRlZCA/IDAgOiBzZWxmLl92b2x1bWUsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYW5kIG11dGUgYWxsIEhUTUw1IEF1ZGlvIG5vZGVzLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghc2VsZi5faG93bHNbaV0uX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBvZiB0aGUgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICAgICAgICB2YXIgaWRzID0gc2VsZi5faG93bHNbaV0uX2dldFNvdW5kSWRzKCk7XG5cbiAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgbWFyayB0aGUgYXVkaW8gbm9kZSBhcyBtdXRlZC5cbiAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8aWRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9ob3dsc1tpXS5fc291bmRCeUlkKGlkc1tqXSk7XG5cbiAgICAgICAgICAgIGlmIChzb3VuZCAmJiBzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5tdXRlZCA9IChtdXRlZCkgPyB0cnVlIDogc291bmQuX211dGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5sb2FkIGFuZCBkZXN0cm95IGFsbCBjdXJyZW50bHkgbG9hZGVkIEhvd2wgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgdW5sb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIGZvciAodmFyIGk9c2VsZi5faG93bHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICBzZWxmLl9ob3dsc1tpXS51bmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IEF1ZGlvQ29udGV4dCB0byBtYWtlIHN1cmUgaXQgaXMgZnVsbHkgcmVzZXQuXG4gICAgICBpZiAoc2VsZi51c2luZ1dlYkF1ZGlvICYmIHNlbGYuY3R4ICYmIHR5cGVvZiBzZWxmLmN0eC5jbG9zZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5jdHguY2xvc2UoKTtcbiAgICAgICAgc2VsZi5jdHggPSBudWxsO1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgZm9yIGNvZGVjIHN1cHBvcnQgb2Ygc3BlY2lmaWMgZXh0ZW5zaW9uLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXh0IEF1ZGlvIGZpbGUgZXh0ZW50aW9uLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgY29kZWNzOiBmdW5jdGlvbihleHQpIHtcbiAgICAgIHJldHVybiAodGhpcyB8fCBIb3dsZXIpLl9jb2RlY3NbZXh0LnJlcGxhY2UoL154LS8sICcnKV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHVwIHZhcmlvdXMgc3RhdGUgdmFsdWVzIGZvciBnbG9iYWwgdHJhY2tpbmcuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9zZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgc3VzcGVuZC9yZXN1bWUgc3RhdGUgb2YgdGhlIEF1ZGlvQ29udGV4dC5cbiAgICAgIHNlbGYuc3RhdGUgPSBzZWxmLmN0eCA/IHNlbGYuY3R4LnN0YXRlIHx8ICdydW5uaW5nJyA6ICdydW5uaW5nJztcblxuICAgICAgLy8gQXV0b21hdGljYWxseSBiZWdpbiB0aGUgMzAtc2Vjb25kIHN1c3BlbmQgcHJvY2Vzc1xuICAgICAgc2VsZi5fYXV0b1N1c3BlbmQoKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgYXVkaW8gaXMgYXZhaWxhYmxlLlxuICAgICAgaWYgKCFzZWxmLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgICAgLy8gTm8gYXVkaW8gaXMgYXZhaWxhYmxlIG9uIHRoaXMgc3lzdGVtIGlmIG5vQXVkaW8gaXMgc2V0IHRvIHRydWUuXG4gICAgICAgIGlmICh0eXBlb2YgQXVkaW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB0ZXN0ID0gbmV3IEF1ZGlvKCk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjYW5wbGF5dGhyb3VnaCBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRlc3Qub25jYW5wbGF5dGhyb3VnaCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgc2VsZi5fY2FuUGxheUV2ZW50ID0gJ2NhbnBsYXknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgc2VsZi5ub0F1ZGlvID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5ub0F1ZGlvID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUZXN0IHRvIG1ha2Ugc3VyZSBhdWRpbyBpc24ndCBkaXNhYmxlZCBpbiBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB0ZXN0ID0gbmV3IEF1ZGlvKCk7XG4gICAgICAgIGlmICh0ZXN0Lm11dGVkKSB7XG4gICAgICAgICAgc2VsZi5ub0F1ZGlvID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRlZCBjb2RlY3MuXG4gICAgICBpZiAoIXNlbGYubm9BdWRpbykge1xuICAgICAgICBzZWxmLl9zZXR1cENvZGVjcygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgZm9yIGJyb3dzZXIgc3VwcG9ydCBmb3IgdmFyaW91cyBjb2RlY3MgYW5kIGNhY2hlIHRoZSByZXN1bHRzLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBfc2V0dXBDb2RlY3M6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcbiAgICAgIHZhciBhdWRpb1Rlc3QgPSBudWxsO1xuXG4gICAgICAvLyBNdXN0IHdyYXAgaW4gYSB0cnkvY2F0Y2ggYmVjYXVzZSBJRTExIGluIHNlcnZlciBtb2RlIHRocm93cyBhbiBlcnJvci5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF1ZGlvVGVzdCA9ICh0eXBlb2YgQXVkaW8gIT09ICd1bmRlZmluZWQnKSA/IG5ldyBBdWRpbygpIDogbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhdWRpb1Rlc3QgfHwgdHlwZW9mIGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1wZWdUZXN0ID0gYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tcGVnOycpLnJlcGxhY2UoL15ubyQvLCAnJyk7XG5cbiAgICAgIC8vIE9wZXJhIHZlcnNpb24gPDMzIGhhcyBtaXhlZCBNUDMgc3VwcG9ydCwgc28gd2UgbmVlZCB0byBjaGVjayBmb3IgYW5kIGJsb2NrIGl0LlxuICAgICAgdmFyIGNoZWNrT3BlcmEgPSBzZWxmLl9uYXZpZ2F0b3IgJiYgc2VsZi5fbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvT1BSXFwvKFswLTZdLikvZyk7XG4gICAgICB2YXIgaXNPbGRPcGVyYSA9IChjaGVja09wZXJhICYmIHBhcnNlSW50KGNoZWNrT3BlcmFbMF0uc3BsaXQoJy8nKVsxXSwgMTApIDwgMzMpO1xuXG4gICAgICBzZWxmLl9jb2RlY3MgPSB7XG4gICAgICAgIG1wMzogISEoIWlzT2xkT3BlcmEgJiYgKG1wZWdUZXN0IHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vbXAzOycpLnJlcGxhY2UoL15ubyQvLCAnJykpKSxcbiAgICAgICAgbXBlZzogISFtcGVnVGVzdCxcbiAgICAgICAgb3B1czogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL29nZzsgY29kZWNzPVwib3B1c1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgb2dnOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIG9nYTogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL29nZzsgY29kZWNzPVwidm9yYmlzXCInKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICB3YXY6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIGFhYzogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL2FhYzsnKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBjYWY6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LWNhZjsnKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBtNGE6ICEhKGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8veC1tNGE7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tNGE7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9hYWM7JykpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIG1wNDogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LW1wNDsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL21wNDsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL2FhYzsnKSkucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgd2ViYTogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3dlYm07IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgd2VibTogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3dlYm07IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgZG9sYnk6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tcDQ7IGNvZGVjcz1cImVjLTNcIicpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIGZsYWM6ICEhKGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8veC1mbGFjOycpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vZmxhYzsnKSkucmVwbGFjZSgvXm5vJC8sICcnKVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vYmlsZSBicm93c2VycyB3aWxsIG9ubHkgYWxsb3cgYXVkaW8gdG8gYmUgcGxheWVkIGFmdGVyIGEgdXNlciBpbnRlcmFjdGlvbi5cbiAgICAgKiBBdHRlbXB0IHRvIGF1dG9tYXRpY2FsbHkgdW5sb2NrIGF1ZGlvIG9uIHRoZSBmaXJzdCB1c2VyIGludGVyYWN0aW9uLlxuICAgICAqIENvbmNlcHQgZnJvbTogaHR0cDovL3BhdWxiYWthdXMuY29tL3R1dG9yaWFscy9odG1sNS93ZWItYXVkaW8tb24taW9zL1xuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBfZW5hYmxlTW9iaWxlQXVkaW86IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcblxuICAgICAgLy8gT25seSBydW4gdGhpcyBvbiBtb2JpbGUgZGV2aWNlcyBpZiBhdWRpbyBpc24ndCBhbHJlYWR5IGVhbmJsZWQuXG4gICAgICB2YXIgaXNNb2JpbGUgPSAvaVBob25lfGlQYWR8aVBvZHxBbmRyb2lkfEJsYWNrQmVycnl8QkIxMHxTaWxrfE1vYmkvaS50ZXN0KHNlbGYuX25hdmlnYXRvciAmJiBzZWxmLl9uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciBpc1RvdWNoID0gISEoKCdvbnRvdWNoZW5kJyBpbiB3aW5kb3cpIHx8IChzZWxmLl9uYXZpZ2F0b3IgJiYgc2VsZi5fbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkgfHwgKHNlbGYuX25hdmlnYXRvciAmJiBzZWxmLl9uYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApKTtcbiAgICAgIGlmIChzZWxmLl9tb2JpbGVFbmFibGVkIHx8ICFzZWxmLmN0eCB8fCAoIWlzTW9iaWxlICYmICFpc1RvdWNoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX21vYmlsZUVuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgLy8gU29tZSBtb2JpbGUgZGV2aWNlcy9wbGF0Zm9ybXMgaGF2ZSBkaXN0b3J0aW9uIGlzc3VlcyB3aGVuIG9wZW5pbmcvY2xvc2luZyB0YWJzIGFuZC9vciB3ZWIgdmlld3MuXG4gICAgICAvLyBCdWdzIGluIHRoZSBicm93c2VyIChlc3BlY2lhbGx5IE1vYmlsZSBTYWZhcmkpIGNhbiBjYXVzZSB0aGUgc2FtcGxlUmF0ZSB0byBjaGFuZ2UgZnJvbSA0NDEwMCB0byA0ODAwMC5cbiAgICAgIC8vIEJ5IGNhbGxpbmcgSG93bGVyLnVubG9hZCgpLCB3ZSBjcmVhdGUgYSBuZXcgQXVkaW9Db250ZXh0IHdpdGggdGhlIGNvcnJlY3Qgc2FtcGxlUmF0ZS5cbiAgICAgIGlmICghc2VsZi5fbW9iaWxlVW5sb2FkZWQgJiYgc2VsZi5jdHguc2FtcGxlUmF0ZSAhPT0gNDQxMDApIHtcbiAgICAgICAgc2VsZi5fbW9iaWxlVW5sb2FkZWQgPSB0cnVlO1xuICAgICAgICBzZWxmLnVubG9hZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBTY3JhdGNoIGJ1ZmZlciBmb3IgZW5hYmxpbmcgaU9TIHRvIGRpc3Bvc2Ugb2Ygd2ViIGF1ZGlvIGJ1ZmZlcnMgY29ycmVjdGx5LCBhcyBwZXI6XG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI0MTE5Njg0XG4gICAgICBzZWxmLl9zY3JhdGNoQnVmZmVyID0gc2VsZi5jdHguY3JlYXRlQnVmZmVyKDEsIDEsIDIyMDUwKTtcblxuICAgICAgLy8gQ2FsbCB0aGlzIG1ldGhvZCBvbiB0b3VjaCBzdGFydCB0byBjcmVhdGUgYW5kIHBsYXkgYSBidWZmZXIsXG4gICAgICAvLyB0aGVuIGNoZWNrIGlmIHRoZSBhdWRpbyBhY3R1YWxseSBwbGF5ZWQgdG8gZGV0ZXJtaW5lIGlmXG4gICAgICAvLyBhdWRpbyBoYXMgbm93IGJlZW4gdW5sb2NrZWQgb24gaU9TLCBBbmRyb2lkLCBldGMuXG4gICAgICB2YXIgdW5sb2NrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEZpeCBBbmRyb2lkIGNhbiBub3QgcGxheSBpbiBzdXNwZW5kIHN0YXRlLlxuICAgICAgICBIb3dsZXIuX2F1dG9SZXN1bWUoKTtcblxuICAgICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgYnVmZmVyLlxuICAgICAgICB2YXIgc291cmNlID0gc2VsZi5jdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgICAgIHNvdXJjZS5idWZmZXIgPSBzZWxmLl9zY3JhdGNoQnVmZmVyO1xuICAgICAgICBzb3VyY2UuY29ubmVjdChzZWxmLmN0eC5kZXN0aW5hdGlvbik7XG5cbiAgICAgICAgLy8gUGxheSB0aGUgZW1wdHkgYnVmZmVyLlxuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZS5zdGFydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzb3VyY2Uubm90ZU9uKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNvdXJjZS5zdGFydCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGxpbmcgcmVzdW1lKCkgb24gYSBzdGFjayBpbml0aWF0ZWQgYnkgdXNlciBnZXN0dXJlIGlzIHdoYXQgYWN0dWFsbHkgdW5sb2NrcyB0aGUgYXVkaW8gb24gQW5kcm9pZCBDaHJvbWUgPj0gNTUuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jdHgucmVzdW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgc2VsZi5jdHgucmVzdW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBhIHRpbWVvdXQgdG8gY2hlY2sgdGhhdCB3ZSBhcmUgdW5sb2NrZWQgb24gdGhlIG5leHQgZXZlbnQgbG9vcC5cbiAgICAgICAgc291cmNlLm9uZW5kZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzb3VyY2UuZGlzY29ubmVjdCgwKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdW5sb2NrZWQgc3RhdGUgYW5kIHByZXZlbnQgdGhpcyBjaGVjayBmcm9tIGhhcHBlbmluZyBhZ2Fpbi5cbiAgICAgICAgICBzZWxmLl9tb2JpbGVFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLm1vYmlsZUF1dG9FbmFibGUgPSBmYWxzZTtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdG91Y2ggc3RhcnQgbGlzdGVuZXIuXG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVubG9jaywgdHJ1ZSk7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB1bmxvY2ssIHRydWUpO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLy8gU2V0dXAgYSB0b3VjaCBzdGFydCBsaXN0ZW5lciB0byBhdHRlbXB0IGFuIHVubG9jayBpbi5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB1bmxvY2ssIHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB1bmxvY2ssIHRydWUpO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXV0b21hdGljYWxseSBzdXNwZW5kIHRoZSBXZWIgQXVkaW8gQXVkaW9Db250ZXh0IGFmdGVyIG5vIHNvdW5kIGhhcyBwbGF5ZWQgZm9yIDMwIHNlY29uZHMuXG4gICAgICogVGhpcyBzYXZlcyBwcm9jZXNzaW5nL2VuZXJneSBhbmQgZml4ZXMgdmFyaW91cyBicm93c2VyLXNwZWNpZmljIGJ1Z3Mgd2l0aCBhdWRpbyBnZXR0aW5nIHN0dWNrLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBfYXV0b1N1c3BlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoIXNlbGYuYXV0b1N1c3BlbmQgfHwgIXNlbGYuY3R4IHx8IHR5cGVvZiBzZWxmLmN0eC5zdXNwZW5kID09PSAndW5kZWZpbmVkJyB8fCAhSG93bGVyLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBhbnkgc291bmRzIGFyZSBwbGF5aW5nLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzZWxmLl9ob3dsc1tpXS5fd2ViQXVkaW8pIHtcbiAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8c2VsZi5faG93bHNbaV0uX3NvdW5kcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKCFzZWxmLl9ob3dsc1tpXS5fc291bmRzW2pdLl9wYXVzZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLl9zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3N1c3BlbmRUaW1lcik7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIHNvdW5kIGhhcyBwbGF5ZWQgYWZ0ZXIgMzAgc2Vjb25kcywgc3VzcGVuZCB0aGUgY29udGV4dC5cbiAgICAgIHNlbGYuX3N1c3BlbmRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghc2VsZi5hdXRvU3VzcGVuZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuX3N1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICAgIHNlbGYuc3RhdGUgPSAnc3VzcGVuZGluZyc7XG4gICAgICAgIHNlbGYuY3R4LnN1c3BlbmQoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuc3RhdGUgPSAnc3VzcGVuZGVkJztcblxuICAgICAgICAgIGlmIChzZWxmLl9yZXN1bWVBZnRlclN1c3BlbmQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLl9yZXN1bWVBZnRlclN1c3BlbmQ7XG4gICAgICAgICAgICBzZWxmLl9hdXRvUmVzdW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIDMwMDAwKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgcmVzdW1lIHRoZSBXZWIgQXVkaW8gQXVkaW9Db250ZXh0IHdoZW4gYSBuZXcgc291bmQgaXMgcGxheWVkLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBfYXV0b1Jlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICghc2VsZi5jdHggfHwgdHlwZW9mIHNlbGYuY3R4LnJlc3VtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgIUhvd2xlci51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09ICdydW5uaW5nJyAmJiBzZWxmLl9zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3N1c3BlbmRUaW1lcik7XG4gICAgICAgIHNlbGYuX3N1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuc3RhdGUgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgIHNlbGYuY3R4LnJlc3VtZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5zdGF0ZSA9ICdydW5uaW5nJztcblxuICAgICAgICAgIC8vIEVtaXQgdG8gYWxsIEhvd2xzIHRoYXQgdGhlIGF1ZGlvIGhhcyByZXN1bWVkLlxuICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9ob3dscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2VsZi5faG93bHNbaV0uX2VtaXQoJ3Jlc3VtZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNlbGYuX3N1c3BlbmRUaW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLl9zdXNwZW5kVGltZXIpO1xuICAgICAgICAgIHNlbGYuX3N1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5zdGF0ZSA9PT0gJ3N1c3BlbmRpbmcnKSB7XG4gICAgICAgIHNlbGYuX3Jlc3VtZUFmdGVyU3VzcGVuZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgfTtcblxuICAvLyBTZXR1cCB0aGUgZ2xvYmFsIGF1ZGlvIGNvbnRyb2xsZXIuXG4gIHZhciBIb3dsZXIgPSBuZXcgSG93bGVyR2xvYmFsKCk7XG5cbiAgLyoqIEdyb3VwIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBhdWRpbyBncm91cCBjb250cm9sbGVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gbyBQYXNzZWQgaW4gcHJvcGVydGllcyBmb3IgdGhpcyBncm91cC5cbiAgICovXG4gIHZhciBIb3dsID0gZnVuY3Rpb24obykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFRocm93IGFuIGVycm9yIGlmIG5vIHNvdXJjZSBpcyBwcm92aWRlZC5cbiAgICBpZiAoIW8uc3JjIHx8IG8uc3JjLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5lcnJvcignQW4gYXJyYXkgb2Ygc291cmNlIGZpbGVzIG11c3QgYmUgcGFzc2VkIHdpdGggYW55IG5ldyBIb3dsLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYuaW5pdChvKTtcbiAgfTtcbiAgSG93bC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhIG5ldyBIb3dsIGdyb3VwIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG8gUGFzc2VkIGluIHByb3BlcnRpZXMgZm9yIHRoaXMgZ3JvdXAuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbihvKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gQXVkaW9Db250ZXh0IGNyZWF0ZWQgeWV0LCBydW4gdGhlIHNldHVwLlxuICAgICAgaWYgKCFIb3dsZXIuY3R4KSB7XG4gICAgICAgIHNldHVwQXVkaW9Db250ZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldHVwIHVzZXItZGVmaW5lZCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9hdXRvcGxheSA9IG8uYXV0b3BsYXkgfHwgZmFsc2U7XG4gICAgICBzZWxmLl9mb3JtYXQgPSAodHlwZW9mIG8uZm9ybWF0ICE9PSAnc3RyaW5nJykgPyBvLmZvcm1hdCA6IFtvLmZvcm1hdF07XG4gICAgICBzZWxmLl9odG1sNSA9IG8uaHRtbDUgfHwgZmFsc2U7XG4gICAgICBzZWxmLl9tdXRlZCA9IG8ubXV0ZSB8fCBmYWxzZTtcbiAgICAgIHNlbGYuX2xvb3AgPSBvLmxvb3AgfHwgZmFsc2U7XG4gICAgICBzZWxmLl9wb29sID0gby5wb29sIHx8IDU7XG4gICAgICBzZWxmLl9wcmVsb2FkID0gKHR5cGVvZiBvLnByZWxvYWQgPT09ICdib29sZWFuJykgPyBvLnByZWxvYWQgOiB0cnVlO1xuICAgICAgc2VsZi5fcmF0ZSA9IG8ucmF0ZSB8fCAxO1xuICAgICAgc2VsZi5fc3ByaXRlID0gby5zcHJpdGUgfHwge307XG4gICAgICBzZWxmLl9zcmMgPSAodHlwZW9mIG8uc3JjICE9PSAnc3RyaW5nJykgPyBvLnNyYyA6IFtvLnNyY107XG4gICAgICBzZWxmLl92b2x1bWUgPSBvLnZvbHVtZSAhPT0gdW5kZWZpbmVkID8gby52b2x1bWUgOiAxO1xuICAgICAgc2VsZi5feGhyV2l0aENyZWRlbnRpYWxzID0gby54aHJXaXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7XG5cbiAgICAgIC8vIFNldHVwIGFsbCBvdGhlciBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9kdXJhdGlvbiA9IDA7XG4gICAgICBzZWxmLl9zdGF0ZSA9ICd1bmxvYWRlZCc7XG4gICAgICBzZWxmLl9zb3VuZHMgPSBbXTtcbiAgICAgIHNlbGYuX2VuZFRpbWVycyA9IHt9O1xuICAgICAgc2VsZi5fcXVldWUgPSBbXTtcbiAgICAgIHNlbGYuX3BsYXlMb2NrID0gZmFsc2U7XG5cbiAgICAgIC8vIFNldHVwIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgIHNlbGYuX29uZW5kID0gby5vbmVuZCA/IFt7Zm46IG8ub25lbmR9XSA6IFtdO1xuICAgICAgc2VsZi5fb25mYWRlID0gby5vbmZhZGUgPyBbe2ZuOiBvLm9uZmFkZX1dIDogW107XG4gICAgICBzZWxmLl9vbmxvYWQgPSBvLm9ubG9hZCA/IFt7Zm46IG8ub25sb2FkfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ubG9hZGVycm9yID0gby5vbmxvYWRlcnJvciA/IFt7Zm46IG8ub25sb2FkZXJyb3J9XSA6IFtdO1xuICAgICAgc2VsZi5fb25wbGF5ZXJyb3IgPSBvLm9ucGxheWVycm9yID8gW3tmbjogby5vbnBsYXllcnJvcn1dIDogW107XG4gICAgICBzZWxmLl9vbnBhdXNlID0gby5vbnBhdXNlID8gW3tmbjogby5vbnBhdXNlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ucGxheSA9IG8ub25wbGF5ID8gW3tmbjogby5vbnBsYXl9XSA6IFtdO1xuICAgICAgc2VsZi5fb25zdG9wID0gby5vbnN0b3AgPyBbe2ZuOiBvLm9uc3RvcH1dIDogW107XG4gICAgICBzZWxmLl9vbm11dGUgPSBvLm9ubXV0ZSA/IFt7Zm46IG8ub25tdXRlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29udm9sdW1lID0gby5vbnZvbHVtZSA/IFt7Zm46IG8ub252b2x1bWV9XSA6IFtdO1xuICAgICAgc2VsZi5fb25yYXRlID0gby5vbnJhdGUgPyBbe2ZuOiBvLm9ucmF0ZX1dIDogW107XG4gICAgICBzZWxmLl9vbnNlZWsgPSBvLm9uc2VlayA/IFt7Zm46IG8ub25zZWVrfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ucmVzdW1lID0gW107XG5cbiAgICAgIC8vIFdlYiBBdWRpbyBvciBIVE1MNSBBdWRpbz9cbiAgICAgIHNlbGYuX3dlYkF1ZGlvID0gSG93bGVyLnVzaW5nV2ViQXVkaW8gJiYgIXNlbGYuX2h0bWw1O1xuXG4gICAgICAvLyBBdXRvbWF0aWNhbGx5IHRyeSB0byBlbmFibGUgYXVkaW8gb24gaU9TLlxuICAgICAgaWYgKHR5cGVvZiBIb3dsZXIuY3R4ICE9PSAndW5kZWZpbmVkJyAmJiBIb3dsZXIuY3R4ICYmIEhvd2xlci5tb2JpbGVBdXRvRW5hYmxlKSB7XG4gICAgICAgIEhvd2xlci5fZW5hYmxlTW9iaWxlQXVkaW8oKTtcbiAgICAgIH1cblxuICAgICAgLy8gS2VlcCB0cmFjayBvZiB0aGlzIEhvd2wgZ3JvdXAgaW4gdGhlIGdsb2JhbCBjb250cm9sbGVyLlxuICAgICAgSG93bGVyLl9ob3dscy5wdXNoKHNlbGYpO1xuXG4gICAgICAvLyBJZiB0aGV5IHNlbGVjdGVkIGF1dG9wbGF5LCBhZGQgYSBwbGF5IGV2ZW50IHRvIHRoZSBsb2FkIHF1ZXVlLlxuICAgICAgaWYgKHNlbGYuX2F1dG9wbGF5KSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAncGxheScsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYucGxheSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIExvYWQgdGhlIHNvdXJjZSBmaWxlIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICAgICAgaWYgKHNlbGYuX3ByZWxvYWQpIHtcbiAgICAgICAgc2VsZi5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBhdWRpbyBmaWxlLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBsb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciB1cmwgPSBudWxsO1xuXG4gICAgICAvLyBJZiBubyBhdWRpbyBpcyBhdmFpbGFibGUsIHF1aXQgaW1tZWRpYXRlbHkuXG4gICAgICBpZiAoSG93bGVyLm5vQXVkaW8pIHtcbiAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ05vIGF1ZGlvIHN1cHBvcnQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIG91ciBzb3VyY2UgaXMgaW4gYW4gYXJyYXkuXG4gICAgICBpZiAodHlwZW9mIHNlbGYuX3NyYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VsZi5fc3JjID0gW3NlbGYuX3NyY107XG4gICAgICB9XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgc291cmNlcyBhbmQgcGljayB0aGUgZmlyc3Qgb25lIHRoYXQgaXMgY29tcGF0aWJsZS5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zcmMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGV4dCwgc3RyO1xuXG4gICAgICAgIGlmIChzZWxmLl9mb3JtYXQgJiYgc2VsZi5fZm9ybWF0W2ldKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXh0ZW5zaW9uIHdhcyBzcGVjaWZpZWQsIHVzZSB0aGF0IGluc3RlYWQuXG4gICAgICAgICAgZXh0ID0gc2VsZi5fZm9ybWF0W2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc291cmNlIGlzIGEgc3RyaW5nLlxuICAgICAgICAgIHN0ciA9IHNlbGYuX3NyY1tpXTtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHNlbGYuX2VtaXQoJ2xvYWRlcnJvcicsIG51bGwsICdOb24tc3RyaW5nIGZvdW5kIGluIHNlbGVjdGVkIGF1ZGlvIHNvdXJjZXMgLSBpZ25vcmluZy4nKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEV4dHJhY3QgdGhlIGZpbGUgZXh0ZW5zaW9uIGZyb20gdGhlIFVSTCBvciBiYXNlNjQgZGF0YSBVUkkuXG4gICAgICAgICAgZXh0ID0gL15kYXRhOmF1ZGlvXFwvKFteOyxdKyk7L2kuZXhlYyhzdHIpO1xuICAgICAgICAgIGlmICghZXh0KSB7XG4gICAgICAgICAgICBleHQgPSAvXFwuKFteLl0rKSQvLmV4ZWMoc3RyLnNwbGl0KCc/JywgMSlbMF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChleHQpIHtcbiAgICAgICAgICAgIGV4dCA9IGV4dFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvZyBhIHdhcm5pbmcgaWYgbm8gZXh0ZW5zaW9uIHdhcyBmb3VuZC5cbiAgICAgICAgaWYgKCFleHQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIGZpbGUgZXh0ZW5zaW9uIHdhcyBmb3VuZC4gQ29uc2lkZXIgdXNpbmcgdGhlIFwiZm9ybWF0XCIgcHJvcGVydHkgb3Igc3BlY2lmeSBhbiBleHRlbnNpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGV4dGVuc2lvbiBpcyBhdmFpbGFibGUuXG4gICAgICAgIGlmIChleHQgJiYgSG93bGVyLmNvZGVjcyhleHQpKSB7XG4gICAgICAgICAgdXJsID0gc2VsZi5fc3JjW2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIHNlbGYuX2VtaXQoJ2xvYWRlcnJvcicsIG51bGwsICdObyBjb2RlYyBzdXBwb3J0IGZvciBzZWxlY3RlZCBhdWRpbyBzb3VyY2VzLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3NyYyA9IHVybDtcbiAgICAgIHNlbGYuX3N0YXRlID0gJ2xvYWRpbmcnO1xuXG4gICAgICAvLyBJZiB0aGUgaG9zdGluZyBwYWdlIGlzIEhUVFBTIGFuZCB0aGUgc291cmNlIGlzbid0LFxuICAgICAgLy8gZHJvcCBkb3duIHRvIEhUTUw1IEF1ZGlvIHRvIGF2b2lkIE1peGVkIENvbnRlbnQgZXJyb3JzLlxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgJiYgdXJsLnNsaWNlKDAsIDUpID09PSAnaHR0cDonKSB7XG4gICAgICAgIHNlbGYuX2h0bWw1ID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5fd2ViQXVkaW8gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IHNvdW5kIG9iamVjdCBhbmQgYWRkIGl0IHRvIHRoZSBwb29sLlxuICAgICAgbmV3IFNvdW5kKHNlbGYpO1xuXG4gICAgICAvLyBMb2FkIGFuZCBkZWNvZGUgdGhlIGF1ZGlvIGRhdGEgZm9yIHBsYXliYWNrLlxuICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgIGxvYWRCdWZmZXIoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQbGF5IGEgc291bmQgb3IgcmVzdW1lIHByZXZpb3VzIHBsYXliYWNrLlxuICAgICAqIEBwYXJhbSAge1N0cmluZy9OdW1iZXJ9IHNwcml0ZSAgIFNwcml0ZSBuYW1lIGZvciBzcHJpdGUgcGxheWJhY2sgb3Igc291bmQgaWQgdG8gY29udGludWUgcHJldmlvdXMuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW50ZXJuYWwgSW50ZXJuYWwgVXNlOiB0cnVlIHByZXZlbnRzIGV2ZW50IGZpcmluZy5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgIFNvdW5kIElELlxuICAgICAqL1xuICAgIHBsYXk6IGZ1bmN0aW9uKHNwcml0ZSwgaW50ZXJuYWwpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBpZCA9IG51bGw7XG5cbiAgICAgIC8vIERldGVybWluZSBpZiBhIHNwcml0ZSwgc291bmQgaWQgb3Igbm90aGluZyB3YXMgcGFzc2VkXG4gICAgICBpZiAodHlwZW9mIHNwcml0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWQgPSBzcHJpdGU7XG4gICAgICAgIHNwcml0ZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcHJpdGUgPT09ICdzdHJpbmcnICYmIHNlbGYuX3N0YXRlID09PSAnbG9hZGVkJyAmJiAhc2VsZi5fc3ByaXRlW3Nwcml0ZV0pIHtcbiAgICAgICAgLy8gSWYgdGhlIHBhc3NlZCBzcHJpdGUgZG9lc24ndCBleGlzdCwgZG8gbm90aGluZy5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcHJpdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZGVmYXVsdCBzb3VuZCBzcHJpdGUgKHBsYXlzIHRoZSBmdWxsIGF1ZGlvIGxlbmd0aCkuXG4gICAgICAgIHNwcml0ZSA9ICdfX2RlZmF1bHQnO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgc2luZ2xlIHBhdXNlZCBzb3VuZCB0aGF0IGlzbid0IGVuZGVkLlxuICAgICAgICAvLyBJZiB0aGVyZSBpcywgcGxheSB0aGF0IHNvdW5kLiBJZiBub3QsIGNvbnRpbnVlIGFzIHVzdWFsLlxuICAgICAgICB2YXIgbnVtID0gMDtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChzZWxmLl9zb3VuZHNbaV0uX3BhdXNlZCAmJiAhc2VsZi5fc291bmRzW2ldLl9lbmRlZCkge1xuICAgICAgICAgICAgbnVtKys7XG4gICAgICAgICAgICBpZCA9IHNlbGYuX3NvdW5kc1tpXS5faWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAgIHNwcml0ZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgc2VsZWN0ZWQgbm9kZSwgb3IgZ2V0IG9uZSBmcm9tIHRoZSBwb29sLlxuICAgICAgdmFyIHNvdW5kID0gaWQgPyBzZWxmLl9zb3VuZEJ5SWQoaWQpIDogc2VsZi5faW5hY3RpdmVTb3VuZCgpO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgZG9lc24ndCBleGlzdCwgZG8gbm90aGluZy5cbiAgICAgIGlmICghc291bmQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCB0aGUgc3ByaXRlIGRlZmluaXRpb24uXG4gICAgICBpZiAoaWQgJiYgIXNwcml0ZSkge1xuICAgICAgICBzcHJpdGUgPSBzb3VuZC5fc3ByaXRlIHx8ICdfX2RlZmF1bHQnO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgd2UgbXVzdCB3YWl0IHRvIGdldCB0aGUgYXVkaW8ncyBkdXJhdGlvbi5cbiAgICAgIC8vIFdlIGFsc28gbmVlZCB0byB3YWl0IHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCBydW4gaW50byByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgICAgLy8gdGhlIG9yZGVyIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICAvLyBTZXQgdGhlIHNwcml0ZSB2YWx1ZSBvbiB0aGlzIHNvdW5kLlxuICAgICAgICBzb3VuZC5fc3ByaXRlID0gc3ByaXRlO1xuXG4gICAgICAgIC8vIE1ha3IgdGhpcyBzb3VuZGVkIGFzIG5vdCBlbmRlZCBpbiBjYXNlIGFub3RoZXIgc291bmQgaXMgcGxheWVkIGJlZm9yZSB0aGlzIG9uZSBsb2Fkcy5cbiAgICAgICAgc291bmQuX2VuZGVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBzb3VuZCB0byB0aGUgcXVldWUgdG8gYmUgcGxheWVkIG9uIGxvYWQuXG4gICAgICAgIHZhciBzb3VuZElkID0gc291bmQuX2lkO1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ3BsYXknLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnBsYXkoc291bmRJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc291bmRJZDtcbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgcGxheSB0aGUgc291bmQgaWYgYW4gaWQgd2FzIHBhc3NlZCBhbmQgaXQgaXMgYWxyZWFkeSBwbGF5aW5nLlxuICAgICAgaWYgKGlkICYmICFzb3VuZC5fcGF1c2VkKSB7XG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIHBsYXkgZXZlbnQsIGluIG9yZGVyIHRvIGtlZXAgaXRlcmF0aW5nIHRocm91Z2ggcXVldWUuXG4gICAgICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgICAgICBzZWxmLl9sb2FkUXVldWUoJ3BsYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VuZC5faWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgQXVkaW9Db250ZXh0IGlzbid0IHN1c3BlbmRlZCwgYW5kIHJlc3VtZSBpdCBpZiBpdCBpcy5cbiAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICBIb3dsZXIuX2F1dG9SZXN1bWUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBsb25nIHRvIHBsYXkgZm9yIGFuZCB3aGVyZSB0byBzdGFydCBwbGF5aW5nLlxuICAgICAgdmFyIHNlZWsgPSBNYXRoLm1heCgwLCBzb3VuZC5fc2VlayA+IDAgPyBzb3VuZC5fc2VlayA6IHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzBdIC8gMTAwMCk7XG4gICAgICB2YXIgZHVyYXRpb24gPSBNYXRoLm1heCgwLCAoKHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzBdICsgc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMV0pIC8gMTAwMCkgLSBzZWVrKTtcbiAgICAgIHZhciB0aW1lb3V0ID0gKGR1cmF0aW9uICogMTAwMCkgLyBNYXRoLmFicyhzb3VuZC5fcmF0ZSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgcGFyYW1ldGVycyBvZiB0aGUgc291bmRcbiAgICAgIHNvdW5kLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHNvdW5kLl9lbmRlZCA9IGZhbHNlO1xuICAgICAgc291bmQuX3Nwcml0ZSA9IHNwcml0ZTtcbiAgICAgIHNvdW5kLl9zZWVrID0gc2VlaztcbiAgICAgIHNvdW5kLl9zdGFydCA9IHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzBdIC8gMTAwMDtcbiAgICAgIHNvdW5kLl9zdG9wID0gKHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzBdICsgc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMV0pIC8gMTAwMDtcbiAgICAgIHNvdW5kLl9sb29wID0gISEoc291bmQuX2xvb3AgfHwgc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMl0pO1xuXG4gICAgICAvLyBCZWdpbiB0aGUgYWN0dWFsIHBsYXliYWNrLlxuICAgICAgdmFyIG5vZGUgPSBzb3VuZC5fbm9kZTtcbiAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAvLyBGaXJlIHRoaXMgd2hlbiB0aGUgc291bmQgaXMgcmVhZHkgdG8gcGxheSB0byBiZWdpbiBXZWIgQXVkaW8gcGxheWJhY2suXG4gICAgICAgIHZhciBwbGF5V2ViQXVkaW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLl9yZWZyZXNoQnVmZmVyKHNvdW5kKTtcblxuICAgICAgICAgIC8vIFNldHVwIHRoZSBwbGF5YmFjayBwYXJhbXMuXG4gICAgICAgICAgdmFyIHZvbCA9IChzb3VuZC5fbXV0ZWQgfHwgc2VsZi5fbXV0ZWQpID8gMCA6IHNvdW5kLl92b2x1bWU7XG4gICAgICAgICAgbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgc291bmQuX3BsYXlTdGFydCA9IEhvd2xlci5jdHguY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAvLyBQbGF5IHRoZSBzb3VuZCB1c2luZyB0aGUgc3VwcG9ydGVkIG1ldGhvZC5cbiAgICAgICAgICBpZiAodHlwZW9mIG5vZGUuYnVmZmVyU291cmNlLnN0YXJ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc291bmQuX2xvb3AgPyBub2RlLmJ1ZmZlclNvdXJjZS5ub3RlR3JhaW5PbigwLCBzZWVrLCA4NjQwMCkgOiBub2RlLmJ1ZmZlclNvdXJjZS5ub3RlR3JhaW5PbigwLCBzZWVrLCBkdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdW5kLl9sb29wID8gbm9kZS5idWZmZXJTb3VyY2Uuc3RhcnQoMCwgc2VlaywgODY0MDApIDogbm9kZS5idWZmZXJTb3VyY2Uuc3RhcnQoMCwgc2VlaywgZHVyYXRpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFN0YXJ0IGEgbmV3IHRpbWVyIGlmIG5vbmUgaXMgcHJlc2VudC5cbiAgICAgICAgICBpZiAodGltZW91dCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdID0gc2V0VGltZW91dChzZWxmLl9lbmRlZC5iaW5kKHNlbGYsIHNvdW5kKSwgdGltZW91dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheScsIHNvdW5kLl9pZCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKEhvd2xlci5zdGF0ZSA9PT0gJ3J1bm5pbmcnKSB7XG4gICAgICAgICAgcGxheVdlYkF1ZGlvKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5vbmNlKCdyZXN1bWUnLCBwbGF5V2ViQXVkaW8pO1xuXG4gICAgICAgICAgLy8gQ2FuY2VsIHRoZSBlbmQgdGltZXIuXG4gICAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihzb3VuZC5faWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaXJlIHRoaXMgd2hlbiB0aGUgc291bmQgaXMgcmVhZHkgdG8gcGxheSB0byBiZWdpbiBIVE1MNSBBdWRpbyBwbGF5YmFjay5cbiAgICAgICAgdmFyIHBsYXlIdG1sNSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5vZGUuY3VycmVudFRpbWUgPSBzZWVrO1xuICAgICAgICAgIG5vZGUubXV0ZWQgPSBzb3VuZC5fbXV0ZWQgfHwgc2VsZi5fbXV0ZWQgfHwgSG93bGVyLl9tdXRlZCB8fCBub2RlLm11dGVkO1xuICAgICAgICAgIG5vZGUudm9sdW1lID0gc291bmQuX3ZvbHVtZSAqIEhvd2xlci52b2x1bWUoKTtcbiAgICAgICAgICBub2RlLnBsYXliYWNrUmF0ZSA9IHNvdW5kLl9yYXRlO1xuXG4gICAgICAgICAgLy8gTW9iaWxlIGJyb3dzZXJzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhpcyBpcyBjYWxsZWQgd2l0aG91dCB1c2VyIGludGVyYWN0aW9uLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcGxheSA9IG5vZGUucGxheSgpO1xuXG4gICAgICAgICAgICAvLyBTdXBwb3J0IG9sZGVyIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm9taXNlcywgYW5kIHRodXMgZG9uJ3QgaGF2ZSB0aGlzIGlzc3VlLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBwbGF5IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAvLyBJbXBsZW1lbnRzIGEgbG9jayB0byBwcmV2ZW50IERPTUV4Y2VwdGlvbjogVGhlIHBsYXkoKSByZXF1ZXN0IHdhcyBpbnRlcnJ1cHRlZCBieSBhIGNhbGwgdG8gcGF1c2UoKS5cbiAgICAgICAgICAgICAgc2VsZi5fcGxheUxvY2sgPSB0cnVlO1xuXG4gICAgICAgICAgICAgIC8vIFJlbGVhc2VzIHRoZSBsb2NrIGFuZCBleGVjdXRlcyBxdWV1ZWQgYWN0aW9ucy5cbiAgICAgICAgICAgICAgdmFyIHJ1bkxvYWRRdWV1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX3BsYXlMb2NrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheScsIHNvdW5kLl9pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBwbGF5LnRoZW4ocnVuTG9hZFF1ZXVlLCBydW5Mb2FkUXVldWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaW50ZXJuYWwpIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheScsIHNvdW5kLl9pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHRpbmcgcmF0ZSBiZWZvcmUgcGxheWluZyB3b24ndCB3b3JrIGluIElFLCBzbyB3ZSBzZXQgaXQgYWdhaW4gaGVyZS5cbiAgICAgICAgICAgIG5vZGUucGxheWJhY2tSYXRlID0gc291bmQuX3JhdGU7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBub2RlIGlzIHN0aWxsIHBhdXNlZCwgdGhlbiB3ZSBjYW4gYXNzdW1lIHRoZXJlIHdhcyBhIHBsYXliYWNrIGlzc3VlLlxuICAgICAgICAgICAgaWYgKG5vZGUucGF1c2VkKSB7XG4gICAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3BsYXllcnJvcicsIHNvdW5kLl9pZCwgJ1BsYXliYWNrIHdhcyB1bmFibGUgdG8gc3RhcnQuIFRoaXMgaXMgbW9zdCBjb21tb25seSBhbiBpc3N1ZSAnICtcbiAgICAgICAgICAgICAgICAnb24gbW9iaWxlIGRldmljZXMgd2hlcmUgcGxheWJhY2sgd2FzIG5vdCB3aXRoaW4gYSB1c2VyIGludGVyYWN0aW9uLicpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHVwIHRoZSBlbmQgdGltZXIgb24gc3ByaXRlcyBvciBsaXN0ZW4gZm9yIHRoZSBlbmRlZCBldmVudC5cbiAgICAgICAgICAgIGlmIChzcHJpdGUgIT09ICdfX2RlZmF1bHQnIHx8IHNvdW5kLl9sb29wKSB7XG4gICAgICAgICAgICAgIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdID0gc2V0VGltZW91dChzZWxmLl9lbmRlZC5iaW5kKHNlbGYsIHNvdW5kKSwgdGltZW91dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLl9lbmRUaW1lcnNbc291bmQuX2lkXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEZpcmUgZW5kZWQgb24gdGhpcyBhdWRpbyBub2RlLlxuICAgICAgICAgICAgICAgIHNlbGYuX2VuZGVkKHNvdW5kKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBzZWxmLl9lbmRUaW1lcnNbc291bmQuX2lkXSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheWVycm9yJywgc291bmQuX2lkLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQbGF5IGltbWVkaWF0ZWx5IGlmIHJlYWR5LCBvciB3YWl0IGZvciB0aGUgJ2NhbnBsYXl0aHJvdWdoJ2UgdmVudC5cbiAgICAgICAgdmFyIGxvYWRlZE5vUmVhZHlTdGF0ZSA9ICh3aW5kb3cgJiYgd2luZG93LmVqZWN0YSkgfHwgKCFub2RlLnJlYWR5U3RhdGUgJiYgSG93bGVyLl9uYXZpZ2F0b3IuaXNDb2Nvb25KUyk7XG4gICAgICAgIGlmIChub2RlLnJlYWR5U3RhdGUgPj0gMyB8fCBsb2FkZWROb1JlYWR5U3RhdGUpIHtcbiAgICAgICAgICBwbGF5SHRtbDUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEJlZ2luIHBsYXliYWNrLlxuICAgICAgICAgICAgcGxheUh0bWw1KCk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG5cbiAgICAgICAgICAvLyBDYW5jZWwgdGhlIGVuZCB0aW1lci5cbiAgICAgICAgICBzZWxmLl9jbGVhclRpbWVyKHNvdW5kLl9pZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNvdW5kLl9pZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgcGxheWJhY2sgYW5kIHNhdmUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFRoZSBzb3VuZCBJRCAoZW1wdHkgdG8gcGF1c2UgYWxsIGluIGdyb3VwKS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIHBhdXNlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCBvciBhIHBsYXkoKSBwcm9taXNlIGlzIHBlbmRpbmcsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBwYXVzZSB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnIHx8IHNlbGYuX3BsYXlMb2NrKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAncGF1c2UnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnBhdXNlKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBpZCBpcyBwYXNzZWQsIGdldCBhbGwgSUQncyB0byBiZSBwYXVzZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBlbmQgdGltZXIuXG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWRzW2ldKTtcblxuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICBpZiAoc291bmQgJiYgIXNvdW5kLl9wYXVzZWQpIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNlbGYuc2VlayhpZHNbaV0pO1xuICAgICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgICAgc291bmQuX3BhdXNlZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTdG9wIGN1cnJlbnRseSBydW5uaW5nIGZhZGVzLlxuICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKGlkc1tpXSk7XG5cbiAgICAgICAgICBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHNvdW5kIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICAgICAgICAgIGlmICghc291bmQuX25vZGUuYnVmZmVyU291cmNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5zdG9wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5ub3RlT2ZmKDApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5zdG9wKDApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICAgICAgICAgIHNlbGYuX2NsZWFuQnVmZmVyKHNvdW5kLl9ub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHNvdW5kLl9ub2RlLmR1cmF0aW9uKSB8fCBzb3VuZC5fbm9kZS5kdXJhdGlvbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlIHRoZSBwYXVzZSBldmVudCwgdW5sZXNzIGB0cnVlYCBpcyBwYXNzZWQgYXMgdGhlIDJuZCBhcmd1bWVudC5cbiAgICAgICAgaWYgKCFhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KCdwYXVzZScsIHNvdW5kID8gc291bmQuX2lkIDogbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3AgcGxheWJhY2sgYW5kIHJlc2V0IHRvIHN0YXJ0LlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIElEIChlbXB0eSB0byBzdG9wIGFsbCBpbiBncm91cCkuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW50ZXJuYWwgSW50ZXJuYWwgVXNlOiB0cnVlIHByZXZlbnRzIGV2ZW50IGZpcmluZy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKGlkLCBpbnRlcm5hbCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIHN0b3Agd2hlbiBjYXBhYmxlLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ3N0b3AnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnN0b3AoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGlkIGlzIHBhc3NlZCwgZ2V0IGFsbCBJRCdzIHRvIGJlIHN0b3BwZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBlbmQgdGltZXIuXG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWRzW2ldKTtcblxuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgICAgc291bmQuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgICAgc291bmQuX2VuZGVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFN0b3AgY3VycmVudGx5IHJ1bm5pbmcgZmFkZXMuXG4gICAgICAgICAgc2VsZi5fc3RvcEZhZGUoaWRzW2ldKTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc291bmQncyBBdWRpb0J1ZmZlclNvdXJjZU5vZGUgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICAgICAgaWYgKHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2Uubm90ZU9mZigwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AoMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYW5CdWZmZXIoc291bmQuX25vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihzb3VuZC5fbm9kZS5kdXJhdGlvbikgfHwgc291bmQuX25vZGUuZHVyYXRpb24gPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmN1cnJlbnRUaW1lID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgICAgICAgc2VsZi5fZW1pdCgnc3RvcCcsIHNvdW5kLl9pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNdXRlL3VubXV0ZSBhIHNpbmdsZSBzb3VuZCBvciBhbGwgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBtdXRlZCBTZXQgdG8gdHJ1ZSB0byBtdXRlIGFuZCBmYWxzZSB0byB1bm11dGUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAgICBUaGUgc291bmQgSUQgdG8gdXBkYXRlIChvbWl0IHRvIG11dGUvdW5tdXRlIGFsbCkuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBtdXRlOiBmdW5jdGlvbihtdXRlZCwgaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBtdXRlIHdoZW4gY2FwYWJsZS5cbiAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdtdXRlJyxcbiAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5tdXRlKG11dGVkLCBpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYXBwbHlpbmcgbXV0ZS91bm11dGUgdG8gYWxsIHNvdW5kcywgdXBkYXRlIHRoZSBncm91cCdzIHZhbHVlLlxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtdXRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgc2VsZi5fbXV0ZWQgPSBtdXRlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5fbXV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gaWQgaXMgcGFzc2VkLCBnZXQgYWxsIElEJ3MgdG8gYmUgbXV0ZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICAgIHNvdW5kLl9tdXRlZCA9IG11dGVkO1xuXG4gICAgICAgICAgLy8gQ2FuY2VsIGFjdGl2ZSBmYWRlIGFuZCBzZXQgdGhlIHZvbHVtZSB0byB0aGUgZW5kIHZhbHVlLlxuICAgICAgICAgIGlmIChzb3VuZC5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKHNvdW5kLl9pZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKG11dGVkID8gMCA6IHNvdW5kLl92b2x1bWUsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLm11dGVkID0gSG93bGVyLl9tdXRlZCA/IHRydWUgOiBtdXRlZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9lbWl0KCdtdXRlJywgc291bmQuX2lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgdm9sdW1lIG9mIHRoaXMgc291bmQgb3Igb2YgdGhlIEhvd2wgZ3JvdXAuIFRoaXMgbWV0aG9kIGNhbiBvcHRpb25hbGx5IHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICAgKiAgIHZvbHVtZSgpIC0+IFJldHVybnMgdGhlIGdyb3VwJ3Mgdm9sdW1lIHZhbHVlLlxuICAgICAqICAgdm9sdW1lKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGN1cnJlbnQgdm9sdW1lLlxuICAgICAqICAgdm9sdW1lKHZvbCkgLT4gU2V0cyB0aGUgdm9sdW1lIG9mIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgdm9sdW1lKHZvbCwgaWQpIC0+IFNldHMgdGhlIHZvbHVtZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9IFJldHVybnMgc2VsZiBvciBjdXJyZW50IHZvbHVtZS5cbiAgICAgKi9cbiAgICB2b2x1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgdm9sLCBpZDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSB2YWx1ZXMgYmFzZWQgb24gYXJndW1lbnRzLlxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGdyb3Vwcycgdm9sdW1lLlxuICAgICAgICByZXR1cm4gc2VsZi5fdm9sdW1lO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSB8fCBhcmdzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgYXJnc1sxXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBJRCwgYW5kIGlmIG5vdCwgYXNzdW1lIGl0IGlzIGEgbmV3IHZvbHVtZS5cbiAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKCk7XG4gICAgICAgIHZhciBpbmRleCA9IGlkcy5pbmRleE9mKGFyZ3NbMF0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1swXSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZvbCA9IHBhcnNlRmxvYXQoYXJnc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPj0gMikge1xuICAgICAgICB2b2wgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgb3IgcmV0dXJuIHRoZSBjdXJyZW50IHZvbHVtZS5cbiAgICAgIHZhciBzb3VuZDtcbiAgICAgIGlmICh0eXBlb2Ygdm9sICE9PSAndW5kZWZpbmVkJyAmJiB2b2wgPj0gMCAmJiB2b2wgPD0gMSkge1xuICAgICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGNoYW5nZSB2b2x1bWUgd2hlbiBjYXBhYmxlLlxuICAgICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgICBldmVudDogJ3ZvbHVtZScsXG4gICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLnZvbHVtZS5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBncm91cCB2b2x1bWUuXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2VsZi5fdm9sdW1lID0gdm9sO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIG9uZSBvciBhbGwgdm9sdW1lcy5cbiAgICAgICAgaWQgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxpZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRbaV0pO1xuXG4gICAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgICBzb3VuZC5fdm9sdW1lID0gdm9sO1xuXG4gICAgICAgICAgICAvLyBTdG9wIGN1cnJlbnRseSBydW5uaW5nIGZhZGVzLlxuICAgICAgICAgICAgaWYgKCFhcmdzWzJdKSB7XG4gICAgICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKGlkW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlICYmICFzb3VuZC5fbXV0ZWQpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh2b2wsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VuZC5fbm9kZSAmJiAhc291bmQuX211dGVkKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLnZvbHVtZSA9IHZvbCAqIEhvd2xlci52b2x1bWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5fZW1pdCgndm9sdW1lJywgc291bmQuX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvdW5kID0gaWQgPyBzZWxmLl9zb3VuZEJ5SWQoaWQpIDogc2VsZi5fc291bmRzWzBdO1xuICAgICAgICByZXR1cm4gc291bmQgPyBzb3VuZC5fdm9sdW1lIDogMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZhZGUgYSBjdXJyZW50bHkgcGxheWluZyBzb3VuZCBiZXR3ZWVuIHR3byB2b2x1bWVzIChpZiBubyBpZCBpcyBwYXNzc2VkLCBhbGwgc291bmRzIHdpbGwgZmFkZSkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBmcm9tIFRoZSB2YWx1ZSB0byBmYWRlIGZyb20gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gdG8gICBUaGUgdm9sdW1lIHRvIGZhZGUgdG8gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gbGVuICBUaW1lIGluIG1pbGxpc2Vjb25kcyB0byBmYWRlLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgICBUaGUgc291bmQgaWQgKG9taXQgdG8gZmFkZSBhbGwgc291bmRzKS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIGZhZGU6IGZ1bmN0aW9uKGZyb20sIHRvLCBsZW4sIGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gZmFkZSB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAnZmFkZScsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuZmFkZShmcm9tLCB0bywgbGVuLCBpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHRoZSB2b2x1bWUgdG8gdGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAgc2VsZi52b2x1bWUoZnJvbSwgaWQpO1xuXG4gICAgICAvLyBGYWRlIHRoZSB2b2x1bWUgb2Ygb25lIG9yIGFsbCBzb3VuZHMuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICAvLyBDcmVhdGUgYSBsaW5lYXIgZmFkZSBvciBmYWxsIGJhY2sgdG8gdGltZW91dHMgd2l0aCBIVE1MNSBBdWRpby5cbiAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgLy8gU3RvcCB0aGUgcHJldmlvdXMgZmFkZSBpZiBubyBzcHJpdGUgaXMgYmVpbmcgdXNlZCAob3RoZXJ3aXNlLCB2b2x1bWUgaGFuZGxlcyB0aGlzKS5cbiAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICBzZWxmLl9zdG9wRmFkZShpZHNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBXZWIgQXVkaW8sIGxldCB0aGUgbmF0aXZlIG1ldGhvZHMgZG8gdGhlIGFjdHVhbCBmYWRlLlxuICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiAhc291bmQuX211dGVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGN1cnJlbnRUaW1lICsgKGxlbiAvIDEwMDApO1xuICAgICAgICAgICAgc291bmQuX3ZvbHVtZSA9IGZyb207XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKGZyb20sIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodG8sIGVuZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fc3RhcnRGYWRlSW50ZXJ2YWwoc291bmQsIGZyb20sIHRvLCBsZW4sIGlkc1tpXSwgdHlwZW9mIGlkID09PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgaW50ZXJuYWwgaW50ZXJ2YWwgdG8gZmFkZSBhIHNvdW5kLlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gc291bmQgUmVmZXJlbmNlIHRvIHNvdW5kIHRvIGZhZGUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBmcm9tIFRoZSB2YWx1ZSB0byBmYWRlIGZyb20gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gdG8gICBUaGUgdm9sdW1lIHRvIGZhZGUgdG8gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gbGVuICBUaW1lIGluIG1pbGxpc2Vjb25kcyB0byBmYWRlLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgICBUaGUgc291bmQgaWQgdG8gZmFkZS5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpc0dyb3VwICAgSWYgdHJ1ZSwgc2V0IHRoZSB2b2x1bWUgb24gdGhlIGdyb3VwLlxuICAgICAqL1xuICAgIF9zdGFydEZhZGVJbnRlcnZhbDogZnVuY3Rpb24oc291bmQsIGZyb20sIHRvLCBsZW4sIGlkLCBpc0dyb3VwKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgdm9sID0gZnJvbTtcbiAgICAgIHZhciBkaWZmID0gdG8gLSBmcm9tO1xuICAgICAgdmFyIHN0ZXBzID0gTWF0aC5hYnMoZGlmZiAvIDAuMDEpO1xuICAgICAgdmFyIHN0ZXBMZW4gPSBNYXRoLm1heCg0LCAoc3RlcHMgPiAwKSA/IGxlbiAvIHN0ZXBzIDogbGVuKTtcbiAgICAgIHZhciBsYXN0VGljayA9IERhdGUubm93KCk7XG5cbiAgICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBiZWluZyBmYWRlZCB0by5cbiAgICAgIHNvdW5kLl9mYWRlVG8gPSB0bztcblxuICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgdmFsdWUgb24gZWFjaCBpbnRlcnZhbCB0aWNrLlxuICAgICAgc291bmQuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdm9sdW1lIGJhc2VkIG9uIHRoZSB0aW1lIHNpbmNlIHRoZSBsYXN0IHRpY2suXG4gICAgICAgIHZhciB0aWNrID0gKERhdGUubm93KCkgLSBsYXN0VGljaykgLyBsZW47XG4gICAgICAgIGxhc3RUaWNrID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdm9sICs9IGRpZmYgKiB0aWNrO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgdm9sdW1lIGlzIGluIHRoZSByaWdodCBib3VuZHMuXG4gICAgICAgIHZvbCA9IE1hdGgubWF4KDAsIHZvbCk7XG4gICAgICAgIHZvbCA9IE1hdGgubWluKDEsIHZvbCk7XG5cbiAgICAgICAgLy8gUm91bmQgdG8gd2l0aGluIDIgZGVjaW1hbCBwb2ludHMuXG4gICAgICAgIHZvbCA9IE1hdGgucm91bmQodm9sICogMTAwKSAvIDEwMDtcblxuICAgICAgICAvLyBDaGFuZ2UgdGhlIHZvbHVtZS5cbiAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgc291bmQuX3ZvbHVtZSA9IHZvbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnZvbHVtZSh2b2wsIHNvdW5kLl9pZCwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGdyb3VwJ3Mgdm9sdW1lLlxuICAgICAgICBpZiAoaXNHcm91cCkge1xuICAgICAgICAgIHNlbGYuX3ZvbHVtZSA9IHZvbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIGZhZGUgaXMgY29tcGxldGUsIHN0b3AgaXQgYW5kIGZpcmUgZXZlbnQuXG4gICAgICAgIGlmICgodG8gPCBmcm9tICYmIHZvbCA8PSB0bykgfHwgKHRvID4gZnJvbSAmJiB2b2wgPj0gdG8pKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChzb3VuZC5faW50ZXJ2YWwpO1xuICAgICAgICAgIHNvdW5kLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgc291bmQuX2ZhZGVUbyA9IG51bGw7XG4gICAgICAgICAgc2VsZi52b2x1bWUodG8sIHNvdW5kLl9pZCk7XG4gICAgICAgICAgc2VsZi5fZW1pdCgnZmFkZScsIHNvdW5kLl9pZCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHN0ZXBMZW4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBzdG9wcyB0aGUgY3VycmVudGx5IHBsYXlpbmcgZmFkZSB3aGVuXG4gICAgICogYSBuZXcgZmFkZSBzdGFydHMsIHZvbHVtZSBpcyBjaGFuZ2VkIG9yIHRoZSBzb3VuZCBpcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIGlkLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX3N0b3BGYWRlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcblxuICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9pbnRlcnZhbCkge1xuICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyhIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoc291bmQuX2ludGVydmFsKTtcbiAgICAgICAgc291bmQuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgc2VsZi52b2x1bWUoc291bmQuX2ZhZGVUbywgaWQpO1xuICAgICAgICBzb3VuZC5fZmFkZVRvID0gbnVsbDtcbiAgICAgICAgc2VsZi5fZW1pdCgnZmFkZScsIGlkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldC9zZXQgdGhlIGxvb3AgcGFyYW1ldGVyIG9uIGEgc291bmQuIFRoaXMgbWV0aG9kIGNhbiBvcHRpb25hbGx5IHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICAgKiAgIGxvb3AoKSAtPiBSZXR1cm5zIHRoZSBncm91cCdzIGxvb3AgdmFsdWUuXG4gICAgICogICBsb29wKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGxvb3AgdmFsdWUuXG4gICAgICogICBsb29wKGxvb3ApIC0+IFNldHMgdGhlIGxvb3AgdmFsdWUgZm9yIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgbG9vcChsb29wLCBpZCkgLT4gU2V0cyB0aGUgbG9vcCB2YWx1ZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9Cb29sZWFufSBSZXR1cm5zIHNlbGYgb3IgY3VycmVudCBsb29wIHZhbHVlLlxuICAgICAqL1xuICAgIGxvb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgbG9vcCwgaWQsIHNvdW5kO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBmb3IgbG9vcCBhbmQgaWQuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBncm91J3MgbG9vcCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIHNlbGYuX2xvb3A7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgbG9vcCA9IGFyZ3NbMF07XG4gICAgICAgICAgc2VsZi5fbG9vcCA9IGxvb3A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHRoaXMgc291bmQncyBsb29wIHZhbHVlLlxuICAgICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKHBhcnNlSW50KGFyZ3NbMF0sIDEwKSk7XG4gICAgICAgICAgcmV0dXJuIHNvdW5kID8gc291bmQuX2xvb3AgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBsb29wID0gYXJnc1swXTtcbiAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzFdLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGlkIGlzIHBhc3NlZCwgZ2V0IGFsbCBJRCdzIHRvIGJlIGxvb3BlZC5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgc291bmQuX2xvb3AgPSBsb29wO1xuICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiBzb3VuZC5fbm9kZSAmJiBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wID0gbG9vcDtcbiAgICAgICAgICAgIGlmIChsb29wKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wU3RhcnQgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3BFbmQgPSBzb3VuZC5fc3RvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldC9zZXQgdGhlIHBsYXliYWNrIHJhdGUgb2YgYSBzb3VuZC4gVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbHkgdGFrZSAwLCAxIG9yIDIgYXJndW1lbnRzLlxuICAgICAqICAgcmF0ZSgpIC0+IFJldHVybnMgdGhlIGZpcnN0IHNvdW5kIG5vZGUncyBjdXJyZW50IHBsYXliYWNrIHJhdGUuXG4gICAgICogICByYXRlKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS5cbiAgICAgKiAgIHJhdGUocmF0ZSkgLT4gU2V0cyB0aGUgcGxheWJhY2sgcmF0ZSBvZiBhbGwgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICAgKiAgIHJhdGUocmF0ZSwgaWQpIC0+IFNldHMgdGhlIHBsYXliYWNrIHJhdGUgb2YgcGFzc2VkIHNvdW5kIGlkLlxuICAgICAqIEByZXR1cm4ge0hvd2wvTnVtYmVyfSBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS5cbiAgICAgKi9cbiAgICByYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIHJhdGUsIGlkO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBiYXNlZCBvbiBhcmd1bWVudHMuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gV2Ugd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IHJhdGUgb2YgdGhlIGZpcnN0IG5vZGUuXG4gICAgICAgIGlkID0gc2VsZi5fc291bmRzWzBdLl9pZDtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBJRCwgYW5kIGlmIG5vdCwgYXNzdW1lIGl0IGlzIGEgbmV3IHJhdGUgdmFsdWUuXG4gICAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcygpO1xuICAgICAgICB2YXIgaW5kZXggPSBpZHMuaW5kZXhPZihhcmdzWzBdKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMF0sIDEwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYXRlID0gcGFyc2VGbG9hdChhcmdzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByYXRlID0gcGFyc2VGbG9hdChhcmdzWzBdKTtcbiAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzFdLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgcGxheWJhY2sgcmF0ZSBvciByZXR1cm4gdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICB2YXIgc291bmQ7XG4gICAgICBpZiAodHlwZW9mIHJhdGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gY2hhbmdlIHBsYXliYWNrIHJhdGUgd2hlbiBjYXBhYmxlLlxuICAgICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgICBldmVudDogJ3JhdGUnLFxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZi5yYXRlLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGdyb3VwIHJhdGUuXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2VsZi5fcmF0ZSA9IHJhdGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgb25lIG9yIGFsbCB2b2x1bWVzLlxuICAgICAgICBpZCA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgICAgICBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZFtpXSk7XG5cbiAgICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2Ygb3VyIHBvc2l0aW9uIHdoZW4gdGhlIHJhdGUgY2hhbmdlZCBhbmQgdXBkYXRlIHRoZSBwbGF5YmFja1xuICAgICAgICAgICAgLy8gc3RhcnQgcG9zaXRpb24gc28gd2UgY2FuIHByb3Blcmx5IGFkanVzdCB0aGUgc2VlayBwb3NpdGlvbiBmb3IgdGltZSBlbGFwc2VkLlxuICAgICAgICAgICAgc291bmQuX3JhdGVTZWVrID0gc2VsZi5zZWVrKGlkW2ldKTtcbiAgICAgICAgICAgIHNvdW5kLl9wbGF5U3RhcnQgPSBzZWxmLl93ZWJBdWRpbyA/IEhvd2xlci5jdHguY3VycmVudFRpbWUgOiBzb3VuZC5fcGxheVN0YXJ0O1xuICAgICAgICAgICAgc291bmQuX3JhdGUgPSByYXRlO1xuXG4gICAgICAgICAgICAvLyBDaGFuZ2UgdGhlIHBsYXliYWNrIHJhdGUuXG4gICAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUgJiYgc291bmQuX25vZGUuYnVmZmVyU291cmNlKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VmFsdWVBdFRpbWUocmF0ZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLnBsYXliYWNrUmF0ZSA9IHJhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSB0aW1lcnMuXG4gICAgICAgICAgICB2YXIgc2VlayA9IHNlbGYuc2VlayhpZFtpXSk7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoKHNlbGYuX3Nwcml0ZVtzb3VuZC5fc3ByaXRlXVswXSArIHNlbGYuX3Nwcml0ZVtzb3VuZC5fc3ByaXRlXVsxXSkgLyAxMDAwKSAtIHNlZWs7XG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IChkdXJhdGlvbiAqIDEwMDApIC8gTWF0aC5hYnMoc291bmQuX3JhdGUpO1xuXG4gICAgICAgICAgICAvLyBTdGFydCBhIG5ldyBlbmQgdGltZXIgaWYgc291bmQgaXMgYWxyZWFkeSBwbGF5aW5nLlxuICAgICAgICAgICAgaWYgKHNlbGYuX2VuZFRpbWVyc1tpZFtpXV0gfHwgIXNvdW5kLl9wYXVzZWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihpZFtpXSk7XG4gICAgICAgICAgICAgIHNlbGYuX2VuZFRpbWVyc1tpZFtpXV0gPSBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5fZW1pdCgncmF0ZScsIHNvdW5kLl9pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZCk7XG4gICAgICAgIHJldHVybiBzb3VuZCA/IHNvdW5kLl9yYXRlIDogc2VsZi5fcmF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldC9zZXQgdGhlIHNlZWsgcG9zaXRpb24gb2YgYSBzb3VuZC4gVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbHkgdGFrZSAwLCAxIG9yIDIgYXJndW1lbnRzLlxuICAgICAqICAgc2VlaygpIC0+IFJldHVybnMgdGhlIGZpcnN0IHNvdW5kIG5vZGUncyBjdXJyZW50IHNlZWsgcG9zaXRpb24uXG4gICAgICogICBzZWVrKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGN1cnJlbnQgc2VlayBwb3NpdGlvbi5cbiAgICAgKiAgIHNlZWsoc2VlaykgLT4gU2V0cyB0aGUgc2VlayBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgc291bmQgbm9kZS5cbiAgICAgKiAgIHNlZWsoc2VlaywgaWQpIC0+IFNldHMgdGhlIHNlZWsgcG9zaXRpb24gb2YgcGFzc2VkIHNvdW5kIGlkLlxuICAgICAqIEByZXR1cm4ge0hvd2wvTnVtYmVyfSBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgc2VlayBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBzZWVrOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIHNlZWssIGlkO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBiYXNlZCBvbiBhcmd1bWVudHMuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gV2Ugd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBub2RlLlxuICAgICAgICBpZCA9IHNlbGYuX3NvdW5kc1swXS5faWQ7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoaXMgaXMgYW4gSUQsIGFuZCBpZiBub3QsIGFzc3VtZSBpdCBpcyBhIG5ldyBzZWVrIHBvc2l0aW9uLlxuICAgICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gaWRzLmluZGV4T2YoYXJnc1swXSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzBdLCAxMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5fc291bmRzLmxlbmd0aCkge1xuICAgICAgICAgIGlkID0gc2VsZi5fc291bmRzWzBdLl9pZDtcbiAgICAgICAgICBzZWVrID0gcGFyc2VGbG9hdChhcmdzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzZWVrID0gcGFyc2VGbG9hdChhcmdzWzBdKTtcbiAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzFdLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIElELCBiYWlsIG91dC5cbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIHNlZWsgd2hlbiBjYXBhYmxlLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ3NlZWsnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnNlZWsuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZCk7XG5cbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlZWsgPT09ICdudW1iZXInICYmIHNlZWsgPj0gMCkge1xuICAgICAgICAgIC8vIFBhdXNlIHRoZSBzb3VuZCBhbmQgdXBkYXRlIHBvc2l0aW9uIGZvciByZXN0YXJ0aW5nIHBsYXliYWNrLlxuICAgICAgICAgIHZhciBwbGF5aW5nID0gc2VsZi5wbGF5aW5nKGlkKTtcbiAgICAgICAgICBpZiAocGxheWluZykge1xuICAgICAgICAgICAgc2VsZi5wYXVzZShpZCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTW92ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHRyYWNrIGFuZCBjYW5jZWwgdGltZXIuXG4gICAgICAgICAgc291bmQuX3NlZWsgPSBzZWVrO1xuICAgICAgICAgIHNvdW5kLl9lbmRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWQpO1xuXG4gICAgICAgICAgLy8gUmVzdGFydCB0aGUgcGxheWJhY2sgaWYgdGhlIHNvdW5kIHdhcyBwbGF5aW5nLlxuICAgICAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgICAgICBzZWxmLnBsYXkoaWQsIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc2VlayBwb3NpdGlvbiBmb3IgSFRNTDUgQXVkaW8uXG4gICAgICAgICAgaWYgKCFzZWxmLl93ZWJBdWRpbyAmJiBzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgc291bmQuX25vZGUuY3VycmVudFRpbWUgPSBzZWVrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSBwbGF5IGxvY2sgdG8gYmUgdW5zZXQgYmVmb3JlIGVtaXR0aW5nIChIVE1MNSBBdWRpbykuXG4gICAgICAgICAgaWYgKHBsYXlpbmcgJiYgIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgZW1pdFNlZWsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCFzZWxmLl9wbGF5TG9jaykge1xuICAgICAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3NlZWsnLCBpZCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChlbWl0U2VlaywgMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGVtaXRTZWVrLCAwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5fZW1pdCgnc2VlaycsIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgcmVhbFRpbWUgPSBzZWxmLnBsYXlpbmcoaWQpID8gSG93bGVyLmN0eC5jdXJyZW50VGltZSAtIHNvdW5kLl9wbGF5U3RhcnQgOiAwO1xuICAgICAgICAgICAgdmFyIHJhdGVTZWVrID0gc291bmQuX3JhdGVTZWVrID8gc291bmQuX3JhdGVTZWVrIC0gc291bmQuX3NlZWsgOiAwO1xuICAgICAgICAgICAgcmV0dXJuIHNvdW5kLl9zZWVrICsgKHJhdGVTZWVrICsgcmVhbFRpbWUgKiBNYXRoLmFicyhzb3VuZC5fcmF0ZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291bmQuX25vZGUuY3VycmVudFRpbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHNwZWNpZmljIHNvdW5kIGlzIGN1cnJlbnRseSBwbGF5aW5nIG9yIG5vdCAoaWYgaWQgaXMgcHJvdmlkZWQpLCBvciBjaGVjayBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHNvdW5kcyBpbiB0aGUgZ3JvdXAgaXMgcGxheWluZyBvciBub3QuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgaWQgVGhlIHNvdW5kIGlkIHRvIGNoZWNrLiBJZiBub25lIGlzIHBhc3NlZCwgdGhlIHdob2xlIHNvdW5kIGdyb3VwIGlzIGNoZWNrZWQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwbGF5aW5nIGFuZCBmYWxzZSBpZiBub3QuXG4gICAgICovXG4gICAgcGxheWluZzogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gQ2hlY2sgdGhlIHBhc3NlZCBzb3VuZCBJRCAoaWYgYW55KS5cbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZCk7XG4gICAgICAgIHJldHVybiBzb3VuZCA/ICFzb3VuZC5fcGF1c2VkIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgbG9vcCB0aHJvdWdoIGFsbCBzb3VuZHMgYW5kIGNoZWNrIGlmIGFueSBhcmUgcGxheWluZy5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzZWxmLl9zb3VuZHNbaV0uX3BhdXNlZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkdXJhdGlvbiBvZiB0aGlzIHNvdW5kLiBQYXNzaW5nIGEgc291bmQgaWQgd2lsbCByZXR1cm4gdGhlIHNwcml0ZSBkdXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFRoZSBzb3VuZCBpZCB0byBjaGVjay4gSWYgbm9uZSBpcyBwYXNzZWQsIHJldHVybiBmdWxsIHNvdXJjZSBkdXJhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEF1ZGlvIGR1cmF0aW9uIGluIHNlY29uZHMuXG4gICAgICovXG4gICAgZHVyYXRpb246IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZHVyYXRpb24gPSBzZWxmLl9kdXJhdGlvbjtcblxuICAgICAgLy8gSWYgd2UgcGFzcyBhbiBJRCwgZ2V0IHRoZSBzb3VuZCBhbmQgcmV0dXJuIHRoZSBzcHJpdGUgbGVuZ3RoLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBkdXJhdGlvbiA9IHNlbGYuX3Nwcml0ZVtzb3VuZC5fc3ByaXRlXVsxXSAvIDEwMDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBsb2FkZWQgc3RhdGUgb2YgdGhpcyBIb3dsLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gJ3VubG9hZGVkJywgJ2xvYWRpbmcnLCAnbG9hZGVkJ1xuICAgICAqL1xuICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5sb2FkIGFuZCBkZXN0cm95IHRoZSBjdXJyZW50IEhvd2wgb2JqZWN0LlxuICAgICAqIFRoaXMgd2lsbCBpbW1lZGlhdGVseSBzdG9wIGFsbCBzb3VuZCBpbnN0YW5jZXMgYXR0YWNoZWQgdG8gdGhpcyBncm91cC5cbiAgICAgKi9cbiAgICB1bmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBTdG9wIHBsYXlpbmcgYW55IGFjdGl2ZSBzb3VuZHMuXG4gICAgICB2YXIgc291bmRzID0gc2VsZi5fc291bmRzO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPHNvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBTdG9wIHRoZSBzb3VuZCBpZiBpdCBpcyBjdXJyZW50bHkgcGxheWluZy5cbiAgICAgICAgaWYgKCFzb3VuZHNbaV0uX3BhdXNlZCkge1xuICAgICAgICAgIHNlbGYuc3RvcChzb3VuZHNbaV0uX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIG9yIGRpc2Nvbm5lY3QuXG4gICAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAvLyBTZXQgdGhlIHNvdXJjZSB0byAwLXNlY29uZCBzaWxlbmNlIHRvIHN0b3AgYW55IGRvd25sb2FkaW5nIChleGNlcHQgaW4gSUUpLlxuICAgICAgICAgIHZhciBjaGVja0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QoSG93bGVyLl9uYXZpZ2F0b3IgJiYgSG93bGVyLl9uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgICBpZiAoIWNoZWNrSUUpIHtcbiAgICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5zcmMgPSAnZGF0YTphdWRpby93YXY7YmFzZTY0LFVrbEdSaWdBQUFCWFFWWkZabTEwSUJJQUFBQUJBQUVBUkt3QUFJaFlBUUFDQUJBQUFBQmtZWFJoQWdBQUFBRUEnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJlbW92ZSBhbnkgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHNvdW5kc1tpXS5fZXJyb3JGbiwgZmFsc2UpO1xuICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKEhvd2xlci5fY2FuUGxheUV2ZW50LCBzb3VuZHNbaV0uX2xvYWRGbiwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW1wdHkgb3V0IGFsbCBvZiB0aGUgbm9kZXMuXG4gICAgICAgIGRlbGV0ZSBzb3VuZHNbaV0uX25vZGU7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCB0aW1lcnMgYXJlIGNsZWFyZWQgb3V0LlxuICAgICAgICBzZWxmLl9jbGVhclRpbWVyKHNvdW5kc1tpXS5faWQpO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcmVmZXJlbmNlcyBpbiB0aGUgZ2xvYmFsIEhvd2xlciBvYmplY3QuXG4gICAgICAgIHZhciBpbmRleCA9IEhvd2xlci5faG93bHMuaW5kZXhPZihzZWxmKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICBIb3dsZXIuX2hvd2xzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRGVsZXRlIHRoaXMgc291bmQgZnJvbSB0aGUgY2FjaGUgKGlmIG5vIG90aGVyIEhvd2wgaXMgdXNpbmcgaXQpLlxuICAgICAgdmFyIHJlbUNhY2hlID0gdHJ1ZTtcbiAgICAgIGZvciAoaT0wOyBpPEhvd2xlci5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKEhvd2xlci5faG93bHNbaV0uX3NyYyA9PT0gc2VsZi5fc3JjKSB7XG4gICAgICAgICAgcmVtQ2FjaGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUgJiYgcmVtQ2FjaGUpIHtcbiAgICAgICAgZGVsZXRlIGNhY2hlW3NlbGYuX3NyY107XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIGdsb2JhbCBlcnJvcnMuXG4gICAgICBIb3dsZXIubm9BdWRpbyA9IGZhbHNlO1xuXG4gICAgICAvLyBDbGVhciBvdXQgYHNlbGZgLlxuICAgICAgc2VsZi5fc3RhdGUgPSAndW5sb2FkZWQnO1xuICAgICAgc2VsZi5fc291bmRzID0gW107XG4gICAgICBzZWxmID0gbnVsbDtcblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExpc3RlbiB0byBhIGN1c3RvbSBldmVudC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZXZlbnQgRXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgTGlzdGVuZXIgdG8gY2FsbC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgaWQgICAgKG9wdGlvbmFsKSBPbmx5IGxpc3RlbiB0byBldmVudHMgZm9yIHRoaXMgc291bmQuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIG9uY2UgIChJTlRFUk5BTCkgTWFya3MgZXZlbnQgdG8gZmlyZSBvbmx5IG9uY2UuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnQsIGZuLCBpZCwgb25jZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGV2ZW50cyA9IHNlbGZbJ19vbicgKyBldmVudF07XG5cbiAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZXZlbnRzLnB1c2gob25jZSA/IHtpZDogaWQsIGZuOiBmbiwgb25jZTogb25jZX0gOiB7aWQ6IGlkLCBmbjogZm59KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGN1c3RvbSBldmVudC4gQ2FsbCB3aXRob3V0IHBhcmFtZXRlcnMgdG8gcmVtb3ZlIGFsbCBldmVudHMuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIGV2ZW50IEV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgIExpc3RlbmVyIHRvIHJlbW92ZS4gTGVhdmUgZW1wdHkgdG8gcmVtb3ZlIGFsbC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgaWQgICAgKG9wdGlvbmFsKSBPbmx5IHJlbW92ZSBldmVudHMgZm9yIHRoaXMgc291bmQuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50LCBmbiwgaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBldmVudHMgPSBzZWxmWydfb24nICsgZXZlbnRdO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAvLyBBbGxvdyBwYXNzaW5nIGp1c3QgYW4gZXZlbnQgYW5kIElELlxuICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWQgPSBmbjtcbiAgICAgICAgZm4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm4gfHwgaWQpIHtcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGV2ZW50IHN0b3JlIGFuZCByZW1vdmUgdGhlIHBhc3NlZCBmdW5jdGlvbi5cbiAgICAgICAgZm9yIChpPTA7IGk8ZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGlzSWQgPSAoaWQgPT09IGV2ZW50c1tpXS5pZCk7XG4gICAgICAgICAgaWYgKGZuID09PSBldmVudHNbaV0uZm4gJiYgaXNJZCB8fCAhZm4gJiYgaXNJZCkge1xuICAgICAgICAgICAgZXZlbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChldmVudCkge1xuICAgICAgICAvLyBDbGVhciBvdXQgYWxsIGV2ZW50cyBvZiB0aGlzIHR5cGUuXG4gICAgICAgIHNlbGZbJ19vbicgKyBldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENsZWFyIG91dCBhbGwgZXZlbnRzIG9mIGV2ZXJ5IHR5cGUuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc2VsZik7XG4gICAgICAgIGZvciAoaT0wOyBpPGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoKGtleXNbaV0uaW5kZXhPZignX29uJykgPT09IDApICYmIEFycmF5LmlzQXJyYXkoc2VsZltrZXlzW2ldXSkpIHtcbiAgICAgICAgICAgIHNlbGZba2V5c1tpXV0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExpc3RlbiB0byBhIGN1c3RvbSBldmVudCBhbmQgcmVtb3ZlIGl0IG9uY2UgZmlyZWQuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIGV2ZW50IEV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgIExpc3RlbmVyIHRvIGNhbGwuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIGlkICAgIChvcHRpb25hbCkgT25seSBsaXN0ZW4gdG8gZXZlbnRzIGZvciB0aGlzIHNvdW5kLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgb25jZTogZnVuY3Rpb24oZXZlbnQsIGZuLCBpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBTZXR1cCB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAgICBzZWxmLm9uKGV2ZW50LCBmbiwgaWQsIDEpO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW1pdCBhbGwgZXZlbnRzIG9mIGEgc3BlY2lmaWMgdHlwZSBhbmQgcGFzcyB0aGUgc291bmQgaWQuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBldmVudCBFdmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgICAgU291bmQgSUQuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBtc2cgICBNZXNzYWdlIHRvIGdvIHdpdGggZXZlbnQuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfZW1pdDogZnVuY3Rpb24oZXZlbnQsIGlkLCBtc2cpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBldmVudHMgPSBzZWxmWydfb24nICsgZXZlbnRdO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggZXZlbnQgc3RvcmUgYW5kIGZpcmUgYWxsIGZ1bmN0aW9ucy5cbiAgICAgIGZvciAodmFyIGk9ZXZlbnRzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgLy8gT25seSBmaXJlIHRoZSBsaXN0ZW5lciBpZiB0aGUgY29ycmVjdCBJRCBpcyB1c2VkLlxuICAgICAgICBpZiAoIWV2ZW50c1tpXS5pZCB8fCBldmVudHNbaV0uaWQgPT09IGlkIHx8IGV2ZW50ID09PSAnbG9hZCcpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGlkLCBtc2cpO1xuICAgICAgICAgIH0uYmluZChzZWxmLCBldmVudHNbaV0uZm4pLCAwKTtcblxuICAgICAgICAgIC8vIElmIHRoaXMgZXZlbnQgd2FzIHNldHVwIHdpdGggYG9uY2VgLCByZW1vdmUgaXQuXG4gICAgICAgICAgaWYgKGV2ZW50c1tpXS5vbmNlKSB7XG4gICAgICAgICAgICBzZWxmLm9mZihldmVudCwgZXZlbnRzW2ldLmZuLCBldmVudHNbaV0uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQYXNzIHRoZSBldmVudCB0eXBlIGludG8gbG9hZCBxdWV1ZSBzbyB0aGF0IGl0IGNhbiBjb250aW51ZSBzdGVwcGluZy5cbiAgICAgIHNlbGYuX2xvYWRRdWV1ZShldmVudCk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBRdWV1ZSBvZiBhY3Rpb25zIGluaXRpYXRlZCBiZWZvcmUgdGhlIHNvdW5kIGhhcyBsb2FkZWQuXG4gICAgICogVGhlc2Ugd2lsbCBiZSBjYWxsZWQgaW4gc2VxdWVuY2UsIHdpdGggdGhlIG5leHQgb25seSBmaXJpbmdcbiAgICAgKiBhZnRlciB0aGUgcHJldmlvdXMgaGFzIGZpbmlzaGVkIGV4ZWN1dGluZyAoZXZlbiBpZiBhc3luYyBsaWtlIHBsYXkpLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX2xvYWRRdWV1ZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKHNlbGYuX3F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHRhc2sgPSBzZWxmLl9xdWV1ZVswXTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhpcyB0YXNrIGlmIGEgbWF0Y2hpbmcgZXZlbnQgd2FzIHBhc3NlZC5cbiAgICAgICAgaWYgKHRhc2suZXZlbnQgPT09IGV2ZW50KSB7XG4gICAgICAgICAgc2VsZi5fcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICBzZWxmLl9sb2FkUXVldWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biB0aGUgdGFzayBpZiBubyBldmVudCB0eXBlIGlzIHBhc3NlZC5cbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgIHRhc2suYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gcGxheWJhY2sgZW5kcyBhdCB0aGUgZW5kIG9mIHRoZSBkdXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtTb3VuZH0gc291bmQgVGhlIHNvdW5kIG9iamVjdCB0byB3b3JrIHdpdGguXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfZW5kZWQ6IGZ1bmN0aW9uKHNvdW5kKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgc3ByaXRlID0gc291bmQuX3Nwcml0ZTtcblxuICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIElFIGFuZCB0aGVyZSB3YXMgbmV0d29yayBsYXRlbmN5IHdlIG1heSBiZSBjbGlwcGluZ1xuICAgICAgLy8gYXVkaW8gYmVmb3JlIGl0IGNvbXBsZXRlcyBwbGF5aW5nLiBMZXRzIGNoZWNrIHRoZSBub2RlIHRvIG1ha2Ugc3VyZSBpdFxuICAgICAgLy8gYmVsaWV2ZXMgaXQgaGFzIGNvbXBsZXRlZCwgYmVmb3JlIGVuZGluZyB0aGUgcGxheWJhY2suXG4gICAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlICYmICFzb3VuZC5fbm9kZS5wYXVzZWQgJiYgIXNvdW5kLl9ub2RlLmVuZGVkICYmIHNvdW5kLl9ub2RlLmN1cnJlbnRUaW1lIDwgc291bmQuX3N0b3ApIHtcbiAgICAgICAgc2V0VGltZW91dChzZWxmLl9lbmRlZC5iaW5kKHNlbGYsIHNvdW5kKSwgMTAwKTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIFNob3VsZCB0aGlzIHNvdW5kIGxvb3A/XG4gICAgICB2YXIgbG9vcCA9ICEhKHNvdW5kLl9sb29wIHx8IHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzJdKTtcblxuICAgICAgLy8gRmlyZSB0aGUgZW5kZWQgZXZlbnQuXG4gICAgICBzZWxmLl9lbWl0KCdlbmQnLCBzb3VuZC5faWQpO1xuXG4gICAgICAvLyBSZXN0YXJ0IHRoZSBwbGF5YmFjayBmb3IgSFRNTDUgQXVkaW8gbG9vcC5cbiAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8gJiYgbG9vcCkge1xuICAgICAgICBzZWxmLnN0b3Aoc291bmQuX2lkLCB0cnVlKS5wbGF5KHNvdW5kLl9pZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc3RhcnQgdGhpcyB0aW1lciBpZiBvbiBhIFdlYiBBdWRpbyBsb29wLlxuICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIGxvb3ApIHtcbiAgICAgICAgc2VsZi5fZW1pdCgncGxheScsIHNvdW5kLl9pZCk7XG4gICAgICAgIHNvdW5kLl9zZWVrID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgIHNvdW5kLl9wbGF5U3RhcnQgPSBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lO1xuXG4gICAgICAgIHZhciB0aW1lb3V0ID0gKChzb3VuZC5fc3RvcCAtIHNvdW5kLl9zdGFydCkgKiAxMDAwKSAvIE1hdGguYWJzKHNvdW5kLl9yYXRlKTtcbiAgICAgICAgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0gPSBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCB0aW1lb3V0KTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFyayB0aGUgbm9kZSBhcyBwYXVzZWQuXG4gICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgIWxvb3ApIHtcbiAgICAgICAgc291bmQuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgIHNvdW5kLl9lbmRlZCA9IHRydWU7XG4gICAgICAgIHNvdW5kLl9zZWVrID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoc291bmQuX2lkKTtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0aGUgYnVmZmVyIHNvdXJjZS5cbiAgICAgICAgc2VsZi5fY2xlYW5CdWZmZXIoc291bmQuX25vZGUpO1xuXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gYXV0by1zdXNwZW5kIEF1ZGlvQ29udGV4dCBpZiBubyBzb3VuZHMgYXJlIHN0aWxsIHBsYXlpbmcuXG4gICAgICAgIEhvd2xlci5fYXV0b1N1c3BlbmQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2hlbiB1c2luZyBhIHNwcml0ZSwgZW5kIHRoZSB0cmFjay5cbiAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8gJiYgIWxvb3ApIHtcbiAgICAgICAgc2VsZi5zdG9wKHNvdW5kLl9pZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgZW5kIHRpbWVyIGZvciBhIHNvdW5kIHBsYXliYWNrLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIElELlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX2NsZWFyVGltZXI6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmIChzZWxmLl9lbmRUaW1lcnNbaWRdKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSB0aW1lb3V0IG9yIHJlbW92ZSB0aGUgZW5kZWQgbGlzdGVuZXIuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5fZW5kVGltZXJzW2lkXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLl9lbmRUaW1lcnNbaWRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWQpO1xuICAgICAgICAgIGlmIChzb3VuZCAmJiBzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgc291bmQuX25vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBzZWxmLl9lbmRUaW1lcnNbaWRdLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHNlbGYuX2VuZFRpbWVyc1tpZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHNvdW5kIGlkZW50aWZpZWQgYnkgdGhpcyBJRCwgb3IgcmV0dXJuIG51bGwuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCBTb3VuZCBJRFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gICAgU291bmQgb2JqZWN0IG9yIG51bGwuXG4gICAgICovXG4gICAgX3NvdW5kQnlJZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBzb3VuZHMgYW5kIGZpbmQgdGhlIG9uZSB3aXRoIHRoaXMgSUQuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpZCA9PT0gc2VsZi5fc291bmRzW2ldLl9pZCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLl9zb3VuZHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbiBpbmFjdGl2ZSBzb3VuZCBmcm9tIHRoZSBwb29sIG9yIGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgICogQHJldHVybiB7U291bmR9IFNvdW5kIHBsYXliYWNrIG9iamVjdC5cbiAgICAgKi9cbiAgICBfaW5hY3RpdmVTb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYuX2RyYWluKCk7XG5cbiAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGluYWN0aXZlIG5vZGUgdG8gcmVjeWNsZS5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNlbGYuX3NvdW5kc1tpXS5fZW5kZWQpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5fc291bmRzW2ldLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gaW5hY3RpdmUgbm9kZSB3YXMgZm91bmQsIGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgICByZXR1cm4gbmV3IFNvdW5kKHNlbGYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmFpbiBleGNlc3MgaW5hY3RpdmUgc291bmRzIGZyb20gdGhlIHBvb2wuXG4gICAgICovXG4gICAgX2RyYWluOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBsaW1pdCA9IHNlbGYuX3Bvb2w7XG4gICAgICB2YXIgY250ID0gMDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgLy8gSWYgdGhlcmUgYXJlIGxlc3Mgc291bmRzIHRoYW4gdGhlIG1heCBwb29sIHNpemUsIHdlIGFyZSBkb25lLlxuICAgICAgaWYgKHNlbGYuX3NvdW5kcy5sZW5ndGggPCBsaW1pdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgaW5hY3RpdmUgc291bmRzLlxuICAgICAgZm9yIChpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzZWxmLl9zb3VuZHNbaV0uX2VuZGVkKSB7XG4gICAgICAgICAgY250Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGV4Y2VzcyBpbmFjdGl2ZSBzb3VuZHMsIGdvaW5nIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICBmb3IgKGk9c2VsZi5fc291bmRzLmxlbmd0aCAtIDE7IGk+PTA7IGktLSkge1xuICAgICAgICBpZiAoY250IDw9IGxpbWl0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuX3NvdW5kc1tpXS5fZW5kZWQpIHtcbiAgICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBhdWRpbyBzb3VyY2Ugd2hlbiB1c2luZyBXZWIgQXVkaW8uXG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNlbGYuX3NvdW5kc1tpXS5fbm9kZSkge1xuICAgICAgICAgICAgc2VsZi5fc291bmRzW2ldLl9ub2RlLmRpc2Nvbm5lY3QoMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmVtb3ZlIHNvdW5kcyB1bnRpbCB3ZSBoYXZlIHRoZSBwb29sIHNpemUuXG4gICAgICAgICAgc2VsZi5fc291bmRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBjbnQtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIElEJ3MgZnJvbSB0aGUgc291bmRzIHBvb2wuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCBPbmx5IHJldHVybiBvbmUgSUQgaWYgb25lIGlzIHBhc3NlZC5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gICAgQXJyYXkgb2YgSURzLlxuICAgICAqL1xuICAgIF9nZXRTb3VuZElkczogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGlkcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWRzLnB1c2goc2VsZi5fc291bmRzW2ldLl9pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtpZF07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIHNvdW5kIGJhY2sgaW50byB0aGUgYnVmZmVyIHNvdXJjZS5cbiAgICAgKiBAcGFyYW0gIHtTb3VuZH0gc291bmQgVGhlIHNvdW5kIG9iamVjdCB0byB3b3JrIHdpdGguXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfcmVmcmVzaEJ1ZmZlcjogZnVuY3Rpb24oc291bmQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gU2V0dXAgdGhlIGJ1ZmZlciBzb3VyY2UgZm9yIHBsYXliYWNrLlxuICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlID0gSG93bGVyLmN0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5idWZmZXIgPSBjYWNoZVtzZWxmLl9zcmNdO1xuXG4gICAgICAvLyBDb25uZWN0IHRvIHRoZSBjb3JyZWN0IG5vZGUuXG4gICAgICBpZiAoc291bmQuX3Bhbm5lcikge1xuICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UuY29ubmVjdChzb3VuZC5fcGFubmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5jb25uZWN0KHNvdW5kLl9ub2RlKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0dXAgbG9vcGluZyBhbmQgcGxheWJhY2sgcmF0ZS5cbiAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wID0gc291bmQuX2xvb3A7XG4gICAgICBpZiAoc291bmQuX2xvb3ApIHtcbiAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3BTdGFydCA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UubG9vcEVuZCA9IHNvdW5kLl9zdG9wO1xuICAgICAgfVxuICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZShzb3VuZC5fcmF0ZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IG1lbW9yeSBsZWFrcyBieSBjbGVhbmluZyB1cCB0aGUgYnVmZmVyIHNvdXJjZSBhZnRlciBwbGF5YmFjay5cbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG5vZGUgU291bmQncyBhdWRpbyBub2RlIGNvbnRhaW5pbmcgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfY2xlYW5CdWZmZXI6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKEhvd2xlci5fc2NyYXRjaEJ1ZmZlcikge1xuICAgICAgICBub2RlLmJ1ZmZlclNvdXJjZS5vbmVuZGVkID0gbnVsbDtcbiAgICAgICAgbm9kZS5idWZmZXJTb3VyY2UuZGlzY29ubmVjdCgwKTtcbiAgICAgICAgdHJ5IHsgbm9kZS5idWZmZXJTb3VyY2UuYnVmZmVyID0gSG93bGVyLl9zY3JhdGNoQnVmZmVyOyB9IGNhdGNoKGUpIHt9XG4gICAgICB9XG4gICAgICBub2RlLmJ1ZmZlclNvdXJjZSA9IG51bGw7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgfTtcblxuICAvKiogU2luZ2xlIFNvdW5kIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSBzb3VuZCBvYmplY3QsIHdoaWNoIGVhY2ggbm9kZSBhdHRhY2hlZCB0byBhIEhvd2wgZ3JvdXAgaXMgY29udGFpbmVkIGluLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaG93bCBUaGUgSG93bCBwYXJlbnQgZ3JvdXAuXG4gICAqL1xuICB2YXIgU291bmQgPSBmdW5jdGlvbihob3dsKSB7XG4gICAgdGhpcy5fcGFyZW50ID0gaG93bDtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcbiAgU291bmQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgYSBuZXcgU291bmQgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge1NvdW5kfVxuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gU2V0dXAgdGhlIGRlZmF1bHQgcGFyYW1ldGVycy5cbiAgICAgIHNlbGYuX211dGVkID0gcGFyZW50Ll9tdXRlZDtcbiAgICAgIHNlbGYuX2xvb3AgPSBwYXJlbnQuX2xvb3A7XG4gICAgICBzZWxmLl92b2x1bWUgPSBwYXJlbnQuX3ZvbHVtZTtcbiAgICAgIHNlbGYuX3JhdGUgPSBwYXJlbnQuX3JhdGU7XG4gICAgICBzZWxmLl9zZWVrID0gMDtcbiAgICAgIHNlbGYuX3BhdXNlZCA9IHRydWU7XG4gICAgICBzZWxmLl9lbmRlZCA9IHRydWU7XG4gICAgICBzZWxmLl9zcHJpdGUgPSAnX19kZWZhdWx0JztcblxuICAgICAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgSUQgZm9yIHRoaXMgc291bmQuXG4gICAgICBzZWxmLl9pZCA9ICsrSG93bGVyLl9jb3VudGVyO1xuXG4gICAgICAvLyBBZGQgaXRzZWxmIHRvIHRoZSBwYXJlbnQncyBwb29sLlxuICAgICAgcGFyZW50Ll9zb3VuZHMucHVzaChzZWxmKTtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSBuZXcgbm9kZS5cbiAgICAgIHNlbGYuY3JlYXRlKCk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHNldHVwIGEgbmV3IHNvdW5kIG9iamVjdCwgd2hldGhlciBIVE1MNSBBdWRpbyBvciBXZWIgQXVkaW8uXG4gICAgICogQHJldHVybiB7U291bmR9XG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJlbnQgPSBzZWxmLl9wYXJlbnQ7XG4gICAgICB2YXIgdm9sdW1lID0gKEhvd2xlci5fbXV0ZWQgfHwgc2VsZi5fbXV0ZWQgfHwgc2VsZi5fcGFyZW50Ll9tdXRlZCkgPyAwIDogc2VsZi5fdm9sdW1lO1xuXG4gICAgICBpZiAocGFyZW50Ll93ZWJBdWRpbykge1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGdhaW4gbm9kZSBmb3IgY29udHJvbGxpbmcgdm9sdW1lICh0aGUgc291cmNlIHdpbGwgY29ubmVjdCB0byB0aGlzKS5cbiAgICAgICAgc2VsZi5fbm9kZSA9ICh0eXBlb2YgSG93bGVyLmN0eC5jcmVhdGVHYWluID09PSAndW5kZWZpbmVkJykgPyBIb3dsZXIuY3R4LmNyZWF0ZUdhaW5Ob2RlKCkgOiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgc2VsZi5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbHVtZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIHNlbGYuX25vZGUucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5fbm9kZS5jb25uZWN0KEhvd2xlci5tYXN0ZXJHYWluKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX25vZGUgPSBuZXcgQXVkaW8oKTtcblxuICAgICAgICAvLyBMaXN0ZW4gZm9yIGVycm9ycyAoaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy1hdXRob3Itdmlldy9zcGVjLmh0bWwjbWVkaWFlcnJvcikuXG4gICAgICAgIHNlbGYuX2Vycm9yRm4gPSBzZWxmLl9lcnJvckxpc3RlbmVyLmJpbmQoc2VsZik7XG4gICAgICAgIHNlbGYuX25vZGUuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBzZWxmLl9lcnJvckZuLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciAnY2FucGxheXRocm91Z2gnIGV2ZW50IHRvIGxldCB1cyBrbm93IHRoZSBzb3VuZCBpcyByZWFkeS5cbiAgICAgICAgc2VsZi5fbG9hZEZuID0gc2VsZi5fbG9hZExpc3RlbmVyLmJpbmQoc2VsZik7XG4gICAgICAgIHNlbGYuX25vZGUuYWRkRXZlbnRMaXN0ZW5lcihIb3dsZXIuX2NhblBsYXlFdmVudCwgc2VsZi5fbG9hZEZuLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gU2V0dXAgdGhlIG5ldyBhdWRpbyBub2RlLlxuICAgICAgICBzZWxmLl9ub2RlLnNyYyA9IHBhcmVudC5fc3JjO1xuICAgICAgICBzZWxmLl9ub2RlLnByZWxvYWQgPSAnYXV0byc7XG4gICAgICAgIHNlbGYuX25vZGUudm9sdW1lID0gdm9sdW1lICogSG93bGVyLnZvbHVtZSgpO1xuXG4gICAgICAgIC8vIEJlZ2luIGxvYWRpbmcgdGhlIHNvdXJjZS5cbiAgICAgICAgc2VsZi5fbm9kZS5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgcGFyYW1ldGVycyBvZiB0aGlzIHNvdW5kIHRvIHRoZSBvcmlnaW5hbCBzdGF0ZSAoZm9yIHJlY3ljbGUpLlxuICAgICAqIEByZXR1cm4ge1NvdW5kfVxuICAgICAqL1xuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJlbnQgPSBzZWxmLl9wYXJlbnQ7XG5cbiAgICAgIC8vIFJlc2V0IGFsbCBvZiB0aGUgcGFyYW1ldGVycyBvZiB0aGlzIHNvdW5kLlxuICAgICAgc2VsZi5fbXV0ZWQgPSBwYXJlbnQuX211dGVkO1xuICAgICAgc2VsZi5fbG9vcCA9IHBhcmVudC5fbG9vcDtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IHBhcmVudC5fdm9sdW1lO1xuICAgICAgc2VsZi5fcmF0ZSA9IHBhcmVudC5fcmF0ZTtcbiAgICAgIHNlbGYuX3NlZWsgPSAwO1xuICAgICAgc2VsZi5fcmF0ZVNlZWsgPSAwO1xuICAgICAgc2VsZi5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX3Nwcml0ZSA9ICdfX2RlZmF1bHQnO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBzbyB0aGF0IGl0IGlzbid0IGNvbmZ1c2VkIHdpdGggdGhlIHByZXZpb3VzIHNvdW5kLlxuICAgICAgc2VsZi5faWQgPSArK0hvd2xlci5fY291bnRlcjtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhUTUw1IEF1ZGlvIGVycm9yIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIF9lcnJvckxpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gRmlyZSBhbiBlcnJvciBldmVudCBhbmQgcGFzcyBiYWNrIHRoZSBjb2RlLlxuICAgICAgc2VsZi5fcGFyZW50Ll9lbWl0KCdsb2FkZXJyb3InLCBzZWxmLl9pZCwgc2VsZi5fbm9kZS5lcnJvciA/IHNlbGYuX25vZGUuZXJyb3IuY29kZSA6IDApO1xuXG4gICAgICAvLyBDbGVhciB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAgICBzZWxmLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgc2VsZi5fZXJyb3JGbiwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIVE1MNSBBdWRpbyBjYW5wbGF5dGhyb3VnaCBsaXN0ZW5lciBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBfbG9hZExpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJlbnQgPSBzZWxmLl9wYXJlbnQ7XG5cbiAgICAgIC8vIFJvdW5kIHVwIHRoZSBkdXJhdGlvbiB0byBhY2NvdW50IGZvciB0aGUgbG93ZXIgcHJlY2lzaW9uIGluIEhUTUw1IEF1ZGlvLlxuICAgICAgcGFyZW50Ll9kdXJhdGlvbiA9IE1hdGguY2VpbChzZWxmLl9ub2RlLmR1cmF0aW9uICogMTApIC8gMTA7XG5cbiAgICAgIC8vIFNldHVwIGEgc3ByaXRlIGlmIG5vbmUgaXMgZGVmaW5lZC5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhwYXJlbnQuX3Nwcml0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHBhcmVudC5fc3ByaXRlID0ge19fZGVmYXVsdDogWzAsIHBhcmVudC5fZHVyYXRpb24gKiAxMDAwXX07XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICBwYXJlbnQuX3N0YXRlID0gJ2xvYWRlZCc7XG4gICAgICAgIHBhcmVudC5fZW1pdCgnbG9hZCcpO1xuICAgICAgICBwYXJlbnQuX2xvYWRRdWV1ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhciB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAgICBzZWxmLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIHNlbGYuX2xvYWRGbiwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICAvKiogSGVscGVyIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgdmFyIGNhY2hlID0ge307XG5cbiAgLyoqXG4gICAqIEJ1ZmZlciBhIHNvdW5kIGZyb20gVVJMLCBEYXRhIFVSSSBvciBjYWNoZSBhbmQgZGVjb2RlIHRvIGF1ZGlvIHNvdXJjZSAoV2ViIEF1ZGlvIEFQSSkuXG4gICAqIEBwYXJhbSAge0hvd2x9IHNlbGZcbiAgICovXG4gIHZhciBsb2FkQnVmZmVyID0gZnVuY3Rpb24oc2VsZikge1xuICAgIHZhciB1cmwgPSBzZWxmLl9zcmM7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgYnVmZmVyIGhhcyBhbHJlYWR5IGJlZW4gY2FjaGVkIGFuZCB1c2UgaXQgaW5zdGVhZC5cbiAgICBpZiAoY2FjaGVbdXJsXSkge1xuICAgICAgLy8gU2V0IHRoZSBkdXJhdGlvbiBmcm9tIHRoZSBjYWNoZS5cbiAgICAgIHNlbGYuX2R1cmF0aW9uID0gY2FjaGVbdXJsXS5kdXJhdGlvbjtcblxuICAgICAgLy8gTG9hZCB0aGUgc291bmQgaW50byB0aGlzIEhvd2wuXG4gICAgICBsb2FkU291bmQoc2VsZik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoL15kYXRhOlteO10rO2Jhc2U2NCwvLnRlc3QodXJsKSkge1xuICAgICAgLy8gRGVjb2RlIHRoZSBiYXNlNjQgZGF0YSBVUkkgd2l0aG91dCBYSFIsIHNpbmNlIHNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgIHZhciBkYXRhID0gYXRvYih1cmwuc3BsaXQoJywnKVsxXSk7XG4gICAgICB2YXIgZGF0YVZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8ZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICBkYXRhVmlld1tpXSA9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgICAgIH1cblxuICAgICAgZGVjb2RlQXVkaW9EYXRhKGRhdGFWaWV3LmJ1ZmZlciwgc2VsZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExvYWQgdGhlIGJ1ZmZlciBmcm9tIHRoZSBVUkwuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBzZWxmLl94aHJXaXRoQ3JlZGVudGlhbHM7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGdldCBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgYmFjay5cbiAgICAgICAgdmFyIGNvZGUgPSAoeGhyLnN0YXR1cyArICcnKVswXTtcbiAgICAgICAgaWYgKGNvZGUgIT09ICcwJyAmJiBjb2RlICE9PSAnMicgJiYgY29kZSAhPT0gJzMnKSB7XG4gICAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ0ZhaWxlZCBsb2FkaW5nIGF1ZGlvIGZpbGUgd2l0aCBzdGF0dXM6ICcgKyB4aHIuc3RhdHVzICsgJy4nKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWNvZGVBdWRpb0RhdGEoeGhyLnJlc3BvbnNlLCBzZWxmKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciwgc3dpdGNoIHRvIEhUTUw1IEF1ZGlvLlxuICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICBzZWxmLl9odG1sNSA9IHRydWU7XG4gICAgICAgICAgc2VsZi5fd2ViQXVkaW8gPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLl9zb3VuZHMgPSBbXTtcbiAgICAgICAgICBkZWxldGUgY2FjaGVbdXJsXTtcbiAgICAgICAgICBzZWxmLmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHNhZmVYaHJTZW5kKHhocik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZW5kIHRoZSBYSFIgcmVxdWVzdCB3cmFwcGVkIGluIGEgdHJ5L2NhdGNoLlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHhociBYSFIgdG8gc2VuZC5cbiAgICovXG4gIHZhciBzYWZlWGhyU2VuZCA9IGZ1bmN0aW9uKHhocikge1xuICAgIHRyeSB7XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHhoci5vbmVycm9yKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGUgYXVkaW8gZGF0YSBmcm9tIGFuIGFycmF5IGJ1ZmZlci5cbiAgICogQHBhcmFtICB7QXJyYXlCdWZmZXJ9IGFycmF5YnVmZmVyIFRoZSBhdWRpbyBkYXRhLlxuICAgKiBAcGFyYW0gIHtIb3dsfSAgICAgICAgc2VsZlxuICAgKi9cbiAgdmFyIGRlY29kZUF1ZGlvRGF0YSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzZWxmKSB7XG4gICAgLy8gRGVjb2RlIHRoZSBidWZmZXIgaW50byBhbiBhdWRpbyBzb3VyY2UuXG4gICAgSG93bGVyLmN0eC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlidWZmZXIsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgaWYgKGJ1ZmZlciAmJiBzZWxmLl9zb3VuZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjYWNoZVtzZWxmLl9zcmNdID0gYnVmZmVyO1xuICAgICAgICBsb2FkU291bmQoc2VsZiwgYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuX2VtaXQoJ2xvYWRlcnJvcicsIG51bGwsICdEZWNvZGluZyBhdWRpbyBkYXRhIGZhaWxlZC4nKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU291bmQgaXMgbm93IGxvYWRlZCwgc28gZmluaXNoIHNldHRpbmcgZXZlcnl0aGluZyB1cCBhbmQgZmlyZSB0aGUgbG9hZGVkIGV2ZW50LlxuICAgKiBAcGFyYW0gIHtIb3dsfSBzZWxmXG4gICAqIEBwYXJhbSAge09iamVjdH0gYnVmZmVyIFRoZSBkZWNvZGVkIGJ1ZmZlciBzb3VuZCBzb3VyY2UuXG4gICAqL1xuICB2YXIgbG9hZFNvdW5kID0gZnVuY3Rpb24oc2VsZiwgYnVmZmVyKSB7XG4gICAgLy8gU2V0IHRoZSBkdXJhdGlvbi5cbiAgICBpZiAoYnVmZmVyICYmICFzZWxmLl9kdXJhdGlvbikge1xuICAgICAgc2VsZi5fZHVyYXRpb24gPSBidWZmZXIuZHVyYXRpb247XG4gICAgfVxuXG4gICAgLy8gU2V0dXAgYSBzcHJpdGUgaWYgbm9uZSBpcyBkZWZpbmVkLlxuICAgIGlmIChPYmplY3Qua2V5cyhzZWxmLl9zcHJpdGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fc3ByaXRlID0ge19fZGVmYXVsdDogWzAsIHNlbGYuX2R1cmF0aW9uICogMTAwMF19O1xuICAgIH1cblxuICAgIC8vIEZpcmUgdGhlIGxvYWRlZCBldmVudC5cbiAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICBzZWxmLl9zdGF0ZSA9ICdsb2FkZWQnO1xuICAgICAgc2VsZi5fZW1pdCgnbG9hZCcpO1xuICAgICAgc2VsZi5fbG9hZFF1ZXVlKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXR1cCB0aGUgYXVkaW8gY29udGV4dCB3aGVuIGF2YWlsYWJsZSwgb3Igc3dpdGNoIHRvIEhUTUw1IEF1ZGlvIG1vZGUuXG4gICAqL1xuICB2YXIgc2V0dXBBdWRpb0NvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBDaGVjayBpZiB3ZSBhcmUgdXNpbmcgV2ViIEF1ZGlvIGFuZCBzZXR1cCB0aGUgQXVkaW9Db250ZXh0IGlmIHdlIGFyZS5cbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBBdWRpb0NvbnRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIEhvd2xlci5jdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3ZWJraXRBdWRpb0NvbnRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIEhvd2xlci5jdHggPSBuZXcgd2Via2l0QXVkaW9Db250ZXh0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBIb3dsZXIudXNpbmdXZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgSG93bGVyLnVzaW5nV2ViQXVkaW8gPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBhIHdlYnZpZXcgaXMgYmVpbmcgdXNlZCBvbiBpT1M4IG9yIGVhcmxpZXIgKHJhdGhlciB0aGFuIHRoZSBicm93c2VyKS5cbiAgICAvLyBJZiBpdCBpcywgZGlzYWJsZSBXZWIgQXVkaW8gYXMgaXQgY2F1c2VzIGNyYXNoaW5nLlxuICAgIHZhciBpT1MgPSAoL2lQKGhvbmV8b2R8YWQpLy50ZXN0KEhvd2xlci5fbmF2aWdhdG9yICYmIEhvd2xlci5fbmF2aWdhdG9yLnBsYXRmb3JtKSk7XG4gICAgdmFyIGFwcFZlcnNpb24gPSBIb3dsZXIuX25hdmlnYXRvciAmJiBIb3dsZXIuX25hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspXz8oXFxkKyk/Lyk7XG4gICAgdmFyIHZlcnNpb24gPSBhcHBWZXJzaW9uID8gcGFyc2VJbnQoYXBwVmVyc2lvblsxXSwgMTApIDogbnVsbDtcbiAgICBpZiAoaU9TICYmIHZlcnNpb24gJiYgdmVyc2lvbiA8IDkpIHtcbiAgICAgIHZhciBzYWZhcmkgPSAvc2FmYXJpLy50ZXN0KEhvd2xlci5fbmF2aWdhdG9yICYmIEhvd2xlci5fbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmIChIb3dsZXIuX25hdmlnYXRvciAmJiBIb3dsZXIuX25hdmlnYXRvci5zdGFuZGFsb25lICYmICFzYWZhcmkgfHwgSG93bGVyLl9uYXZpZ2F0b3IgJiYgIUhvd2xlci5fbmF2aWdhdG9yLnN0YW5kYWxvbmUgJiYgIXNhZmFyaSkge1xuICAgICAgICBIb3dsZXIudXNpbmdXZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhbmQgZXhwb3NlIHRoZSBtYXN0ZXIgR2Fpbk5vZGUgd2hlbiB1c2luZyBXZWIgQXVkaW8gKHVzZWZ1bCBmb3IgcGx1Z2lucyBvciBhZHZhbmNlZCB1c2FnZSkuXG4gICAgaWYgKEhvd2xlci51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICBIb3dsZXIubWFzdGVyR2FpbiA9ICh0eXBlb2YgSG93bGVyLmN0eC5jcmVhdGVHYWluID09PSAndW5kZWZpbmVkJykgPyBIb3dsZXIuY3R4LmNyZWF0ZUdhaW5Ob2RlKCkgOiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4oKTtcbiAgICAgIEhvd2xlci5tYXN0ZXJHYWluLmdhaW4uc2V0VmFsdWVBdFRpbWUoSG93bGVyLl9tdXRlZCA/IDAgOiAxLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgIEhvd2xlci5tYXN0ZXJHYWluLmNvbm5lY3QoSG93bGVyLmN0eC5kZXN0aW5hdGlvbik7XG4gICAgfVxuXG4gICAgLy8gUmUtcnVuIHRoZSBzZXR1cCBvbiBIb3dsZXIuXG4gICAgSG93bGVyLl9zZXR1cCgpO1xuICB9O1xuXG4gIC8vIEFkZCBzdXBwb3J0IGZvciBBTUQgKEFzeW5jaHJvbm91cyBNb2R1bGUgRGVmaW5pdGlvbikgbGlicmFyaWVzIHN1Y2ggYXMgcmVxdWlyZS5qcy5cbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBIb3dsZXI6IEhvd2xlcixcbiAgICAgICAgSG93bDogSG93bFxuICAgICAgfTtcbiAgICB9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9XG5cbiAgLy8gQWRkIHN1cHBvcnQgZm9yIENvbW1vbkpTIGxpYnJhcmllcyBzdWNoIGFzIGJyb3dzZXJpZnkuXG4gIGlmICh0cnVlKSB7XG4gICAgZXhwb3J0cy5Ib3dsZXIgPSBIb3dsZXI7XG4gICAgZXhwb3J0cy5Ib3dsID0gSG93bDtcbiAgfVxuXG4gIC8vIERlZmluZSBnbG9iYWxseSBpbiBjYXNlIEFNRCBpcyBub3QgYXZhaWxhYmxlIG9yIHVudXNlZC5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93Lkhvd2xlckdsb2JhbCA9IEhvd2xlckdsb2JhbDtcbiAgICB3aW5kb3cuSG93bGVyID0gSG93bGVyO1xuICAgIHdpbmRvdy5Ib3dsID0gSG93bDtcbiAgICB3aW5kb3cuU291bmQgPSBTb3VuZDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyAvLyBBZGQgdG8gZ2xvYmFsIGluIE5vZGUuanMgKGZvciB0ZXN0aW5nLCBldGMpLlxuICAgIGdsb2JhbC5Ib3dsZXJHbG9iYWwgPSBIb3dsZXJHbG9iYWw7XG4gICAgZ2xvYmFsLkhvd2xlciA9IEhvd2xlcjtcbiAgICBnbG9iYWwuSG93bCA9IEhvd2w7XG4gICAgZ2xvYmFsLlNvdW5kID0gU291bmQ7XG4gIH1cbn0pKCk7XG5cblxuLyohXG4gKiAgU3BhdGlhbCBQbHVnaW4gLSBBZGRzIHN1cHBvcnQgZm9yIHN0ZXJlbyBhbmQgM0QgYXVkaW8gd2hlcmUgV2ViIEF1ZGlvIGlzIHN1cHBvcnRlZC5cbiAqICBcbiAqICBob3dsZXIuanMgdjIuMC4xMlxuICogIGhvd2xlcmpzLmNvbVxuICpcbiAqICAoYykgMjAxMy0yMDE4LCBKYW1lcyBTaW1wc29uIG9mIEdvbGRGaXJlIFN0dWRpb3NcbiAqICBnb2xkZmlyZXN0dWRpb3MuY29tXG4gKlxuICogIE1JVCBMaWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTZXR1cCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUuX3BvcyA9IFswLCAwLCAwXTtcbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZS5fb3JpZW50YXRpb24gPSBbMCwgMCwgLTEsIDAsIDEsIDBdO1xuXG4gIC8qKiBHbG9iYWwgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0byB1cGRhdGUgdGhlIHN0ZXJlbyBwYW5uaW5nIHBvc2l0aW9uIG9mIGFsbCBjdXJyZW50IEhvd2xzLlxuICAgKiBGdXR1cmUgSG93bHMgd2lsbCBub3QgdXNlIHRoaXMgdmFsdWUgdW5sZXNzIGV4cGxpY2l0bHkgc2V0LlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHBhbiBBIHZhbHVlIG9mIC0xLjAgaXMgYWxsIHRoZSB3YXkgbGVmdCBhbmQgMS4wIGlzIGFsbCB0aGUgd2F5IHJpZ2h0LlxuICAgKiBAcmV0dXJuIHtIb3dsZXIvTnVtYmVyfSAgICAgU2VsZiBvciBjdXJyZW50IHN0ZXJlbyBwYW5uaW5nIHZhbHVlLlxuICAgKi9cbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZS5zdGVyZW8gPSBmdW5jdGlvbihwYW4pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuY3R4IHx8ICFzZWxmLmN0eC5saXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBIb3dscyBhbmQgdXBkYXRlIHRoZWlyIHN0ZXJlbyBwYW5uaW5nLlxuICAgIGZvciAodmFyIGk9c2VsZi5faG93bHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgc2VsZi5faG93bHNbaV0uc3RlcmVvKHBhbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBsaXN0ZW5lciBpbiAzRCBjYXJ0ZXNpYW4gc3BhY2UuIFNvdW5kcyB1c2luZ1xuICAgKiAzRCBwb3NpdGlvbiB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoZSBsaXN0ZW5lcidzIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHggVGhlIHgtcG9zaXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHkgVGhlIHktcG9zaXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHogVGhlIHotcG9zaXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHtIb3dsZXIvQXJyYXl9ICAgU2VsZiBvciBjdXJyZW50IGxpc3RlbmVyIHBvc2l0aW9uLlxuICAgKi9cbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZS5wb3MgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLmN0eCB8fCAhc2VsZi5jdHgubGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdHMgZm9yIG9wdGlvbmFsICd5JyAmICd6Jy5cbiAgICB5ID0gKHR5cGVvZiB5ICE9PSAnbnVtYmVyJykgPyBzZWxmLl9wb3NbMV0gOiB5O1xuICAgIHogPSAodHlwZW9mIHogIT09ICdudW1iZXInKSA/IHNlbGYuX3Bvc1syXSA6IHo7XG5cbiAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICBzZWxmLl9wb3MgPSBbeCwgeSwgel07XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZi5jdHgubGlzdGVuZXIucG9zaXRpb25YICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5wb3NpdGlvblguc2V0VGFyZ2V0QXRUaW1lKHNlbGYuX3Bvc1swXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIucG9zaXRpb25ZLnNldFRhcmdldEF0VGltZShzZWxmLl9wb3NbMV0sIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnBvc2l0aW9uWi5zZXRUYXJnZXRBdFRpbWUoc2VsZi5fcG9zWzJdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIuc2V0UG9zaXRpb24oc2VsZi5fcG9zWzBdLCBzZWxmLl9wb3NbMV0sIHNlbGYuX3Bvc1syXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzZWxmLl9wb3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgdGhlIGRpcmVjdGlvbiB0aGUgbGlzdGVuZXIgaXMgcG9pbnRpbmcgaW4gdGhlIDNEIGNhcnRlc2lhbiBzcGFjZS5cbiAgICogQSBmcm9udCBhbmQgdXAgdmVjdG9yIG11c3QgYmUgcHJvdmlkZWQuIFRoZSBmcm9udCBpcyB0aGUgZGlyZWN0aW9uIHRoZVxuICAgKiBmYWNlIG9mIHRoZSBsaXN0ZW5lciBpcyBwb2ludGluZywgYW5kIHVwIGlzIHRoZSBkaXJlY3Rpb24gdGhlIHRvcCBvZiB0aGVcbiAgICogbGlzdGVuZXIgaXMgcG9pbnRpbmcuIFRodXMsIHRoZXNlIHZhbHVlcyBhcmUgZXhwZWN0ZWQgdG8gYmUgYXQgcmlnaHQgYW5nbGVzXG4gICAqIGZyb20gZWFjaCBvdGhlci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB4ICAgVGhlIHgtb3JpZW50YXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICBUaGUgeS1vcmllbnRhdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geiAgIFRoZSB6LW9yaWVudGF0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB4VXAgVGhlIHgtb3JpZW50YXRpb24gb2YgdGhlIHRvcCBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geVVwIFRoZSB5LW9yaWVudGF0aW9uIG9mIHRoZSB0b3Agb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHpVcCBUaGUgei1vcmllbnRhdGlvbiBvZiB0aGUgdG9wIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7SG93bGVyL0FycmF5fSAgICAgUmV0dXJucyBzZWxmIG9yIHRoZSBjdXJyZW50IG9yaWVudGF0aW9uIHZlY3RvcnMuXG4gICAqL1xuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlLm9yaWVudGF0aW9uID0gZnVuY3Rpb24oeCwgeSwgeiwgeFVwLCB5VXAsIHpVcCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5jdHggfHwgIXNlbGYuY3R4Lmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHRzIGZvciBvcHRpb25hbCAneScgJiAneicuXG4gICAgdmFyIG9yID0gc2VsZi5fb3JpZW50YXRpb247XG4gICAgeSA9ICh0eXBlb2YgeSAhPT0gJ251bWJlcicpID8gb3JbMV0gOiB5O1xuICAgIHogPSAodHlwZW9mIHogIT09ICdudW1iZXInKSA/IG9yWzJdIDogejtcbiAgICB4VXAgPSAodHlwZW9mIHhVcCAhPT0gJ251bWJlcicpID8gb3JbM10gOiB4VXA7XG4gICAgeVVwID0gKHR5cGVvZiB5VXAgIT09ICdudW1iZXInKSA/IG9yWzRdIDogeVVwO1xuICAgIHpVcCA9ICh0eXBlb2YgelVwICE9PSAnbnVtYmVyJykgPyBvcls1XSA6IHpVcDtcblxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gW3gsIHksIHosIHhVcCwgeVVwLCB6VXBdO1xuXG4gICAgICBpZiAodHlwZW9mIHNlbGYuY3R4Lmxpc3RlbmVyLmZvcndhcmRYICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5mb3J3YXJkWC5zZXRUYXJnZXRBdFRpbWUoeCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIuZm9yd2FyZFkuc2V0VGFyZ2V0QXRUaW1lKHksIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLmZvcndhcmRaLnNldFRhcmdldEF0VGltZSh6LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci51cFguc2V0VGFyZ2V0QXRUaW1lKHgsIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnVwWS5zZXRUYXJnZXRBdFRpbWUoeSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIudXBaLnNldFRhcmdldEF0VGltZSh6LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIuc2V0T3JpZW50YXRpb24oeCwgeSwgeiwgeFVwLCB5VXAsIHpVcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKiogR3JvdXAgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogQWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZSBjb3JlIGluaXQuXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBfc3VwZXIgQ29yZSBpbml0IG1ldGhvZC5cbiAgICogQHJldHVybiB7SG93bH1cbiAgICovXG4gIEhvd2wucHJvdG90eXBlLmluaXQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG8pIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gU2V0dXAgdXNlci1kZWZpbmVkIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gby5vcmllbnRhdGlvbiB8fCBbMSwgMCwgMF07XG4gICAgICBzZWxmLl9zdGVyZW8gPSBvLnN0ZXJlbyB8fCBudWxsO1xuICAgICAgc2VsZi5fcG9zID0gby5wb3MgfHwgbnVsbDtcbiAgICAgIHNlbGYuX3Bhbm5lckF0dHIgPSB7XG4gICAgICAgIGNvbmVJbm5lckFuZ2xlOiB0eXBlb2Ygby5jb25lSW5uZXJBbmdsZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLmNvbmVJbm5lckFuZ2xlIDogMzYwLFxuICAgICAgICBjb25lT3V0ZXJBbmdsZTogdHlwZW9mIG8uY29uZU91dGVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJBbmdsZSA6IDM2MCxcbiAgICAgICAgY29uZU91dGVyR2FpbjogdHlwZW9mIG8uY29uZU91dGVyR2FpbiAhPT0gJ3VuZGVmaW5lZCcgPyBvLmNvbmVPdXRlckdhaW4gOiAwLFxuICAgICAgICBkaXN0YW5jZU1vZGVsOiB0eXBlb2Ygby5kaXN0YW5jZU1vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8uZGlzdGFuY2VNb2RlbCA6ICdpbnZlcnNlJyxcbiAgICAgICAgbWF4RGlzdGFuY2U6IHR5cGVvZiBvLm1heERpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ubWF4RGlzdGFuY2UgOiAxMDAwMCxcbiAgICAgICAgcGFubmluZ01vZGVsOiB0eXBlb2Ygby5wYW5uaW5nTW9kZWwgIT09ICd1bmRlZmluZWQnID8gby5wYW5uaW5nTW9kZWwgOiAnSFJURicsXG4gICAgICAgIHJlZkRpc3RhbmNlOiB0eXBlb2Ygby5yZWZEaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnJlZkRpc3RhbmNlIDogMSxcbiAgICAgICAgcm9sbG9mZkZhY3RvcjogdHlwZW9mIG8ucm9sbG9mZkZhY3RvciAhPT0gJ3VuZGVmaW5lZCcgPyBvLnJvbGxvZmZGYWN0b3IgOiAxXG4gICAgICB9O1xuXG4gICAgICAvLyBTZXR1cCBldmVudCBsaXN0ZW5lcnMuXG4gICAgICBzZWxmLl9vbnN0ZXJlbyA9IG8ub25zdGVyZW8gPyBbe2ZuOiBvLm9uc3RlcmVvfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ucG9zID0gby5vbnBvcyA/IFt7Zm46IG8ub25wb3N9XSA6IFtdO1xuICAgICAgc2VsZi5fb25vcmllbnRhdGlvbiA9IG8ub25vcmllbnRhdGlvbiA/IFt7Zm46IG8ub25vcmllbnRhdGlvbn1dIDogW107XG5cbiAgICAgIC8vIENvbXBsZXRlIGluaXRpbGl6YXRpb24gd2l0aCBob3dsZXIuanMgY29yZSdzIGluaXQgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbyk7XG4gICAgfTtcbiAgfSkoSG93bC5wcm90b3R5cGUuaW5pdCk7XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgdGhlIHN0ZXJlbyBwYW5uaW5nIG9mIHRoZSBhdWRpbyBzb3VyY2UgZm9yIHRoaXMgc291bmQgb3IgYWxsIGluIHRoZSBncm91cC5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBwYW4gIEEgdmFsdWUgb2YgLTEuMCBpcyBhbGwgdGhlIHdheSBsZWZ0IGFuZCAxLjAgaXMgYWxsIHRoZSB3YXkgcmlnaHQuXG4gICAqIEBwYXJhbSAge051bWJlcn0gaWQgKG9wdGlvbmFsKSBUaGUgc291bmQgSUQuIElmIG5vbmUgaXMgcGFzc2VkLCBhbGwgaW4gZ3JvdXAgd2lsbCBiZSB1cGRhdGVkLlxuICAgKiBAcmV0dXJuIHtIb3dsL051bWJlcn0gICAgUmV0dXJucyBzZWxmIG9yIHRoZSBjdXJyZW50IHN0ZXJlbyBwYW5uaW5nIHZhbHVlLlxuICAgKi9cbiAgSG93bC5wcm90b3R5cGUuc3RlcmVvID0gZnVuY3Rpb24ocGFuLCBpZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gY2hhbmdlIHN0ZXJlbyBwYW4gd2hlbiBjYXBhYmxlLlxuICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICBldmVudDogJ3N0ZXJlbycsXG4gICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5zdGVyZW8ocGFuLCBpZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgUGFubmVyU3RlcmVvTm9kZSBzdXBwb3J0IGFuZCBmYWxsYmFjayB0byBQYW5uZXJOb2RlIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgdmFyIHBhbm5lclR5cGUgPSAodHlwZW9mIEhvd2xlci5jdHguY3JlYXRlU3RlcmVvUGFubmVyID09PSAndW5kZWZpbmVkJykgPyAnc3BhdGlhbCcgOiAnc3RlcmVvJztcblxuICAgIC8vIFNldHVwIHRoZSBncm91cCdzIHN0ZXJlbyBwYW5uaW5nIGlmIG5vIElEIGlzIHBhc3NlZC5cbiAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gUmV0dXJuIHRoZSBncm91cCdzIHN0ZXJlbyBwYW5uaW5nIGlmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZC5cbiAgICAgIGlmICh0eXBlb2YgcGFuID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZWxmLl9zdGVyZW8gPSBwYW47XG4gICAgICAgIHNlbGYuX3BvcyA9IFtwYW4sIDAsIDBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX3N0ZXJlbztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgdGhlIHN0cmVvIHBhbm5pbmcgb2Ygb25lIG9yIGFsbCBzb3VuZHMgaW4gZ3JvdXAuXG4gICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHBhbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBzb3VuZC5fc3RlcmVvID0gcGFuO1xuICAgICAgICAgIHNvdW5kLl9wb3MgPSBbcGFuLCAwLCAwXTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGZhbGxpbmcgYmFjaywgbWFrZSBzdXJlIHRoZSBwYW5uaW5nTW9kZWwgaXMgZXF1YWxwb3dlci5cbiAgICAgICAgICAgIHNvdW5kLl9wYW5uZXJBdHRyLnBhbm5pbmdNb2RlbCA9ICdlcXVhbHBvd2VyJztcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBwYW5uZXIgc2V0dXAgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgaWYgbm90LlxuICAgICAgICAgICAgaWYgKCFzb3VuZC5fcGFubmVyIHx8ICFzb3VuZC5fcGFubmVyLnBhbikge1xuICAgICAgICAgICAgICBzZXR1cFBhbm5lcihzb3VuZCwgcGFubmVyVHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYW5uZXJUeXBlID09PSAnc3BhdGlhbCcpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWC5zZXRWYWx1ZUF0VGltZShwYW4sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25ZLnNldFZhbHVlQXRUaW1lKDAsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25aLnNldFZhbHVlQXRUaW1lKDAsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIuc2V0UG9zaXRpb24ocGFuLCAwLCAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wYW4uc2V0VmFsdWVBdFRpbWUocGFuLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9lbWl0KCdzdGVyZW8nLCBzb3VuZC5faWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzb3VuZC5fc3RlcmVvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgdGhlIDNEIHNwYXRpYWwgcG9zaXRpb24gb2YgdGhlIGF1ZGlvIHNvdXJjZSBmb3IgdGhpcyBzb3VuZCBvciBncm91cCByZWxhdGl2ZSB0byB0aGUgZ2xvYmFsIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHggIFRoZSB4LXBvc2l0aW9uIG9mIHRoZSBhdWRpbyBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0geSAgVGhlIHktcG9zaXRpb24gb2YgdGhlIGF1ZGlvIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB6ICBUaGUgei1wb3NpdGlvbiBvZiB0aGUgYXVkaW8gc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIChvcHRpb25hbCkgVGhlIHNvdW5kIElELiBJZiBub25lIGlzIHBhc3NlZCwgYWxsIGluIGdyb3VwIHdpbGwgYmUgdXBkYXRlZC5cbiAgICogQHJldHVybiB7SG93bC9BcnJheX0gICAgUmV0dXJucyBzZWxmIG9yIHRoZSBjdXJyZW50IDNEIHNwYXRpYWwgcG9zaXRpb246IFt4LCB5LCB6XS5cbiAgICovXG4gIEhvd2wucHJvdG90eXBlLnBvcyA9IGZ1bmN0aW9uKHgsIHksIHosIGlkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLl93ZWJBdWRpbykge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBjaGFuZ2UgcG9zaXRpb24gd2hlbiBjYXBhYmxlLlxuICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICBldmVudDogJ3BvcycsXG4gICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5wb3MoeCwgeSwgeiwgaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBmb3Igb3B0aW9uYWwgJ3knICYgJ3onLlxuICAgIHkgPSAodHlwZW9mIHkgIT09ICdudW1iZXInKSA/IDAgOiB5O1xuICAgIHogPSAodHlwZW9mIHogIT09ICdudW1iZXInKSA/IC0wLjUgOiB6O1xuXG4gICAgLy8gU2V0dXAgdGhlIGdyb3VwJ3Mgc3BhdGlhbCBwb3NpdGlvbiBpZiBubyBJRCBpcyBwYXNzZWQuXG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFJldHVybiB0aGUgZ3JvdXAncyBzcGF0aWFsIHBvc2l0aW9uIGlmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZC5cbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc2VsZi5fcG9zID0gW3gsIHksIHpdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX3BvcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgdGhlIHNwYXRpYWwgcG9zaXRpb24gb2Ygb25lIG9yIGFsbCBzb3VuZHMgaW4gZ3JvdXAuXG4gICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgc291bmQuX3BvcyA9IFt4LCB5LCB6XTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBwYW5uZXIgc2V0dXAgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgaWYgbm90LlxuICAgICAgICAgICAgaWYgKCFzb3VuZC5fcGFubmVyIHx8IHNvdW5kLl9wYW5uZXIucGFuKSB7XG4gICAgICAgICAgICAgIHNldHVwUGFubmVyKHNvdW5kLCAnc3BhdGlhbCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWC5zZXRWYWx1ZUF0VGltZSh4LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblkuc2V0VmFsdWVBdFRpbWUoeSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25aLnNldFZhbHVlQXRUaW1lKHosIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5zZXRPcmllbnRhdGlvbih4LCB5LCB6KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9lbWl0KCdwb3MnLCBzb3VuZC5faWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzb3VuZC5fcG9zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgdGhlIGRpcmVjdGlvbiB0aGUgYXVkaW8gc291cmNlIGlzIHBvaW50aW5nIGluIHRoZSAzRCBjYXJ0ZXNpYW4gY29vcmRpbmF0ZVxuICAgKiBzcGFjZS4gRGVwZW5kaW5nIG9uIGhvdyBkaXJlY3Rpb24gdGhlIHNvdW5kIGlzLCBiYXNlZCBvbiB0aGUgYGNvbmVgIGF0dHJpYnV0ZXMsXG4gICAqIGEgc291bmQgcG9pbnRpbmcgYXdheSBmcm9tIHRoZSBsaXN0ZW5lciBjYW4gYmUgcXVpZXQgb3Igc2lsZW50LlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHggIFRoZSB4LW9yaWVudGF0aW9uIG9mIHRoZSBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0geSAgVGhlIHktb3JpZW50YXRpb24gb2YgdGhlIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB6ICBUaGUgei1vcmllbnRhdGlvbiBvZiB0aGUgc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIChvcHRpb25hbCkgVGhlIHNvdW5kIElELiBJZiBub25lIGlzIHBhc3NlZCwgYWxsIGluIGdyb3VwIHdpbGwgYmUgdXBkYXRlZC5cbiAgICogQHJldHVybiB7SG93bC9BcnJheX0gICAgUmV0dXJucyBzZWxmIG9yIHRoZSBjdXJyZW50IDNEIHNwYXRpYWwgb3JpZW50YXRpb246IFt4LCB5LCB6XS5cbiAgICovXG4gIEhvd2wucHJvdG90eXBlLm9yaWVudGF0aW9uID0gZnVuY3Rpb24oeCwgeSwgeiwgaWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGNoYW5nZSBvcmllbnRhdGlvbiB3aGVuIGNhcGFibGUuXG4gICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgIGV2ZW50OiAnb3JpZW50YXRpb24nLFxuICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYub3JpZW50YXRpb24oeCwgeSwgeiwgaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBmb3Igb3B0aW9uYWwgJ3knICYgJ3onLlxuICAgIHkgPSAodHlwZW9mIHkgIT09ICdudW1iZXInKSA/IHNlbGYuX29yaWVudGF0aW9uWzFdIDogeTtcbiAgICB6ID0gKHR5cGVvZiB6ICE9PSAnbnVtYmVyJykgPyBzZWxmLl9vcmllbnRhdGlvblsyXSA6IHo7XG5cbiAgICAvLyBTZXR1cCB0aGUgZ3JvdXAncyBzcGF0aWFsIG9yaWVudGF0aW9uIGlmIG5vIElEIGlzIHBhc3NlZC5cbiAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gUmV0dXJuIHRoZSBncm91cCdzIHNwYXRpYWwgb3JpZW50YXRpb24gaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLlxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZWxmLl9vcmllbnRhdGlvbiA9IFt4LCB5LCB6XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9vcmllbnRhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgdGhlIHNwYXRpYWwgb3JpZW50YXRpb24gb2Ygb25lIG9yIGFsbCBzb3VuZHMgaW4gZ3JvdXAuXG4gICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgc291bmQuX29yaWVudGF0aW9uID0gW3gsIHksIHpdO1xuXG4gICAgICAgICAgaWYgKHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIHBhbm5lciBzZXR1cCBhbmQgY3JlYXRlIGEgbmV3IG9uZSBpZiBub3QuXG4gICAgICAgICAgICBpZiAoIXNvdW5kLl9wYW5uZXIpIHtcbiAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwb3NpdGlvbiB0byBzZXR1cCB0aGUgbm9kZSB3aXRoLlxuICAgICAgICAgICAgICBpZiAoIXNvdW5kLl9wb3MpIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5fcG9zID0gc2VsZi5fcG9zIHx8IFswLCAwLCAtMC41XTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNldHVwUGFubmVyKHNvdW5kLCAnc3BhdGlhbCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWC5zZXRWYWx1ZUF0VGltZSh4LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25ZLnNldFZhbHVlQXRUaW1lKHksIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblouc2V0VmFsdWVBdFRpbWUoeiwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fZW1pdCgnb3JpZW50YXRpb24nLCBzb3VuZC5faWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzb3VuZC5fb3JpZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgcGFubmVyIG5vZGUncyBhdHRyaWJ1dGVzIGZvciBhIHNvdW5kIG9yIGdyb3VwIG9mIHNvdW5kcy5cbiAgICogVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbCB0YWtlIDAsIDEgb3IgMiBhcmd1bWVudHMuXG4gICAqICAgcGFubmVyQXR0cigpIC0+IFJldHVybnMgdGhlIGdyb3VwJ3MgdmFsdWVzLlxuICAgKiAgIHBhbm5lckF0dHIoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgdmFsdWVzLlxuICAgKiAgIHBhbm5lckF0dHIobykgLT4gU2V0J3MgdGhlIHZhbHVlcyBvZiBhbGwgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICogICBwYW5uZXJBdHRyKG8sIGlkKSAtPiBTZXQncyB0aGUgdmFsdWVzIG9mIHBhc3NlZCBzb3VuZCBpZC5cbiAgICpcbiAgICogICBBdHRyaWJ1dGVzOlxuICAgKiAgICAgY29uZUlubmVyQW5nbGUgLSAoMzYwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIGFuIGFuZ2xlLCBpbiBkZWdyZWVzLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBpbnNpZGUgb2Ygd2hpY2ggdGhlcmUgd2lsbCBiZSBubyB2b2x1bWUgcmVkdWN0aW9uLlxuICAgKiAgICAgY29uZU91dGVyQW5nbGUgLSAoMzYwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIGFuIGFuZ2xlLCBpbiBkZWdyZWVzLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBvdXRzaWRlIG9mIHdoaWNoIHRoZSB2b2x1bWUgd2lsbCBiZSByZWR1Y2VkIHRvIGEgY29uc3RhbnQgdmFsdWUgb2YgYGNvbmVPdXRlckdhaW5gLlxuICAgKiAgICAgY29uZU91dGVyR2FpbiAtICgwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIHRoZSBnYWluIG91dHNpZGUgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgYGNvbmVPdXRlckFuZ2xlYC4gSXQgaXMgYSBsaW5lYXIgdmFsdWUgaW4gdGhlIHJhbmdlIGBbMCwgMV1gLlxuICAgKiAgICAgZGlzdGFuY2VNb2RlbCAtICgnaW52ZXJzZScgYnkgZGVmYXVsdCkgRGV0ZXJtaW5lcyBhbGdvcml0aG0gdXNlZCB0byByZWR1Y2Ugdm9sdW1lIGFzIGF1ZGlvIG1vdmVzIGF3YXkgZnJvbVxuICAgKiAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLiBDYW4gYmUgYGxpbmVhcmAsIGBpbnZlcnNlYCBvciBgZXhwb25lbnRpYWwuXG4gICAqICAgICBtYXhEaXN0YW5jZSAtICgxMDAwMCBieSBkZWZhdWx0KSBUaGUgbWF4aW11bSBkaXN0YW5jZSBiZXR3ZWVuIHNvdXJjZSBhbmQgbGlzdGVuZXIsIGFmdGVyIHdoaWNoIHRoZSB2b2x1bWVcbiAgICogICAgICAgICAgICAgICAgICAgd2lsbCBub3QgYmUgcmVkdWNlZCBhbnkgZnVydGhlci5cbiAgICogICAgIHJlZkRpc3RhbmNlIC0gKDEgYnkgZGVmYXVsdCkgQSByZWZlcmVuY2UgZGlzdGFuY2UgZm9yIHJlZHVjaW5nIHZvbHVtZSBhcyBzb3VyY2UgbW92ZXMgZnVydGhlciBmcm9tIHRoZSBsaXN0ZW5lci5cbiAgICogICAgICAgICAgICAgICAgICAgVGhpcyBpcyBzaW1wbHkgYSB2YXJpYWJsZSBvZiB0aGUgZGlzdGFuY2UgbW9kZWwgYW5kIGhhcyBhIGRpZmZlcmVudCBlZmZlY3QgZGVwZW5kaW5nIG9uIHdoaWNoIG1vZGVsXG4gICAqICAgICAgICAgICAgICAgICAgIGlzIHVzZWQgYW5kIHRoZSBzY2FsZSBvZiB5b3VyIGNvb3JkaW5hdGVzLiBHZW5lcmFsbHksIHZvbHVtZSB3aWxsIGJlIGVxdWFsIHRvIDEgYXQgdGhpcyBkaXN0YW5jZS5cbiAgICogICAgIHJvbGxvZmZGYWN0b3IgLSAoMSBieSBkZWZhdWx0KSBIb3cgcXVpY2tseSB0aGUgdm9sdW1lIHJlZHVjZXMgYXMgc291cmNlIG1vdmVzIGZyb20gbGlzdGVuZXIuIFRoaXMgaXMgc2ltcGx5IGFcbiAgICogICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZSBvZiB0aGUgZGlzdGFuY2UgbW9kZWwgYW5kIGNhbiBiZSBpbiB0aGUgcmFuZ2Ugb2YgYFswLCAxXWAgd2l0aCBgbGluZWFyYCBhbmQgYFswLCDiiJ5dYFxuICAgKiAgICAgICAgICAgICAgICAgICAgIHdpdGggYGludmVyc2VgIGFuZCBgZXhwb25lbnRpYWxgLlxuICAgKiAgICAgcGFubmluZ01vZGVsIC0gKCdIUlRGJyBieSBkZWZhdWx0KSBEZXRlcm1pbmVzIHdoaWNoIHNwYXRpYWxpemF0aW9uIGFsZ29yaXRobSBpcyB1c2VkIHRvIHBvc2l0aW9uIGF1ZGlvLlxuICAgKiAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBgSFJURmAgb3IgYGVxdWFscG93ZXJgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtIb3dsL09iamVjdH0gUmV0dXJucyBzZWxmIG9yIGN1cnJlbnQgcGFubmVyIGF0dHJpYnV0ZXMuXG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5wYW5uZXJBdHRyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBvLCBpZCwgc291bmQ7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBiYXNlZCBvbiBhcmd1bWVudHMuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGdyb3VwJ3MgcGFubmVyIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICByZXR1cm4gc2VsZi5fcGFubmVyQXR0cjtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG8gPSBhcmdzWzBdO1xuXG4gICAgICAgIC8vIFNldCB0aGUgZ3JvdSdzIHBhbm5lciBhdHRyaWJ1dGUgdmFsdWVzLlxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICghby5wYW5uZXJBdHRyKSB7XG4gICAgICAgICAgICBvLnBhbm5lckF0dHIgPSB7XG4gICAgICAgICAgICAgIGNvbmVJbm5lckFuZ2xlOiBvLmNvbmVJbm5lckFuZ2xlLFxuICAgICAgICAgICAgICBjb25lT3V0ZXJBbmdsZTogby5jb25lT3V0ZXJBbmdsZSxcbiAgICAgICAgICAgICAgY29uZU91dGVyR2Fpbjogby5jb25lT3V0ZXJHYWluLFxuICAgICAgICAgICAgICBkaXN0YW5jZU1vZGVsOiBvLmRpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgICAgIG1heERpc3RhbmNlOiBvLm1heERpc3RhbmNlLFxuICAgICAgICAgICAgICByZWZEaXN0YW5jZTogby5yZWZEaXN0YW5jZSxcbiAgICAgICAgICAgICAgcm9sbG9mZkZhY3Rvcjogby5yb2xsb2ZmRmFjdG9yLFxuICAgICAgICAgICAgICBwYW5uaW5nTW9kZWw6IG8ucGFubmluZ01vZGVsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuX3Bhbm5lckF0dHIgPSB7XG4gICAgICAgICAgICBjb25lSW5uZXJBbmdsZTogdHlwZW9mIG8ucGFubmVyQXR0ci5jb25lSW5uZXJBbmdsZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIuY29uZUlubmVyQW5nbGUgOiBzZWxmLl9jb25lSW5uZXJBbmdsZSxcbiAgICAgICAgICAgIGNvbmVPdXRlckFuZ2xlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLmNvbmVPdXRlckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5jb25lT3V0ZXJBbmdsZSA6IHNlbGYuX2NvbmVPdXRlckFuZ2xlLFxuICAgICAgICAgICAgY29uZU91dGVyR2FpbjogdHlwZW9mIG8ucGFubmVyQXR0ci5jb25lT3V0ZXJHYWluICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5jb25lT3V0ZXJHYWluIDogc2VsZi5fY29uZU91dGVyR2FpbixcbiAgICAgICAgICAgIGRpc3RhbmNlTW9kZWw6IHR5cGVvZiBvLnBhbm5lckF0dHIuZGlzdGFuY2VNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIuZGlzdGFuY2VNb2RlbCA6IHNlbGYuX2Rpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgICBtYXhEaXN0YW5jZTogdHlwZW9mIG8ucGFubmVyQXR0ci5tYXhEaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIubWF4RGlzdGFuY2UgOiBzZWxmLl9tYXhEaXN0YW5jZSxcbiAgICAgICAgICAgIHJlZkRpc3RhbmNlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLnJlZkRpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5yZWZEaXN0YW5jZSA6IHNlbGYuX3JlZkRpc3RhbmNlLFxuICAgICAgICAgICAgcm9sbG9mZkZhY3RvcjogdHlwZW9mIG8ucGFubmVyQXR0ci5yb2xsb2ZmRmFjdG9yICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5yb2xsb2ZmRmFjdG9yIDogc2VsZi5fcm9sbG9mZkZhY3RvcixcbiAgICAgICAgICAgIHBhbm5pbmdNb2RlbDogdHlwZW9mIG8ucGFubmVyQXR0ci5wYW5uaW5nTW9kZWwgIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLnBhbm5pbmdNb2RlbCA6IHNlbGYuX3Bhbm5pbmdNb2RlbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiB0aGlzIHNvdW5kJ3MgcGFubmVyIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKHBhcnNlSW50KGFyZ3NbMF0sIDEwKSk7XG4gICAgICAgIHJldHVybiBzb3VuZCA/IHNvdW5kLl9wYW5uZXJBdHRyIDogc2VsZi5fcGFubmVyQXR0cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICBvID0gYXJnc1swXTtcbiAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1sxXSwgMTApO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmFsdWVzIG9mIHRoZSBzcGVjaWZpZWQgc291bmRzLlxuICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIC8vIE1lcmdlIHRoZSBuZXcgdmFsdWVzIGludG8gdGhlIHNvdW5kLlxuICAgICAgICB2YXIgcGEgPSBzb3VuZC5fcGFubmVyQXR0cjtcbiAgICAgICAgcGEgPSB7XG4gICAgICAgICAgY29uZUlubmVyQW5nbGU6IHR5cGVvZiBvLmNvbmVJbm5lckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8uY29uZUlubmVyQW5nbGUgOiBwYS5jb25lSW5uZXJBbmdsZSxcbiAgICAgICAgICBjb25lT3V0ZXJBbmdsZTogdHlwZW9mIG8uY29uZU91dGVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJBbmdsZSA6IHBhLmNvbmVPdXRlckFuZ2xlLFxuICAgICAgICAgIGNvbmVPdXRlckdhaW46IHR5cGVvZiBvLmNvbmVPdXRlckdhaW4gIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJHYWluIDogcGEuY29uZU91dGVyR2FpbixcbiAgICAgICAgICBkaXN0YW5jZU1vZGVsOiB0eXBlb2Ygby5kaXN0YW5jZU1vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8uZGlzdGFuY2VNb2RlbCA6IHBhLmRpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgbWF4RGlzdGFuY2U6IHR5cGVvZiBvLm1heERpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ubWF4RGlzdGFuY2UgOiBwYS5tYXhEaXN0YW5jZSxcbiAgICAgICAgICByZWZEaXN0YW5jZTogdHlwZW9mIG8ucmVmRGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5yZWZEaXN0YW5jZSA6IHBhLnJlZkRpc3RhbmNlLFxuICAgICAgICAgIHJvbGxvZmZGYWN0b3I6IHR5cGVvZiBvLnJvbGxvZmZGYWN0b3IgIT09ICd1bmRlZmluZWQnID8gby5yb2xsb2ZmRmFjdG9yIDogcGEucm9sbG9mZkZhY3RvcixcbiAgICAgICAgICBwYW5uaW5nTW9kZWw6IHR5cGVvZiBvLnBhbm5pbmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5pbmdNb2RlbCA6IHBhLnBhbm5pbmdNb2RlbFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcGFubmVyIHZhbHVlcyBvciBjcmVhdGUgYSBuZXcgcGFubmVyIGlmIG5vbmUgZXhpc3RzLlxuICAgICAgICB2YXIgcGFubmVyID0gc291bmQuX3Bhbm5lcjtcbiAgICAgICAgaWYgKHBhbm5lcikge1xuICAgICAgICAgIHBhbm5lci5jb25lSW5uZXJBbmdsZSA9IHBhLmNvbmVJbm5lckFuZ2xlO1xuICAgICAgICAgIHBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IHBhLmNvbmVPdXRlckFuZ2xlO1xuICAgICAgICAgIHBhbm5lci5jb25lT3V0ZXJHYWluID0gcGEuY29uZU91dGVyR2FpbjtcbiAgICAgICAgICBwYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHBhLmRpc3RhbmNlTW9kZWw7XG4gICAgICAgICAgcGFubmVyLm1heERpc3RhbmNlID0gcGEubWF4RGlzdGFuY2U7XG4gICAgICAgICAgcGFubmVyLnJlZkRpc3RhbmNlID0gcGEucmVmRGlzdGFuY2U7XG4gICAgICAgICAgcGFubmVyLnJvbGxvZmZGYWN0b3IgPSBwYS5yb2xsb2ZmRmFjdG9yO1xuICAgICAgICAgIHBhbm5lci5wYW5uaW5nTW9kZWwgPSBwYS5wYW5uaW5nTW9kZWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwb3NpdGlvbiB0byBzZXR1cCB0aGUgbm9kZSB3aXRoLlxuICAgICAgICAgIGlmICghc291bmQuX3Bvcykge1xuICAgICAgICAgICAgc291bmQuX3BvcyA9IHNlbGYuX3BvcyB8fCBbMCwgMCwgLTAuNV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhbm5lciBub2RlLlxuICAgICAgICAgIHNldHVwUGFubmVyKHNvdW5kLCAnc3BhdGlhbCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqIFNpbmdsZSBTb3VuZCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBBZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlIGNvcmUgU291bmQgaW5pdC5cbiAgICogQHBhcmFtICB7RnVuY3Rpb259IF9zdXBlciBDb3JlIFNvdW5kIGluaXQgbWV0aG9kLlxuICAgKiBAcmV0dXJuIHtTb3VuZH1cbiAgICovXG4gIFNvdW5kLnByb3RvdHlwZS5pbml0ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJlbnQgPSBzZWxmLl9wYXJlbnQ7XG5cbiAgICAgIC8vIFNldHVwIHVzZXItZGVmaW5lZCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9vcmllbnRhdGlvbiA9IHBhcmVudC5fb3JpZW50YXRpb247XG4gICAgICBzZWxmLl9zdGVyZW8gPSBwYXJlbnQuX3N0ZXJlbztcbiAgICAgIHNlbGYuX3BvcyA9IHBhcmVudC5fcG9zO1xuICAgICAgc2VsZi5fcGFubmVyQXR0ciA9IHBhcmVudC5fcGFubmVyQXR0cjtcblxuICAgICAgLy8gQ29tcGxldGUgaW5pdGlsaXphdGlvbiB3aXRoIGhvd2xlci5qcyBjb3JlIFNvdW5kJ3MgaW5pdCBmdW5jdGlvbi5cbiAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXG4gICAgICAvLyBJZiBhIHN0ZXJlbyBvciBwb3NpdGlvbiB3YXMgc3BlY2lmaWVkLCBzZXQgaXQgdXAuXG4gICAgICBpZiAoc2VsZi5fc3RlcmVvKSB7XG4gICAgICAgIHBhcmVudC5zdGVyZW8oc2VsZi5fc3RlcmVvKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5fcG9zKSB7XG4gICAgICAgIHBhcmVudC5wb3Moc2VsZi5fcG9zWzBdLCBzZWxmLl9wb3NbMV0sIHNlbGYuX3Bvc1syXSwgc2VsZi5faWQpO1xuICAgICAgfVxuICAgIH07XG4gIH0pKFNvdW5kLnByb3RvdHlwZS5pbml0KTtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIFNvdW5kLnJlc2V0IG1ldGhvZCB0byBjbGVhbiB1cCBwcm9wZXJ0aWVzIGZyb20gdGhlIHNwYXRpYWwgcGx1Z2luLlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gX3N1cGVyIFNvdW5kIHJlc2V0IG1ldGhvZC5cbiAgICogQHJldHVybiB7U291bmR9XG4gICAqL1xuICBTb3VuZC5wcm90b3R5cGUucmVzZXQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUmVzZXQgYWxsIHNwYXRpYWwgcGx1Z2luIHByb3BlcnRpZXMgb24gdGhpcyBzb3VuZC5cbiAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gcGFyZW50Ll9vcmllbnRhdGlvbjtcbiAgICAgIHNlbGYuX3BvcyA9IHBhcmVudC5fcG9zO1xuICAgICAgc2VsZi5fcGFubmVyQXR0ciA9IHBhcmVudC5fcGFubmVyQXR0cjtcblxuICAgICAgLy8gQ29tcGxldGUgcmVzZXR0aW5nIG9mIHRoZSBzb3VuZC5cbiAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9KShTb3VuZC5wcm90b3R5cGUucmVzZXQpO1xuXG4gIC8qKiBIZWxwZXIgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHBhbm5lciBub2RlIGFuZCBzYXZlIGl0IG9uIHRoZSBzb3VuZC5cbiAgICogQHBhcmFtICB7U291bmR9IHNvdW5kIFNwZWNpZmljIHNvdW5kIHRvIHNldHVwIHBhbm5pbmcgb24uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgb2YgcGFubmVyIHRvIGNyZWF0ZTogJ3N0ZXJlbycgb3IgJ3NwYXRpYWwnLlxuICAgKi9cbiAgdmFyIHNldHVwUGFubmVyID0gZnVuY3Rpb24oc291bmQsIHR5cGUpIHtcbiAgICB0eXBlID0gdHlwZSB8fCAnc3BhdGlhbCc7XG5cbiAgICAvLyBDcmVhdGUgdGhlIG5ldyBwYW5uZXIgbm9kZS5cbiAgICBpZiAodHlwZSA9PT0gJ3NwYXRpYWwnKSB7XG4gICAgICBzb3VuZC5fcGFubmVyID0gSG93bGVyLmN0eC5jcmVhdGVQYW5uZXIoKTtcbiAgICAgIHNvdW5kLl9wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBzb3VuZC5fcGFubmVyQXR0ci5jb25lSW5uZXJBbmdsZTtcbiAgICAgIHNvdW5kLl9wYW5uZXIuY29uZU91dGVyQW5nbGUgPSBzb3VuZC5fcGFubmVyQXR0ci5jb25lT3V0ZXJBbmdsZTtcbiAgICAgIHNvdW5kLl9wYW5uZXIuY29uZU91dGVyR2FpbiA9IHNvdW5kLl9wYW5uZXJBdHRyLmNvbmVPdXRlckdhaW47XG4gICAgICBzb3VuZC5fcGFubmVyLmRpc3RhbmNlTW9kZWwgPSBzb3VuZC5fcGFubmVyQXR0ci5kaXN0YW5jZU1vZGVsO1xuICAgICAgc291bmQuX3Bhbm5lci5tYXhEaXN0YW5jZSA9IHNvdW5kLl9wYW5uZXJBdHRyLm1heERpc3RhbmNlO1xuICAgICAgc291bmQuX3Bhbm5lci5yZWZEaXN0YW5jZSA9IHNvdW5kLl9wYW5uZXJBdHRyLnJlZkRpc3RhbmNlO1xuICAgICAgc291bmQuX3Bhbm5lci5yb2xsb2ZmRmFjdG9yID0gc291bmQuX3Bhbm5lckF0dHIucm9sbG9mZkZhY3RvcjtcbiAgICAgIHNvdW5kLl9wYW5uZXIucGFubmluZ01vZGVsID0gc291bmQuX3Bhbm5lckF0dHIucGFubmluZ01vZGVsO1xuXG4gICAgICBpZiAodHlwZW9mIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWC5zZXRWYWx1ZUF0VGltZShzb3VuZC5fcG9zWzBdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblkuc2V0VmFsdWVBdFRpbWUoc291bmQuX3Bvc1sxXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25aLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9wb3NbMl0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQuX3Bhbm5lci5zZXRQb3NpdGlvbihzb3VuZC5fcG9zWzBdLCBzb3VuZC5fcG9zWzFdLCBzb3VuZC5fcG9zWzJdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblguc2V0VmFsdWVBdFRpbWUoc291bmQuX29yaWVudGF0aW9uWzBdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblkuc2V0VmFsdWVBdFRpbWUoc291bmQuX29yaWVudGF0aW9uWzFdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblouc2V0VmFsdWVBdFRpbWUoc291bmQuX29yaWVudGF0aW9uWzJdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIuc2V0T3JpZW50YXRpb24oc291bmQuX29yaWVudGF0aW9uWzBdLCBzb3VuZC5fb3JpZW50YXRpb25bMV0sIHNvdW5kLl9vcmllbnRhdGlvblsyXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdW5kLl9wYW5uZXIgPSBIb3dsZXIuY3R4LmNyZWF0ZVN0ZXJlb1Bhbm5lcigpO1xuICAgICAgc291bmQuX3Bhbm5lci5wYW4uc2V0VmFsdWVBdFRpbWUoc291bmQuX3N0ZXJlbywgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgfVxuXG4gICAgc291bmQuX3Bhbm5lci5jb25uZWN0KHNvdW5kLl9ub2RlKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgY29ubmVjdGlvbnMuXG4gICAgaWYgKCFzb3VuZC5fcGF1c2VkKSB7XG4gICAgICBzb3VuZC5fcGFyZW50LnBhdXNlKHNvdW5kLl9pZCwgdHJ1ZSkucGxheShzb3VuZC5faWQsIHRydWUpO1xuICAgIH1cbiAgfTtcbn0pKCk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpKSlcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gW3tcImF1ZGlvRmlsZVwiOlwiY29vcC5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjo4Ni4xMzI4MTIsXCJtYWduaXR1ZGVcIjotMjguOTMyNTM3fSx7XCJmcmVxXCI6MjM2Ljg2NTIzNCxcIm1hZ25pdHVkZVwiOi0zMi4zMjc5OTV9LHtcImZyZXFcIjo0NTIuMTk3MjY2LFwibWFnbml0dWRlXCI6LTM2LjI4OTQ5fSx7XCJmcmVxXCI6MzQ0LjUzMTI1LFwibWFnbml0dWRlXCI6LTM2Ljc4OTI2MX0se1wiZnJlcVwiOjU1OS44NjMyODEsXCJtYWduaXR1ZGVcIjotMzguNjE2ODR9LHtcImZyZXFcIjo3MzIuMTI4OTA2LFwibWFnbml0dWRlXCI6LTM5LjQ5NDc3OH0se1wiZnJlcVwiOjc5Ni43Mjg1MTYsXCJtYWduaXR1ZGVcIjotMzkuNTExOTkzfSx7XCJmcmVxXCI6MTA3Ni42NjAxNTYsXCJtYWduaXR1ZGVcIjotNDguNDIzMDg4fSx7XCJmcmVxXCI6MTE4NC4zMjYxNzIsXCJtYWduaXR1ZGVcIjotNTAuNDg0MTg4fSx7XCJmcmVxXCI6MTI0OC45MjU3ODEsXCJtYWduaXR1ZGVcIjotNTAuNjY0ODQxfSx7XCJmcmVxXCI6MTQ2NC4yNTc4MTIsXCJtYWduaXR1ZGVcIjotNTEuMDc1NzMzfSx7XCJmcmVxXCI6MTM5OS42NTgyMDMsXCJtYWduaXR1ZGVcIjotNTEuMzI5OTA2fSx7XCJmcmVxXCI6MTY1OC4wNTY2NDEsXCJtYWduaXR1ZGVcIjotNTEuNzI5ODk3fSx7XCJmcmVxXCI6MTg1MS44NTU0NjksXCJtYWduaXR1ZGVcIjotNTMuMDE2Njc4fSx7XCJmcmVxXCI6MjExMC4yNTM5MDYsXCJtYWduaXR1ZGVcIjotNTUuNjIxMzY1fSx7XCJmcmVxXCI6MjAyNC4xMjEwOTQsXCJtYWduaXR1ZGVcIjotNTcuNTUwNTQ5fV19LHtcImF1ZGlvRmlsZVwiOlwiY291bnRpbmcxLm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjE5My43OTg4MjgsXCJtYWduaXR1ZGVcIjotMjYuMDE3NTYxfSx7XCJmcmVxXCI6NDA5LjEzMDg1OSxcIm1hZ25pdHVkZVwiOi0zNS40NzU0MDN9LHtcImZyZXFcIjo2MDIuOTI5Njg4LFwibWFnbml0dWRlXCI6LTQzLjAyMTkyN30se1wiZnJlcVwiOjc5Ni43Mjg1MTYsXCJtYWduaXR1ZGVcIjotNDYuNDgwNTk4fSx7XCJmcmVxXCI6NzE5Mi4wODk4NDQsXCJtYWduaXR1ZGVcIjotNTIuMzA4NDgzfSx7XCJmcmVxXCI6NzIzNS4xNTYyNSxcIm1hZ25pdHVkZVwiOi01Mi42MzMzNjl9LHtcImZyZXFcIjo4MjkwLjI4MzIwMyxcIm1hZ25pdHVkZVwiOi01Mi42Njk2Nzh9LHtcImZyZXFcIjo3MTA1Ljk1NzAzMSxcIm1hZ25pdHVkZVwiOi01Mi45NDUxMjJ9LHtcImZyZXFcIjo2NTY3LjYyNjk1MyxcIm1hZ25pdHVkZVwiOi01Mi45ODgwNn0se1wiZnJlcVwiOjY1MDMuMDI3MzQ0LFwibWFnbml0dWRlXCI6LTUzLjE4NDk2N30se1wiZnJlcVwiOjY0MTYuODk0NTMxLFwibWFnbml0dWRlXCI6LTUzLjQ3MzQ0Nn0se1wiZnJlcVwiOjgxODIuNjE3MTg4LFwibWFnbml0dWRlXCI6LTUzLjUzMTM1N30se1wiZnJlcVwiOjU2ODQuNzY1NjI1LFwibWFnbml0dWRlXCI6LTUzLjYwMjUzMX0se1wiZnJlcVwiOjgxMzkuNTUwNzgxLFwibWFnbml0dWRlXCI6LTU0LjA2Mjc3OH0se1wiZnJlcVwiOjY2NTMuNzU5NzY2LFwibWFnbml0dWRlXCI6LTU0LjE1NzM5OH0se1wiZnJlcVwiOjU1NzcuMDk5NjA5LFwibWFnbml0dWRlXCI6LTU0LjQ2OTM4M31dfSx7XCJhdWRpb0ZpbGVcIjpcImVtcHR5V29yZHNOZWEubXAzXCIsXCJzcGVjdHJ1bVwiOlt7XCJmcmVxXCI6MjE1LjMzMjAzMSxcIm1hZ25pdHVkZVwiOi0xOS41MjAxNTl9LHtcImZyZXFcIjo0MzAuNjY0MDYyLFwibWFnbml0dWRlXCI6LTI1LjIxOTAyNX0se1wiZnJlcVwiOjYwMi45Mjk2ODgsXCJtYWduaXR1ZGVcIjotMzEuMTc1NTIyfSx7XCJmcmVxXCI6NjQuNTk5NjA5LFwibWFnbml0dWRlXCI6LTM1LjE5MzI3OX0se1wiZnJlcVwiOjc5Ni43Mjg1MTYsXCJtYWduaXR1ZGVcIjotMzkuODY4Mjc5fSx7XCJmcmVxXCI6MTc4Ny4yNTU4NTksXCJtYWduaXR1ZGVcIjotNDEuMzkxMTgyfSx7XCJmcmVxXCI6ODgyLjg2MTMyOCxcIm1hZ25pdHVkZVwiOi00Mi44MjcwNDV9LHtcImZyZXFcIjoxMDU1LjEyNjk1MyxcIm1hZ25pdHVkZVwiOi00NS4wMDkxNzF9LHtcImZyZXFcIjoxNjc5LjU4OTg0NCxcIm1hZ25pdHVkZVwiOi00NS4wMTk0NDR9LHtcImZyZXFcIjoxMTE5LjcyNjU2MixcIm1hZ25pdHVkZVwiOi00NS4zNzQ5NjJ9LHtcImZyZXFcIjoxNTcxLjkyMzgyOCxcIm1hZ25pdHVkZVwiOi00NS4zOTIzODd9LHtcImZyZXFcIjoxNDIxLjE5MTQwNixcIm1hZ25pdHVkZVwiOi00Ni4xNTY5ODJ9LHtcImZyZXFcIjoxMjcwLjQ1ODk4NCxcIm1hZ25pdHVkZVwiOi00Ni4zNzcyMjh9LHtcImZyZXFcIjoxODk0LjkyMTg3NSxcIm1hZ25pdHVkZVwiOi00Ni40NzAyOTV9LHtcImZyZXFcIjoxNDg1Ljc5MTAxNixcIm1hZ25pdHVkZVwiOi00Ny4yNjYzNjl9LHtcImZyZXFcIjo4NjEzLjI4MTI1LFwibWFnbml0dWRlXCI6LTQ3LjQ4OTY1NX1dfSx7XCJhdWRpb0ZpbGVcIjpcImtpdGNoZW4xLm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjEwNy42NjYwMTYsXCJtYWduaXR1ZGVcIjotMjMuNjgzODMyfSx7XCJmcmVxXCI6MTUwLjczMjQyMixcIm1hZ25pdHVkZVwiOi0yMy44NzA2Njh9LHtcImZyZXFcIjoyMzYuODY1MjM0LFwibWFnbml0dWRlXCI6LTI4LjQ1ODQzOX0se1wiZnJlcVwiOjMwMS40NjQ4NDQsXCJtYWduaXR1ZGVcIjotMjkuMTQ2NDYxfSx7XCJmcmVxXCI6NDMwLjY2NDA2MixcIm1hZ25pdHVkZVwiOi0zMS42MjA3MjZ9LHtcImZyZXFcIjo1MzguMzMwMDc4LFwibWFnbml0dWRlXCI6LTMyLjI3OTg0Nn0se1wiZnJlcVwiOjQ5NS4yNjM2NzIsXCJtYWduaXR1ZGVcIjotMzIuNzgyMTI0fSx7XCJmcmVxXCI6NjQ1Ljk5NjA5NCxcIm1hZ25pdHVkZVwiOi0zMy4xMjE2NDd9LHtcImZyZXFcIjo4ODIuODYxMzI4LFwibWFnbml0dWRlXCI6LTMzLjg4Mjc1MX0se1wiZnJlcVwiOjc1My42NjIxMDksXCJtYWduaXR1ZGVcIjotMzQuMzk2MDQ2fSx7XCJmcmVxXCI6MTI0OC45MjU3ODEsXCJtYWduaXR1ZGVcIjotMzUuNzMzNTA1fSx7XCJmcmVxXCI6MTgzMC4zMjIyNjYsXCJtYWduaXR1ZGVcIjotMzYuNzQ1NDk5fSx7XCJmcmVxXCI6MTE0MS4yNTk3NjYsXCJtYWduaXR1ZGVcIjotMzcuMTE2ODk4fSx7XCJmcmVxXCI6MTA1NS4xMjY5NTMsXCJtYWduaXR1ZGVcIjotMzcuMTE4ODJ9LHtcImZyZXFcIjozMjUxLjUxMzY3MixcIm1hZ25pdHVkZVwiOi0zOC4wNjEwOTZ9LHtcImZyZXFcIjoxNDIxLjE5MTQwNixcIm1hZ25pdHVkZVwiOi0zOC4yMDc0MDV9XX0se1wiYXVkaW9GaWxlXCI6XCJzbm93Lm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjY0LjU5OTYwOSxcIm1hZ25pdHVkZVwiOi0yOS42NzcxNjZ9LHtcImZyZXFcIjozNDQuNTMxMjUsXCJtYWduaXR1ZGVcIjotNDAuMzQ3NDg1fSx7XCJmcmVxXCI6NjAyLjkyOTY4OCxcIm1hZ25pdHVkZVwiOi00NC4wNDA1NTh9LHtcImZyZXFcIjo2ODkuMDYyNSxcIm1hZ25pdHVkZVwiOi00NC44OTc5MTV9LHtcImZyZXFcIjo5MjUuOTI3NzM0LFwibWFnbml0dWRlXCI6LTQ4Ljg3MDEwNn0se1wiZnJlcVwiOjEyMDUuODU5Mzc1LFwibWFnbml0dWRlXCI6LTQ5LjA4NjMxOX0se1wiZnJlcVwiOjEwOTguMTkzMzU5LFwibWFnbml0dWRlXCI6LTUwLjk3NjAxM30se1wiZnJlcVwiOjEyOTEuOTkyMTg4LFwibWFnbml0dWRlXCI6LTUyLjIyNDIzNn0se1wiZnJlcVwiOjE0MjEuMTkxNDA2LFwibWFnbml0dWRlXCI6LTUzLjMzMDUyNH0se1wiZnJlcVwiOjE0ODUuNzkxMDE2LFwibWFnbml0dWRlXCI6LTUzLjQ3NjIxNX0se1wiZnJlcVwiOjEzNzguMTI1LFwibWFnbml0dWRlXCI6LTUzLjYxNTgzN30se1wiZnJlcVwiOjE2MzYuNTIzNDM4LFwibWFnbml0dWRlXCI6LTU0LjU4Mzk5Nn0se1wiZnJlcVwiOjE3NDQuMTg5NDUzLFwibWFnbml0dWRlXCI6LTU1LjI0MTAwNX0se1wiZnJlcVwiOjE4MDguNzg5MDYyLFwibWFnbml0dWRlXCI6LTU1LjcyNjExNn0se1wiZnJlcVwiOjE5MzcuOTg4MjgxLFwibWFnbml0dWRlXCI6LTU3LjY2NTI3Nn0se1wiZnJlcVwiOjIwMjQuMTIxMDk0LFwibWFnbml0dWRlXCI6LTU5LjI1MjgxNX1dfV1cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NCa01qZGlNRFF5TlRGalpqQmtZakprWkRBM015SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZkWFJwYkhNdWRITWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM2R1Y3k1MGN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZVMk5sYm1VdWRITWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM0JoZEhSbGNtNXpMblJ6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5TllYSnJiM1l1ZEhNaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwwZGxibVYwYVdNdWRITWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMU41Ym5Sb0xuUnpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlOZFd4MGFWTmhiWEJzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2THk0dmJtOWtaVjl0YjJSMWJHVnpMMmh2ZDJ4bGNpOWthWE4wTDJodmQyeGxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZLSGRsWW5CaFkyc3BMMkoxYVd4a2FXNHZaMnh2WW1Gc0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6Y0dWamRISmhiRVJoZEdFdWFuTnZiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRc1R6dEJRMVpCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h0UTBGQk1rSXNNRUpCUVRCQ0xFVkJRVVU3UVVGRGRrUXNlVU5CUVdsRExHVkJRV1U3UVVGRGFFUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzT0VSQlFYTkVMQ3RFUVVFclJEczdRVUZGY2tnN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3pzN096czdPenRCUXpWRVFTeE5RVUZOTEV0QlFVc3NSMEZCUnp0SlFVTmFMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVmtzUlVGQlZTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSE8wbEJSVFZFTEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVZrc1JVRkJWU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVNc1IwRkJSeXhEUVVGRExFZEJRVU1zUlVGQlJUdEpRVVYwUkN4TlFVRk5MRVZCUVVVc1EwRkJReXhMUVVGcFFpeEZRVUZQTEVWQlFVVTdVVUZEYWtNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVONlJDeERRVUZETzBsQlNVUXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRlZMRVZCUVVVN1VVRkRha1FzVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkRka0lzUTBGQlF6dEpRVVZFTEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMUZCUTJwRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlEyNURMRTFCUVUwc1dVRkJXU3hIUVVGSExFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTTdXVUZEY2tNc1RVRkJUU3hsUVVGbExFZEJRVWNzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXp0WlFVVjZReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUlN4bFFVRmxMRU5CUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZGTEZsQlFWa3NRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTnFSaXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRZaXhEUVVGRE8wbEJSVVFzWjBKQlFXZENMRVZCUVVVc1EwRkJReXhWUVVGVkxFVkJRVVVzYVVKQlFXbENMRVZCUVVVc1JVRkJSVHRSUVVOc1JDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJSU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUlN4RFFVRkRPMGxCUXpWR0xFTkJRVU03U1VGRlJDeFhRVUZYTEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFVkJRVVU3VVVGRE0wSXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTjZSQ3hOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF6dFJRVU5zUlN4TlFVRk5MRkZCUVZFc1IwRkJSeXhEUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJRenRSUVVWNlJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlJTeERRVUZETEVOQlFVVXNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZGTEVkQlFVY3NVMEZCVXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGNra3NRMEZCUXp0SlFVVkVMRkZCUVZFc1JVRkJSU3hEUVVGRExGZEJRVmNzUjBGQlF5eEhRVUZITEVWQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVazdTVUZGY0VZc1dVRkJXU3hGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZaTEVWQlFVVTdVVUZEYUVNc1JVRkJSU3hGUVVGRExFOUJRVThzUzBGQlN5eExRVUZMTEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRMMElzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTm1MRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU5LTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGNrSXNRMEZCUXp0SlFVTklMRU5CUVVNN1EwRkZSaXhEUVVGRE8zbEVRVVZoTEV0QlFVc3NSVUZCUXp0QlFVVmtMRTFCUVUwc1RVRkJUU3hIUVVGSExFTkJRVU1zVDBGQmMwSXNSVUZCVlN4RlFVRkZPMGxCUTNaRUxFbEJRVWtzV1VGQldTeEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVVc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRmFFVXNTVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEZsQlFWa3NRMEZCUXp0SlFVTXpReXhKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZGYkVJc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1VVRkRlRU1zVTBGQlV5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVONFFpeFRRVUZUTEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJXeERMRVZCUVVVc1EwRkJReXhEUVVGRExFOUJRVThzU1VGQlNTeFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNwQ0xFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRPMGxCUTBnc1EwRkJRenRCUVVOSUxFTkJRVU1zUTBGQlF6dEJRVUZCTzBGQlFVRTdRVUZGU3l4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGRExFbEJRV01zUlVGQldTeEZRVUZGTzBsQlEzQkVMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRlRU1zVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOdVJpeERRVUZETEVOQlFVTTdRVUZCUVR0QlFVRkJPMEZCUlVzc1RVRkJUU3haUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRlhMRVZCUVVVN1NVRkROVU1zYTBOQlFXdERPMGxCUTJ4RExFbEJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTXpReXhKUVVGSkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZGTTBNc2QwTkJRWGRETzBsQlEzaERMRFpDUVVFMlFqdEpRVU0zUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMjVETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRaaXhEUVVGRE8wbEJSVVFzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03VVVGRGRrTXNTVUZCU1N4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJYcENMRFJEUVVFMFF6dFJRVU0xUXl3MlFrRkJOa0k3VVVGRE4wSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVObUxFTkJRVU03U1VGRFNDeERRVUZETzBsQlJVUXNhME5CUVd0RE8wbEJRMnhETERSQ1FVRTBRanRKUVVNMVFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTJRc1EwRkJReXhEUVVGRE8wRkJRVUU3UVVGQlFUdEJRVWRMTEUxQlFVMHNkMEpCUVhkQ0xFZEJRVWNzUTBGQlJTeFRRVUZwUWl4RlFVRkZMRTFCUVdNc1JVRkJWeXhGUVVGRk8wbEJRM1JHTEUxQlFVMHNaVUZCWlN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hMUVVGTExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlJYSkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMEZCUTNaRExFTkJRVU1zUTBGQlF6dEJRVUZCTzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN1FVTjRSelJETzBGQlEyeENPMEZCUTJNN1FVRkZaRHRCUVVOMVFqdEJRVVZLTzBGQlNUbERMRU5CUVVNN1FVRkZSaXhOUVVGTkxHRkJRV0VzUjBGQlpUdEpRVU5vUXl4VlFVRlZMRVZCUVVVc1ZVRkJWVHREUVVOMlFpeERRVUZETzBGQlJVWXNUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhOUVVGdFFpeEZRVUZGTEVWQlFVVTdTVUZEYkVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eERRVUZETEcxQ1FVRkxMR0ZCUVdFc1JVRkJTeXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXp0SlFVVm9SU3hOUVVGTkxHbENRVUZwUWl4SFFVRlJMREJFUVVGWkxFTkJRVU03U1VGRk5VTXNVVUZCVVR0SlFVTlNMRTFCUVUwc1kwRkJZeXhIUVVGSExFVkJRVVVzUTBGQlF6dEpRVU14UWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxGbEJRVmtzUlVGQlJTeERRVUZETzBsQlJXNURMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeDFSRUZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRmNrWXNUVUZCVFN4blFrRkJaMElzUjBGQlJ6dFJRVU4yUWl4UFFVRlBMRVZCUVVVN1dVRkRVQ3cwUkVGQk5FUTdXVUZETlVRc05FUkJRVFJFTzFsQlF6VkVMRFJFUVVFMFJEdFpRVU0xUkN3MFJFRkJORVE3V1VGRE5VUXNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJSU3hOUVVGTkxFTkJRVU1zVlVGQlZTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlR0WlFVTTVSQ3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZGTEUxQlFVMHNRMEZCUXl4VlFVRlZMRWRCUVVjc1owSkJRV2RDTEVOQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRk8xTkJReTlFTzB0QlEwWXNRMEZCUXp0SlFVTkdMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zZFVSQlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTdzRSRUZCV1N4RFFVRkZMRTlCUVU4c1JVRkJSU3huUWtGQlowSXNRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxIVkVRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVONlNpeE5RVUZOTEdGQlFXRXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlFVVXNWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxEaEVRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZPMUZCUTI1R0xFOUJRVThzUlVGQlJUdFpRVU5RTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJUdFRRVU5xUlR0TFFVTkdMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSVW9zU1VGQlNTeFhRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUlhCQ0xFMUJRVTBzV1VGQldTeEhRVUZITEVkQlFVY3NSVUZCUlR0UlFVTjRRaXhYUVVGWExFZEJRVWNzWjBaQlFYZENMRU5CUVVNc1YwRkJWeXhGUVVGRkxHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRemxGTEN0SlFVRXJTVHRSUVVNdlNTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRM2hFTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRlRU1zVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkZMR2RDUVVGblFpeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVVc1EwRkJRenRSUVVVMVJpd3dSVUZCTUVVN1VVRkRNVVVzVFVGQlRTeE5RVUZOTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zVVVGQlVUdGhRVU55UXl4TlFVRk5MRU5CUVVVc1EwRkJReXhMUVVGcFFpeEZRVUZGTEVkQlFXRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZGTEVkQlFVY3NRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eEZRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZETEVOQlFVTXNRMEZCUXp0aFFVTnFTU3hIUVVGSExFTkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRE8yRkJRM0pDTEVkQlFVY3NRMEZCUlN4RFFVRkZMR0ZCUVhGQ0xFVkJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEdGQlFXRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJReXhEUVVGRExFTkJRVU1zUTBGQlJTeERRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZjRWtzVFVGQlRTeFhRVUZYTEVkQlFXbENPMWxCUTJoRExHbENRVUZwUWl4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVTmtMRXRCUVVzc1EwRkJReXhGUVVGRk8yZENRVU5PTEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVNc1JVRkJSU3hEUVVGRE8xbEJRMnBHTEVOQlFVTXNRMEZEUml4RFFVTkdPMWxCUTBRc1kwRkJZeXhGUVVGRkxFVkJRVVU3V1VGRGJFSXNZMEZCWXl4RlFVRkZMRU5CUVVNN1dVRkRha0lzVFVGQlRUdFpRVU5PTEdsQ1FVRnBRaXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTTdXVUZEYWtRc1owSkJRV2RDTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc2RVUkJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRE4wTXNhVUpCUVdsQ08xbEJRMnBDTEdkQ1FVRm5RanRaUVVOb1FpeFJRVUZSTEVWQlFVVXNXVUZCV1R0VFFVTjJRanRSUVVWRUxHRkJRV0VzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGSExFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkRMRU5CUVVNc1EwRkJRenRSUVVVeFJTeHJRa0ZCYTBJN1VVRkRiRUlzU1VGQlNTeHhSRUZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBsQlEyaERMRU5CUVVNc1EwRkJRenRKUVVWR0xGbEJRVmtzUlVGQlJTeERRVUZETzBGQlEycENMRU5CUVVNc1EwRkJRenRCUVVWR0xDdEVRVUZsTEVkQlFVY3NSVUZCUXp0QlFVTktPenM3T3pzN096czdPMEZEZGtablF6dEJRVWx1UWp0QlFXMUNkRUk3U1VGTlNpeFpRVUZ0UWl4TlFVRnZRanRSUVVOeVF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVWeVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEhWRVFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU5zUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMSFZFUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0UlFVTm9SaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEcxRlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU12UkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRk0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTjZReXhEUVVGRE8wbEJSVTBzU1VGQlNUdFJRVU5VTEUxQlFVMHNUMEZCVHl4SFFVRmhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTJ4RUxFMUJRVTBzVVVGQlVTeEhRVUZoTEU5QlFVOHNRMEZCUXp0UlFVVnVReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEVml4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSVHRaUVVOMlF5eE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJReXhEUVVGRExFTkJRVU1zUjBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlF5eERRVUZETEVOQlFVTTdXVUZCUXl4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEzUklMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkZiRVFzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4elFrRkJjMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEY2tVc1JVRkJSU3hGUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4SFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU0zUkN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdG5Ra0ZEY2tJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVNN1owSkJRM3BDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOa0xFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5vUml4RFFVRkRPMUZCUTBRc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRFNpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dFpRVU42UWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03VVVGRGNFSXNRMEZCUXp0UlFVVkVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRFpDeERRVUZETzBsQlJVOHNWVUZCVlN4RFFVRkZMRXRCUVVzc1JVRkJSU3hWUVVGVk8xRkJRMjVETEUxQlFVMHNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVWMlFpeG5Sa0ZCWjBZN1VVRkRhRVlzVFVGQlRTeFhRVUZYTEVkQlFVY3NkVVJCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dFJRVU51Uml4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRekZGTEUxQlFVMHNXVUZCV1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFVkJRVVVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNSMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVrc1RVRkJUU3haUVVGWkxFZEJRVWNzYTBWQlFVOHNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRE8xRkJSWFJGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOV0xFMUJRVTBzV1VGQldTeEhRVUZITEVOQlFVTXNWVUZCVlN4RlFVRkZMRVZCUVVVN1dVRkRiRU1zVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEyaEdMRTFCUVUwc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNN1dVRkZNME1zUlVGQlJTeEZRVUZETEZGQlFWRXNTMEZCU3l4VFFVRlRMRWxCUVVrc2RVUkJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU51UkN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0blFrRkRkRU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03YjBKQlF6TkZMRWxCUVVrc1JVRkJSU3hSUVVGUkxFZEJRVU1zVFVGQlRUdHZRa0ZEY2tJc1NVRkJTU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03YjBKQlF6bENMRWRCUVVjc1JVRkJSU3hEUVVGRE8yOUNRVU5PTEVkQlFVY3NSVUZCUlN4SlFVRkpPMmxDUVVOV0xFTkJRVU1zUTBGQlF6dFpRVU5NTEVOQlFVTTdXVUZEUkN4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVWS0xFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RlFVRkZPMmRDUVVOeVFpeEZRVUZGTEVWQlFVTXNWVUZCVlN4TFFVRkxMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFSeXhaUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdaMEpCUXpOQ0xFTkJRVU03V1VGRFNDeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU42UXl4RFFVRkRPMUZCUlVRc1dVRkJXU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlJUTkNMRU5CUVVNN1NVRkZUeXhWUVVGVk8xRkJRMmhDTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkZPVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1VVRkZNMFFzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTTFReXhEUVVGRE8wTkJRMFk3UVVGQlFUdEJRVUZCT3pzN096czdPenM3UVVOcVNFUTdRVUZCUVRzN1IwRkZSenRCUVVVclFqdEJRVU5GTzBGQlJ6ZENMRTFCUVUwc1QwRkJUeXhIUVVGSExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVGQk8wRkJRVUU3UVVGRk1VUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzVFVGQmEwSXNSVUZCUlN4WFFVRnRRanRKUVVONFJTeEpRVUZKTEV0QlFVc3NSMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRkRUlzU1VGQlNTeE5RVUZOTEVkQlFVY3NSMEZCVVN4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVWNFJDeEZRVUZGTEVWQlFVTXNWMEZCVnl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNUMEZCVFN4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOWUxFMUJRVTBzVFVGQlRTeEZRVUZGTEVOQlFVTTdVVUZEYWtJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRFJDeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTktMRWRCUVVjc1JVRkJReXhKUVVGSkxFTkJRVU1zUjBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEyaERMRTFCUVUwc1RVRkJUU3hGUVVGRkxFTkJRVU03VVVGRGFrSXNRMEZCUXp0SlFVTklMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVU03UVVGQlFUdEJRVUZCTzBGQlJVc3NUVUZCVFN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzVFVGQmEwSXNSVUZCUlN4WFFVRnRRanRKUVVVeFJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4SFFVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZNVVVzUlVGQlJTeEZRVUZETEZkQlFWY3NTVUZCU1N4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRelZDTEU5QlFVMHNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRXQ3hOUVVGTkxFMUJRVTBzUlVGQlJTeERRVUZETzFGQlEycENMRU5CUVVNN1NVRkRTQ3hEUVVGRE8wbEJRMFFzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEU2l4SFFVRkhMRVZCUVVNc1NVRkJTU3hEUVVGRExFZEJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU5vUXl4TlFVRk5MRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJRMnBDTEVOQlFVTTdTVUZEU0N4RFFVRkRPMEZCUTBnc1EwRkJReXhEUVVGRE8wRkJRVUU3UVVGQlFUdEJRVVZMTEUxQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReXhUUVVGVExFbEJRV2RDTEVWQlFVVXNTMEZCWVN4RlFVRkZMRmxCUVhkQ08wbEJRMmhITEVsQlFVa3NWMEZCVnl4SFFVRlhMRWxCUVVrc2RVUkJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkZiRVFzU1VGQlNTeFRRVUZUTEVkQlFWRXNXVUZCV1N4RFFVRkRPMGxCUld4RExFOUJRVTBzU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEV0N4SlFVRkpMRk5CUVZNc1IwRkJVU3hYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUlhwRUxGTkJRVk1zUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVVXZReXhOUVVGTkxGTkJRVk1zUTBGQlF6dEpRVU5zUWl4RFFVRkRPMEZCUTBnc1EwRkJReXhEUVVGRE8wRkJRVUU3UVVGQlFUdEJRVVZMTEUxQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhWUVVGVkxHVkJRVEpDTEVWQlFVVXNTVUZCWXp0SlFVTndSaXhKUVVGSkxFOUJRVThzUjBGQldTeEpRVUZKTEhsRVFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBsQlJURkVMRWxCUVVrc1UwRkJVeXhIUVVGaExFbEJRVWtzUTBGQlF6dEpRVVV2UWl4UFFVRk5MRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMWdzU1VGQlNTeFRRVUZUTEVkQlFWRXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVVZ5UkN4VFFVRlRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFJRVVYyUkN4TlFVRk5MRk5CUVZNc1EwRkJRenRKUVVOc1FpeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkRPMEZCUVVFN1FVRkJRVHM3T3pzN096czdPenRCUTI1RmQwUTdRVUZGTVVRN1NVRk5SU3haUVVGWkxFdEJRVmtzUlVGQlJTeExRVUZoTzFGQlEzSkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzUlVGQlJUdFpRVU53UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVVYyUWl3clEwRkJLME03VVVGREwwTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGNFSXNSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTMEZCU3l4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRE5VSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRhRU1zUTBGQlF6dFJRVVZFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNCRkxFTkJRVU03U1VGRlJDeHpRa0ZCYzBJc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN6dFJRVU5xUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVVY0UWl4elJFRkJjMFE3VVVGRGRFUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGRrSXNSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTTNReXhIUVVGSExFVkJRVU1zU1VGQlNTeERRVUZETEVkQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8yZENRVU0zUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGJrVXNRMEZCUXp0UlFVTklMRU5CUVVNN1VVRkRSQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRmVrTXNkMFJCUVhkRU8xRkJRM2hFTEhGRVFVRnhSRHRSUVVOeVJDeEpRVUZKTEdkQ1FVRm5RaXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU14UWl4SFFVRkhMRVZCUVVNc1NVRkJTU3hEUVVGRExFZEJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUXk5RExFbEJRVWtzY1VKQlFYRkNMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJSUzlDTEVkQlFVY3NSVUZCUXl4SlFVRkpMRU5CUVVNc1IwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdaMEpCUXpkRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5vUXl4RFFVRkRPMWxCUlVRc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVTTdVVUZETDBNc1EwRkJRenRSUVVWRUxHZEZRVUZuUlR0UlFVTm9SU3hIUVVGSExFVkJRVU1zU1VGQlNTeERRVUZETEVkQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1dVRkRia01zU1VGQlNTeFpRVUZaTEVOQlFVTTdXVUZGYWtJc1JVRkJSU3hGUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOV0xGbEJRVmtzUjBGQlJ5eERRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRE8xbEJRM0pFTEVOQlFVTTdXVUZEUkN4SlFVRkpMRU5CUVVNc1EwRkJRenRuUWtGRFNpeFpRVUZaTEVkQlFVY3NRMEZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGRExFTkJRVU1zUzBGQlN5eEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZGTEVOQlFVTTdXVUZEYkVRc1EwRkJRenRaUVVWRUxFbEJRVWtzYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFRRVUZUTEVOQlFVVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSVHRuUWtGRE9VUXNUVUZCVFN4RFFVRkRMRzlGUVVGWkxFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXpGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlJVZ3NiVU5CUVcxRE8xbEJRMjVETEVsQlFVa3NVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRE5VTXNTVUZCU1N3d1FrRkJNRUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVVZ3UlN3MlJFRkJOa1E3V1VGRE4wUXNaMEpCUVdkQ0xFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkZkRVVzUTBGQlF6dFJRVWRFTEdkQ1FVRm5RaXhIUVVGSExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJSU3g1UkVGQlV5eERRVUZGTEVOQlFVTTdVVUZGY2tRc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRPMGxCUXpGQ0xFTkJRVU03U1VGSFJDeFpRVUZaTEVOQlFVTXNTMEZCVlR0UlFVTnlRaXhOUVVGTkxHZENRVUZuUWl4SFFVRXlRaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1VVRkZka1VzU1VGQlNTeHRRa0ZCYlVJc1IwRkJWeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRM1JGTEUxQlFVMHNRMEZCUXl4dlJVRkJXU3hEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnVReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVZJTEVsQlFVa3NZVUZCWVN4SFFVRnJRaXhuUWtGQlowSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzFGQlJYcEZMRWxCUVVrc1UwRkJVeXhIUVVGWExEaEVRVUZOTEVOQlFVVXNZVUZCWVN4RFFVRkZMRU5CUVVNN1VVRkRhRVFzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGNFTXNRMEZCUXp0SlFVVkVMRk5CUVZNN1VVRkRVQ3hKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZGYUVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEZsQlFWazdXVUZEY2tNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFpRVUZaTEVOQlFVTTdXVUZGT1VJc1QwRkJUU3hKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEV0N4SlFVRkpMRk5CUVZNc1IwRkJWeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRuUWtGRE1VUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1owSkJSWFJGTEUxQlFVMHNVMEZCVXl4RFFVRkRPMWxCUTJ4Q0xFTkJRVU03VVVGRFNDeERRVUZETEVOQlFVTTdTVUZEU2l4RFFVRkRPME5CUlVZN1FVRkJRU3hEUVVGRE8wRkJSV2RDT3pzN096czdPenM3TzBGRE0wZFZPMEZCUnpWQ08wbEJUVVVzV1VGQldTeGxRVUV5UWl4RlFVRkZMRWxCUVdNN1VVRkRja1FzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4bFFVRmxMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRE8wbEJRemRHTEVOQlFVTTdTVUZIUkN3d1JFRkJNRVE3U1VGRE1VUXNjVUpCUVhGQ0xFTkJRVU1zVlVGQmIwSXNSVUZCUlN4SlFVRmpPMUZCUTNoRUxFbEJRVWtzUzBGQlN5eEhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMR3RDUVVGclFqdFJRVU42UXl4SlFVRkpMRzlDUVVGdlFpeEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGWExFVkJRVVVzUlVGQlJTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVVc1EwRkJRenRSUVVWd1J5eEhRVUZITEVWQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVNc2IwSkJRVzlDTEVOQlFVTXNUVUZCVFN4SFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1dVRkRja1FzUzBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZET1VRc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEWml4RFFVRkRPMGxCUlVRc1lVRkJZVHRKUVVOaUxHMUdRVUZ0Ump0SlFVTnVSaXh2UWtGQmIwSXNRMEZCUXl4TlFVRm5RaXhGUVVGRkxGVkJRWE5DTzFGQlJUTkVMRWxCUVVrc2JVSkJRVzFDTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUlRWQ0xFZEJRVWNzUlVGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGNrTXNSVUZCUlN4RlFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpORExHMUNRVUZ0UWl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVNeFFpeERRVUZETzFsQlJVUXNNa1JCUVRKRU8xbEJRek5FTEVWQlFVVXNSVUZCUXl4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTMEZCU3l4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTTNReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1owSkJSUzlDTEcxQ1FVRnRRaXhIUVVGSExFTkJRVU1zVVVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVGTEVOQlFVTTdVVUZEU0N4RFFVRkRPMUZCUlVRc1NVRkJTU3gxUWtGQmRVSXNSMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRlRU1zVFVGQlRTeHJRa0ZCYTBJc1IwRkJWeXhOUVVGTkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRSUVVjdlJDeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExIVkVRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJSUzlETEVWQlFVVXNSVUZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY2tJc2RVSkJRWFZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRM1JGTEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOS0xFZEJRVWNzUlVGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03WjBKQlEzSkRMSFZFUVVGMVJEdG5Ra0ZEZGtRc1JVRkJSU3hGUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4clFrRkJhMElzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUlhCRExFVkJRVVVzUlVGQlF5eE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU12UXl4MVFrRkJkVUlzUjBGQlJ5eERRVUZETEVOQlFVTTdiMEpCUXpsQ0xFTkJRVU03YjBKQlJVUXNNa1JCUVRKRU8yOUNRVU16UkN4RlFVRkZMRVZCUVVNc1RVRkJUU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRXRCUVVzc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0M1FrRkRha1FzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8zZENRVVV2UWl4MVFrRkJkVUlzUjBGQlJ5eERRVUZETEZGQlFWRXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZETTBVc1EwRkJRenRuUWtGRFNDeERRVUZETzFsQlEwZ3NRMEZCUXp0UlFVTklMRU5CUVVNN1VVRkZSQ3hOUVVGTkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUlVGQlJTeFZRVUZWTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlJTeERRVUZETzBsQlEycEdMRU5CUVVNN1NVRkZSQ3d3UTBGQk1FTTdTVUZETVVNc2VVZEJRWGxITzBsQlEzcEhMR1ZCUVdVc1EwRkJReXhQUVVGdFFqdFJRVVZxUXl4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETVVVc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUldoR0xHMURRVUZ0UXp0UlFVTnVReXhOUVVGTkxFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3h0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMGxCUTJwRUxFTkJRVU03U1VGRlJDeG5SVUZCWjBVN1NVRkRhRVVzYzBKQlFYTkNMRU5CUVVNc1UwRkJiVUlzUlVGQlJTeFRRVUZ0UWp0UlFVTTNSQ3hOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZGY0VRc1IwRkJSeXhGUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZETEcxQ1FVRnRRaXhEUVVGRExFMUJRVTBzUjBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEyeEVMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrVXNRMEZCUXp0UlFVVkVMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0SlFVTTNRaXhEUVVGRE8wbEJSVVFzYlVKQlFXMUNMRU5CUVVNc1UwRkJiVUlzUlVGQlJTeFRRVUZ0UWp0UlFVTXhSQ3hOUVVGTkxGRkJRVkVzUjBGQlZ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOeVJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRhRVlzVFVGQlRTeFZRVUZWTEVkQlFWY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlRWRUxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzVlVGQlZTeERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRWRCUVVNc1EwRkJReXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlJTeERRVUZETzFGQlJUTklMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0SlFVTXhRaXhEUVVGRE8wbEJSVVFzTWtSQlFUSkVPMGxCUXpORUxGZEJRVmNzUTBGQlF5eExRVUZoTEVWQlFVVXNTVUZCV1R0UlFVTnlReXhKUVVGSkxFMUJRVTBzUjBGQlZ5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUld4RExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEYUVJc1EwRkJRenRKUVUxRUxEaEVRVUU0UkR0SlFVTTVSQ3h0UWtGQmJVSXNRMEZCUXl4VlFVRnpRaXhGUVVGRkxFbEJRV003VVVGRGVFUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRk9VTXNSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1dVRkRNME1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZET1VRc1EwRkJRenRSUVVWRUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEYUVJc1EwRkJRenRKUVVWRUxHbENRVUZwUWl4RFFVRkRMRlZCUVhOQ0xFVkJRVVVzU1VGQll6dFJRVU4wUkN4TlFVRk5MR2RDUVVGblFpeEhRVUZaTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkROMFVzVFVGQlRTeHBRa0ZCYVVJc1IwRkJZeXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkROMFlzVFVGQlRTeGpRVUZqTEVkQlFXTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMUZCUlRGRkxFZEJRVWNzUlVGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEyaEVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOd1JpeERRVUZETzFGQlEwUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4SFFVRkhMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJRekZFTEhORVFVRnpSRHRSUVVOMFJDeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJYUkhMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0SlFVTXpRaXhEUVVGRE8wbEJSVVFzV1VGQldTeERRVUZETEV0QlFXVTdVVUZETVVJc05rTkJRVFpETzFGQlJUZERMRTFCUVUwc1UwRkJVeXhIUVVGaExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVVdlJTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUTI1Q0xFTkJRVU03U1VGRlJDeFRRVUZUTzFGQlExQXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJSV3hDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1YwRkJWeXhaUVVGelFqdFpRVU12UXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExGbEJRVmtzUTBGQlF6dFpRVVU1UWl4UFFVRk5MRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU5ZTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMmRDUVVOd1JDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenRuUWtGRk0wSXNUVUZCVFN4VFFVRlRMRU5CUVVNN1dVRkRiRUlzUTBGQlF6dFJRVU5JTEVOQlFVTXNRMEZCUXp0SlFVTktMRU5CUVVNN1EwRkZSanRCUVVGQkxFTkJRVU03UVVGRmFVSTdPenM3T3pzN08wRkROVXR1UWp0SlFVMUZMRmxCUVZrc1QwRkJUenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRKUVVONlFpeERRVUZETzBsQlJVOHNTVUZCU1R0UlFVTldMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUlVGQlJTeERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVNeFF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRSUVVWb1JDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEZGtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZPVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRemxDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZETDBJc1EwRkJRenRKUVVWTkxFbEJRVWtzUTBGQlF5eEhRVUZwUWp0UlFVTXpRaXhOUVVGTkxFVkJRVU1zU1VGQlNTeEhRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUjBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkRMRU5CUVVNc1JVRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVU0zUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRldpeEpRVUZKTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRZaXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM1pETERKRFFVRXlRenRSUVVNelF5eEZRVUZGTEVWQlFVTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJRenRaUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJoRExHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRelZDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzcENMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUlN4RFFVRkRPMUZCUjNwSUxFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVTm9RaXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETzFsQlEyaENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNwQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1IwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUldoRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEWkN4RFFVRkRPMGxCUlUwc1NVRkJTU3hEUVVGRExFbEJRVWs3VVVGRFpDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUjBGQlF5eEhRVUZITEVOQlFVVXNRMEZCUXp0UlFVTXpSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZGTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJReXhEUVVGRE8xRkJSVGxFTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wTkJSVVk3UVVGRlJDeDVSRUZCWlN4TFFVRkxMRVZCUVVNN096czdPenM3T3pzN08wRkRlRVJsTzBGQlExSTdRVUZSTlVJN1NVRk5SU3haUVVGWkxFOUJRVThzUlVGQlJTeEhRVUV5UWp0UlFVTTVReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0UlFVTjJRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRkxGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxEUkRRVUZKTEVOQlFVTXNSVUZCUXl4SFFVRkhMRVZCUVVVc1dVRkJXU3hEUVVGRExFdEJRVXNzUlVGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVU1zUTBGQlF5eERRVUZGTEVOQlFVTTdVVUZETDBnc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRPMGxCUXpOQ0xFTkJRVU03U1VGRlRTeEpRVUZKTEVOQlFVTXNSMEZCYVVJN1VVRkRNMElzVFVGQlRTeEZRVUZETEVsQlFVa3NSMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hIUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVkQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJReXhEUVVGRExFVkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZGTjBNc1NVRkJTU3hKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEySXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkZMRWxCUVVrc1EwRkJSU3hEUVVGRE8xRkJRekZFTEUxQlFVMHNkMEpCUVhkQ0xFZEJRVWNzV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVNMVJDeFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3hMUVVGTExFVkJRVVVzZDBKQlFYZENMRU5CUVVVc1EwRkJRenRSUVVNMVJDeFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJSU3gxUkVGQlN5eERRVUZETEhOQ1FVRnpRaXhEUVVGRkxFbEJRVWtzUlVGQlJTeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkZMRVZCUVVVc2QwSkJRWGRDTEVOQlFVVXNRMEZCUXp0UlFVTnNTQ3d5UTBGQk1rTTdVVUZETTBNc1JVRkJSU3hGUVVGRExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTTdXVUZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hIUVVGRExFZEJRVWNzUTBGQlF6dFJRVU12UWl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4SFFVRkhMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzZDBKQlFYZENMRU5CUVVVc1EwRkJRenRSUVVONlJTeFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJSU3hIUVVGSExFVkJRVVVzZDBKQlFYZENMRU5CUVVVc1EwRkJRenRSUVVjMVJDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUTJoQ0xGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWxCUVVrc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4M1FrRkJkMElzUTBGQlJTeERRVUZETzFsQlEzcEZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZsQlFWa3NSVUZCUlN4M1FrRkJkMElzUTBGQlJTeERRVUZETzFGQlF6TkVMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUlN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRkxFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl3MlEwRkJOa003VVVGRmJrWXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRmxCUVZrc1JVRkJSU3gzUWtGQmQwSTdVVUZEZEVRc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF6dFpRVU5vUWl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFGQlF6ZENMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXcyUTBGQk5rTTdVVUZGYWtVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dEpRVU5rTEVOQlFVTTdTVUZGVHl4MVFrRkJkVUlzUTBGQlJTeEpRVUZYTzFGQlF6RkRMSFZJUVVGMVNEdFJRVU4yU0N4TlFVRk5MSE5DUVVGelFpeEhRVUZITEhWRVFVRkxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZGTEVOQlFVTTdVVUZETTBjc1RVRkJUU3hEUVVGRExIVkVRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUzBGQlN5eHpRa0ZCYzBJc1EwRkJSU3hEUVVGRE8wbEJRemRHTEVOQlFVTTdRMEZEUmp0QlFVVkVMSGxFUVVGbExGbEJRVmtzUlVGQlF6czdPenM3T3pzNFEwTXhSRFZDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFTeG5Ra0ZCWjBJc1RVRkJUVHRCUVVOMFFpeG5Ra0ZCWjBJc1lVRkJZVHRCUVVNM1FqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNjVUpCUVhGQ0xITkNRVUZ6UWp0QlFVTXpRenRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4NVFrRkJlVUlzWTBGQll6dEJRVU4yUXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UlFVRlJPMEZCUTNoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxQ1FVRnRRaXh6UWtGQmMwSTdRVUZEZWtNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNkVUpCUVhWQ0xHTkJRV003UVVGRGNrTTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h6UTBGQmMwTXNUVUZCVFR0QlFVTTFRenRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3huUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4WFFVRlhPMEZCUTFnN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHpzN1FVRkZVRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNkVVJCUVhWRU96dEJRVVYyUkR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzJSVUZCTmtVN1FVRkROMFU3UVVGRFFTeHBSRUZCYVVRN1FVRkRha1FzWjBSQlFXZEVPMEZCUTJoRUxHZEVRVUZuUkR0QlFVTm9SQ3huUkVGQlowUTdRVUZEYUVRc1owUkJRV2RFTzBGQlEyaEVMR3RFUVVGclJEdEJRVU5zUkN4dFJFRkJiVVFzZFVOQlFYVkRMSFZEUVVGMVF6dEJRVU5xU1N4dFJFRkJiVVFzZFVOQlFYVkRMSFZEUVVGMVF6dEJRVU5xU1N4clJFRkJhMFE3UVVGRGJFUXNhMFJCUVd0RU8wRkJRMnhFTEd0RVFVRnJSRHRCUVVOc1JDeHhSRUZCY1VRc2QwTkJRWGRETzBGQlF6ZEdPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h0UWtGQmJVSXNjMEpCUVhOQ08wRkJRM3BETzBGQlEwRXNkVUpCUVhWQ0xHbERRVUZwUXp0QlFVTjRSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUXNUMEZCVHpzN1FVRkZVRHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJMR2RDUVVGblFqdEJRVU5vUWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2RVSkJRWFZDTEhOQ1FVRnpRanRCUVVNM1F6dEJRVU5CTzBGQlEwRXNVMEZCVXpzN1FVRkZWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR0ZCUVdFc1QwRkJUenRCUVVOd1FqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHZERRVUZuUXl4WlFVRlpPMEZCUXpWRExHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExEUkRRVUUwUXl4clFrRkJhMEk3UVVGRE9VUXNORU5CUVRSRExHdENRVUZyUWp0QlFVTTVSQ3h2UTBGQmIwTXNZMEZCWXp0QlFVTnNSQ3hyUTBGQmEwTXNZVUZCWVR0QlFVTXZReXhyUTBGQmEwTXNZVUZCWVR0QlFVTXZReXhyUTBGQmEwTXNZVUZCWVR0QlFVTXZReXh6UTBGQmMwTXNaVUZCWlR0QlFVTnlSQ3hyUTBGQmEwTXNZVUZCWVR0QlFVTXZReXhyUTBGQmEwTXNZVUZCWVR0QlFVTXZRenM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeHZRa0ZCYjBJN1FVRkRka003TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHdERRVUZyUXl4TFFVRkxPMEZCUTNaRE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJMR2RDUVVGblFpeGpRVUZqTzBGQlF6bENMR2RDUVVGblFpeFJRVUZSTzBGQlEzaENMR2RDUVVGblFpeFBRVUZQTzBGQlEzWkNPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHhRa0ZCY1VJc2RVSkJRWFZDTzBGQlF6VkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdPMEZCUlZRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hYUVVGWE8wRkJRMWc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGaE8wRkJRMkk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYTzBGQlExZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXhQUVVGUE8wRkJRM1pDTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPenRCUVVWVU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3h0UWtGQmJVSXNZMEZCWXp0QlFVTnFRenRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWlVGQlpUdEJRVU5tTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHRkJRV0U3UVVGRFlqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xGRkJRVkU3UVVGRGVFSXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN08wRkJSVlE3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSTdRVUZEYWtJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UlFVRlJPMEZCUTNoQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUT3p0QlFVVlVPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc2JVSkJRVzFDTEdOQlFXTTdRVUZEYWtNN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4WFFVRlhPMEZCUTFnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4WlFVRlpPMEZCUXpWQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZkQlFWYzdPMEZCUlZnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzY1VKQlFYRkNMR0ZCUVdFN1FVRkRiRU03UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hoUVVGaE8wRkJRMkk3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN08wRkJSVlE3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc1kwRkJZenRCUVVOcVF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UlFVRlJPMEZCUTNoQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVDeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXhoUVVGaE8wRkJRemRDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEdOQlFXTTdRVUZEYWtNN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEZsQlFWazdRVUZETlVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVjBGQlZ6czdRVUZGV0R0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSXNZVUZCWVR0QlFVTnNRenRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4WlFVRlpPMEZCUXpWQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenM3UVVGRlZEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR1ZCUVdVN1FVRkRaanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZkQlFWYzdRVUZEV0R0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRkZCUVZFN1FVRkRlRUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4dFFrRkJiVUlzZFVKQlFYVkNPMEZCUXpGRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJMR2RDUVVGblFpeFBRVUZQTzBGQlEzWkNPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzYVVKQlFXbENPMEZCUTNCRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHJSRUZCYTBRN1FVRkRiRVE3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWlVGQlpTeDNRa0ZCZDBJN1FVRkRka003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXhQUVVGUE8wRkJRM1pDTEdkQ1FVRm5RaXhUUVVGVE8wRkJRM3BDTEdkQ1FVRm5RaXhQUVVGUE8wRkJRM1pDTEdkQ1FVRm5RaXhQUVVGUE8wRkJRM1pDTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxEUkNRVUUwUWl3eVFrRkJNa0lzU1VGQlNTeGxRVUZsTzBGQlF6RkZPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTEZOQlFWTTdRVUZEZWtJc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xHbENRVUZwUWp0QlFVTnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xHVkJRV1U3UVVGRGFFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4VFFVRlRPMEZCUTNwQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJMR2RDUVVGblFpeFBRVUZQTzBGQlEzWkNMR2RDUVVGblFpeFBRVUZQTzBGQlEzWkNMR2RDUVVGblFpeFBRVUZQTzBGQlEzWkNMR2RDUVVGblFqdEJRVU5vUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdsRFFVRnBReXhOUVVGTk8wRkJRM1pETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1YwRkJWenM3UVVGRldEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEUxQlFVMDdRVUZEZEVJc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3huUWtGQlowSXNUMEZCVHp0QlFVTjJRaXhuUWtGQlowSXNUMEZCVHp0QlFVTjJRanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4dFFrRkJiVUlzZFVKQlFYVkNPMEZCUXpGRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFMUJRVTA3UVVGRGRFSTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNiVUpCUVcxQ0xIVkNRVUYxUWp0QlFVTXhRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzWlVGQlpTeDFRa0ZCZFVJN1FVRkRkRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h4UTBGQmNVTXNUVUZCVFR0QlFVTXpRenRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFMUJRVTA3UVVGRGRFSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHhRa0ZCY1VJc2RVSkJRWFZDTzBGQlF6VkRPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXhOUVVGTk8wRkJRM1JDTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGaExHdEVRVUZyUkN4RlFVRkZPMEZCUTJwRk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR0ZCUVdFc1QwRkJUenRCUVVOd1FqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVURzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTERCQ1FVRXdRanRCUVVNeFFqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHTkJRV01zUzBGQlN6dEJRVU51UWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMR3RDUVVGclFpeEhRVUZITzBGQlEzSkNPMEZCUTBFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4bFFVRmxPMEZCUTJ4RE8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNZMEZCWXl4UFFVRlBPMEZCUTNKQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNZMEZCWXl4WlFVRlpPMEZCUXpGQ0xHTkJRV01zUzBGQlN6dEJRVU51UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRXRCUVVzN1FVRkRia0lzWTBGQll5eFBRVUZQTzBGQlEzSkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2MwSkJRWE5DTzBGQlEzUkNPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGQlFUdEJRVU5NT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ5d3dRMEZCTUVNN1FVRkROME03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN096dEJRVWRFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNZMEZCWXp0QlFVTTFRanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHZRMEZCYjBNc1RVRkJUVHRCUVVNeFF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZMEZCWXl4UFFVRlBPMEZCUTNKQ0xHTkJRV01zVDBGQlR6dEJRVU55UWl4alFVRmpMRTlCUVU4N1FVRkRja0lzWTBGQll5eGhRVUZoTzBGQlF6TkNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRmpMRTlCUVU4N1FVRkRja0lzWTBGQll5eFBRVUZQTzBGQlEzSkNMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNUMEZCVHp0QlFVTnlRaXhqUVVGakxHRkJRV0U3UVVGRE0wSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWTBGQll5eFRRVUZUTzBGQlEzWkNMR05CUVdNN1FVRkRaRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNjME5CUVhORExHVkJRV1U3UVVGRGNrUXNaME5CUVdkRExGbEJRVms3UVVGRE5VTXNaMFJCUVdkRUxHOUNRVUZ2UWpzN1FVRkZjRVU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk8wRkJRMEVzWTBGQll5eFBRVUZQTzBGQlEzSkNMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEZsQlFWazdRVUZETVVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenM3UVVGRlVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTEdOQlFXTTdRVUZETDBJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR1ZCUVdVN1FVRkRaanRCUVVOQk8wRkJRMEVzWVVGQllUdEJRVU5pTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRTlCUVU4N1FVRkRja0lzWTBGQll5eFBRVUZQTzBGQlEzSkNMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhYUVVGWE8wRkJRM3BDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdPMEZCUlZBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRaXhqUVVGak8wRkJReTlDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNUMEZCVHp0QlFVTnlRaXhqUVVGakxFOUJRVTg3UVVGRGNrSXNZMEZCWXl4WFFVRlhPMEZCUTNwQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3TzBGQlJWQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWl4alFVRmpPMEZCUXk5Q08wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR05CUVdNc1dVRkJXVHRCUVVNeFFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xHTkJRV003UVVGREwwSTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNZMEZCWXl4VFFVRlRPMEZCUTNaQ0xHTkJRV003UVVGRFpEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6czdRVUZGU0R0QlFVTkJPMEZCUTBFc1kwRkJZeXhUUVVGVE8wRkJRM1pDTEdOQlFXTTdRVUZEWkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdPMEZCUlVnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNZMEZCWXl4TlFVRk5PMEZCUTNCQ0xHRkJRV0VzVDBGQlR6dEJRVU53UWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZET3pzN096czdPenRCUTNRMFJrUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxEUkRRVUUwUXpzN1FVRkZOVU03T3pzN096czdRVU53UWtFc2JVSkJRVzFDTEc5RFFVRnZReXgzUTBGQmQwTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDNRMEZCZDBNc1JVRkJSU3gzUTBGQmQwTXNSVUZCUlN4M1EwRkJkME1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4RlFVRkZMSGxEUVVGNVF5eDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3hGUVVGRkxEWkRRVUUyUXl4NVEwRkJlVU1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN4M1EwRkJkME1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeEZRVUZGTEhkRFFVRjNReXg1UTBGQmVVTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDVRMEZCZVVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN4RlFVRkZMRzlEUVVGdlF5eDNRMEZCZDBNc1JVRkJSU3gzUTBGQmQwTXNSVUZCUlN4NVEwRkJlVU1zUlVGQlJTeDFRMEZCZFVNc1JVRkJSU3g1UTBGQmVVTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3gxUTBGQmRVTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3d3UTBGQk1FTXNSVUZCUlN3d1EwRkJNRU1zUlVGQlJTd3dRMEZCTUVNc1JVRkJSU3hESWl3aVptbHNaU0k2SW5kdWN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCM1pXSndZV05yVlc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaWh5YjI5MExDQm1ZV04wYjNKNUtTQjdYRzVjZEdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWmhZM1J2Y25rb0tUdGNibHgwWld4elpTQnBaaWgwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBYRzVjZEZ4MFpHVm1hVzVsS0Z3aVYwNVRYQ0lzSUZ0ZExDQm1ZV04wYjNKNUtUdGNibHgwWld4elpTQnBaaWgwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBaWGh3YjNKMGMxdGNJbGRPVTF3aVhTQTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaVnh1WEhSY2RISnZiM1JiWENKWFRsTmNJbDBnUFNCbVlXTjBiM0o1S0NrN1hHNTlLU2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCelpXeG1JRG9nZEdocGN5d2dablZ1WTNScGIyNG9LU0I3WEc1eVpYUjFjbTRnWEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklIZGxZbkJoWTJzdmRXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmlJc0lpQmNkQzh2SUZSb1pTQnRiMlIxYkdVZ1kyRmphR1ZjYmlCY2RIWmhjaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpJRDBnZTMwN1hHNWNiaUJjZEM4dklGUm9aU0J5WlhGMWFYSmxJR1oxYm1OMGFXOXVYRzRnWEhSbWRXNWpkR2x2YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktHMXZaSFZzWlVsa0tTQjdYRzVjYmlCY2RGeDBMeThnUTJobFkyc2dhV1lnYlc5a2RXeGxJR2x6SUdsdUlHTmhZMmhsWEc0Z1hIUmNkR2xtS0dsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkS1NCN1hHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc0Z1hIUmNkSDFjYmlCY2RGeDBMeThnUTNKbFlYUmxJR0VnYm1WM0lHMXZaSFZzWlNBb1lXNWtJSEIxZENCcGRDQnBiblJ2SUhSb1pTQmpZV05vWlNsY2JpQmNkRngwZG1GeUlHMXZaSFZzWlNBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZElEMGdlMXh1SUZ4MFhIUmNkR2s2SUcxdlpIVnNaVWxrTEZ4dUlGeDBYSFJjZEd3NklHWmhiSE5sTEZ4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OVhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExtd2dQU0IwY25WbE8xeHVYRzRnWEhSY2RDOHZJRkpsZEhWeWJpQjBhR1VnWlhod2IzSjBjeUJ2WmlCMGFHVWdiVzlrZFd4bFhHNGdYSFJjZEhKbGRIVnliaUJ0YjJSMWJHVXVaWGh3YjNKMGN6dGNiaUJjZEgxY2JseHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pYTWdiMkpxWldOMElDaGZYM2RsWW5CaFkydGZiVzlrZFd4bGMxOWZLVnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXRJRDBnYlc5a2RXeGxjenRjYmx4dUlGeDBMeThnWlhod2IzTmxJSFJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVl5QTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1JsWm1sdVpTQm5aWFIwWlhJZ1puVnVZM1JwYjI0Z1ptOXlJR2hoY20xdmJua2daWGh3YjNKMGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0lEMGdablZ1WTNScGIyNG9aWGh3YjNKMGN5d2dibUZ0WlN3Z1oyVjBkR1Z5S1NCN1hHNGdYSFJjZEdsbUtDRmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThvWlhod2IzSjBjeXdnYm1GdFpTa3BJSHRjYmlCY2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z2JtRnRaU3dnZTF4dUlGeDBYSFJjZEZ4MFkyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTeGNiaUJjZEZ4MFhIUmNkR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnWEhSY2RGeDBYSFJuWlhRNklHZGxkSFJsY2x4dUlGeDBYSFJjZEgwcE8xeHVJRngwWEhSOVhHNGdYSFI5TzF4dVhHNGdYSFF2THlCblpYUkVaV1poZFd4MFJYaHdiM0owSUdaMWJtTjBhVzl1SUdadmNpQmpiMjF3WVhScFltbHNhWFI1SUhkcGRHZ2dibTl1TFdoaGNtMXZibmtnYlc5a2RXeGxjMXh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXVJRDBnWm5WdVkzUnBiMjRvYlc5a2RXeGxLU0I3WEc0Z1hIUmNkSFpoY2lCblpYUjBaWElnUFNCdGIyUjFiR1VnSmlZZ2JXOWtkV3hsTGw5ZlpYTk5iMlIxYkdVZ1AxeHVJRngwWEhSY2RHWjFibU4wYVc5dUlHZGxkRVJsWm1GMWJIUW9LU0I3SUhKbGRIVnliaUJ0YjJSMWJHVmJKMlJsWm1GMWJIUW5YVHNnZlNBNlhHNGdYSFJjZEZ4MFpuVnVZM1JwYjI0Z1oyVjBUVzlrZFd4bFJYaHdiM0owY3lncElIc2djbVYwZFhKdUlHMXZaSFZzWlRzZ2ZUdGNiaUJjZEZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLR2RsZEhSbGNpd2dKMkVuTENCblpYUjBaWElwTzF4dUlGeDBYSFJ5WlhSMWNtNGdaMlYwZEdWeU8xeHVJRngwZlR0Y2JseHVJRngwTHk4Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c1hHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG04Z1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lIQnliM0JsY25SNUtTQjdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxWldOMExDQndjbTl3WlhKMGVTazdJSDA3WEc1Y2JpQmNkQzh2SUY5ZmQyVmljR0ZqYTE5d2RXSnNhV05mY0dGMGFGOWZYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuQWdQU0JjSWx3aU8xeHVYRzRnWEhRdkx5Qk1iMkZrSUdWdWRISjVJRzF2WkhWc1pTQmhibVFnY21WMGRYSnVJR1Y0Y0c5eWRITmNiaUJjZEhKbGRIVnliaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0Y5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWN5QTlJREVwTzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJSGRsWW5CaFkyc3ZZbTl2ZEhOMGNtRndJR1F5TjJJd05ESTFNV05tTUdSaU1tUmtNRGN6SWl3aVhHNWpiMjV6ZENCMWRHbHNjeUE5SUh0Y2JpQWdiWFJ2WmpvZ0tHNXZkR1U2SUc1MWJXSmxjaWs2SUc1MWJXSmxjaUE5UGlCTllYUm9MbkJ2ZHlneUxDQW9ibTkwWlNrdk1USXBJQ29nTkRRd0xGeHVYRzRnSUdaMGIyMDZJQ2h1YjNSbE9pQnVkVzFpWlhJcE9pQnVkVzFpWlhJZ1BUNGdUV0YwYUM1emNYSjBLRzV2ZEdVdk5EUXdLUzh4TWl4Y2JseHVJQ0JqYUc5dmMyVTZJQ2hoY25KaGVUb2dRWEp5WVhrOFlXNTVQaWs2SUdGdWVTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHRnljbUY1VzAxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUdGeWNtRjVMbXhsYm1kMGFDbGRPMXh1SUNCOUxGeHVYRzVjYmx4dUlDQm5aWFJTWVhSbFJuSnZiVVp5WlhGMVpXNWphV1Z6T2lBb1puSmxjU3dnWW1GelpVWnlaWEVwT2lCdWRXMWlaWElnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJtY21WeEwySmhjMlZHY21WeE8xeHVJQ0I5TEZ4dVhHNGdJR2RsZEVOc2IzTmxjM1JOWlcxaVpYSTZJQ2h6ZFdKcVpXTjBMQ0J6WlhRcElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z2MyVjBMbkpsWkhWalpTZ2dLR0ZqWTNWdExDQnRaVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElIQnlaWFpFYVhOMFlXNWpaU0E5SUdGalkzVnRJQzBnYzNWaWFtVmpkRHRjYmlBZ0lDQWdJR052Ym5OMElHTjFjbkpsYm5SRWFYTjBZVzVqWlNBOUlHMWxiV0psY2lBdElITjFZbXBsWTNRN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3lnZ1kzVnljbVZ1ZEVScGMzUmhibU5sSUNrZ1BDQk5ZWFJvTG1GaWN5Z2djSEpsZGtScGMzUmhibU5sSUNrZ1B5QnRaVzFpWlhJZ09pQmhZMk4xYlR0Y2JpQWdJQ0I5TENCelpYUmJNRjBwTzF4dUlDQjlMRnh1WEc0Z0lHWnBibVJKYmtOdmJHeGxZM1JwYjI0NklDaGpiMnhzWldOMGFXOXVMQ0J3Y21Wa2FXTmhkR1ZHZFc1amRHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJqYjJ4c1pXTjBhVzl1TG5KbFpIVmpaU2dnS0dGalkzVnRMQ0J0WlcxaVpYSXBJRDArSUhCeVpXUnBZMkYwWlVaMWJtTjBhVzl1S0cxbGJXSmxjaWtnUHlCdFpXMWlaWElnT2lCaFkyTjFiU0FwTzF4dUlDQjlMRnh1WEc0Z0lHMWhjRlJ2Ukc5dFlXbHVPaUFvYzJWMExDQmtiMjFoYVc0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCelpYUlBabVp6WlhRZ1BTQk5ZWFJvTG0xcGJpZ3VMaTVrYjIxaGFXNHBJQzBnVFdGMGFDNXRhVzRvTGk0dWMyVjBLVHRjYmlBZ0lDQmpiMjV6ZENCa2IyMWhhVzVTWVc1blpTQTlJQ2dnVFdGMGFDNXRZWGdvTGk0dVpHOXRZV2x1S1NBdElFMWhkR2d1YldsdUtDNHVMbVJ2YldGcGJpa2dLVHRjYmlBZ0lDQmpiMjV6ZENCelpYUlNZVzVuWlNBOUlDZ2dUV0YwYUM1dFlYZ29MaTR1YzJWMEtTQXRJRTFoZEdndWJXbHVLQzR1TG5ObGRDa2dLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnpaWFF1YldGd0tDQnRaVzFpWlhJZ1BUNGdkWFJwYkhNdVoyVjBRMnh2YzJWemRFMWxiV0psY2lnZ0tDZ2dLRzFsYldKbGNpQXRJRTFoZEdndWJXbHVLQzR1TG5ObGRDa3BJQzhnYzJWMFVtRnVaMlVwSUNvZ1pHOXRZV2x1VW1GdVoyVWdLU0FySUhObGRFOW1abk5sZEN3Z1pHOXRZV2x1S1NrN1hHNGdJSDBzWEc1Y2JpQWdabXhwY0VOdmFXNDZJQ2h3Y205aVlXSnBiR2wwZVQwd0xqVXBPaUJpYjI5c1pXRnVJRDArSUNoTllYUm9MbkpoYm1SdmJTZ3BJRHdnY0hKdlltRmlhV3hwZEhrcElEOGdabUZzYzJVZ09pQjBjblZsTEZ4dVhHNGdJRzFoYTJWR2RXNWpkR2x2YmpvZ0tIWmhiSFZsS1RvZ1JuVnVZM1JwYjI0Z1BUNGdlMXh1SUNBZ0lHbG1LSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDZ3BJRDArSUhaaGJIVmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0IxZEdsc2N6dGNibHh1Wlhod2IzSjBJR052Ym5OMElIZHBibVJsZUNBOUlDaDNaV2xuYUhSek9pQkJjbkpoZVR4dWRXMWlaWEkrS1RvZ2JuVnRZbVZ5SUQwK0lIdGNiaUFnYkdWMElITjFiVTltVjJWcFoyaDBjeUE5SUhkbGFXZG9kSE11Y21Wa2RXTmxLQ0FvY0hKbGRpd2dZM1Z5Y2lrZ1BUNGdjSEpsZGlBcklHTjFjbklwTzF4dVhHNGdJR3hsZENCeVlXNWtUblZ0SUQwZ1RXRjBhQzV5WVc1a2IyMG9LU0FxSUhOMWJVOW1WMlZwWjJoMGN6dGNiaUFnYkdWMElIZGxhV2RvZEZOMWJTQTlJREE3WEc1Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IzWldsbmFIUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnZDJWcFoyaDBVM1Z0SUNzOUlIZGxhV2RvZEhOYmFWMDdYRzRnSUNBZ2QyVnBaMmgwVTNWdElEMGdLM2RsYVdkb2RGTjFiUzUwYjBacGVHVmtLRElwTzF4dVhHNGdJQ0FnYVdZZ0tISmhibVJPZFcwZ1BEMGdkMlZwWjJoMFUzVnRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnViM0p0WVd4cGVtVWdQU0FvWTI5c2JEb2diblZ0WW1WeVcxMHBPaUJ1ZFcxaVpYSmJYU0E5UGlCN1hHNGdJR3hsZENCamIyeHNVM1Z0SUQwZ1kyOXNiQzV5WldSMVkyVW9LR0VzWWlrZ1BUNGdZU3RpS1R0Y2JpQWdjbVYwZFhKdUlHTnZiR3hUZFcwZ1BpQXdJRDhnWTI5c2JDNXRZWEFvSUNoM1pXbG5hSFFwSUQwK0lIZGxhV2RvZENBdklHTnZiR3hUZFcwcElEb2dZMjlzYkM1dFlYQW9LQ2tnUFQ0Z01DazdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhORmNYVnBkbUZzWlc1MElEMGdLR0VzSUdJcE9pQmliMjlzWldGdUlEMCtJSHRjYmlBZ0x5OGdRM0psWVhSbElHRnljbUY1Y3lCdlppQndjbTl3WlhKMGVTQnVZVzFsYzF4dUlDQjJZWElnWVZCeWIzQnpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vWVNrN1hHNGdJSFpoY2lCaVVISnZjSE1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loaUtUdGNibHh1SUNBdkx5QkpaaUJ1ZFcxaVpYSWdiMllnY0hKdmNHVnlkR2xsY3lCcGN5QmthV1ptWlhKbGJuUXNYRzRnSUM4dklHOWlhbVZqZEhNZ1lYSmxJRzV2ZENCbGNYVnBkbUZzWlc1MFhHNGdJR2xtSUNoaFVISnZjSE11YkdWdVozUm9JQ0U5SUdKUWNtOXdjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHRlFjbTl3Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIWmhjaUJ3Y205d1RtRnRaU0E5SUdGUWNtOXdjMXRwWFR0Y2JseHVJQ0FnSUM4dklFbG1JSFpoYkhWbGN5QnZaaUJ6WVcxbElIQnliM0JsY25SNUlHRnlaU0J1YjNRZ1pYRjFZV3dzWEc0Z0lDQWdMeThnYjJKcVpXTjBjeUJoY21VZ2JtOTBJR1Z4ZFdsMllXeGxiblJjYmlBZ0lDQnBaaUFvWVZ0d2NtOXdUbUZ0WlYwZ0lUMDlJR0piY0hKdmNFNWhiV1ZkS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeThnU1dZZ2QyVWdiV0ZrWlNCcGRDQjBhR2x6SUdaaGNpd2diMkpxWldOMGMxeHVJQ0F2THlCaGNtVWdZMjl1YzJsa1pYSmxaQ0JsY1hWcGRtRnNaVzUwWEc0Z0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlR0Y2JseHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBVMlZ4ZFdWdWRHbGhiRkpoYm1SdmJVbHVaR1Y0SUQwZ0tDQnNZWE4wU1c1a1pYZzZJRzUxYldKbGNpd2diR1Z1WjNSb09pQnVkVzFpWlhJZ0tUb2diblZ0WW1WeUlEMCtJSHRjYmlBZ1kyOXVjM1FnY0c5emMybGliR1ZKYm1SbGVHVnpJRDBnUVhKeVlYa29iR1Z1WjNSb0tTNW1hV3hzS0RBcExtMWhjQ2dnS0dsMFpXMHNhU2tnUFQ0Z2FTa3VabWxzZEdWeUtHbDBaVzBnUFQ0Z2FYUmxiU0FoUFQwZ2JHRnpkRWx1WkdWNEtUdGNibHh1SUNCeVpYUjFjbTRnZFhScGJITXVZMmh2YjNObEtIQnZjM05wWW14bFNXNWtaWGhsY3lrN1hHNTlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDNWMGFXeHpMblJ6SWl3aWFXMXdiM0owSUhzZ1UyTmxibVVzSUVsVFkyVnVaVU52Ym1acFp5QjlJR1p5YjIwZ0p5NHZVMk5sYm1Vbk8xeHVhVzF3YjNKMElGTjViblJvSUdaeWIyMGdKeTR2VTNsdWRHZ25PMXh1YVcxd2IzSjBJRTExYkhScFUyRnRjR3hsY2lCbWNtOXRJQ2N1TDAxMWJIUnBVMkZ0Y0d4bGNpYzdYRzVwYlhCdmNuUWdlMGxHY21WeFFtbHVmU0JtY205dElDY3VMaTkwYjI5c2N5OXpjR1ZqZEhKMWJWQmxZV3RRWVhKelpYSW5PMXh1YVcxd2IzSjBJSFYwYVd4eklHWnliMjBnSnk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1oyVjBVMlZ4ZFdWdWRHbGhiRkpoYm1SdmJVbHVaR1Y0SUgwZ1puSnZiU0FuTGk5MWRHbHNjeWM3WEc1Y2JtbHRjRzl5ZENCemNHVmpkSEpoYkVSaGRHRWdabkp2YlNBbkxpOXpjR1ZqZEhKaGJFUmhkR0V1YW5OdmJpYzdYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnU1ZkT1UwTnZibVpwWnlCN1hHNGdJSE5oYlhCc1pWQmhkR2c2SUhOMGNtbHVaMXh1ZlR0Y2JseHVZMjl1YzNRZ1pHVm1ZWFZzZEVOdmJtWnBaem9nU1ZkT1UwTnZibVpwWnlBOUlIdGNiaUFnYzJGdGNHeGxVR0YwYURvZ1hDSnpZVzF3YkdWekwxd2lMRnh1ZlR0Y2JseHVZMjl1YzNRZ1YwNVRJRDBnS0dOdmJtWnBaejg2SUVsWFRsTkRiMjVtYVdjcElEMCtJSHRjYmlBZ1kyOXVabWxuSUQwZ1kyOXVabWxuSUQ4Z2V5NHVMbVJsWm1GMWJIUkRiMjVtYVdjc0lDNHVMbU52Ym1acFozMGdPaUJrWldaaGRXeDBRMjl1Wm1sbk8xeHVYRzRnSUdOdmJuTjBJR0poWTJ0bmNtOTFibVJUWVcxd2JHVnpJRDBnUEdGdWVUNXpjR1ZqZEhKaGJFUmhkR0U3WEc1Y2JpQWdMeThnVTJWMGRYQmNiaUFnWTI5dWMzUWdjRzl3ZFd4aGRHbHZibE5wZW1VZ1BTQXhOanRjYmlBZ1kyOXVjM1FnWTI5dWRHVjRkQ0E5SUc1bGR5QkJkV1JwYjBOdmJuUmxlSFFvS1R0Y2JseHVJQ0JqYjI1emRDQmphRzl5WkU5elkybHNiR0YwYjNKeklEMGdRWEp5WVhrb2NHOXdkV3hoZEdsdmJsTnBlbVVwTG1acGJHd29NQ2t1YldGd0tDZ3BJRDArSUc1bGR5QlRlVzUwYUNoamIyNTBaWGgwS1NrN1hHNWNiaUFnWTI5dWMzUWdiWFZzZEdsVFlXMXdiR1Z5VDNCMGN5QTlJSHRjYmlBZ0lDQnpZVzF3YkdWek9pQmJYRzRnSUNBZ0lDQXZMM3NnWm1sc1pYTTZJRnNnWTI5dVptbG5Mbk5oYlhCc1pWQmhkR2dnS3lCY0luQnBjR1ZITG0xd00xd2lJRjBzSUdaeVpYRTZJREU1T1NCOUxGeHVJQ0FnSUNBZ0x5OTdJR1pwYkdWek9pQmJJR052Ym1acFp5NXpZVzF3YkdWUVlYUm9JQ3NnWENKd2FYQmxSQzV0Y0ROY0lpQmRMQ0JtY21WeE9pQXpNRFlnZlN4Y2JpQWdJQ0FnSUM4dmV5Qm1hV3hsY3pvZ1d5QmpiMjVtYVdjdWMyRnRjR3hsVUdGMGFDQXJJRndpY0dsd1pVRXViWEF6WENJZ1hTd2dabkpsY1RvZ05EUTFJSDBzWEc0Z0lDQWdJQ0F2TDNzZ1ptbHNaWE02SUZzZ1kyOXVabWxuTG5OaGJYQnNaVkJoZEdnZ0t5QmNJbkJwY0dWRkxtMXdNMXdpSUYwc0lHWnlaWEU2SURZMk5pQjlMRnh1SUNBZ0lDQWdleUJtYVd4bGN6b2dXeUJqYjI1bWFXY3VjMkZ0Y0d4bFVHRjBhQ0FySUZ3aWNHbGhibTh5TFRNeU5DNXRjRE5jSWlCZExDQm1jbVZ4T2lBek1qUWdmU3hjYmlBZ0lDQWdJSHNnWm1sc1pYTTZJRnNnWTI5dVptbG5Mbk5oYlhCc1pWQmhkR2dnS3lCY0luQnBZVzV2TXkwNE1UUXViWEF6WENJZ1hTd2dabkpsY1RvZ09ERTBJSDBzWEc0Z0lDQWdYU3hjYmlBZ2ZUdGNiaUFnWTI5dWMzUWdiV1ZzYjJSNVQzTmphV3hzWVhSdmNuTWdQU0JCY25KaGVTaHdiM0IxYkdGMGFXOXVVMmw2WlNrdVptbHNiQ2d3S1M1dFlYQW9LQ2tnUFQ0Z2RYUnBiSE11Wm14cGNFTnZhVzRvS1NBL0lHNWxkeUJOZFd4MGFWTmhiWEJzWlhJb0lHTnZiblJsZUhRc0lHMTFiSFJwVTJGdGNHeGxjazl3ZEhNZ0tTQTZJRzVsZHlCVGVXNTBhQ2hqYjI1MFpYaDBLU2s3WEc0Z0lHTnZibk4wSUhOdmRYSmpaVk5oYlhCc1pYTWdQU0JpWVdOclozSnZkVzVrVTJGdGNHeGxjeTV0WVhBb0lITmhiWEJzWlVSaGRHRWdQVDRnYm1WM0lFMTFiSFJwVTJGdGNHeGxjaWhqYjI1MFpYaDBMQ0I3WEc0Z0lDQWdjMkZ0Y0d4bGN6b2dXMXh1SUNBZ0lDQWdleUJtYVd4bGN6b2dXeUJqYjI1bWFXY3VjMkZ0Y0d4bFVHRjBhQ0FySUhOaGJYQnNaVVJoZEdFdVlYVmthVzlHYVd4bElGMHNJR1p5WlhFNklERWdmU3hjYmlBZ0lDQmRMRnh1SUNCOUtTazdYRzVjYmlBZ2JHVjBJSE5oYlhCc1pVbHVaR1Y0SUQwZ01EdGNibHh1SUNCamIyNXpkQ0J3YkdGNVRtVjNVMk5sYm1VZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYzJGdGNHeGxTVzVrWlhnZ1BTQm5aWFJUWlhGMVpXNTBhV0ZzVW1GdVpHOXRTVzVrWlhnb2MyRnRjR3hsU1c1a1pYZ3NJR0poWTJ0bmNtOTFibVJUWVcxd2JHVnpMbXhsYm1kMGFDazdYRzRnSUNBZ0x5OWpiMjV6ZENCMFlYSm5aWFFnUFNCYk1Ua3pMQ0EwTWpNc0lERTJOamdzSURJek16TXNJREkyTmpVc0lETXdOemdzSURRd016Z3NJRFl6TVRrc0lERTVNeXN4TENBME1qTXJNU3dnTVRZMk9Dc3hMQ0F5TXpNekt6RXNJREkyTmpVck1Td2dNekEzT0NzeExDQTBNRE00S3pFc0lEWXpNVGtyTVNCZE95QXZMeUJwYmlCbWNtVnhkV1Z1WTNsY2JpQWdJQ0JqYjI1emRDQmlZV05yWjNKdmRXNWtVMkZ0Y0d4bElEMGdZbUZqYTJkeWIzVnVaRk5oYlhCc1pYTmJjMkZ0Y0d4bFNXNWtaWGhkTzF4dUlDQWdJR052Ym5OdmJHVXViRzluS0dKaFkydG5jbTkxYm1SVFlXMXdiR1V1WVhWa2FXOUdhV3hsS1R0Y2JpQWdJQ0JqYjI1emRDQnBibWwwYVdGc1VHOXdkV3hoZEdsdmJpQTlJRUZ5Y21GNUtEZ3dLUzVtYVd4c0tDQmlZV05yWjNKdmRXNWtVMkZ0Y0d4bExuTndaV04wY25WdExtMWhjQ2dnWW1sdUlEMCtJR0pwYmk1bWNtVnhLU0FwTzF4dVhHNGdJQ0FnTHk4Z1ZHRnlaMlYwSUdseklIUm9aU0J2ZG1WeWRHOXVaWE1nYjJZZ2RHaGxJRzF2YzNRZ2NISnZiV2x1Wlc1MElHWnlaWEYxWlc1amVTQnBiaUIwYUdVZ2MzQmxZM1J5ZFcxY2JpQWdJQ0JqYjI1emRDQjBZWEpuWlhRZ1BTQmlZV05yWjNKdmRXNWtVMkZ0Y0d4bExuTndaV04wY25WdFhHNGdJQ0FnSUNBdWNtVmtkV05sS0NBb1lXTmpkVzA2SUVsR2NtVnhRbWx1VzEwc0lHSnBiam9nU1VaeVpYRkNhVzRwSUQwK0lHRmpZM1Z0V3pCZExtMWhaMjVwZEhWa1pTQThJR0pwYmk1dFlXZHVhWFIxWkdVZ1B5QmJJR0pwYmlCZElEb2dZV05qZFcwc0lGdDdabkpsY1RvZ01Dd2diV0ZuYm1sMGRXUmxPaUF0TVRBd2ZWMHBYRzRnSUNBZ0lDQXViV0Z3S0NCaWFXNGdQVDRnWW1sdUxtWnlaWEVwWEc0Z0lDQWdJQ0F1YldGd0tDQW9JSE4wY205dVoyVnpkRVp5WlhFNklHNTFiV0psY2lBcElEMCtJRUZ5Y21GNUtHSmhZMnRuY205MWJtUlRZVzF3YkdVdWMzQmxZM1J5ZFcwdWJHVnVaM1JvS1M1bWFXeHNLREFwTG0xaGNDZ2dLR2wwWlcwc0lHa3BJRDArSUhOMGNtOXVaMlZ6ZEVaeVpYRWdLaUFvYVNzeEtTQXBJQ2xiTUYwN1hHNWNiaUFnSUNCamIyNXpkQ0J6WTJWdVpVTnZibVpwWnpvZ1NWTmpaVzVsUTI5dVptbG5JRDBnZTF4dUlDQWdJQ0FnYVc1cGRHbGhiRkJ2Y0hWc1lYUnBiMjQ2SUdsdWFYUnBZV3hRYjNCMWJHRjBhVzl1TG0xaGNDaGNiaUFnSUNBZ0lDQWdhWFJsYlNBOVBpQnBkR1Z0TG0xaGNDaGNiaUFnSUNBZ0lDQWdJQ0JwZEdWdE1pQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBb2RHRnlaMlYwVzNSaGNtZGxkQzVzWlc1bmRHZ3RNVjBnTFNCMFlYSm5aWFJiTUYwcEtTQXJJQ2gwWVhKblpYUmJNRjB0TWpBcFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FwTEZ4dUlDQWdJQ0FnY0c5d2RXeGhkR2x2YmxOcGVtVTZJREUyTEZ4dUlDQWdJQ0FnYldGNFIyVnVaWEpoZEdsdmJuTTZJRElzWEc0Z0lDQWdJQ0IwWVhKblpYUXNJQzh2SUdsdUlHWnlaWEYxWlc1amVWeHVJQ0FnSUNBZ2RHbHRaVUpsZEhkbFpXNUZkbVZ1ZEhNNklDZ3BJRDArSUNoTllYUm9MbkpoYm1SdmJTZ3BJQ29nTVRVcElDc2dOU3hjYmlBZ0lDQWdJR2RoY0VKbGRIZGxaVzVGZG1WdWRITTZJQ2dwSUQwK0lIVjBhV3h6TG1Ob2IyOXpaU2hiTkRVc01UQmRLU3hjYmlBZ0lDQWdJRzFsYkc5a2VVOXpZMmxzYkdGMGIzSnpMRnh1SUNBZ0lDQWdZMmh2Y21SUGMyTnBiR3hoZEc5eWN5eGNiaUFnSUNBZ0lHOXVSbWx1YVhOb09pQndiR0Y1VG1WM1UyTmxibVZjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpiM1Z5WTJWVFlXMXdiR1Z6VzNOaGJYQnNaVWx1WkdWNFhTNXdiR0Y1S0h0bWNtVnhPaUF4TENCMGFXMWxPaUEyTUNBcUlETWdLaUF4TURBd0xDQjJiMnc2SURBdU0zMHBPMXh1WEc0Z0lDQWdMeThnVTNSaGNuUWdkR2hsSUhOalpXNWxYRzRnSUNBZ2JtVjNJRk5qWlc1bEtITmpaVzVsUTI5dVptbG5LUzV3YkdGNUtDazdYRzRnSUgwN1hHNWNiaUFnY0d4aGVVNWxkMU5qWlc1bEtDazdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCWFRsTTdYRzVsZUhCdmNuUWdleUJYVGxNZ2ZUdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwzTnlZeTkzYm5NdWRITWlMQ0pjYm1sdGNHOXlkQ0I3SUZCdFlYSnJiM1lzSUZCblpXNWxkR2xqSUgwZ1puSnZiU0FuTGk5d1lYUjBaWEp1Y3ljN1hHNXBiWEJ2Y25RZ1UzbHVkR2dnWm5KdmJTQW5MaTlUZVc1MGFDYzdYRzVwYlhCdmNuUWdlMGxUYjNWdVpGQnNZWGxsY24wZ1puSnZiU0FuTGk5VGIzVnVaRkJzWVhsbGNpYzdYRzVwYlhCdmNuUWdlMGxHY21WeFFtbHVmU0JtY205dElDY3VMaTkwYjI5c2N5OXpjR1ZqZEhKMWJWQmxZV3RRWVhKelpYSW5PMXh1YVcxd2IzSjBJSFYwYVd4eklHWnliMjBnSnk0dmRYUnBiSE1uTzF4dVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFbFRjR1ZqZEhKMWJVTnZibVpwWnlCN1hHNGdJR0YxWkdsdlJtbHNaVG9nYzNSeWFXNW5MRnh1SUNCemNHVmpkSEoxYlRvZ1NVWnlaWEZDYVc1YlhTeGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCSlUyTmxibVZEYjI1bWFXY2dlMXh1SUNCd2IzQjFiR0YwYVc5dVUybDZaVG9nYm5WdFltVnlMRnh1SUNCcGJtbDBhV0ZzVUc5d2RXeGhkR2x2YmpvZ1lXNTVXMTFiWFN4Y2JpQWdkR0Z5WjJWME9pQmhibmxiWFN3Z0x5OGdTVzRnUm5KbGNYVmxibU41WEc0Z0lHMWhlRWRsYm1WeVlYUnBiMjV6T2lCdWRXMWlaWEk3WEc0Z0lIUnBiV1ZDWlhSM1pXVnVSWFpsYm5Sek9pQmhibmtnZkc1MWJXSmxjaUI4SUVaMWJtTjBhVzl1TEZ4dUlDQm5ZWEJDWlhSM1pXVnVSWFpsYm5Sek9pQmhibmtnZkNCdWRXMWlaWElnZkNCR2RXNWpkR2x2Yml4Y2JpQWdiV1ZzYjJSNVQzTmphV3hzWVhSdmNuTTZJRWxUYjNWdVpGQnNZWGxsY2x0ZExGeHVJQ0JqYUc5eVpFOXpZMmxzYkdGMGIzSnpPaUJKVTI5MWJtUlFiR0Y1WlhKYlhTeGNiaUFnYjI1R2FXNXBjMmc2SUVaMWJtTjBhVzl1TEZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1UyTmxibVVnZTF4dUlDQnViM1JsY3pvZ1NYUmxjbUZpYkdWSmRHVnlZWFJ2Y2p4aGJuaytPMXh1SUNCamRYSnlaVzUwUjJWdVpYSmhkR2x2YmpvZ2JuVnRZbVZ5TzF4dUlDQmpiMjVtYVdjNklFbFRZMlZ1WlVOdmJtWnBaenRjYmlBZ2IyNUdhVzVwYzJnNklFWjFibU4wYVc5dU8xeHVYRzRnSUhCMVlteHBZeUJqYjI1emRISjFZM1J2Y2loamIyNW1hV2M2SUVsVFkyVnVaVU52Ym1acFp5a2dlMXh1SUNBZ0lIUm9hWE11WTI5dVptbG5JRDBnWTI5dVptbG5PMXh1WEc0Z0lDQWdkR2hwY3k1amIyNW1hV2N1ZEdsdFpVSmxkSGRsWlc1RmRtVnVkSE1nUFNCMWRHbHNjeTV0WVd0bFJuVnVZM1JwYjI0b2RHaHBjeTVqYjI1bWFXY3VkR2x0WlVKbGRIZGxaVzVGZG1WdWRITXBPMXh1SUNBZ0lIUm9hWE11WTI5dVptbG5MbWRoY0VKbGRIZGxaVzVGZG1WdWRITWdQU0IxZEdsc2N5NXRZV3RsUm5WdVkzUnBiMjRvZEdocGN5NWpiMjVtYVdjdVoyRndRbVYwZDJWbGJrVjJaVzUwY3lrN1hHNGdJQ0FnZEdocGN5NXViM1JsY3lBOUlGQm5aVzVsZEdsaktHTnZibVpwWnk1cGJtbDBhV0ZzVUc5d2RXeGhkR2x2Yml3Z1kyOXVabWxuTG5SaGNtZGxkQ2s3WEc0Z0lDQWdkR2hwY3k1amIyNW1hV2N1YldGNFIyVnVaWEpoZEdsdmJuTWdQU0JqYjI1bWFXY3ViV0Y0UjJWdVpYSmhkR2x2Ym5NN1hHNGdJQ0FnZEdocGN5NWpkWEp5Wlc1MFIyVnVaWEpoZEdsdmJpQTlJREE3WEc1Y2JpQWdJQ0IwYUdsekxtTnZibVpwWnk1dmJrWnBibWx6YUNBOUlHTnZibVpwWnk1dmJrWnBibWx6YUR0Y2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCd2JHRjVLQ2s2SUZOalpXNWxJSHRjYmlBZ0lDQmpiMjV6ZENCdVpYaDBSMlZ1T2lCdWRXMWlaWEpiWFNBOUlIUm9hWE11Ym05MFpYTXVibVY0ZENncExuWmhiSFZsTzF4dUlDQWdJR052Ym5OMElHNWxkMDV2ZEdWek9pQnVkVzFpWlhKYlhTQTlJRzVsZUhSSFpXNDdYRzVjYmlBZ0lDQnNaWFFnYVNBOUlEQTdYRzRnSUNBZ2JHVjBJR3NnUFNBb1RXRjBhQzV5WVc1a2IyMG9LU0ErSURBdU5Ta2dQeUF3SURvZ01UdGNiaUFnSUNCMGFHbHpMbU52Ym1acFp5NWphRzl5WkU5elkybHNiR0YwYjNKekxtMWhjQ2dvYjNOaktTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQnZZM1JoZG1VZ1BTQk5ZWFJvTG1ObGFXd29UV0YwYUM1eVlXNWtiMjBvS1NBcUlEVXBPMXh1SUNBZ0lDQWdiM05qTG5Cc1lYa29lMlp5WlhFNklHNWxkMDV2ZEdWelcybGRMMjlqZEdGMlpTd2dkR2x0WlRvZ2RHaHBjeTVqYjI1bWFXY3VkR2x0WlVKbGRIZGxaVzVGZG1WdWRITW9LU3dnY0dGdU9pQW9LR3NsTWlrcU1pa2dMU0F4TENCMmIydzZJREF1TW4wcE95QnBLeXM3SUdzckt6dGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11Y0d4aGVVMWxiRzlrZVNodVpYZE9iM1JsY3l3Z2RHaHBjeTVqZFhKeVpXNTBSMlZ1WlhKaGRHbHZiaWs3WEc1Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblIwVk9SVlJKUXlCSFJVNUZVa0ZVU1U5T09pQW5MQ0IwYUdsekxtTjFjbkpsYm5SSFpXNWxjbUYwYVc5dUxDQnVaWGgwUjJWdUtUdGNiaUFnSUNCcFppaDBhR2x6TG1OMWNuSmxiblJIWlc1bGNtRjBhVzl1SUR3OUlDaDBhR2x6TG1OdmJtWnBaeTV0WVhoSFpXNWxjbUYwYVc5dWN5MHhLU0FwSUh0Y2JpQWdJQ0FnSUhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MFIyVnVaWEpoZEdsdmJpc3JPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnNZWGtvS1R0Y2JpQWdJQ0FnSUgwc0lDaDBhR2x6TG1OdmJtWnBaeTUwYVcxbFFtVjBkMlZsYmtWMlpXNTBjeWdwSUNzZ2RHaHBjeTVqYjI1bWFXY3VaMkZ3UW1WMGQyVmxia1YyWlc1MGN5Z3BLU0FxSURFd01EQXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEVkbGJtVnlZWFJwYjI0ckt6dGNiaUFnSUNBZ0lIUm9hWE11Wlc1a1QyWlRZMlZ1WlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQndiR0Y1VFdWc2IyUjVLQ0J1YjNSbGN5d2daMlZ1WlhKaGRHbHZiaUFwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCdVpYZE9iM1JsY3lBOUlHNXZkR1Z6TzF4dVhHNGdJQ0FnTHk4Z1ZHRnJaVzRnWm5KdmJTQjBhR1VnYzJWeGRXVnVZMlVnYjJZZ2NHbDBZMmhsY3lCcGJpQmNJa1p2Y21WMlpYSWdhVzRnUW14MVpTQktaV0Z1YzF3aUlHSjVJRTVsYVd3Z1JHbGhiVzl1WkZ4dUlDQWdJR052Ym5OMElHbGtaV0ZzVFdWc2IyUjVJRDBnZFhScGJITXViV0Z3Vkc5RWIyMWhhVzRvV3pBc05Dd3lMREFzTnl3MExESXNOeXczTERRc01pd3lMRFFzTkN3eUxEQmRMQ0J1WlhkT2IzUmxjeWs3WEc0Z0lDQWdZMjl1YzNRZ2NtRnVaRzl0VTJocFpuUkJiVzkxYm5RZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWNtRnVaRzl0S0NrZ0tpQW9hV1JsWVd4TlpXeHZaSGt1YkdWdVozUm9LU2xjYmlBZ0lDQmpiMjV6ZENCcGJtbDBhV0ZzVTNSaGRHVWdQU0JiTGk0dWFXUmxZV3hOWld4dlpIa3VjMnhwWTJVb2NtRnVaRzl0VTJocFpuUkJiVzkxYm5RcExDQXVMaTVwWkdWaGJFMWxiRzlrZVM1emJHbGpaU2d3TENBdEtHbGtaV0ZzVFdWc2IyUjVMbXhsYm1kMGFDMXlZVzVrYjIxVGFHbG1kRUZ0YjNWdWRDa3BYVnh1SUNBZ0lHTnZibk4wSUcxaGNtdHZkazFsYkc5a2VTQTlJRkJ0WVhKcmIzWW9hV1JsWVd4TlpXeHZaSGtzSURFc0lHbHVhWFJwWVd4VGRHRjBaUzV6YkdsalpTZ3RNaWtnS1R0Y2JseHVJQ0FnSUd4bGRDQnBJRDBnTUR0Y2JpQWdJQ0JqYjI1emRDQndiR0Y1VG1WNGRFNXZkR1VnUFNBb1oyVnVaWEpoZEdsdmJpa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiMk4wWVhabElEMGdUV0YwYUM1alpXbHNLRTFoZEdndWNtRnVaRzl0S0NrZ0tpQXpLU0FySUUxaGRHZ3VZMlZwYkNoTllYUm9MbkpoYm1SdmJTZ3BJQ29nTXlBcElDc2dNanRjYmlBZ0lDQWdJR052Ym5OMElHNWxlSFJPYjNSbElEMGdiV0Z5YTI5MlRXVnNiMlI1TG01bGVIUW9LUzUyWVd4MVpUdGNibHh1SUNBZ0lDQWdhV1lvYm1WNGRFNXZkR1VnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIxZEdsc2N5NW1iR2x3UTI5cGJpZ3dMamMxS1NBcElIc2dMeThnVTI5dFpYUnBiV1Z6SUhCeWIySmhZbXhwZEdsbGN5QmhjbVVnZW1WeWJ5d2djMjhnZDJVbmJHd2daMlYwSUdGdUlIVnVaR1ZtYVc1bFpDQnVaWGgwSUhOMFlYUmxYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Nkd2JHRjVhVzVuSUc1dmRHVW5MQ0J1WlhoMFRtOTBaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtMWxiRzlrZVU5elkybHNiR0YwYjNKelcya2dKU0IwYUdsekxtTnZibVpwWnk1dFpXeHZaSGxQYzJOcGJHeGhkRzl5Y3k1c1pXNW5kR2hkTG5Cc1lYa29lMXh1SUNBZ0lDQWdJQ0FnSUdaeVpYRTZJRzVsZUhST2IzUmxMMjlqZEdGMlpTeGNiaUFnSUNBZ0lDQWdJQ0IwYVcxbE9pQXpJQ3NnS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TkNrc1hHNGdJQ0FnSUNBZ0lDQWdjR0Z1T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJSFp2YkRvZ01DNHhOVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdrckt6dGNibHh1SUNBZ0lDQWdkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaWhuWlc1bGNtRjBhVzl1SUQwOVBTQjBhR2x6TG1OMWNuSmxiblJIWlc1bGNtRjBhVzl1SUNZbUlIUm9hWE11WTNWeWNtVnVkRWRsYm1WeVlYUnBiMjRnUEQwZ2RHaHBjeTVqYjI1bWFXY3ViV0Y0UjJWdVpYSmhkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0J3YkdGNVRtVjRkRTV2ZEdVb1oyVnVaWEpoZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzSUNnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURJcElDc2dNQzQxS1NBcUlERXdNREFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEJzWVhsT1pYaDBUbTkwWlNoblpXNWxjbUYwYVc5dUtUdGNibHh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JsYm1SUFpsTmpaVzVsS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJRzl1Um1sdWFYTm9RMkZzYkdKaFkyc2dQU0IwYUdsekxtTnZibVpwWnk1dmJrWnBibWx6YUR0Y2JseHVJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtTm9iM0prVDNOamFXeHNZWFJ2Y25NdWJXRndLQ0J6ZVc1MGFDQTlQaUJ6ZVc1MGFDNXpkRzl3S0RFcElDazdYRzVjYmlBZ0lDQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDaHZia1pwYm1semFFTmhiR3hpWVdOckxDQXhNREF3S1R0Y2JpQWdmVnh1ZlZ4dVhHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5emNtTXZVMk5sYm1VdWRITWlMQ0l2S2x4dUlDb2dRbUZ6YVdNZ1VHRjBkR1Z5Ym5NZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnWm05eUlFZHBZbUpsY21semFGeHVJQ292WEc1Y2JtbHRjRzl5ZENCN0lFMWhjbXR2ZGlCOUlHWnliMjBnWENJdUwwMWhjbXR2ZGx3aU8xeHVhVzF3YjNKMElIc2dSMlZ1WlhScFl5QjlJR1p5YjIwZ1hDSXVMMGRsYm1WMGFXTmNJanRjYmx4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVUdGMGRHVnliaUE5SUNod1lYUjBaWEp1S1NBOVBpQmJLQ2tnUFQ0Z2NHRjBkR1Z5Ymk1dVpYaDBLQ2t1ZG1Gc2RXVmRPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdVSE5sY1NBOUlHWjFibU4wYVc5dUtpQlFjMlZ4S0haaGJIVmxjem9nUVhKeVlYazhZVzU1UGl3Z2NtVndaWFJwZEdsdmJuTTZJRzUxYldKbGNpbDdYRzRnSUhaaGNpQnBibVJsZURvZ2JuVnRZbVZ5SUQwZ01EdGNiaUFnZG1GeUlISmxjM1ZzZENBOUlDZ3BPaUJoYm5rZ1BUNGdkbUZzZFdWelcybHVaR1Y0S3lzZ0pTQjJZV3gxWlhNdWJHVnVaM1JvWFR0Y2JseHVJQ0JwWmloeVpYQmxkR2wwYVc5dWN5QTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0IzYUdsc1pTaDBjblZsS1NCN1hHNGdJQ0FnSUNCNWFXVnNaQ0J5WlhOMWJIUW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdaV3h6WlNCN1hHNGdJQ0FnWm05eUtIWmhjaUJwUFRBN0lHazhjbVZ3WlhScGRHbHZibk03SUdrckt5a2dlMXh1SUNBZ0lDQWdlV2xsYkdRZ2NtVnpkV3gwS0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVUhKaGJtUWdQU0JtZFc1amRHbHZiaW9nVUhKaGJtUW9kbUZzZFdWek9pQkJjbkpoZVR4aGJuaytMQ0J5WlhCbGRHbDBhVzl1Y3pvZ2JuVnRZbVZ5S1h0Y2JseHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ0tDazZJR0Z1ZVNBOVBpQjJZV3gxWlhOYlRXRjBhQzVtYkc5dmNpaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ2RtRnNkV1Z6TG14bGJtZDBhQ2xkTzF4dVhHNGdJR2xtS0hKbGNHVjBhWFJwYjI1eklEMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSGRvYVd4bEtIUnlkV1VwSUh0Y2JpQWdJQ0FnSUhscFpXeGtJSEpsYzNWc2RDZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQmxiSE5sSUh0Y2JpQWdJQ0JtYjNJb2RtRnlJR2s5TURzZ2FUeHlaWEJsZEdsMGFXOXVjenNnYVNzcktTQjdYRzRnSUNBZ0lDQjVhV1ZzWkNCeVpYTjFiSFFvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JRYldGeWEyOTJJRDBnWm5WdVkzUnBiMjRxSUZCdFlYSnJiM1lvYzJWbFpEb2dRWEp5WVhrOFlXNTVQaXdnYjNKa1pYSTZJRzUxYldKbGNpd2dhVzVwZEdsaGJGTjBZWFJsT2lCQmNuSmhlVHhoYm5rK0tTQjdYRzRnSUd4bGRDQnRZWEpyYjNaRGFHRnBiam9nVFdGeWEyOTJJRDBnYm1WM0lFMWhjbXR2ZGloelpXVmtMQ0J2Y21SbGNpazdYRzVjYmlBZ2JHVjBJR3hoYzNSVGRHRjBaVG9nWVc1NUlEMGdhVzVwZEdsaGJGTjBZWFJsTzF4dVhHNGdJSGRvYVd4bEtIUnlkV1VwSUh0Y2JpQWdJQ0JzWlhRZ2JtVjRkRk4wWVhSbE9pQmhibmtnUFNCdFlYSnJiM1pEYUdGcGJpNW5aWFJPWlhoMFUzUmhkR1VvYkdGemRGTjBZWFJsS1R0Y2JseHVJQ0FnSUd4aGMzUlRkR0YwWlNBOUlGc3VMaTVzWVhOMFUzUmhkR1V1YzJ4cFkyVW9NU2tzSUc1bGVIUlRkR0YwWlYwN1hHNWNiaUFnSUNCNWFXVnNaQ0J1WlhoMFUzUmhkR1U3WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JRWjJWdVpYUnBZeUE5SUdaMWJtTjBhVzl1S2lCUVoyVnVaWFJwWXlocGJuQjFkRkJ2Y0hWc1lYUnBiMjQ2SUc1MWJXSmxjbHRkVzEwc0lHZHZZV3c2SUc1MWJXSmxjbHRkS1NCN1hHNGdJR3hsZENCblpXNWxkR2xqT2lCSFpXNWxkR2xqSUQwZ2JtVjNJRWRsYm1WMGFXTW9hVzV3ZFhSUWIzQjFiR0YwYVc5dUxDQm5iMkZzS1R0Y2JseHVJQ0JzWlhRZ2JHRnpkRk4wWVhSbE9pQnVkVzFpWlhKYlhTQTlJR2R2WVd3N1hHNWNiaUFnZDJocGJHVW9kSEoxWlNrZ2UxeHVJQ0FnSUd4bGRDQnVaWGgwVTNSaGRHVTZJR0Z1ZVNBOUlHZGxibVYwYVdNdVoyVjBUbVY0ZEZOMFlYUmxLR3hoYzNSVGRHRjBaU2s3WEc1Y2JpQWdJQ0JzWVhOMFUzUmhkR1VnUFNCYmJHRnpkRk4wWVhSbFcyeGhjM1JUZEdGMFpTNXNaVzVuZEdndE1WMHNJRzVsZUhSVGRHRjBaVjA3WEc1Y2JpQWdJQ0I1YVdWc1pDQnVaWGgwVTNSaGRHVTdYRzRnSUgxY2JuMDdYRzVjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5d1lYUjBaWEp1Y3k1MGN5SXNJbHh1YVcxd2IzSjBJSHNnYVhORmNYVnBkbUZzWlc1MExDQnViM0p0WVd4cGVtVXNJSGRwYm1SbGVDQjlJR1p5YjIwZ1hDSXVMM1YwYVd4elhDSTdYRzVjYm1Oc1lYTnpJRTFoY210dmRpQjdYRzRnSUNBZ1pHbGpkR2x2Ym1GeWVUb2dRWEp5WVhrOGJuVnRZbVZ5UGp0Y2JpQWdJQ0JqYjIxaWFXNWhkR2x2Ym5NNklFRnljbUY1UENCQmNuSmhlVHh1ZFcxaVpYSStJRDQ3WEc0Z0lDQWdiR0Z6ZEZOMFlYUmxPaUJCY25KaGVUeHVkVzFpWlhJK08xeHVJQ0FnSUhSeVlXNXphWFJwYjI1TllYUnlhWGc2SUVGeWNtRjVQRUZ5Y21GNVBHNTFiV0psY2o0K08xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVjSFYwT2lCaGJubGJYU3dnYjNKa1pYSTZJRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11WkdsamRHbHZibUZ5ZVNBOUlGdGRMRnh1SUNBZ0lIUm9hWE11WTI5dFltbHVZWFJwYjI1eklEMGdXMTA3WEc1Y2JpQWdJQ0F2THlCVFpYUWdZU0JrWldaaGRXeDBJR3hoYzNRZ2MzUmhkR1VnWm05eUlITjBjbVZoYlNCaVpXaGhkbWx2Y2x4dUlDQWdJSFJvYVhNdWJHRnpkRk4wWVhSbElEMGdXMTA3WEc0Z0lDQWdabTl5S0d4bGRDQnBQVEE3SUdrZ1BDQnZjbVJsY2pzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYUdsekxteGhjM1JUZEdGMFpTNXdkWE5vS0dsdWNIVjBXMmxkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuUnlZVzV6YVhScGIyNU5ZWFJ5YVhnZ1BTQjBhR2x6TG1OeVpXRjBaVlJ5WVc1emFYUnBiMjVOWVhSeWFYZ29hVzV3ZFhRc0lHOXlaR1Z5S1R0Y2JpQWdmVnh1WEc0Z0lHTnlaV0YwWlZSeVlXNXphWFJwYjI1TllYUnlhWGdvYVc1d2RYUXNJRzl5WkdWeUtUb2dRWEp5WVhrOElFRnljbUY1UEc1MWJXSmxjajRnUGlCN1hHNGdJQ0FnZEdocGN5NWthV04wYVc5dVlYSjVJRDBnYVc1d2RYUTdYRzVjYmlBZ0lDQXZMeUJEYjIxd2RYUmxJR0ZzYkNCd2IzTnphV0pzWlNCamIyMWlhVzVoZEdsdmJuTWdiMllnZEdobElHUnBZM1JwYjI1aGNubGNiaUFnSUNCMGFHbHpMbU52YldKcGJtRjBhVzl1Y3lBOUlGdGRPMXh1SUNBZ0lHWnZjaWhzWlhRZ2FUMHdPeUJwSUR3Z2RHaHBjeTVrYVdOMGFXOXVZWEo1TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQm1iM0lvYkdWMElHczlNRHNnYXlBOElIUm9hWE11WkdsamRHbHZibUZ5ZVM1c1pXNW5kR2c3SUdzckt5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiV0pwYm1GMGFXOXVjeTV3ZFhOb0tGdDBhR2x6TG1ScFkzUnBiMjVoY25sYmFWMHNJSFJvYVhNdVpHbGpkR2x2Ym1GeWVWdHJYVjBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTI5dFltOXpKeXdnZEdocGN5NWpiMjFpYVc1aGRHbHZibk1wTzF4dVhHNGdJQ0FnTHk4Z1UyVjBkWEFnZEdobElIUnlZVzV6YVhScGIyNU5ZWFJ5YVhnZ0tITm9iM1ZzWkNCaVpTQmlZWE5sWkNCdmJpQnZjbVJsY2lsY2JpQWdJQ0F2TDFSUFJFODZJRlJvYVhNZ2FYTWdhR0Z5WkdOdlpHVmtJSFJ2SURGemRDQnZjbVJsY2k0Z1RXRnJaU0JrZVc1aGJXbGpMbHh1SUNBZ0lHeGxkQ0IwY21GdWMybDBhVzl1VFdGMGNtbDRJRDBnVzEwN1hHNGdJQ0FnWm05eUtHeGxkQ0JwUFRBN0lHa2dQQ0IwYUdsekxtTnZiV0pwYm1GMGFXOXVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJR1JwWTNScGIyNWhjbmxNWlc1bmRHaEJjbkpoZVNBOUlGdGRPMXh1WEc0Z0lDQWdJQ0JtYjNJb2JHVjBJR3M5TURzZ2F5QThJSFJvYVhNdVpHbGpkR2x2Ym1GeWVTNXNaVzVuZEdnN0lHc3JLeWtnZTF4dUlDQWdJQ0FnSUNCa2FXTjBhVzl1WVhKNVRHVnVaM1JvUVhKeVlYa3VjSFZ6YUNnd0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkSEpoYm5OcGRHbHZiazFoZEhKcGVDNXdkWE5vS0dScFkzUnBiMjVoY25sTVpXNW5kR2hCY25KaGVTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWR0ZzYkhrZ2RHaGxJR2RwZG1WdUlHTnZiV0pwYm1GMGFXOXVjeUIwYnlCaFpHUWdhVzUwYnlCMGFHVWdkSEpoYm5OcGRHbHZiazFoZEhKcGVGeHVJQ0FnSUdadmNpaHNaWFFnYVQwd095QnBJRHdnYVc1d2RYUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUd4bGRDQmpkWEp5Wlc1MFUzUmhkR1U3WEc1Y2JpQWdJQ0FnSUdsbUtHa2dQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFUzUmhkR1VnUFNCYklHbHVjSFYwVzJsdWNIVjBMbXhsYm1kMGFDMHhYU3dnYVc1d2RYUmJhVjBnWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBVM1JoZEdVZ1BTQmJJR2x1Y0hWMFcya3RLRzl5WkdWeUxURXBYU3dnYVc1d2RYUmJhVjBnWFR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JHVjBJR2x1WkdWNFQyWkRkWEp5Wlc1MFUzUmhkR1VnUFNCMGFHbHpMbU52YldKcGJtRjBhVzl1Y3k1bWFXNWtTVzVrWlhnb0lDaHBkR1Z0S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBjMFZ4ZFdsMllXeGxiblFvWTNWeWNtVnVkRk4wWVhSbExDQnBkR1Z0S1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQXZMeUJYWlNCaGNtVWdZWE56ZFcxcGJtY2dZU0IzY21Gd2NHbHVaeUJwYm5CMWRGeHVJQ0FnSUNBZ2JHVjBJRzVsZUhSVGRHRjBaU0E5SUdsdWNIVjBXeWhwS3pFcElDVWdhVzV3ZFhRdWJHVnVaM1JvWFR0Y2JpQWdJQ0FnSUd4bGRDQmthV04wYVc5dVlYSjVTVzVrWlhoUFprNWxlSFJUZEdGMFpTQTlJSFJvYVhNdVpHbGpkR2x2Ym1GeWVTNXBibVJsZUU5bUtHNWxlSFJUZEdGMFpTazdYRzVjYmlBZ0lDQWdJQzh2SUdsdVkzSmxiV1Z1ZENCMGFHVWdZVzF2ZFc1MElHOW1JSFJwYldWeklIUm9hWE1nZEhKaGJuTnBkR2x2YmlCb1lYTWdiMk5qZFhKeVpXUmNiaUFnSUNBZ0lIUnlZVzV6YVhScGIyNU5ZWFJ5YVhoYmFXNWtaWGhQWmtOMWNuSmxiblJUZEdGMFpWMWJaR2xqZEdsdmJtRnllVWx1WkdWNFQyWk9aWGgwVTNSaGRHVmRLeXM3WEc1Y2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUhSeVlXNXphWFJwYjI1TllYUnlhWGdnUFNCMGNtRnVjMmwwYVc5dVRXRjBjbWw0TG0xaGNDZ2dibTl5YldGc2FYcGxJQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkSEpoYm5OcGRHbHZiazFoZEhKcGVEdGNiaUFnZlZ4dVhHNWNiaUFnWjJWMFRtVjRkRk4wWVhSbEtITjBZWFJsT2lCaGJua3BPaUJoYm5rZ2UxeHVJQ0FnSUdOdmJuTjBJSFJ5WVc1emFYUnBiMjVOWVhSeWFYZzZJRUZ5Y21GNVBDQkJjbkpoZVR4dWRXMWlaWEkrSUQ0Z1BTQjBhR2x6TG5SeVlXNXphWFJwYjI1TllYUnlhWGc3WEc1Y2JpQWdJQ0JzWlhRZ2FXNWtaWGhQWmtOMWNuSmxiblJUZEdGMFpUb2diblZ0WW1WeUlEMGdkR2hwY3k1amIyMWlhVzVoZEdsdmJuTXVabWx1WkVsdVpHVjRLQ0FvYVhSbGJTa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2x6UlhGMWFYWmhiR1Z1ZENoemRHRjBaU3dnYVhSbGJTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnNaWFFnY0hKdlltRmlhV3hwZEdsbGN6b2dRWEp5WVhrOGJuVnRZbVZ5UGlBOUlIUnlZVzV6YVhScGIyNU5ZWFJ5YVhoYmFXNWtaWGhQWmtOMWNuSmxiblJUZEdGMFpWMDdYRzVjYmlBZ0lDQnNaWFFnYm1WNGRFbHVaR1Y0T2lCdWRXMWlaWElnUFNCM2FXNWtaWGdvSUhCeWIySmhZbWxzYVhScFpYTWdLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVrYVdOMGFXOXVZWEo1VzI1bGVIUkpibVJsZUYwN1hHNGdJSDFjYmx4dUlDQmhjMUJoZEhSbGNtNG9LU0I3WEc0Z0lDQWdiR1YwSUhObGJHWWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S2lCaGMxQmhkSFJsY200b2FXNXBkR2xoYkZOMFlYUmxLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxteGhjM1JUZEdGMFpTQTlJR2x1YVhScFlXeFRkR0YwWlR0Y2JseHVJQ0FnSUNBZ2QyaHBiR1VvZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtVjRkRk4wWVhSbE9pQnVkVzFpWlhJZ1BTQnpaV3htTG1kbGRFNWxlSFJUZEdGMFpTaHpaV3htTG14aGMzUlRkR0YwWlNrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1YkdGemRGTjBZWFJsSUQwZ1czTmxiR1l1YkdGemRGTjBZWFJsVzNObGJHWXViR0Z6ZEZOMFlYUmxMbXhsYm1kMGFDMHhYU3dnYm1WNGRGTjBZWFJsWFR0Y2JseHVJQ0FnSUNBZ0lDQjVhV1ZzWkNCdVpYaDBVM1JoZEdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc1OU8xeHVYRzVsZUhCdmNuUWdleUJOWVhKcmIzWWdmVHRjYmx4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwwMWhjbXR2ZGk1MGN5SXNJbHh1YVcxd2IzSjBJSFYwYVd4eklHWnliMjBnWENJdUwzVjBhV3h6WENJN1hHNWNibHh1WTJ4aGMzTWdSMlZ1WlhScFl5QjdYRzRnSUhCMVlteHBZeUJ3YjNCMWJHRjBhVzl1T2lCdWRXMWlaWEpiWFZ0ZE8xeHVJQ0J3Y21sMllYUmxJR2R2WVd3NklHNTFiV0psY2x0ZE8xeHVJQ0J3Y21sMllYUmxJSE5qYjNKbGN6b2diblZ0WW1WeVcxMDdYRzRnSUhCeWFYWmhkR1VnYkdGemRGTjBZWFJsT2lCdWRXMWlaWEpiWFR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2locGJuQjFkRkJ2Y0hWc1lYUnBiMjQ2SUc1MWJXSmxjbHRkVzEwc0lHZHZZV3c2SUc1MWJXSmxjbHRkS1NCN1hHNGdJQ0FnZEdocGN5NXdiM0IxYkdGMGFXOXVJRDBnYVc1d2RYUlFiM0IxYkdGMGFXOXVPMXh1SUNBZ0lIUm9hWE11YzJOdmNtVnpJRDBnUVhKeVlYa29hVzV3ZFhSUWIzQjFiR0YwYVc5dUxteGxibWQwYUNrdVptbHNiQ2d3S1R0Y2JpQWdJQ0IwYUdsekxtZHZZV3dnUFNCbmIyRnNPMXh1SUNBZ0lIUm9hWE11YkdGemRGTjBZWFJsSUQwZ2FXNXdkWFJRYjNCMWJHRjBhVzl1VzAxaGRHZ3VabXh2YjNJb0lFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBb2FXNXdkWFJRYjNCMWJHRjBhVzl1TG14bGJtZDBhQzB4S1NrZ1hUdGNiaUFnZlZ4dVhHNWNiaUFnTHk4Z1FXTmpkVzExYkdGMFpTQmhibVFnY21WMGRYSnVJSFJvWlNCelkyOXlaU0JtYjNJZ1lTQnphVzVuYkdVZ1kyOXNiR1ZqZEdsdmJseHVJQ0JuWlhSVWIzUmhiRVpwZEc1bGMzTlNZWFJwYm1jb1kyOXNiR1ZqZEdsdmJqb2diblZ0WW1WeVcxMHNJR2R2WVd3NklHNTFiV0psY2x0ZEtTQjdYRzRnSUNBZ2JHVjBJSE5qYjNKbE9pQnVkVzFpWlhJZ1BTQXdPeUF2THlCc2IzZGxjaUJwY3lCaVpYUjBaWEpjYmlBZ0lDQnNaWFFnYm05eWJXRnNhWHBsWkVOdmJHeGxZM1JwYjI0Z1BTQmpiMnhzWldOMGFXOXVMbTFoY0Nnb2JuVnRPaUJ1ZFcxaVpYSXBJRDArSUc1MWJTQXRJRTFoZEdndWJXbHVMbUZ3Y0d4NUtHNTFiR3dzSUdOdmJHeGxZM1JwYjI0cElDazdYRzVjYmlBZ0lDQm1iM0lvYkdWMElHazlibTl5YldGc2FYcGxaRU52Ykd4bFkzUnBiMjR1YkdWdVozUm9MVEU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYRzRnSUNBZ0lDQnpZMjl5WlNBclBTQjBhR2x6TG1kbGRFUnBjM1JoYm1ObEtHNXZjbTFoYkdsNlpXUkRiMnhzWldOMGFXOXVXMmxkTENCbmIyRnNXMmxkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjMk52Y21VN1hHNGdJSDFjYmx4dUlDQXZMeUJVVDBSUE9pQjBaWE4wWEc0Z0lDOHZJRlZ6YVc1bklIUm9aU0JuYVhabGJpQnpZMjl5WlhNc0lHZGxkQ0IwYUdVZ2JXOXpkQ0JjSW1acGRGd2lJSFIzYnlCblpXNWxjbUYwYVc5dWN5QnZkWFFnYjJZZ2RHaGxJSEJ2Y0hWc1lYUnBiMjVjYmlBZ1oyVjBWRzl3VkhkdlIyVnVaWEpoZEdsdmJuTW9jMk52Y21Wek9pQnVkVzFpWlhKYlhTd2djRzl3ZFd4aGRHbHZiam9nYm5WdFltVnlXMTFiWFNrNklHNTFiV0psY2x0ZFcxMGdlMXh1WEc0Z0lDQWdiR1YwSUdsdVpHVjRUMlpJYVdkb1pYTjBVMk52Y21VZ1BTQXdPMXh1WEc0Z0lDQWdabTl5S0d4bGRDQnBQWE5qYjNKbGN5NXNaVzVuZEdndE1Uc2dhVDQ5TURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0JwWmloelkyOXlaWE5iYVc1a1pYaFBaa2hwWjJobGMzUlRZMjl5WlYwZ1BDQnpZMjl5WlhOYmFWMHBJSHRjYmlBZ0lDQWdJQ0FnYVc1a1pYaFBaa2hwWjJobGMzUlRZMjl5WlNBOUlHazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlIUm9aWEpsSUdGeVpTQjBkMjhnYjJZZ2RHaGxJSE5oYldVZ2MyTnZjbVZ6TENCamFHOXZjMlVnYjI1bElISmhibVJ2Yld4NVhHNGdJQ0FnSUNCcFppaHpZMjl5WlhOYmFXNWtaWGhQWmtocFoyaGxjM1JUWTI5eVpWMGdQVDA5SUhOamIzSmxjMXRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamIybHVSbXhwY0NBOUlFMWhkR2d1Y21GdVpHOXRLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXNWtaWGhQWmtocFoyaGxjM1JUWTI5eVpTQTlJQ2hqYjJsdVJteHBjQ0ErSURBdU5Ta2dQeUJwYm1SbGVFOW1TR2xuYUdWemRGTmpiM0psSURvZ2FUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdhVzVrWlhoUFprNWxlSFJJYVdkb1pYTjBVMk52Y21VNklHNTFiV0psY2lBOUlEQTdYRzRnSUNBZ1kyOXVjM1FnZEc5d1IyVnVaWEpoZEdsdmJsTmpiM0psT2lCdWRXMWlaWElnUFNCelkyOXlaWE5iYVc1a1pYaFBaa2hwWjJobGMzUlRZMjl5WlYwN1hHNWNibHh1SUNBZ0lHTnZibk4wSUdOdmFXNUdiR2x3Um05eVRYVjBZWFJsSUQwZ2RYUnBiSE11Wm14cGNFTnZhVzRvTUM0eU5TazdYRzVjYmlBZ0lDQnBaaWhqYjJsdVJteHBjRVp2Y2sxMWRHRjBaU2tnZTF4dUlDQWdJQ0FnYVc1a1pYaFBaazVsZUhSSWFXZG9aWE4wVTJOdmNtVWdQU0JOWVhSb0xtWnNiMjl5S0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUJ6WTI5eVpYTXViR1Z1WjNSb0tUdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQm1iM0lvYkdWMElHazljMk52Y21WekxteGxibWQwYUMweE95QnBQajB3T3lCcExTMHBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXZHViM0psSUdGdWVTQnpZMjl5WlhNZ2RHaGhkQ0JoY21VZ1lXeHlaV0ZrZVNCMGFHVWdhR2xuYUdWemRDQnpZMjl5WlZ4dUlDQWdJQ0FnSUNCcFppaHpZMjl5WlhOYmFWMGdJVDA5SUhSdmNFZGxibVZ5WVhScGIyNVRZMjl5WlNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZb2MyTnZjbVZ6VzJsdVpHVjRUMlpPWlhoMFNHbG5hR1Z6ZEZOamIzSmxYU0E4SUhOamIzSmxjMXRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYaFBaazVsZUhSSWFXZG9aWE4wVTJOdmNtVWdQU0JwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFbG1JSFJvWlhKbElHRnlaU0IwZDI4Z2IyWWdkR2hsSUhOaGJXVWdjMk52Y21WekxDQmphRzl2YzJVZ2IyNWxJSEpoYm1SdmJXeDVYRzRnSUNBZ0lDQWdJQ0FnYVdZb2MyTnZjbVZ6VzJsdVpHVjRUMlpPWlhoMFNHbG5hR1Z6ZEZOamIzSmxYU0E5UFQwZ2MyTnZjbVZ6VzJsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjJsdVJteHBjQ0E5SUUxaGRHZ3VjbUZ1Wkc5dEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0VDJaT1pYaDBTR2xuYUdWemRGTmpiM0psSUQwZ0tHTnZhVzVHYkdsd0lENGdNQzQxS1NBL0lHbHVaR1Y0VDJaT1pYaDBTR2xuYUdWemRGTmpiM0psSURvZ2FUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdXM0J2Y0hWc1lYUnBiMjViYVc1a1pYaFBaa2hwWjJobGMzUlRZMjl5WlYwc0lIQnZjSFZzWVhScGIyNWJhVzVrWlhoUFprNWxlSFJJYVdkb1pYTjBVMk52Y21WZElGMDdYRzRnSUgxY2JseHVJQ0F2THlCVVQwUlBPaUJOWVd0bElHMXZjbVVnZEdoaGJpQnZibVVnZEhsd1pTQnZaaUJ0WVhScGJtZGNiaUFnTHk4Z1ZHRnJaU0JwYmlCMGQyOGdZWEp5WVhseklDaHdZWEpsYm5SektTQmhibVFnYldGMFpTQjBhR1Z0SUdsdUlHRWdiblZ0WW1WeUlHOW1JR1JwWm1abGNtVnVkQ0IzWVhseklIUnZJSEJ5YjJSMVkyVWdiWFZzZEdsd2JHVWdiMlptYzNCeWFXNW5YRzRnSUcxaGRHVkhaVzVsY21GMGFXOXVjeWh3WVhKbGJuUnpPaUJ1ZFcxaVpYSmJYVnRkS1RvZ2JuVnRZbVZ5VzExYlhTQjdYRzVjYmlBZ0lDQmpiMjV6ZENCemNHeHBZMlZrVDJabWMzQnlhVzVuSUQwZ2RHaHBjeTVuWlhSVGNHeHBZMlZrVDJabWMzQnlhVzVuS0hCaGNtVnVkSE5iTUYwc0lIQmhjbVZ1ZEhOYk1WMHBPMXh1SUNBZ0lHTnZibk4wSUdsdWRHVnliR0ZqWldSUFptWnpjSEpwYm1jZ1BTQjBhR2x6TG1kbGRFbHVkR1Z5YkdGalpXUlBabVp6Y0hKcGJtY29jR0Z5Wlc1MGMxc3dYU3dnY0dGeVpXNTBjMXN4WFNrN1hHNWNiaUFnSUNBdkx5QkhaVzVsY21GMFpTQnRiM0psSUhSb1lXNGdiMjVsSUc5bVpuTndjbWx1WjF4dUlDQWdJSEpsZEhWeWJpQmJjM0JzYVdObFpFOW1abk53Y21sdVp5d2dhVzUwWlhKc1lXTmxaRTltWm5Od2NtbHVaMTA3WEc0Z0lIMWNibHh1SUNBdkx5QlRjR3hwWTJVZ2RIZHZJR1Z4ZFdGc0xXeGxibWQwYUNCaGNuSmhlWE1nZEc5blpYUm9aWElnWVc1a0lISmxkSFZ5YmlCMGFHVWdjbVZ6ZFd4MFhHNGdJR2RsZEVsdWRHVnliR0ZqWldSUFptWnpjSEpwYm1jb2NHRnlaVzUwVDI1bE9pQnVkVzFpWlhKYlhTd2djR0Z5Wlc1MFZIZHZPaUJ1ZFcxaVpYSmJYU2s2SUc1MWJXSmxjbHRkSUh0Y2JpQWdJQ0JqYjI1emRDQnBiblJsY214aFkyVmtUMlptYzNCeWFXNW5JRDBnUVhKeVlYa29jR0Z5Wlc1MFQyNWxMbXhsYm1kMGFDazdYRzVjYmlBZ0lDQm1iM0lvYkdWMElHazlhVzUwWlhKc1lXTmxaRTltWm5Od2NtbHVaeTVzWlc1bmRHZ3RNVHNnYVQ0OU1Ec2dhUzB0S1NCN1hHNGdJQ0FnSUNCcGJuUmxjbXhoWTJWa1QyWm1jM0J5YVc1blcybGRJRDBnS0drbE1pa2dQVDA5SURBZ1B5QndZWEpsYm5SUGJtVmJhVjBnT2lCd1lYSmxiblJVZDI5YmFWMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdsdWRHVnliR0ZqWldSUFptWnpjSEpwYm1jN1hHNGdJSDFjYmx4dUlDQm5aWFJUY0d4cFkyVmtUMlptYzNCeWFXNW5LSEJoY21WdWRFOXVaVG9nYm5WdFltVnlXMTBzSUhCaGNtVnVkRlIzYnpvZ2JuVnRZbVZ5VzEwcE9pQnVkVzFpWlhKYlhTQjdYRzRnSUNBZ1kyOXVjM1FnWTI5cGJrWnNhWEE2SUc1MWJXSmxjaUE5SUUxaGRHZ3VjbUZ1Wkc5dEtDa2dQaUF3TGpVZ1B5QXhJRG9nTUR0Y2JpQWdJQ0JqYjI1emRDQndZWEpsYm5SeklEMGdZMjlwYmtac2FYQWdQVDBnTUNBL0lGdHdZWEpsYm5SUGJtVXNJSEJoY21WdWRGUjNiMTBnT2lCYmNHRnlaVzUwVkhkdkxDQndZWEpsYm5SUGJtVmRPMXh1SUNBZ0lHTnZibk4wSUhOd2JHbDBVRzlwYm5RNklHNTFiV0psY2lBOUlFMWhkR2d1Wm14dmIzSW9jR0Z5Wlc1MFQyNWxMbXhsYm1kMGFDQXZJRElwTzF4dVhHNGdJQ0FnWTI5dWMzUWdjM0JzYVdObFpFOW1abk53Y21sdVp5QTlJRnN1TGk0b2NHRnlaVzUwYzFzd1hTNXpiR2xqWlNnd0xDQnpjR3hwZEZCdmFXNTBLU2tzSUM0dUxpaHdZWEpsYm5Seld6RmRMbk5zYVdObEtITndiR2wwVUc5cGJuUXRNU3dnY0dGeVpXNTBjMXN4WFM1c1pXNW5kR2d0TVNrcElGMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2MzQnNhV05sWkU5bVpuTndjbWx1Wnp0Y2JpQWdmVnh1WEc0Z0lDOHZJRkpsZEhWeWJuTWdZU0J1ZFcxbGNtbGpZV3dnWkdsemRHRnVZMlVnWW1WMGQyVmxiaUJoYmlCcGJuQjFkQ0JoYm1RZ1lTQm5iMkZzWEc0Z0lHZGxkRVJwYzNSaGJtTmxLR2x1Y0hWME9pQnVkVzFpWlhJc0lHZHZZV3c2SUc1MWJXSmxjaWtnZTF4dUlDQWdJR3hsZENCeVlYUnBibWM2SUc1MWJXSmxjaUE5SUdkdllXd2dMU0JwYm5CMWREdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVlYUnBibWM3WEc0Z0lIMWNibHh1WEc1Y2JseHVYRzRnSUM4dklFTmhiR04xYkdGMFpTQmhibVFnY21WMGRYSnVJSFJvWlNCelkyOXlaWE1nWm05eUlHRnNiQ0JqZFhKeVpXNTBJR052Ykd4bFkzUnBiMjV6WEc0Z0lHZGxkRkJ2Y0hWc1lYUnBiMjVUWTI5eVpYTW9jRzl3ZFd4aGRHbHZiam9nYm5WdFltVnlXMTFiWFN3Z1oyOWhiRG9nYm5WdFltVnlXMTBwT2lCdWRXMWlaWEpiWFNCN1hHNGdJQ0FnYkdWMElITmpiM0psY3lBOUlFRnljbUY1S0hCdmNIVnNZWFJwYjI0dWJHVnVaM1JvS1M1bWFXeHNLREFwTzF4dVhHNGdJQ0FnWm05eUtHeGxkQ0JwUFNod2IzQjFiR0YwYVc5dUxteGxibWQwYUMweEtUc2dhVDQ5TURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0J6WTI5eVpYTmJhVjBnUFNCMGFHbHpMbWRsZEZSdmRHRnNSbWwwYm1WemMxSmhkR2x1Wnlod2IzQjFiR0YwYVc5dVcybGRMQ0JuYjJGc0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYzJOdmNtVnpPMXh1SUNCOVhHNWNiaUFnWjJWMFRtVjRkRWRsYm1WeVlYUnBiMjRvY0c5d2RXeGhkR2x2YmpvZ2JuVnRZbVZ5VzExYlhTd2daMjloYkRvZ2JuVnRZbVZ5VzEwcElIdGNiaUFnSUNCamIyNXpkQ0J3YjNCMWJHRjBhVzl1VTJOdmNtVnpPbTUxYldKbGNsdGRJRDBnZEdocGN5NW5aWFJRYjNCMWJHRjBhVzl1VTJOdmNtVnpLSEJ2Y0hWc1lYUnBiMjRzSUdkdllXd3BPMXh1SUNBZ0lHTnZibk4wSUhSdmNGUjNiMGRsYm1WeVlYUnBiMjV6T201MWJXSmxjbHRkVzEwZ1BTQjBhR2x6TG1kbGRGUnZjRlIzYjBkbGJtVnlZWFJwYjI1ektIQnZjSFZzWVhScGIyNVRZMjl5WlhNc0lIQnZjSFZzWVhScGIyNHBPMXh1SUNBZ0lHTnZibk4wSUc1bGQwZGxibVZ5WVhScGIyNXpPbTUxYldKbGNsdGRXMTBnUFNCMGFHbHpMbTFoZEdWSFpXNWxjbUYwYVc5dWN5aDBiM0JVZDI5SFpXNWxjbUYwYVc5dWN5azdYRzVjYmlBZ0lDQm1iM0lvYkdWMElHazlNRHNnYVNBOElDaHVaWGRIWlc1bGNtRjBhVzl1Y3k1c1pXNW5kR2d0TVNrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdiM0IxYkdGMGFXOXVMbk53YkdsalpTaE5ZWFJvTG1ac2IyOXlLRTFoZEdndWNtRnVaRzl0S0NrZ0tpQW9kR2hwY3k1d2IzQjFiR0YwYVc5dUxteGxibWQwYUMweEtTa3NJREVwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5CdmNIVnNZWFJwYjI0Z1BTQmJMaTR1ZEdocGN5NXdiM0IxYkdGMGFXOXVMQ0F1TGk1dVpYZEhaVzVsY21GMGFXOXVjMTA3WEc0Z0lDQWdMeThnUm05eUlHNXZkeUJ5WVc1a2IyMXNlU0J6Wld4bFkzUWdiMjVsSUc5bUlIUm9aU0JpWlhOMElHZGxibVZ5WVhScGIyNXpYRzRnSUNBZ1kyOXVjM1FnWW1WemRFWnBkRWRsYm1WeVlYUnBiMjRnUFNCdVpYZEhaVzVsY21GMGFXOXVjMXROWVhSb0xtWnNiMjl5S0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUFvYm1WM1IyVnVaWEpoZEdsdmJuTXViR1Z1WjNSb0lDb2dNQzQ1T1RrcEtWMDdYRzVjYmlBZ0lDQnlaWFIxY200Z1ltVnpkRVpwZEVkbGJtVnlZWFJwYjI0N1hHNGdJSDFjYmx4dUlDQm5aWFJPWlhoMFUzUmhkR1VvYzNSaGRHVTZJRzUxYldKbGNsdGRLU0I3WEc0Z0lDQWdMeThnVkU5RVR6b2dWWE5sSUhOMFlYUmxJSFJ2SUdGa1pDQnBiblJ2SUhSb1pTQndiM0IxYkdGMGFXOXVYRzVjYmlBZ0lDQmpiMjV6ZENCdVpYaDBVM1JoZEdVNklHNTFiV0psY2x0ZElEMGdkR2hwY3k1blpYUk9aWGgwUjJWdVpYSmhkR2x2YmloMGFHbHpMbkJ2Y0hWc1lYUnBiMjRzSUhSb2FYTXVaMjloYkNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WNGRGTjBZWFJsTzF4dUlDQjlYRzVjYmlBZ1lYTlFZWFIwWlhKdUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhObGJHWWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S2lCaGMxQmhkSFJsY200b2FXNXBkR2xoYkZOMFlYUmxPaUJ1ZFcxaVpYSmJYU2tnZTF4dUlDQWdJQ0FnYzJWc1ppNXNZWE4wVTNSaGRHVWdQU0JwYm1sMGFXRnNVM1JoZEdVN1hHNWNiaUFnSUNBZ0lIZG9hV3hsS0hSeWRXVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEZOMFlYUmxJRDBnYzJWc1ppNW5aWFJPWlhoMFUzUmhkR1VvYzJWc1ppNXNZWE4wVTNSaGRHVXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxteGhjM1JUZEdGMFpTQTlJRzVsZUhSVGRHRjBaVHRjYmx4dUlDQWdJQ0FnSUNCNWFXVnNaQ0J1WlhoMFUzUmhkR1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzU5TzF4dVhHNWxlSEJ2Y25RZ2V5QkhaVzVsZEdsaklIMDdYRzVjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5SFpXNWxkR2xqTG5Seklpd2lhVzF3YjNKMElIdEpVMjkxYm1SUWJHRjVaWElzSUVsUWJHRjVUM0IwYVc5dWMzMGdabkp2YlNBbkxpOVRiM1Z1WkZCc1lYbGxjaWM3WEc1Y2JtTnNZWE56SUZONWJuUm9JR2x0Y0d4bGJXVnVkSE1nU1ZOdmRXNWtVR3hoZVdWeUlIdGNiaUFnYjNOamFXeHNZWFJ2Y2pvZ1QzTmphV3hzWVhSdmNrNXZaR1U3WEc0Z0lHTnZiblJsZUhRNklFRjFaR2x2UTI5dWRHVjRkRHRjYmlBZ1oyRnBiazV2WkdVN1hHNGdJSEJoYm01bGNqb2dVM1JsY21WdlVHRnVibVZ5VG05a1pUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RHaHBjeTVqYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnYVc1cGRDZ3BJSHRjYmlBZ0lDQjBhR2x6TG05elkybHNiR0YwYjNJZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNKbFlYUmxUM05qYVd4c1lYUnZjaWdwTzF4dUlDQWdJSFJvYVhNdVoyRnBiazV2WkdVZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNKbFlYUmxSMkZwYmlncE8xeHVJQ0FnSUhSb2FYTXVjR0Z1Ym1WeUlEMGdkR2hwY3k1amIyNTBaWGgwTG1OeVpXRjBaVk4wWlhKbGIxQmhibTVsY2lncE8xeHVYRzRnSUNBZ2RHaHBjeTV2YzJOcGJHeGhkRzl5TG1OdmJtNWxZM1FvZEdocGN5NW5ZV2x1VG05a1pTazdYRzRnSUNBZ2RHaHBjeTVuWVdsdVRtOWtaUzVqYjI1dVpXTjBLSFJvYVhNdWNHRnVibVZ5S1R0Y2JpQWdJQ0IwYUdsekxuQmhibTVsY2k1amIyNXVaV04wS0hSb2FYTXVZMjl1ZEdWNGRDNWtaWE4wYVc1aGRHbHZiaWs3WEc1Y2JpQWdJQ0IwYUdsekxtOXpZMmxzYkdGMGIzSXVkSGx3WlNBOUlDZHphVzVsSnp0Y2JpQWdJQ0IwYUdsekxtZGhhVzVPYjJSbExtZGhhVzR1ZG1Gc2RXVWdQU0F3TzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhCc1lYa29iM0IwT2lCSlVHeGhlVTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQmpiMjV6ZENCN1puSmxjVDB5TWpBc0lIUnBiV1U5TVN3Z2NHRnVQVEFzSUhadmJEMHhmU0E5SUc5d2REdGNiaUFnSUNCMGFHbHpMbWx1YVhRb0tUdGNibHh1SUNBZ0lHeGxkQ0JuWVdsdUlEMGdNVHRjYmlBZ0lDQjBhR2x6TG05elkybHNiR0YwYjNJdVpuSmxjWFZsYm1ONUxuWmhiSFZsSUQwZ1puSmxjVHRjYmlBZ0lDQXZMeUJ6YjIxbElITjBkWEJwWkNCaVlYTnBZeUJ3ZVhOamFHOWhZMjkxYzNScFl5QnphR0Z3YVc1blhHNGdJQ0FnYVdZb1puSmxjU0ErSURJd01Da2daMkZwYmlBOUlHZGhhVzRxTUM0eE1qdGNiaUFnSUNBdkwzUm9hWE11WjJGcGJrNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNneExDQjBhR2x6TG1OdmJuUmxlSFF1WTNWeWNtVnVkRlJwYldVcE8xeHVJQ0FnSUhSb2FYTXVjR0Z1Ym1WeUxuQmhiaTUyWVd4MVpTQTlJSEJoYmp0Y2JpQWdJQ0IwYUdsekxtOXpZMmxzYkdGMGIzSXVjM1JoY25Rb01DazdYRzRnSUNBZ2RHaHBjeTVuWVdsdVRtOWtaUzVuWVdsdUxuTmxkRlJoY21kbGRFRjBWR2x0WlNoMmIyd2dLaUJuWVdsdUlDb2dLREF1TlRVZ0xTQW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlEQXVNREVwS1N3Z2RHaHBjeTVqYjI1MFpYaDBMbU4xY25KbGJuUlVhVzFsTENCMGFXMWxJQ29nTUM0NE5TQXBPMXh1WEc1Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ2QybHVaRzkzTG5ObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnpaV3htTG5OMGIzQW9kR2x0WlNBcUlEQXVNalVwTzF4dUlDQWdJSDBzSUNoMGFXMWxJQzBnS0hScGJXVXFNQzR5TlNrcElDb2dNVEF3TUNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QnpkRzl3S0hScGJXVXBJSHRjYmlBZ0lDQjBhR2x6TG1kaGFXNU9iMlJsTG1kaGFXNHVjMlYwVkdGeVoyVjBRWFJVYVcxbEtEQXNJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTd2dkR2x0WlNvd0xqa2dLVHRjYmlBZ0lDQjBhR2x6TG05elkybHNiR0YwYjNJdWMzUnZjQ2gwYUdsekxtTnZiblJsZUhRdVkzVnljbVZ1ZEZScGJXVWdLeUFvSUhScGJXVWdLaUEwSUNrcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUZVc1MGFEdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwzTnlZeTlUZVc1MGFDNTBjeUlzSW1sdGNHOXlkQ0I3U0c5M2JDd2dTRzkzYkdWeWZTQm1jbTl0SUNkb2IzZHNaWEluTzF4dWFXMXdiM0owSUhWMGFXeHpJR1p5YjIwZ0p5NHZkWFJwYkhNbk8xeHVhVzF3YjNKMElIdEpVMjkxYm1SUWJHRjVaWElzSUVsUWJHRjVUM0IwYVc5dWN5d2dTVk5oYlhCc1pYMGdabkp2YlNBbkxpOVRiM1Z1WkZCc1lYbGxjaWM3WEc1Y2JtbHVkR1Z5Wm1GalpTQkpVR3hoZVdWeUlIdGNiaUFnY0d4aGVXVnlPaUJJYjNkc0xGeHVJQ0JpWVhObFJuSmxjVG9nYm5WdFltVnlMRnh1ZlZ4dVhHNWpiR0Z6Y3lCTmRXeDBhVk5oYlhCc1pYSWdhVzF3YkdWdFpXNTBjeUJKVTI5MWJtUlFiR0Y1WlhJZ2UxeHVJQ0J3YkdGNVpYSnpPaUJKVUd4aGVXVnlXMTA3WEc0Z0lHTnZiblJsZUhRNklFRjFaR2x2UTI5dWRHVjRkRHRjYmlBZ1oyRnBiazV2WkdVN1hHNGdJSEJoYm01bGNqb2dVM1JsY21WdlVHRnVibVZ5VG05a1pUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWlhoMExDQnZjSFE2SUhzZ2MyRnRjR3hsY3pvZ1NWTmhiWEJzWlZ0ZElIMGdLU0I3WEc0Z0lDQWdkR2hwY3k1amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdJQ0IwYUdsekxuQnNZWGxsY25NZ1BTQnZjSFF1YzJGdGNHeGxjeTV0WVhBb0lITmhiWEJzWlVOdmJtWnBaeUE5UGlBb2UzQnNZWGxsY2pvZ2JtVjNJRWh2ZDJ3b2UzTnlZem9nYzJGdGNHeGxRMjl1Wm1sbkxtWnBiR1Z6ZlNrc0lHSmhjMlZHY21WeE9pQnpZVzF3YkdWRGIyNW1hV2N1Wm5KbGNYMHBJQ2s3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvZEdocGN5NXdiR0Y1WlhKektWeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklIQnNZWGtvYjNCME9pQkpVR3hoZVU5d2RHbHZibk1wSUh0Y2JpQWdJQ0JqYjI1emRDQjdabkpsY1QweU1qQXNJSFJwYldVOU1Td2djR0Z1UFRBc0lIWnZiRDB4ZlNBOUlHOXdkRHRjYmx4dUlDQWdJR3hsZENCbllXbHVJRDBnTVR0Y2JpQWdJQ0JqYjI1emRDQnpZVzF3YkdWUWJHRjVaWElnUFNCMGFHbHpMbVpwYm1SRGJHOXpaWE4wVTJGdGNHeGxVR3hoZVdWeUtDQm1jbVZ4SUNrN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlEMGdjMkZ0Y0d4bFVHeGhlV1Z5TG5Cc1lYbGxjaTV3YkdGNUtDazdYRzRnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNXNiMjl3S0NCbVlXeHpaU3dnWTNWeWNtVnVkR3g1VUd4aGVXbHVaMU5oYlhCc1pVbEVJQ2s3WEc0Z0lDQWdjMkZ0Y0d4bFVHeGhlV1Z5TG5Cc1lYbGxjaTV5WVhSbEtDQjFkR2xzY3k1blpYUlNZWFJsUm5KdmJVWnlaWEYxWlc1amFXVnpLQ0JtY21WeExDQnpZVzF3YkdWUWJHRjVaWEl1WW1GelpVWnlaWEVnS1N3Z1kzVnljbVZ1ZEd4NVVHeGhlV2x1WjFOaGJYQnNaVWxFSUNrN1hHNGdJQ0FnTHk4Z2MyOXRaU0J6ZEhWd2FXUWdZbUZ6YVdNZ2NIbHpZMmh2WVdOdmRYTjBhV01nYzJoaGNHbHVaMXh1SUNBZ0lHbG1LR1p5WlhFZ1BpQXlNREFwSUdkaGFXNGdQU0JuWVdsdUtqQXVNanRjYmlBZ0lDQnpZVzF3YkdWUWJHRjVaWEl1Y0d4aGVXVnlMbVpoWkdVb0lEQXNJR2RoYVc0Z0tpQjJiMndzSURJd01Dd2dZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlDazdYRzRnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNXpkR1Z5Wlc4b0lIQmhiaXdnWTNWeWNtVnVkR3g1VUd4aGVXbHVaMU5oYlhCc1pVbEVJQ2s3WEc1Y2JseHVJQ0FnSUhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNW1ZV1JsS0NCbllXbHVJQ29nZG05c0xDQXdMQ0F5TURBc0lHTjFjbkpsYm5Sc2VWQnNZWGxwYm1kVFlXMXdiR1ZKUkNBcE8xeHVJQ0FnSUNBZ2RHaHBjeTV6ZEc5d0tIUnBiV1VzSUhOaGJYQnNaVkJzWVhsbGNpd2dZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlDazdYRzRnSUNBZ2ZTNWlhVzVrS0hSb2FYTXBMQ0FvSUhScGJXVWdLaUF4TURBd0lDa2dLeUF5TURBcE95QXZMeUJoWkdScGJtY2dZU0F4TURBZ2JYTWdZblZtWm1WeUlIUnZJR0YyYjJsa0lHRnVlU0JwYzNOMVpYTmNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJSE4wYjNBb2RHbHRaU3dnYzJGdGNHeGxVR3hoZVdWeUxDQmpkWEp5Wlc1MGJIbFFiR0Y1YVc1blUyRnRjR3hsU1VRcElIdGNiaUFnSUNCM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lITmhiWEJzWlZCc1lYbGxjaTV3YkdGNVpYSXVjM1J2Y0NncE8xeHVJQ0FnSUgwdVltbHVaQ2gwYUdsektTd2dNekF3S1RzZ0x5OGdZV1JrYVc1bklHRWdNVEF3SUcxeklHSjFabVpsY2lCMGJ5QmhkbTlwWkNCaGJua2dhWE56ZFdWelhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdabWx1WkVOc2IzTmxjM1JUWVcxd2JHVlFiR0Y1WlhJb0lHWnlaWEU2Ym5WdFltVnlJQ2s2SUVsUWJHRjVaWElnZTF4dUlDQWdJQzh2SUVOaGJpQnZibXg1SUdkbGRDQjBhR1VnWTJ4dmMyVnpkQ0JtY21WeGRXVnVZM2tnYVc0Z2RHaGxJSE5sZENCdlppQlFiR0Y1WlhKekp5Qm1jbVZ4ZFdWdVkybGxjeUJ6YnlCblpYUWdkR2hoZENCbWNtVnhkV1Z1WTNrc0lIUm9aVzRnWm1sc2RHVnlJSFJvWlNCd2JHRjVaWEp6WEc0Z0lDQWdZMjl1YzNRZ1kyeHZjMlZ6ZEZCc1lYbGxja1p5WlhGMVpXNWplU0E5SUhWMGFXeHpMbWRsZEVOc2IzTmxjM1JOWlcxaVpYSW9abkpsY1N3Z2RHaHBjeTV3YkdGNVpYSnpMbTFoY0NnZ2NHeGhlV1Z5SUQwK0lIQnNZWGxsY2k1aVlYTmxSbkpsY1NrZ0tUdGNiaUFnSUNCeVpYUjFjbTRnZFhScGJITXVabWx1WkVsdVEyOXNiR1ZqZEdsdmJpZ2dkR2hwY3k1d2JHRjVaWEp6TENCdFpXMWlaWElnUFQ0Z2JXVnRZbVZ5SUQwOVBTQmpiRzl6WlhOMFVHeGhlV1Z5Um5KbGNYVmxibU41SUNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1RYVnNkR2xUWVcxd2JHVnlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDAxMWJIUnBVMkZ0Y0d4bGNpNTBjeUlzSWk4cUlWeHVJQ29nSUdodmQyeGxjaTVxY3lCMk1pNHdMakV5WEc0Z0tpQWdhRzkzYkdWeWFuTXVZMjl0WEc0Z0tseHVJQ29nSUNoaktTQXlNREV6TFRJd01UZ3NJRXBoYldWeklGTnBiWEJ6YjI0Z2IyWWdSMjlzWkVacGNtVWdVM1IxWkdsdmMxeHVJQ29nSUdkdmJHUm1hWEpsYzNSMVpHbHZjeTVqYjIxY2JpQXFYRzRnS2lBZ1RVbFVJRXhwWTJWdWMyVmNiaUFxTDF4dVhHNG9ablZ1WTNScGIyNG9LU0I3WEc1Y2JpQWdKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGdJQzhxS2lCSGJHOWlZV3dnVFdWMGFHOWtjeUFxS2k5Y2JpQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJSFJvWlNCbmJHOWlZV3dnWTI5dWRISnZiR3hsY2k0Z1FXeHNJR052Ym5SaGFXNWxaQ0J0WlhSb2IyUnpJR0Z1WkNCd2NtOXdaWEowYVdWeklHRndjR3g1WEc0Z0lDQXFJSFJ2SUdGc2JDQnpiM1Z1WkhNZ2RHaGhkQ0JoY21VZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jZ2IzSWdkMmxzYkNCaVpTQnBiaUIwYUdVZ1puVjBkWEpsTGx4dUlDQWdLaTljYmlBZ2RtRnlJRWh2ZDJ4bGNrZHNiMkpoYkNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11YVc1cGRDZ3BPMXh1SUNCOU8xeHVJQ0JJYjNkc1pYSkhiRzlpWVd3dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVVnZEdobElHZHNiMkpoYkNCSWIzZHNaWElnYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4bGNuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjeUI4ZkNCSWIzZHNaWEk3WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHZHNiMkpoYkNCSlJDQmpiM1Z1ZEdWeUxseHVJQ0FnSUNBZ2MyVnNaaTVmWTI5MWJuUmxjaUE5SURFd01EQTdYRzVjYmlBZ0lDQWdJQzh2SUVsdWRHVnlibUZzSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNCelpXeG1MbDlqYjJSbFkzTWdQU0I3ZlR0Y2JpQWdJQ0FnSUhObGJHWXVYMmh2ZDJ4eklEMGdXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXRkWFJsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzJWc1ppNWZkbTlzZFcxbElEMGdNVHRjYmlBZ0lDQWdJSE5sYkdZdVgyTmhibEJzWVhsRmRtVnVkQ0E5SUNkallXNXdiR0Y1ZEdoeWIzVm5hQ2M3WEc0Z0lDQWdJQ0J6Wld4bUxsOXVZWFpwWjJGMGIzSWdQU0FvZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkMmx1Wkc5M0xtNWhkbWxuWVhSdmNpa2dQeUIzYVc1a2IzY3VibUYyYVdkaGRHOXlJRG9nYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnVUhWaWJHbGpJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQWdJQ0J6Wld4bUxtMWhjM1JsY2tkaGFXNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2MyVnNaaTV1YjBGMVpHbHZJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpaV3htTG5WemFXNW5WMlZpUVhWa2FXOGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2MyVnNaaTVoZFhSdlUzVnpjR1Z1WkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J6Wld4bUxtTjBlQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQzh2SUZObGRDQjBieUJtWVd4elpTQjBieUJrYVhOaFlteGxJSFJvWlNCaGRYUnZJR2xQVXlCbGJtRmliR1Z5TGx4dUlDQWdJQ0FnYzJWc1ppNXRiMkpwYkdWQmRYUnZSVzVoWW14bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0x5OGdVMlYwZFhBZ2RHaGxJSFpoY21sdmRYTWdjM1JoZEdVZ2RtRnNkV1Z6SUdadmNpQm5iRzlpWVd3Z2RISmhZMnRwYm1jdVhHNGdJQ0FnSUNCelpXeG1MbDl6WlhSMWNDZ3BPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBMM05sZENCMGFHVWdaMnh2WW1Gc0lIWnZiSFZ0WlNCbWIzSWdZV3hzSUhOdmRXNWtjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRHYkc5aGRIMGdkbTlzSUZadmJIVnRaU0JtY205dElEQXVNQ0IwYnlBeExqQXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeUwwWnNiMkYwZlNBZ0lDQWdVbVYwZFhKdWN5QnpaV3htSUc5eUlHTjFjbkpsYm5RZ2RtOXNkVzFsTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSFp2YkhWdFpUb2dablZ1WTNScGIyNG9kbTlzS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dUlDQWdJQ0FnZG05c0lEMGdjR0Z5YzJWR2JHOWhkQ2gyYjJ3cE8xeHVYRzRnSUNBZ0lDQXZMeUJKWmlCM1pTQmtiMjRuZENCb1lYWmxJR0Z1SUVGMVpHbHZRMjl1ZEdWNGRDQmpjbVZoZEdWa0lIbGxkQ3dnY25WdUlIUm9aU0J6WlhSMWNDNWNiaUFnSUNBZ0lHbG1JQ2doYzJWc1ppNWpkSGdwSUh0Y2JpQWdJQ0FnSUNBZ2MyVjBkWEJCZFdScGIwTnZiblJsZUhRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyYjJ3Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIWnZiQ0ErUFNBd0lDWW1JSFp2YkNBOFBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM1p2YkhWdFpTQTlJSFp2YkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJFYjI0bmRDQjFjR1JoZEdVZ1lXNTVJRzltSUhSb1pTQnViMlJsY3lCcFppQjNaU0JoY21VZ2JYVjBaV1F1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5dGRYUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCMWMybHVaeUJYWldJZ1FYVmthVzhzSUhkbElHcDFjM1FnYm1WbFpDQjBieUJoWkdwMWMzUWdkR2hsSUcxaGMzUmxjaUJuWVdsdUxseHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNTFjMmx1WjFkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1dFlYTjBaWEpIWVdsdUxtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9kbTlzTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJtUWdZMmhoYm1kbElIWnZiSFZ0WlNCbWIzSWdZV3hzSUVoVVRVdzFJR0YxWkdsdklHNXZaR1Z6TGx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBUQTdJR2s4YzJWc1ppNWZhRzkzYkhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgyaHZkMnh6VzJsZExsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSMlYwSUdGc2JDQnZaaUIwYUdVZ2MyOTFibVJ6SUdsdUlIUm9hWE1nU0c5M2JDQm5jbTkxY0M1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW9iM2RzYzF0cFhTNWZaMlYwVTI5MWJtUkpaSE1vS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RHOXZjQ0IwYUhKdmRXZG9JR0ZzYkNCemIzVnVaSE1nWVc1a0lHTm9ZVzVuWlNCMGFHVWdkbTlzZFcxbGN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvOU1Ec2dhanhwWkhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZhRzkzYkhOYmFWMHVYM052ZFc1a1FubEpaQ2hwWkhOYmFsMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQ0FtSmlCemIzVnVaQzVmYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG5admJIVnRaU0E5SUhOdmRXNWtMbDkyYjJ4MWJXVWdLaUIyYjJ3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWXVYM1p2YkhWdFpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElHMTFkR2x1WnlCaGJtUWdkVzV0ZFhScGJtY2daMnh2WW1Gc2JIa3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdRbTl2YkdWaGJuMGdiWFYwWldRZ1NYTWdiWFYwWldRZ2IzSWdibTkwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRzExZEdVNklHWjFibU4wYVc5dUtHMTFkR1ZrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dVhHNGdJQ0FnSUNBdkx5QkpaaUIzWlNCa2IyNG5kQ0JvWVhabElHRnVJRUYxWkdsdlEyOXVkR1Y0ZENCamNtVmhkR1ZrSUhsbGRDd2djblZ1SUhSb1pTQnpaWFIxY0M1Y2JpQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1amRIZ3BJSHRjYmlBZ0lDQWdJQ0FnYzJWMGRYQkJkV1JwYjBOdmJuUmxlSFFvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2MyVnNaaTVmYlhWMFpXUWdQU0J0ZFhSbFpEdGNibHh1SUNBZ0lDQWdMeThnVjJsMGFDQlhaV0lnUVhWa2FXOHNJSGRsSUdwMWMzUWdibVZsWkNCMGJ5QnRkWFJsSUhSb1pTQnRZWE4wWlhJZ1oyRnBiaTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MblZ6YVc1blYyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1dFlYTjBaWEpIWVdsdUxtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9iWFYwWldRZ1B5QXdJRG9nYzJWc1ppNWZkbTlzZFcxbExDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdURzl2Y0NCMGFISnZkV2RvSUdGdVpDQnRkWFJsSUdGc2JDQklWRTFNTlNCQmRXUnBieUJ1YjJSbGN5NWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4elpXeG1MbDlvYjNkc2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgyaHZkMnh6VzJsZExsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFZGxkQ0JoYkd3Z2IyWWdkR2hsSUhOdmRXNWtjeUJwYmlCMGFHbHpJRWh2ZDJ3Z1ozSnZkWEF1WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJodmQyeHpXMmxkTGw5blpYUlRiM1Z1WkVsa2N5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdURzl2Y0NCMGFISnZkV2RvSUdGc2JDQnpiM1Z1WkhNZ1lXNWtJRzFoY21zZ2RHaGxJR0YxWkdsdklHNXZaR1VnWVhNZ2JYVjBaV1F1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FqMHdPeUJxUEdsa2N5NXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZhRzkzYkhOYmFWMHVYM052ZFc1a1FubEpaQ2hwWkhOYmFsMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUWdKaVlnYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDI1dlpHVXViWFYwWldRZ1BTQW9iWFYwWldRcElEOGdkSEoxWlNBNklITnZkVzVrTGw5dGRYUmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Ykc5aFpDQmhibVFnWkdWemRISnZlU0JoYkd3Z1kzVnljbVZ1ZEd4NUlHeHZZV1JsWkNCSWIzZHNJRzlpYW1WamRITXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWJHOWhaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dVhHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBYTmxiR1l1WDJodmQyeHpMbXhsYm1kMGFDMHhPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmYUc5M2JITmJhVjB1ZFc1c2IyRmtLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJCZFdScGIwTnZiblJsZUhRZ2RHOGdiV0ZyWlNCemRYSmxJR2wwSUdseklHWjFiR3g1SUhKbGMyVjBMbHh1SUNBZ0lDQWdhV1lnS0hObGJHWXVkWE5wYm1kWFpXSkJkV1JwYnlBbUppQnpaV3htTG1OMGVDQW1KaUIwZVhCbGIyWWdjMlZzWmk1amRIZ3VZMnh2YzJVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNExtTnNiM05sS0NrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2MyVjBkWEJCZFdScGIwTnZiblJsZUhRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOb1pXTnJJR1p2Y2lCamIyUmxZeUJ6ZFhCd2IzSjBJRzltSUhOd1pXTnBabWxqSUdWNGRHVnVjMmx2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUdWNGRDQkJkV1JwYnlCbWFXeGxJR1Y0ZEdWdWRHbHZiaTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZaR1ZqY3pvZ1puVnVZM1JwYjI0b1pYaDBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNZ2ZId2dTRzkzYkdWeUtTNWZZMjlrWldOelcyVjRkQzV5WlhCc1lXTmxLQzllZUMwdkxDQW5KeWxkTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUjFjQ0IyWVhKcGIzVnpJSE4wWVhSbElIWmhiSFZsY3lCbWIzSWdaMnh2WW1Gc0lIUnlZV05yYVc1bkxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMnhsY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYzJWMGRYQTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpJSHg4SUVodmQyeGxjanRjYmx4dUlDQWdJQ0FnTHk4Z1MyVmxjSE1nZEhKaFkyc2diMllnZEdobElITjFjM0JsYm1RdmNtVnpkVzFsSUhOMFlYUmxJRzltSUhSb1pTQkJkV1JwYjBOdmJuUmxlSFF1WEc0Z0lDQWdJQ0J6Wld4bUxuTjBZWFJsSUQwZ2MyVnNaaTVqZEhnZ1B5QnpaV3htTG1OMGVDNXpkR0YwWlNCOGZDQW5jblZ1Ym1sdVp5Y2dPaUFuY25WdWJtbHVaeWM3WEc1Y2JpQWdJQ0FnSUM4dklFRjFkRzl0WVhScFkyRnNiSGtnWW1WbmFXNGdkR2hsSURNd0xYTmxZMjl1WkNCemRYTndaVzVrSUhCeWIyTmxjM05jYmlBZ0lDQWdJSE5sYkdZdVgyRjFkRzlUZFhOd1pXNWtLQ2s3WEc1Y2JpQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlHRjFaR2x2SUdseklHRjJZV2xzWVdKc1pTNWNiaUFnSUNBZ0lHbG1JQ2doYzJWc1ppNTFjMmx1WjFkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRTV2SUdGMVpHbHZJR2x6SUdGMllXbHNZV0pzWlNCdmJpQjBhR2x6SUhONWMzUmxiU0JwWmlCdWIwRjFaR2x2SUdseklITmxkQ0IwYnlCMGNuVmxMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUVGMVpHbHZJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR1Z6ZENBOUlHNWxkeUJCZFdScGJ5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QnBaaUIwYUdVZ1kyRnVjR3hoZVhSb2NtOTFaMmdnWlhabGJuUWdhWE1nWVhaaGFXeGhZbXhsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwWlhOMExtOXVZMkZ1Y0d4aGVYUm9jbTkxWjJnZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5oYmxCc1lYbEZkbVZ1ZENBOUlDZGpZVzV3YkdGNUp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZHVnpkQ0IwYnlCdFlXdGxJSE4xY21VZ1lYVmthVzhnYVhOdUozUWdaR2x6WVdKc1pXUWdhVzRnU1c1MFpYSnVaWFFnUlhod2JHOXlaWEl1WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEdWemRDQTlJRzVsZHlCQmRXUnBieWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR1Z6ZEM1dGRYUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0OVhHNWNiaUFnSUNBZ0lDOHZJRU5vWldOcklHWnZjaUJ6ZFhCd2IzSjBaV1FnWTI5a1pXTnpMbHh1SUNBZ0lDQWdhV1lnS0NGelpXeG1MbTV2UVhWa2FXOHBJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZjMlYwZFhCRGIyUmxZM01vS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5vWldOcklHWnZjaUJpY205M2MyVnlJSE4xY0hCdmNuUWdabTl5SUhaaGNtbHZkWE1nWTI5a1pXTnpJR0Z1WkNCallXTm9aU0IwYUdVZ2NtVnpkV3gwY3k1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM05sZEhWd1EyOWtaV056T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3lCOGZDQkliM2RzWlhJN1hHNGdJQ0FnSUNCMllYSWdZWFZrYVc5VVpYTjBJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnVFhWemRDQjNjbUZ3SUdsdUlHRWdkSEo1TDJOaGRHTm9JR0psWTJGMWMyVWdTVVV4TVNCcGJpQnpaWEoyWlhJZ2JXOWtaU0IwYUhKdmQzTWdZVzRnWlhKeWIzSXVYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCaGRXUnBiMVJsYzNRZ1BTQW9kSGx3Wlc5bUlFRjFaR2x2SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnUHlCdVpYY2dRWFZrYVc4b0tTQTZJRzUxYkd3N1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2doWVhWa2FXOVVaWE4wSUh4OElIUjVjR1Z2WmlCaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhaaGNpQnRjR1ZuVkdWemRDQTlJR0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2YlhCbFp6c25LUzV5WlhCc1lXTmxLQzllYm04a0x5d2dKeWNwTzF4dVhHNGdJQ0FnSUNBdkx5QlBjR1Z5WVNCMlpYSnphVzl1SUR3ek15Qm9ZWE1nYldsNFpXUWdUVkF6SUhOMWNIQnZjblFzSUhOdklIZGxJRzVsWldRZ2RHOGdZMmhsWTJzZ1ptOXlJR0Z1WkNCaWJHOWpheUJwZEM1Y2JpQWdJQ0FnSUhaaGNpQmphR1ZqYTA5d1pYSmhJRDBnYzJWc1ppNWZibUYyYVdkaGRHOXlJQ1ltSUhObGJHWXVYMjVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1YldGMFkyZ29MMDlRVWx4Y0x5aGJNQzAyWFM0cEwyY3BPMXh1SUNBZ0lDQWdkbUZ5SUdselQyeGtUM0JsY21FZ1BTQW9ZMmhsWTJ0UGNHVnlZU0FtSmlCd1lYSnpaVWx1ZENoamFHVmphMDl3WlhKaFd6QmRMbk53YkdsMEtDY3ZKeWxiTVYwc0lERXdLU0E4SURNektUdGNibHh1SUNBZ0lDQWdjMlZzWmk1ZlkyOWtaV056SUQwZ2UxeHVJQ0FnSUNBZ0lDQnRjRE02SUNFaEtDRnBjMDlzWkU5d1pYSmhJQ1ltSUNodGNHVm5WR1Z6ZENCOGZDQmhkV1JwYjFSbGMzUXVZMkZ1VUd4aGVWUjVjR1VvSjJGMVpHbHZMMjF3TXpzbktTNXlaWEJzWVdObEtDOWVibThrTHl3Z0p5Y3BLU2tzWEc0Z0lDQWdJQ0FnSUcxd1pXYzZJQ0VoYlhCbFoxUmxjM1FzWEc0Z0lDQWdJQ0FnSUc5d2RYTTZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dloyYzdJR052WkdWamN6MWNJbTl3ZFhOY0lpY3BMbkpsY0d4aFkyVW9MMTV1YnlRdkxDQW5KeWtzWEc0Z0lDQWdJQ0FnSUc5blp6b2dJU0ZoZFdScGIxUmxjM1F1WTJGdVVHeGhlVlI1Y0dVb0oyRjFaR2x2TDI5blp6c2dZMjlrWldOelBWd2lkbTl5WW1selhDSW5LUzV5WlhCc1lXTmxLQzllYm04a0x5d2dKeWNwTEZ4dUlDQWdJQ0FnSUNCdloyRTZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dloyYzdJR052WkdWamN6MWNJblp2Y21KcGMxd2lKeWt1Y21Wd2JHRmpaU2d2WG01dkpDOHNJQ2NuS1N4Y2JpQWdJQ0FnSUNBZ2QyRjJPaUFoSVdGMVpHbHZWR1Z6ZEM1allXNVFiR0Y1Vkhsd1pTZ25ZWFZrYVc4dmQyRjJPeUJqYjJSbFkzTTlYQ0l4WENJbktTNXlaWEJzWVdObEtDOWVibThrTHl3Z0p5Y3BMRnh1SUNBZ0lDQWdJQ0JoWVdNNklDRWhZWFZrYVc5VVpYTjBMbU5oYmxCc1lYbFVlWEJsS0NkaGRXUnBieTloWVdNN0p5a3VjbVZ3YkdGalpTZ3ZYbTV2SkM4c0lDY25LU3hjYmlBZ0lDQWdJQ0FnWTJGbU9pQWhJV0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2ZUMxallXWTdKeWt1Y21Wd2JHRmpaU2d2WG01dkpDOHNJQ2NuS1N4Y2JpQWdJQ0FnSUNBZ2JUUmhPaUFoSVNoaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwzZ3RiVFJoT3ljcElIeDhJR0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2YlRSaE95Y3BJSHg4SUdGMVpHbHZWR1Z6ZEM1allXNVFiR0Y1Vkhsd1pTZ25ZWFZrYVc4dllXRmpPeWNwS1M1eVpYQnNZV05sS0M5ZWJtOGtMeXdnSnljcExGeHVJQ0FnSUNBZ0lDQnRjRFE2SUNFaEtHRjFaR2x2VkdWemRDNWpZVzVRYkdGNVZIbHdaU2duWVhWa2FXOHZlQzF0Y0RRN0p5a2dmSHdnWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dGNEUTdKeWtnZkh3Z1lYVmthVzlVWlhOMExtTmhibEJzWVhsVWVYQmxLQ2RoZFdScGJ5OWhZV003SnlrcExuSmxjR3hoWTJVb0wxNXVieVF2TENBbkp5a3NYRzRnSUNBZ0lDQWdJSGRsWW1FNklDRWhZWFZrYVc5VVpYTjBMbU5oYmxCc1lYbFVlWEJsS0NkaGRXUnBieTkzWldKdE95QmpiMlJsWTNNOVhDSjJiM0ppYVhOY0lpY3BMbkpsY0d4aFkyVW9MMTV1YnlRdkxDQW5KeWtzWEc0Z0lDQWdJQ0FnSUhkbFltMDZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5M1pXSnRPeUJqYjJSbFkzTTlYQ0oyYjNKaWFYTmNJaWNwTG5KbGNHeGhZMlVvTDE1dWJ5UXZMQ0FuSnlrc1hHNGdJQ0FnSUNBZ0lHUnZiR0o1T2lBaElXRjFaR2x2VkdWemRDNWpZVzVRYkdGNVZIbHdaU2duWVhWa2FXOHZiWEEwT3lCamIyUmxZM005WENKbFl5MHpYQ0luS1M1eVpYQnNZV05sS0M5ZWJtOGtMeXdnSnljcExGeHVJQ0FnSUNBZ0lDQm1iR0ZqT2lBaElTaGhkV1JwYjFSbGMzUXVZMkZ1VUd4aGVWUjVjR1VvSjJGMVpHbHZMM2d0Wm14aFl6c25LU0I4ZkNCaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwyWnNZV003SnlrcExuSmxjR3hoWTJVb0wxNXVieVF2TENBbkp5bGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTmIySnBiR1VnWW5KdmQzTmxjbk1nZDJsc2JDQnZibXg1SUdGc2JHOTNJR0YxWkdsdklIUnZJR0psSUhCc1lYbGxaQ0JoWm5SbGNpQmhJSFZ6WlhJZ2FXNTBaWEpoWTNScGIyNHVYRzRnSUNBZ0lDb2dRWFIwWlcxd2RDQjBieUJoZFhSdmJXRjBhV05oYkd4NUlIVnViRzlqYXlCaGRXUnBieUJ2YmlCMGFHVWdabWx5YzNRZ2RYTmxjaUJwYm5SbGNtRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCRGIyNWpaWEIwSUdaeWIyMDZJR2gwZEhBNkx5OXdZWFZzWW1GcllYVnpMbU52YlM5MGRYUnZjbWxoYkhNdmFIUnRiRFV2ZDJWaUxXRjFaR2x2TFc5dUxXbHZjeTljYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc1pYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyVnVZV0pzWlUxdlltbHNaVUYxWkdsdk9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN5QjhmQ0JJYjNkc1pYSTdYRzVjYmlBZ0lDQWdJQzh2SUU5dWJIa2djblZ1SUhSb2FYTWdiMjRnYlc5aWFXeGxJR1JsZG1salpYTWdhV1lnWVhWa2FXOGdhWE51SjNRZ1lXeHlaV0ZrZVNCbFlXNWliR1ZrTGx4dUlDQWdJQ0FnZG1GeUlHbHpUVzlpYVd4bElEMGdMMmxRYUc5dVpYeHBVR0ZrZkdsUWIyUjhRVzVrY205cFpIeENiR0ZqYTBKbGNuSjVmRUpDTVRCOFUybHNhM3hOYjJKcEwya3VkR1Z6ZENoelpXeG1MbDl1WVhacFoyRjBiM0lnSmlZZ2MyVnNaaTVmYm1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZENrN1hHNGdJQ0FnSUNCMllYSWdhWE5VYjNWamFDQTlJQ0VoS0NnbmIyNTBiM1ZqYUdWdVpDY2dhVzRnZDJsdVpHOTNLU0I4ZkNBb2MyVnNaaTVmYm1GMmFXZGhkRzl5SUNZbUlITmxiR1l1WDI1aGRtbG5ZWFJ2Y2k1dFlYaFViM1ZqYUZCdmFXNTBjeUErSURBcElIeDhJQ2h6Wld4bUxsOXVZWFpwWjJGMGIzSWdKaVlnYzJWc1ppNWZibUYyYVdkaGRHOXlMbTF6VFdGNFZHOTFZMmhRYjJsdWRITWdQaUF3S1NrN1hHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmJXOWlhV3hsUlc1aFlteGxaQ0I4ZkNBaGMyVnNaaTVqZEhnZ2ZId2dLQ0ZwYzAxdlltbHNaU0FtSmlBaGFYTlViM1ZqYUNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnpaV3htTGw5dGIySnBiR1ZGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQzh2SUZOdmJXVWdiVzlpYVd4bElHUmxkbWxqWlhNdmNHeGhkR1p2Y20xeklHaGhkbVVnWkdsemRHOXlkR2x2YmlCcGMzTjFaWE1nZDJobGJpQnZjR1Z1YVc1bkwyTnNiM05wYm1jZ2RHRmljeUJoYm1RdmIzSWdkMlZpSUhacFpYZHpMbHh1SUNBZ0lDQWdMeThnUW5WbmN5QnBiaUIwYUdVZ1luSnZkM05sY2lBb1pYTndaV05wWVd4c2VTQk5iMkpwYkdVZ1UyRm1ZWEpwS1NCallXNGdZMkYxYzJVZ2RHaGxJSE5oYlhCc1pWSmhkR1VnZEc4Z1kyaGhibWRsSUdaeWIyMGdORFF4TURBZ2RHOGdORGd3TURBdVhHNGdJQ0FnSUNBdkx5QkNlU0JqWVd4c2FXNW5JRWh2ZDJ4bGNpNTFibXh2WVdRb0tTd2dkMlVnWTNKbFlYUmxJR0VnYm1WM0lFRjFaR2x2UTI5dWRHVjRkQ0IzYVhSb0lIUm9aU0JqYjNKeVpXTjBJSE5oYlhCc1pWSmhkR1V1WEc0Z0lDQWdJQ0JwWmlBb0lYTmxiR1l1WDIxdlltbHNaVlZ1Ykc5aFpHVmtJQ1ltSUhObGJHWXVZM1I0TG5OaGJYQnNaVkpoZEdVZ0lUMDlJRFEwTVRBd0tTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyMXZZbWxzWlZWdWJHOWhaR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNTFibXh2WVdRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVTJOeVlYUmphQ0JpZFdabVpYSWdabTl5SUdWdVlXSnNhVzVuSUdsUFV5QjBieUJrYVhOd2IzTmxJRzltSUhkbFlpQmhkV1JwYnlCaWRXWm1aWEp6SUdOdmNuSmxZM1JzZVN3Z1lYTWdjR1Z5T2x4dUlDQWdJQ0FnTHk4Z2FIUjBjRG92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4eU5ERXhPVFk0TkZ4dUlDQWdJQ0FnYzJWc1ppNWZjMk55WVhSamFFSjFabVpsY2lBOUlITmxiR1l1WTNSNExtTnlaV0YwWlVKMVptWmxjaWd4TENBeExDQXlNakExTUNrN1hHNWNiaUFnSUNBZ0lDOHZJRU5oYkd3Z2RHaHBjeUJ0WlhSb2IyUWdiMjRnZEc5MVkyZ2djM1JoY25RZ2RHOGdZM0psWVhSbElHRnVaQ0J3YkdGNUlHRWdZblZtWm1WeUxGeHVJQ0FnSUNBZ0x5OGdkR2hsYmlCamFHVmpheUJwWmlCMGFHVWdZWFZrYVc4Z1lXTjBkV0ZzYkhrZ2NHeGhlV1ZrSUhSdklHUmxkR1Z5YldsdVpTQnBabHh1SUNBZ0lDQWdMeThnWVhWa2FXOGdhR0Z6SUc1dmR5QmlaV1Z1SUhWdWJHOWphMlZrSUc5dUlHbFBVeXdnUVc1a2NtOXBaQ3dnWlhSakxseHVJQ0FnSUNBZ2RtRnlJSFZ1Ykc5amF5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkdhWGdnUVc1a2NtOXBaQ0JqWVc0Z2JtOTBJSEJzWVhrZ2FXNGdjM1Z6Y0dWdVpDQnpkR0YwWlM1Y2JpQWdJQ0FnSUNBZ1NHOTNiR1Z5TGw5aGRYUnZVbVZ6ZFcxbEtDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdGdUlHVnRjSFI1SUdKMVptWmxjaTVjYmlBZ0lDQWdJQ0FnZG1GeUlITnZkWEpqWlNBOUlITmxiR1l1WTNSNExtTnlaV0YwWlVKMVptWmxjbE52ZFhKalpTZ3BPMXh1SUNBZ0lDQWdJQ0J6YjNWeVkyVXVZblZtWm1WeUlEMGdjMlZzWmk1ZmMyTnlZWFJqYUVKMVptWmxjanRjYmlBZ0lDQWdJQ0FnYzI5MWNtTmxMbU52Ym01bFkzUW9jMlZzWmk1amRIZ3VaR1Z6ZEdsdVlYUnBiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRkJzWVhrZ2RHaGxJR1Z0Y0hSNUlHSjFabVpsY2k1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpiM1Z5WTJVdWMzUmhjblFnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTG01dmRHVlBiaWd3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJVdWMzUmhjblFvTUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCRFlXeHNhVzVuSUhKbGMzVnRaU2dwSUc5dUlHRWdjM1JoWTJzZ2FXNXBkR2xoZEdWa0lHSjVJSFZ6WlhJZ1oyVnpkSFZ5WlNCcGN5QjNhR0YwSUdGamRIVmhiR3g1SUhWdWJHOWphM01nZEdobElHRjFaR2x2SUc5dUlFRnVaSEp2YVdRZ1EyaHliMjFsSUQ0OUlEVTFMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGJHWXVZM1I0TG5KbGMzVnRaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVZM1I0TG5KbGMzVnRaU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVTJWMGRYQWdZU0IwYVcxbGIzVjBJSFJ2SUdOb1pXTnJJSFJvWVhRZ2QyVWdZWEpsSUhWdWJHOWphMlZrSUc5dUlIUm9aU0J1WlhoMElHVjJaVzUwSUd4dmIzQXVYRzRnSUNBZ0lDQWdJSE52ZFhKalpTNXZibVZ1WkdWa0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTG1ScGMyTnZibTVsWTNRb01DazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSFZ1Ykc5amEyVmtJSE4wWVhSbElHRnVaQ0J3Y21WMlpXNTBJSFJvYVhNZ1kyaGxZMnNnWm5KdmJTQm9ZWEJ3Wlc1cGJtY2dZV2RoYVc0dVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJXOWlhV3hsUlc1aFlteGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNXRiMkpwYkdWQmRYUnZSVzVoWW14bElEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCU1pXMXZkbVVnZEdobElIUnZkV05vSUhOMFlYSjBJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYzNSaGNuUW5MQ0IxYm14dlkyc3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9aVzVrSnl3Z2RXNXNiMk5yTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDOHZJRk5sZEhWd0lHRWdkRzkxWTJnZ2MzUmhjblFnYkdsemRHVnVaWElnZEc4Z1lYUjBaVzF3ZENCaGJpQjFibXh2WTJzZ2FXNHVYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUhOMFlYSjBKeXdnZFc1c2IyTnJMQ0IwY25WbEtUdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2dkVzVzYjJOckxDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUYxZEc5dFlYUnBZMkZzYkhrZ2MzVnpjR1Z1WkNCMGFHVWdWMlZpSUVGMVpHbHZJRUYxWkdsdlEyOXVkR1Y0ZENCaFpuUmxjaUJ1YnlCemIzVnVaQ0JvWVhNZ2NHeGhlV1ZrSUdadmNpQXpNQ0J6WldOdmJtUnpMbHh1SUNBZ0lDQXFJRlJvYVhNZ2MyRjJaWE1nY0hKdlkyVnpjMmx1Wnk5bGJtVnlaM2tnWVc1a0lHWnBlR1Z6SUhaaGNtbHZkWE1nWW5KdmQzTmxjaTF6Y0dWamFXWnBZeUJpZFdkeklIZHBkR2dnWVhWa2FXOGdaMlYwZEdsdVp5QnpkSFZqYXk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMkYxZEc5VGRYTndaVzVrT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0Z6Wld4bUxtRjFkRzlUZFhOd1pXNWtJSHg4SUNGelpXeG1MbU4wZUNCOGZDQjBlWEJsYjJZZ2MyVnNaaTVqZEhndWMzVnpjR1Z1WkNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnZkh3Z0lVaHZkMnhsY2k1MWMybHVaMWRsWWtGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ1lXNTVJSE52ZFc1a2N5QmhjbVVnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHpaV3htTGw5b2IzZHNjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZhRzkzYkhOYmFWMHVYM2RsWWtGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FqMHdPeUJxUEhObGJHWXVYMmh2ZDJ4elcybGRMbDl6YjNWdVpITXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaaTVmYUc5M2JITmJhVjB1WDNOdmRXNWtjMXRxWFM1ZmNHRjFjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtTQjdYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJKWmlCdWJ5QnpiM1Z1WkNCb1lYTWdjR3hoZVdWa0lHRm1kR1Z5SURNd0lITmxZMjl1WkhNc0lITjFjM0JsYm1RZ2RHaGxJR052Ym5SbGVIUXVYRzRnSUNBZ0lDQnpaV3htTGw5emRYTndaVzVrVkdsdFpYSWdQU0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhObGJHWXVZWFYwYjFOMWMzQmxibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXpkWE53Wlc1a1ZHbHRaWElnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxuTjBZWFJsSUQwZ0ozTjFjM0JsYm1ScGJtY25PMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtTjBlQzV6ZFhOd1pXNWtLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1Mbk4wWVhSbElEMGdKM04xYzNCbGJtUmxaQ2M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZjbVZ6ZFcxbFFXWjBaWEpUZFhOd1pXNWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2MyVnNaaTVmY21WemRXMWxRV1owWlhKVGRYTndaVzVrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZllYVjBiMUpsYzNWdFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlMQ0F6TURBd01DazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmRYUnZiV0YwYVdOaGJHeDVJSEpsYzNWdFpTQjBhR1VnVjJWaUlFRjFaR2x2SUVGMVpHbHZRMjl1ZEdWNGRDQjNhR1Z1SUdFZ2JtVjNJSE52ZFc1a0lHbHpJSEJzWVhsbFpDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEliM2RzWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJGMWRHOVNaWE4xYldVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVZM1I0SUh4OElIUjVjR1Z2WmlCelpXeG1MbU4wZUM1eVpYTjFiV1VnUFQwOUlDZDFibVJsWm1sdVpXUW5JSHg4SUNGSWIzZHNaWEl1ZFhOcGJtZFhaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1Mbk4wWVhSbElEMDlQU0FuY25WdWJtbHVaeWNnSmlZZ2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtTQjdYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTGw5emRYTndaVzVrVkdsdFpYSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpaV3htTG5OMFlYUmxJRDA5UFNBbmMzVnpjR1Z1WkdWa0p5a2dlMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtTjBlQzV5WlhOMWJXVW9LUzUwYUdWdUtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVjM1JoZEdVZ1BTQW5jblZ1Ym1sdVp5YzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZiV2wwSUhSdklHRnNiQ0JJYjNkc2N5QjBhR0YwSUhSb1pTQmhkV1JwYnlCb1lYTWdjbVZ6ZFcxbFpDNWNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwUFRBN0lHazhjMlZzWmk1ZmFHOTNiSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMmh2ZDJ4elcybGRMbDlsYldsMEtDZHlaWE4xYldVbktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtUdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxsOXpkWE53Wlc1a1ZHbHRaWElnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGJHWXVjM1JoZEdVZ1BUMDlJQ2R6ZFhOd1pXNWthVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eVpYTjFiV1ZCWm5SbGNsTjFjM0JsYm1RZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeThnVTJWMGRYQWdkR2hsSUdkc2IySmhiQ0JoZFdScGJ5QmpiMjUwY205c2JHVnlMbHh1SUNCMllYSWdTRzkzYkdWeUlEMGdibVYzSUVodmQyeGxja2RzYjJKaGJDZ3BPMXh1WEc0Z0lDOHFLaUJIY205MWNDQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNGdZWFZrYVc4Z1ozSnZkWEFnWTI5dWRISnZiR3hsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzhnVUdGemMyVmtJR2x1SUhCeWIzQmxjblJwWlhNZ1ptOXlJSFJvYVhNZ1ozSnZkWEF1WEc0Z0lDQXFMMXh1SUNCMllYSWdTRzkzYkNBOUlHWjFibU4wYVc5dUtHOHBJSHRjYmlBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBdkx5QlVhSEp2ZHlCaGJpQmxjbkp2Y2lCcFppQnVieUJ6YjNWeVkyVWdhWE1nY0hKdmRtbGtaV1F1WEc0Z0lDQWdhV1lnS0NGdkxuTnlZeUI4ZkNCdkxuTnlZeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjBGdUlHRnljbUY1SUc5bUlITnZkWEpqWlNCbWFXeGxjeUJ0ZFhOMElHSmxJSEJoYzNObFpDQjNhWFJvSUdGdWVTQnVaWGNnU0c5M2JDNG5LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCelpXeG1MbWx1YVhRb2J5azdYRzRnSUgwN1hHNGdJRWh2ZDJ3dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVVnWVNCdVpYY2dTRzkzYkNCbmNtOTFjQ0J2WW1wbFkzUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUMkpxWldOMGZTQnZJRkJoYzNObFpDQnBiaUJ3Y205d1pYSjBhV1Z6SUdadmNpQjBhR2x6SUdkeWIzVndMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGREb2dablZ1WTNScGIyNG9ieWtnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0F2THlCSlppQjNaU0JrYjI0bmRDQm9ZWFpsSUdGdUlFRjFaR2x2UTI5dWRHVjRkQ0JqY21WaGRHVmtJSGxsZEN3Z2NuVnVJSFJvWlNCelpYUjFjQzVjYmlBZ0lDQWdJR2xtSUNnaFNHOTNiR1Z5TG1OMGVDa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSMWNFRjFaR2x2UTI5dWRHVjRkQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlRaWFIxY0NCMWMyVnlMV1JsWm1sdVpXUWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZllYVjBiM0JzWVhrZ1BTQnZMbUYxZEc5d2JHRjVJSHg4SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZlptOXliV0YwSUQwZ0tIUjVjR1Z2WmlCdkxtWnZjbTFoZENBaFBUMGdKM04wY21sdVp5Y3BJRDhnYnk1bWIzSnRZWFFnT2lCYmJ5NW1iM0p0WVhSZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmYUhSdGJEVWdQU0J2TG1oMGJXdzFJSHg4SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZmJYVjBaV1FnUFNCdkxtMTFkR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0J6Wld4bUxsOXNiMjl3SUQwZ2J5NXNiMjl3SUh4OElHWmhiSE5sTzF4dUlDQWdJQ0FnYzJWc1ppNWZjRzl2YkNBOUlHOHVjRzl2YkNCOGZDQTFPMXh1SUNBZ0lDQWdjMlZzWmk1ZmNISmxiRzloWkNBOUlDaDBlWEJsYjJZZ2J5NXdjbVZzYjJGa0lEMDlQU0FuWW05dmJHVmhiaWNwSUQ4Z2J5NXdjbVZzYjJGa0lEb2dkSEoxWlR0Y2JpQWdJQ0FnSUhObGJHWXVYM0poZEdVZ1BTQnZMbkpoZEdVZ2ZId2dNVHRjYmlBZ0lDQWdJSE5sYkdZdVgzTndjbWwwWlNBOUlHOHVjM0J5YVhSbElIeDhJSHQ5TzF4dUlDQWdJQ0FnYzJWc1ppNWZjM0pqSUQwZ0tIUjVjR1Z2WmlCdkxuTnlZeUFoUFQwZ0ozTjBjbWx1WnljcElEOGdieTV6Y21NZ09pQmJieTV6Y21OZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmZG05c2RXMWxJRDBnYnk1MmIyeDFiV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQS9JRzh1ZG05c2RXMWxJRG9nTVR0Y2JpQWdJQ0FnSUhObGJHWXVYM2hvY2xkcGRHaERjbVZrWlc1MGFXRnNjeUE5SUc4dWVHaHlWMmwwYUVOeVpXUmxiblJwWVd4eklIeDhJR1poYkhObE8xeHVYRzRnSUNBZ0lDQXZMeUJUWlhSMWNDQmhiR3dnYjNSb1pYSWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZlpIVnlZWFJwYjI0Z1BTQXdPMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzUmhkR1VnUFNBbmRXNXNiMkZrWldRbk8xeHVJQ0FnSUNBZ2MyVnNaaTVmYzI5MWJtUnpJRDBnVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDlsYm1SVWFXMWxjbk1nUFNCN2ZUdGNiaUFnSUNBZ0lITmxiR1l1WDNGMVpYVmxJRDBnVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl3YkdGNVRHOWpheUE5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0F2THlCVFpYUjFjQ0JsZG1WdWRDQnNhWE4wWlc1bGNuTXVYRzRnSUNBZ0lDQnpaV3htTGw5dmJtVnVaQ0E5SUc4dWIyNWxibVFnUHlCYmUyWnVPaUJ2TG05dVpXNWtmVjBnT2lCYlhUdGNiaUFnSUNBZ0lITmxiR1l1WDI5dVptRmtaU0E5SUc4dWIyNW1ZV1JsSUQ4Z1czdG1iam9nYnk1dmJtWmhaR1Y5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXNiMkZrSUQwZ2J5NXZibXh2WVdRZ1B5QmJlMlp1T2lCdkxtOXViRzloWkgxZElEb2dXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZibXh2WVdSbGNuSnZjaUE5SUc4dWIyNXNiMkZrWlhKeWIzSWdQeUJiZTJadU9pQnZMbTl1Ykc5aFpHVnljbTl5ZlYwZ09pQmJYVHRjYmlBZ0lDQWdJSE5sYkdZdVgyOXVjR3hoZVdWeWNtOXlJRDBnYnk1dmJuQnNZWGxsY25KdmNpQS9JRnQ3Wm00NklHOHViMjV3YkdGNVpYSnliM0o5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXdZWFZ6WlNBOUlHOHViMjV3WVhWelpTQS9JRnQ3Wm00NklHOHViMjV3WVhWelpYMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5Cc1lYa2dQU0J2TG05dWNHeGhlU0EvSUZ0N1ptNDZJRzh1YjI1d2JHRjVmVjBnT2lCYlhUdGNiaUFnSUNBZ0lITmxiR1l1WDI5dWMzUnZjQ0E5SUc4dWIyNXpkRzl3SUQ4Z1czdG1iam9nYnk1dmJuTjBiM0I5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXRkWFJsSUQwZ2J5NXZibTExZEdVZ1B5QmJlMlp1T2lCdkxtOXViWFYwWlgxZElEb2dXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZiblp2YkhWdFpTQTlJRzh1YjI1MmIyeDFiV1VnUHlCYmUyWnVPaUJ2TG05dWRtOXNkVzFsZlYwZ09pQmJYVHRjYmlBZ0lDQWdJSE5sYkdZdVgyOXVjbUYwWlNBOUlHOHViMjV5WVhSbElEOGdXM3RtYmpvZ2J5NXZibkpoZEdWOVhTQTZJRnRkTzF4dUlDQWdJQ0FnYzJWc1ppNWZiMjV6WldWcklEMGdieTV2Ym5ObFpXc2dQeUJiZTJadU9pQnZMbTl1YzJWbGEzMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5KbGMzVnRaU0E5SUZ0ZE8xeHVYRzRnSUNBZ0lDQXZMeUJYWldJZ1FYVmthVzhnYjNJZ1NGUk5URFVnUVhWa2FXOC9YRzRnSUNBZ0lDQnpaV3htTGw5M1pXSkJkV1JwYnlBOUlFaHZkMnhsY2k1MWMybHVaMWRsWWtGMVpHbHZJQ1ltSUNGelpXeG1MbDlvZEcxc05UdGNibHh1SUNBZ0lDQWdMeThnUVhWMGIyMWhkR2xqWVd4c2VTQjBjbmtnZEc4Z1pXNWhZbXhsSUdGMVpHbHZJRzl1SUdsUFV5NWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdTRzkzYkdWeUxtTjBlQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnU0c5M2JHVnlMbU4wZUNBbUppQkliM2RzWlhJdWJXOWlhV3hsUVhWMGIwVnVZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQkliM2RzWlhJdVgyVnVZV0pzWlUxdlltbHNaVUYxWkdsdktDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUV0bFpYQWdkSEpoWTJzZ2IyWWdkR2hwY3lCSWIzZHNJR2R5YjNWd0lHbHVJSFJvWlNCbmJHOWlZV3dnWTI5dWRISnZiR3hsY2k1Y2JpQWdJQ0FnSUVodmQyeGxjaTVmYUc5M2JITXVjSFZ6YUNoelpXeG1LVHRjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsZVNCelpXeGxZM1JsWkNCaGRYUnZjR3hoZVN3Z1lXUmtJR0VnY0d4aGVTQmxkbVZ1ZENCMGJ5QjBhR1VnYkc5aFpDQnhkV1YxWlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5aGRYUnZjR3hoZVNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWREb2dKM0JzWVhrbkxGeHVJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3htTG5Cc1lYa29LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCTWIyRmtJSFJvWlNCemIzVnlZMlVnWm1sc1pTQjFibXhsYzNNZ2IzUm9aWEozYVhObElITndaV05wWm1sbFpDNWNiaUFnSUNBZ0lHbG1JQ2h6Wld4bUxsOXdjbVZzYjJGa0tTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdWJHOWhaQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dURzloWkNCMGFHVWdZWFZrYVc4Z1ptbHNaUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc1pYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ2RYSnNJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2JtOGdZWFZrYVc4Z2FYTWdZWFpoYVd4aFlteGxMQ0J4ZFdsMElHbHRiV1ZrYVdGMFpXeDVMbHh1SUNBZ0lDQWdhV1lnS0VodmQyeGxjaTV1YjBGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyeHZZV1JsY25KdmNpY3NJRzUxYkd3c0lDZE9ieUJoZFdScGJ5QnpkWEJ3YjNKMExpY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCdmRYSWdjMjkxY21ObElHbHpJR2x1SUdGdUlHRnljbUY1TGx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXeG1MbDl6Y21NZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM055WXlBOUlGdHpaV3htTGw5emNtTmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCTWIyOXdJSFJvY205MVoyZ2dkR2hsSUhOdmRYSmpaWE1nWVc1a0lIQnBZMnNnZEdobElHWnBjbk4wSUc5dVpTQjBhR0YwSUdseklHTnZiWEJoZEdsaWJHVXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQVEE3SUdrOGMyVnNaaTVmYzNKakxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxlSFFzSUhOMGNqdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmWm05eWJXRjBJQ1ltSUhObGJHWXVYMlp2Y20xaGRGdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWxtSUdGdUlHVjRkR1Z1YzJsdmJpQjNZWE1nYzNCbFkybG1hV1ZrTENCMWMyVWdkR2hoZENCcGJuTjBaV0ZrTGx4dUlDQWdJQ0FnSUNBZ0lHVjRkQ0E5SUhObGJHWXVYMlp2Y20xaGRGdHBYVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUhOdmRYSmpaU0JwY3lCaElITjBjbWx1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQnpkSElnUFNCelpXeG1MbDl6Y21OYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRISWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxiV2wwS0Nkc2IyRmtaWEp5YjNJbkxDQnVkV3hzTENBblRtOXVMWE4wY21sdVp5Qm1iM1Z1WkNCcGJpQnpaV3hsWTNSbFpDQmhkV1JwYnlCemIzVnlZMlZ6SUMwZ2FXZHViM0pwYm1jdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZlSFJ5WVdOMElIUm9aU0JtYVd4bElHVjRkR1Z1YzJsdmJpQm1jbTl0SUhSb1pTQlZVa3dnYjNJZ1ltRnpaVFkwSUdSaGRHRWdWVkpKTGx4dUlDQWdJQ0FnSUNBZ0lHVjRkQ0E5SUM5ZVpHRjBZVHBoZFdScGIxeGNMeWhiWGpzc1hTc3BPeTlwTG1WNFpXTW9jM1J5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaDBJRDBnTDF4Y0xpaGJYaTVkS3lra0x5NWxlR1ZqS0hOMGNpNXpjR3hwZENnblB5Y3NJREVwV3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVIUWdQU0JsZUhSYk1WMHVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5Qk1iMmNnWVNCM1lYSnVhVzVuSUdsbUlHNXZJR1Y0ZEdWdWMybHZiaUIzWVhNZ1ptOTFibVF1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWGgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkT2J5Qm1hV3hsSUdWNGRHVnVjMmx2YmlCM1lYTWdabTkxYm1RdUlFTnZibk5wWkdWeUlIVnphVzVuSUhSb1pTQmNJbVp2Y20xaGRGd2lJSEJ5YjNCbGNuUjVJRzl5SUhOd1pXTnBabmtnWVc0Z1pYaDBaVzV6YVc5dUxpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2FXWWdkR2hwY3lCbGVIUmxibk5wYjI0Z2FYTWdZWFpoYVd4aFlteGxMbHh1SUNBZ0lDQWdJQ0JwWmlBb1pYaDBJQ1ltSUVodmQyeGxjaTVqYjJSbFkzTW9aWGgwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFZ5YkNBOUlITmxiR1l1WDNOeVkxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9JWFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2RzYjJGa1pYSnliM0luTENCdWRXeHNMQ0FuVG04Z1kyOWtaV01nYzNWd2NHOXlkQ0JtYjNJZ2MyVnNaV04wWldRZ1lYVmthVzhnYzI5MWNtTmxjeTRuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCelpXeG1MbDl6Y21NZ1BTQjFjbXc3WEc0Z0lDQWdJQ0J6Wld4bUxsOXpkR0YwWlNBOUlDZHNiMkZrYVc1bkp6dGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJR2h2YzNScGJtY2djR0ZuWlNCcGN5QklWRlJRVXlCaGJtUWdkR2hsSUhOdmRYSmpaU0JwYzI0bmRDeGNiaUFnSUNBZ0lDOHZJR1J5YjNBZ1pHOTNiaUIwYnlCSVZFMU1OU0JCZFdScGJ5QjBieUJoZG05cFpDQk5hWGhsWkNCRGIyNTBaVzUwSUdWeWNtOXljeTVjYmlBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1Ykc5allYUnBiMjR1Y0hKdmRHOWpiMndnUFQwOUlDZG9kSFJ3Y3pvbklDWW1JSFZ5YkM1emJHbGpaU2d3TENBMUtTQTlQVDBnSjJoMGRIQTZKeWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbDlvZEcxc05TQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDNkbFlrRjFaR2x2SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJ6YjNWdVpDQnZZbXBsWTNRZ1lXNWtJR0ZrWkNCcGRDQjBieUIwYUdVZ2NHOXZiQzVjYmlBZ0lDQWdJRzVsZHlCVGIzVnVaQ2h6Wld4bUtUdGNibHh1SUNBZ0lDQWdMeThnVEc5aFpDQmhibVFnWkdWamIyUmxJSFJvWlNCaGRXUnBieUJrWVhSaElHWnZjaUJ3YkdGNVltRmpheTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnSUNCc2IyRmtRblZtWm1WeUtITmxiR1lwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR3hoZVNCaElITnZkVzVrSUc5eUlISmxjM1Z0WlNCd2NtVjJhVzkxY3lCd2JHRjVZbUZqYXk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnSUh0VGRISnBibWN2VG5WdFltVnlmU0J6Y0hKcGRHVWdJQ0JUY0hKcGRHVWdibUZ0WlNCbWIzSWdjM0J5YVhSbElIQnNZWGxpWVdOcklHOXlJSE52ZFc1a0lHbGtJSFJ2SUdOdmJuUnBiblZsSUhCeVpYWnBiM1Z6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTBKdmIyeGxZVzU5SUdsdWRHVnlibUZzSUVsdWRHVnlibUZzSUZWelpUb2dkSEoxWlNCd2NtVjJaVzUwY3lCbGRtVnVkQ0JtYVhKcGJtY3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZTQWdJQ0FnSUNBZ0lDQlRiM1Z1WkNCSlJDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2JHRjVPaUJtZFc1amRHbHZiaWh6Y0hKcGRHVXNJR2x1ZEdWeWJtRnNLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnYVdRZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBdkx5QkVaWFJsY20xcGJtVWdhV1lnWVNCemNISnBkR1VzSUhOdmRXNWtJR2xrSUc5eUlHNXZkR2hwYm1jZ2QyRnpJSEJoYzNObFpGeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpjSEpwZEdVZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjM0J5YVhSbE8xeHVJQ0FnSUNBZ0lDQnpjSEpwZEdVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzNCeWFYUmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQnpaV3htTGw5emRHRjBaU0E5UFQwZ0oyeHZZV1JsWkNjZ0ppWWdJWE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQndZWE56WldRZ2MzQnlhWFJsSUdSdlpYTnVKM1FnWlhocGMzUXNJR1J2SUc1dmRHaHBibWN1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2MzQnlhWFJsSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QlZjMlVnZEdobElHUmxabUYxYkhRZ2MyOTFibVFnYzNCeWFYUmxJQ2h3YkdGNWN5QjBhR1VnWm5Wc2JDQmhkV1JwYnlCc1pXNW5kR2dwTGx4dUlDQWdJQ0FnSUNCemNISnBkR1VnUFNBblgxOWtaV1poZFd4MEp6dGNibHh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCMGFHVnlaU0JwY3lCaElITnBibWRzWlNCd1lYVnpaV1FnYzI5MWJtUWdkR2hoZENCcGMyNG5kQ0JsYm1SbFpDNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxjbVVnYVhNc0lIQnNZWGtnZEdoaGRDQnpiM1Z1WkM0Z1NXWWdibTkwTENCamIyNTBhVzUxWlNCaGN5QjFjM1ZoYkM1Y2JpQWdJQ0FnSUNBZ2RtRnlJRzUxYlNBOUlEQTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHpaV3htTGw5emIzVnVaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmYzI5MWJtUnpXMmxkTGw5d1lYVnpaV1FnSmlZZ0lYTmxiR1l1WDNOdmRXNWtjMXRwWFM1ZlpXNWtaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzUxYlNzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRZ1BTQnpaV3htTGw5emIzVnVaSE5iYVYwdVgybGtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNodWRXMGdQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Y0hKcGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xrSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QkhaWFFnZEdobElITmxiR1ZqZEdWa0lHNXZaR1VzSUc5eUlHZGxkQ0J2Ym1VZ1puSnZiU0IwYUdVZ2NHOXZiQzVjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUdsa0lEOGdjMlZzWmk1ZmMyOTFibVJDZVVsa0tHbGtLU0E2SUhObGJHWXVYMmx1WVdOMGFYWmxVMjkxYm1Rb0tUdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHUnZaWE51SjNRZ1pYaHBjM1FzSUdSdklHNXZkR2hwYm1jdVhHNGdJQ0FnSUNCcFppQW9JWE52ZFc1a0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlRaV3hsWTNRZ2RHaGxJSE53Y21sMFpTQmtaV1pwYm1sMGFXOXVMbHh1SUNBZ0lDQWdhV1lnS0dsa0lDWW1JQ0Z6Y0hKcGRHVXBJSHRjYmlBZ0lDQWdJQ0FnYzNCeWFYUmxJRDBnYzI5MWJtUXVYM053Y21sMFpTQjhmQ0FuWDE5a1pXWmhkV3gwSnp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdTV1lnZEdobElITnZkVzVrSUdoaGMyNG5kQ0JzYjJGa1pXUXNJSGRsSUcxMWMzUWdkMkZwZENCMGJ5Qm5aWFFnZEdobElHRjFaR2x2SjNNZ1pIVnlZWFJwYjI0dVhHNGdJQ0FnSUNBdkx5QlhaU0JoYkhOdklHNWxaV1FnZEc4Z2QyRnBkQ0IwYnlCdFlXdGxJSE4xY21VZ2QyVWdaRzl1SjNRZ2NuVnVJR2x1ZEc4Z2NtRmpaU0JqYjI1a2FYUnBiMjV6SUhkcGRHaGNiaUFnSUNBZ0lDOHZJSFJvWlNCdmNtUmxjaUJ2WmlCbWRXNWpkR2x2YmlCallXeHNjeTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQnpjSEpwZEdVZ2RtRnNkV1VnYjI0Z2RHaHBjeUJ6YjNWdVpDNWNiaUFnSUNBZ0lDQWdjMjkxYm1RdVgzTndjbWwwWlNBOUlITndjbWwwWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJOWVd0eUlIUm9hWE1nYzI5MWJtUmxaQ0JoY3lCdWIzUWdaVzVrWldRZ2FXNGdZMkZ6WlNCaGJtOTBhR1Z5SUhOdmRXNWtJR2x6SUhCc1lYbGxaQ0JpWldadmNtVWdkR2hwY3lCdmJtVWdiRzloWkhNdVhHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5bGJtUmxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0IwYUdVZ2MyOTFibVFnZEc4Z2RHaGxJSEYxWlhWbElIUnZJR0psSUhCc1lYbGxaQ0J2YmlCc2IyRmtMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MyOTFibVJKWkNBOUlITnZkVzVrTGw5cFpEdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmNYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R3YkdGNUp5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d2JHRjVLSE52ZFc1a1NXUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE52ZFc1a1NXUTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVSdmJpZDBJSEJzWVhrZ2RHaGxJSE52ZFc1a0lHbG1JR0Z1SUdsa0lIZGhjeUJ3WVhOelpXUWdZVzVrSUdsMElHbHpJR0ZzY21WaFpIa2djR3hoZVdsdVp5NWNiaUFnSUNBZ0lHbG1JQ2hwWkNBbUppQWhjMjkxYm1RdVgzQmhkWE5sWkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVY21sbloyVnlJSFJvWlNCd2JHRjVJR1YyWlc1MExDQnBiaUJ2Y21SbGNpQjBieUJyWldWd0lHbDBaWEpoZEdsdVp5QjBhSEp2ZFdkb0lIRjFaWFZsTGx4dUlDQWdJQ0FnSUNCcFppQW9JV2x1ZEdWeWJtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmYkc5aFpGRjFaWFZsS0Nkd2JHRjVKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDJsa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElFRjFaR2x2UTI5dWRHVjRkQ0JwYzI0bmRDQnpkWE53Wlc1a1pXUXNJR0Z1WkNCeVpYTjFiV1VnYVhRZ2FXWWdhWFFnYVhNdVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdTRzkzYkdWeUxsOWhkWFJ2VW1WemRXMWxLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQm9iM2NnYkc5dVp5QjBieUJ3YkdGNUlHWnZjaUJoYm1RZ2QyaGxjbVVnZEc4Z2MzUmhjblFnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJSFpoY2lCelpXVnJJRDBnVFdGMGFDNXRZWGdvTUN3Z2MyOTFibVF1WDNObFpXc2dQaUF3SUQ4Z2MyOTFibVF1WDNObFpXc2dPaUJ6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXZJREV3TURBcE8xeHVJQ0FnSUNBZ2RtRnlJR1IxY21GMGFXOXVJRDBnVFdGMGFDNXRZWGdvTUN3Z0tDaHpaV3htTGw5emNISnBkR1ZiYzNCeWFYUmxYVnN3WFNBcklITmxiR1l1WDNOd2NtbDBaVnR6Y0hKcGRHVmRXekZkS1NBdklERXdNREFwSUMwZ2MyVmxheWs3WEc0Z0lDQWdJQ0IyWVhJZ2RHbHRaVzkxZENBOUlDaGtkWEpoZEdsdmJpQXFJREV3TURBcElDOGdUV0YwYUM1aFluTW9jMjkxYm1RdVgzSmhkR1VwTzF4dVhHNGdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSEJoY21GdFpYUmxjbk1nYjJZZ2RHaGxJSE52ZFc1a1hHNGdJQ0FnSUNCemIzVnVaQzVmY0dGMWMyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZlpXNWtaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSE52ZFc1a0xsOXpjSEpwZEdVZ1BTQnpjSEpwZEdVN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzJWbGF5QTlJSE5sWldzN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzNSaGNuUWdQU0J6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXZJREV3TURBN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzNSdmNDQTlJQ2h6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXJJSE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkV3pGZEtTQXZJREV3TURBN1hHNGdJQ0FnSUNCemIzVnVaQzVmYkc5dmNDQTlJQ0VoS0hOdmRXNWtMbDlzYjI5d0lIeDhJSE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkV3pKZEtUdGNibHh1SUNBZ0lDQWdMeThnUW1WbmFXNGdkR2hsSUdGamRIVmhiQ0J3YkdGNVltRmpheTVjYmlBZ0lDQWdJSFpoY2lCdWIyUmxJRDBnYzI5MWJtUXVYMjV2WkdVN1hHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdMeThnUm1seVpTQjBhR2x6SUhkb1pXNGdkR2hsSUhOdmRXNWtJR2x6SUhKbFlXUjVJSFJ2SUhCc1lYa2dkRzhnWW1WbmFXNGdWMlZpSUVGMVpHbHZJSEJzWVhsaVlXTnJMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHeGhlVmRsWWtGMVpHbHZJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmNtVm1jbVZ6YUVKMVptWmxjaWh6YjNWdVpDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRaWFIxY0NCMGFHVWdjR3hoZVdKaFkyc2djR0Z5WVcxekxseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCMmIyd2dQU0FvYzI5MWJtUXVYMjExZEdWa0lIeDhJSE5sYkdZdVgyMTFkR1ZrS1NBL0lEQWdPaUJ6YjNWdVpDNWZkbTlzZFcxbE8xeHVJQ0FnSUNBZ0lDQWdJRzV2WkdVdVoyRnBiaTV6WlhSV1lXeDFaVUYwVkdsdFpTaDJiMndzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YkdGNVUzUmhjblFnUFNCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVR3hoZVNCMGFHVWdjMjkxYm1RZ2RYTnBibWNnZEdobElITjFjSEJ2Y25SbFpDQnRaWFJvYjJRdVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ1YjJSbExtSjFabVpsY2xOdmRYSmpaUzV6ZEdGeWRDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDlzYjI5d0lEOGdibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVibTkwWlVkeVlXbHVUMjRvTUN3Z2MyVmxheXdnT0RZME1EQXBJRG9nYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ym05MFpVZHlZV2x1VDI0b01Dd2djMlZsYXl3Z1pIVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYkc5dmNDQS9JRzV2WkdVdVluVm1abVZ5VTI5MWNtTmxMbk4wWVhKMEtEQXNJSE5sWldzc0lEZzJOREF3S1NBNklHNXZaR1V1WW5WbVptVnlVMjkxY21ObExuTjBZWEowS0RBc0lITmxaV3NzSUdSMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRkR0Z5ZENCaElHNWxkeUIwYVcxbGNpQnBaaUJ1YjI1bElHbHpJSEJ5WlhObGJuUXVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1Z2ZFhRZ0lUMDlJRWx1Wm1sdWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJtUlVhVzFsY25OYmMyOTFibVF1WDJsa1hTQTlJSE5sZEZScGJXVnZkWFFvYzJWc1ppNWZaVzVrWldRdVltbHVaQ2h6Wld4bUxDQnpiM1Z1WkNrc0lIUnBiV1Z2ZFhRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYVc1MFpYSnVZV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoSWIzZHNaWEl1YzNSaGRHVWdQVDA5SUNkeWRXNXVhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEJzWVhsWFpXSkJkV1JwYnlncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWIyNWpaU2duY21WemRXMWxKeXdnY0d4aGVWZGxZa0YxWkdsdktUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFTmhibU5sYkNCMGFHVWdaVzVrSUhScGJXVnlMbHh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGeVZHbHRaWElvYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx5WlNCMGFHbHpJSGRvWlc0Z2RHaGxJSE52ZFc1a0lHbHpJSEpsWVdSNUlIUnZJSEJzWVhrZ2RHOGdZbVZuYVc0Z1NGUk5URFVnUVhWa2FXOGdjR3hoZVdKaFkyc3VYRzRnSUNBZ0lDQWdJSFpoY2lCd2JHRjVTSFJ0YkRVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCdWIyUmxMbU4xY25KbGJuUlVhVzFsSUQwZ2MyVmxhenRjYmlBZ0lDQWdJQ0FnSUNCdWIyUmxMbTExZEdWa0lEMGdjMjkxYm1RdVgyMTFkR1ZrSUh4OElITmxiR1l1WDIxMWRHVmtJSHg4SUVodmQyeGxjaTVmYlhWMFpXUWdmSHdnYm05a1pTNXRkWFJsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnViMlJsTG5admJIVnRaU0E5SUhOdmRXNWtMbDkyYjJ4MWJXVWdLaUJJYjNkc1pYSXVkbTlzZFcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnYm05a1pTNXdiR0Y1WW1GamExSmhkR1VnUFNCemIzVnVaQzVmY21GMFpUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFMXZZbWxzWlNCaWNtOTNjMlZ5Y3lCM2FXeHNJSFJvY205M0lHRnVJR1Z5Y205eUlHbG1JSFJvYVhNZ2FYTWdZMkZzYkdWa0lIZHBkR2h2ZFhRZ2RYTmxjaUJwYm5SbGNtRmpkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCc1lYa2dQU0J1YjJSbExuQnNZWGtvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UzVndjRzl5ZENCdmJHUmxjaUJpY205M2MyVnljeUIwYUdGMElHUnZiaWQwSUhOMWNIQnZjblFnY0hKdmJXbHpaWE1zSUdGdVpDQjBhSFZ6SUdSdmJpZDBJR2hoZG1VZ2RHaHBjeUJwYzNOMVpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1VISnZiV2x6WlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2NHeGhlU0JwYm5OMFlXNWpaVzltSUZCeWIyMXBjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXMXdiR1Z0Wlc1MGN5QmhJR3h2WTJzZ2RHOGdjSEpsZG1WdWRDQkVUMDFGZUdObGNIUnBiMjQ2SUZSb1pTQndiR0Y1S0NrZ2NtVnhkV1Z6ZENCM1lYTWdhVzUwWlhKeWRYQjBaV1FnWW5rZ1lTQmpZV3hzSUhSdklIQmhkWE5sS0NrdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0JzWVhsTWIyTnJJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWld4bFlYTmxjeUIwYUdVZ2JHOWpheUJoYm1RZ1pYaGxZM1YwWlhNZ2NYVmxkV1ZrSUdGamRHbHZibk11WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWRXNU1iMkZrVVhWbGRXVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDl3YkdGNVRHOWpheUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFXNTBaWEp1WVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjNCc1lYa25MQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0d4aGVTNTBhR1Z1S0hKMWJreHZZV1JSZFdWMVpTd2djblZ1VEc5aFpGRjFaWFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvSVdsdWRHVnlibUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjBhVzVuSUhKaGRHVWdZbVZtYjNKbElIQnNZWGxwYm1jZ2QyOXVKM1FnZDI5eWF5QnBiaUJKUlN3Z2MyOGdkMlVnYzJWMElHbDBJR0ZuWVdsdUlHaGxjbVV1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5Cc1lYbGlZV05yVW1GMFpTQTlJSE52ZFc1a0xsOXlZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnYm05a1pTQnBjeUJ6ZEdsc2JDQndZWFZ6WldRc0lIUm9aVzRnZDJVZ1kyRnVJR0Z6YzNWdFpTQjBhR1Z5WlNCM1lYTWdZU0J3YkdGNVltRmpheUJwYzNOMVpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHViMlJsTG5CaGRYTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxiV2wwS0Nkd2JHRjVaWEp5YjNJbkxDQnpiM1Z1WkM1ZmFXUXNJQ2RRYkdGNVltRmpheUIzWVhNZ2RXNWhZbXhsSUhSdklITjBZWEowTGlCVWFHbHpJR2x6SUcxdmMzUWdZMjl0Ylc5dWJIa2dZVzRnYVhOemRXVWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjI5dUlHMXZZbWxzWlNCa1pYWnBZMlZ6SUhkb1pYSmxJSEJzWVhsaVlXTnJJSGRoY3lCdWIzUWdkMmwwYUdsdUlHRWdkWE5sY2lCcGJuUmxjbUZqZEdsdmJpNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjFjQ0IwYUdVZ1pXNWtJSFJwYldWeUlHOXVJSE53Y21sMFpYTWdiM0lnYkdsemRHVnVJR1p2Y2lCMGFHVWdaVzVrWldRZ1pYWmxiblF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNCeWFYUmxJQ0U5UFNBblgxOWtaV1poZFd4MEp5QjhmQ0J6YjNWdVpDNWZiRzl2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDlsYm1SVWFXMWxjbk5iYzI5MWJtUXVYMmxrWFNBOUlITmxkRlJwYldWdmRYUW9jMlZzWmk1ZlpXNWtaV1F1WW1sdVpDaHpaV3htTENCemIzVnVaQ2tzSUhScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTVmWlc1a1ZHbHRaWEp6VzNOdmRXNWtMbDlwWkYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCR2FYSmxJR1Z1WkdWa0lHOXVJSFJvYVhNZ1lYVmthVzhnYm05a1pTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJtUmxaQ2h6YjNWdVpDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdseklHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblpXNWtaV1FuTENCelpXeG1MbDlsYm1SVWFXMWxjbk5iYzI5MWJtUXVYMmxrWFN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyVnVaR1ZrSnl3Z2MyVnNaaTVmWlc1a1ZHbHRaWEp6VzNOdmRXNWtMbDlwWkYwc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM0JzWVhsbGNuSnZjaWNzSUhOdmRXNWtMbDlwWkN3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VHeGhlU0JwYlcxbFpHbGhkR1ZzZVNCcFppQnlaV0ZrZVN3Z2IzSWdkMkZwZENCbWIzSWdkR2hsSUNkallXNXdiR0Y1ZEdoeWIzVm5hQ2RsSUhabGJuUXVYRzRnSUNBZ0lDQWdJSFpoY2lCc2IyRmtaV1JPYjFKbFlXUjVVM1JoZEdVZ1BTQW9kMmx1Wkc5M0lDWW1JSGRwYm1SdmR5NWxhbVZqZEdFcElIeDhJQ2doYm05a1pTNXlaV0ZrZVZOMFlYUmxJQ1ltSUVodmQyeGxjaTVmYm1GMmFXZGhkRzl5TG1selEyOWpiMjl1U2xNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTNXlaV0ZrZVZOMFlYUmxJRDQ5SURNZ2ZId2diRzloWkdWa1RtOVNaV0ZrZVZOMFlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NHeGhlVWgwYld3MUtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHeHBjM1JsYm1WeUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJDWldkcGJpQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lYbElkRzFzTlNncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRiR1ZoY2lCMGFHbHpJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0VodmQyeGxjaTVmWTJGdVVHeGhlVVYyWlc1MExDQnNhWE4wWlc1bGNpd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRWh2ZDJ4bGNpNWZZMkZ1VUd4aGVVVjJaVzUwTENCc2FYTjBaVzVsY2l3Z1ptRnNjMlVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnUTJGdVkyVnNJSFJvWlNCbGJtUWdkR2x0WlhJdVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZlkyeGxZWEpVYVcxbGNpaHpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6YjNWdVpDNWZhV1E3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCaGRYTmxJSEJzWVhsaVlXTnJJR0Z1WkNCellYWmxJR04xY25KbGJuUWdjRzl6YVhScGIyNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQnBaQ0JVYUdVZ2MyOTFibVFnU1VRZ0tHVnRjSFI1SUhSdklIQmhkWE5sSUdGc2JDQnBiaUJuY205MWNDa3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVhWelpUb2dablZ1WTNScGIyNG9hV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhOdmRXNWtJR2hoYzI0bmRDQnNiMkZrWldRZ2IzSWdZU0J3YkdGNUtDa2djSEp2YldselpTQnBjeUJ3Wlc1a2FXNW5MQ0JoWkdRZ2FYUWdkRzhnZEdobElHeHZZV1FnY1hWbGRXVWdkRzhnY0dGMWMyVWdkMmhsYmlCallYQmhZbXhsTGx4dUlDQWdJQ0FnYVdZZ0tITmxiR1l1WDNOMFlYUmxJQ0U5UFNBbmJHOWhaR1ZrSnlCOGZDQnpaV3htTGw5d2JHRjVURzlqYXlrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWREb2dKM0JoZFhObEp5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d1lYVnpaU2hwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdibThnYVdRZ2FYTWdjR0Z6YzJWa0xDQm5aWFFnWVd4c0lFbEVKM01nZEc4Z1ltVWdjR0YxYzJWa0xseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmx4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdVZ1pXNWtJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhjbFJwYldWeUtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkVzVrSUNZbUlDRnpiM1Z1WkM1ZmNHRjFjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVW1WelpYUWdkR2hsSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM05sWldzZ1BTQnpaV3htTG5ObFpXc29hV1J6VzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVM1J2Y0NCamRYSnlaVzUwYkhrZ2NuVnVibWx1WnlCbVlXUmxjeTVjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDl6ZEc5d1JtRmtaU2hwWkhOYmFWMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE52ZFc1a0xsOXViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmZDJWaVFYVmthVzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0J6YjNWdVpDQm9ZWE1nWW1WbGJpQmpjbVZoZEdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjM1J2Y0NBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ym05MFpVOW1aaWd3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjM1J2Y0Nnd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5zWldGdUlIVndJSFJvWlNCaWRXWm1aWElnYzI5MWNtTmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhia0oxWm1abGNpaHpiM1Z1WkM1ZmJtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZwYzA1aFRpaHpiM1Z1WkM1ZmJtOWtaUzVrZFhKaGRHbHZiaWtnZkh3Z2MyOTFibVF1WDI1dlpHVXVaSFZ5WVhScGIyNGdQVDA5SUVsdVptbHVhWFI1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExuQmhkWE5sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtbHlaU0IwYUdVZ2NHRjFjMlVnWlhabGJuUXNJSFZ1YkdWemN5QmdkSEoxWldBZ2FYTWdjR0Z6YzJWa0lHRnpJSFJvWlNBeWJtUWdZWEpuZFcxbGJuUXVYRzRnSUNBZ0lDQWdJR2xtSUNnaFlYSm5kVzFsYm5Seld6RmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmWlcxcGRDZ25jR0YxYzJVbkxDQnpiM1Z1WkNBL0lITnZkVzVrTGw5cFpDQTZJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVGRHOXdJSEJzWVhsaVlXTnJJR0Z1WkNCeVpYTmxkQ0IwYnlCemRHRnlkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUZSb1pTQnpiM1Z1WkNCSlJDQW9aVzF3ZEhrZ2RHOGdjM1J2Y0NCaGJHd2dhVzRnWjNKdmRYQXBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMEp2YjJ4bFlXNTlJR2x1ZEdWeWJtRnNJRWx1ZEdWeWJtRnNJRlZ6WlRvZ2RISjFaU0J3Y21WMlpXNTBjeUJsZG1WdWRDQm1hWEpwYm1jdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NHOTNiSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkRzl3T2lCbWRXNWpkR2x2YmlocFpDd2dhVzUwWlhKdVlXd3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHaGhjMjRuZENCc2IyRmtaV1FzSUdGa1pDQnBkQ0IwYnlCMGFHVWdiRzloWkNCeGRXVjFaU0IwYnlCemRHOXdJSGRvWlc0Z1kyRndZV0pzWlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5emRHRjBaU0FoUFQwZ0oyeHZZV1JsWkNjcElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmNYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R6ZEc5d0p5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1emRHOXdLR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCSlppQnVieUJwWkNCcGN5QndZWE56WldRc0lHZGxkQ0JoYkd3Z1NVUW5jeUIwYnlCaVpTQnpkRzl3Y0dWa0xseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmx4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdVZ1pXNWtJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhjbFJwYldWeUtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkVzVrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVW1WelpYUWdkR2hsSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM05sWldzZ1BTQnpiM1Z1WkM1ZmMzUmhjblFnZkh3Z01EdGNiaUFnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDlsYm1SbFpDQTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCVGRHOXdJR04xY25KbGJuUnNlU0J5ZFc1dWFXNW5JR1poWkdWekxseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTjBiM0JHWVdSbEtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyOTFibVF1WDI1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElITnZkVzVrSjNNZ1FYVmthVzlDZFdabVpYSlRiM1Z5WTJWT2IyUmxJR2hoY3lCaVpXVnVJR055WldGMFpXUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaUzV6ZEc5d0lEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WW5WbVptVnlVMjkxY21ObExtNXZkR1ZQWm1Zb01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTNXpkRzl3S0RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOc1pXRnVJSFZ3SUhSb1pTQmlkV1ptWlhJZ2MyOTFjbU5sTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGdVFuVm1abVZ5S0hOdmRXNWtMbDl1YjJSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaGFYTk9ZVTRvYzI5MWJtUXVYMjV2WkdVdVpIVnlZWFJwYjI0cElIeDhJSE52ZFc1a0xsOXViMlJsTG1SMWNtRjBhVzl1SUQwOVBTQkpibVpwYm1sMGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVqZFhKeVpXNTBWR2x0WlNBOUlITnZkVzVrTGw5emRHRnlkQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNXdZWFZ6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhVzUwWlhKdVlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM04wYjNBbkxDQnpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVFhWMFpTOTFibTExZEdVZ1lTQnphVzVuYkdVZ2MyOTFibVFnYjNJZ1lXeHNJSE52ZFc1a2N5QnBiaUIwYUdseklFaHZkMndnWjNKdmRYQXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdRbTl2YkdWaGJuMGdiWFYwWldRZ1UyVjBJSFJ2SUhSeWRXVWdkRzhnYlhWMFpTQmhibVFnWm1Gc2MyVWdkRzhnZFc1dGRYUmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdhV1FnSUNBZ1ZHaGxJSE52ZFc1a0lFbEVJSFJ2SUhWd1pHRjBaU0FvYjIxcGRDQjBieUJ0ZFhSbEwzVnViWFYwWlNCaGJHd3BMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYlhWMFpUb2dablZ1WTNScGIyNG9iWFYwWldRc0lHbGtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQzh2SUVsbUlIUm9aU0J6YjNWdVpDQm9ZWE51SjNRZ2JHOWhaR1ZrTENCaFpHUWdhWFFnZEc4Z2RHaGxJR3h2WVdRZ2NYVmxkV1VnZEc4Z2JYVjBaU0IzYUdWdUlHTmhjR0ZpYkdVdVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmMzUmhkR1VnSVQwOUlDZHNiMkZrWldRbktTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgzRjFaWFZsTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUdWMlpXNTBPaUFuYlhWMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdWJYVjBaU2h0ZFhSbFpDd2dhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHRndjR3g1YVc1bklHMTFkR1V2ZFc1dGRYUmxJSFJ2SUdGc2JDQnpiM1Z1WkhNc0lIVndaR0YwWlNCMGFHVWdaM0p2ZFhBbmN5QjJZV3gxWlM1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYlhWMFpXUWdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyMTFkR1ZrSUQwZ2JYVjBaV1E3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWXVYMjExZEdWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHNXZJR2xrSUdseklIQmhjM05sWkN3Z1oyVjBJR0ZzYkNCSlJDZHpJSFJ2SUdKbElHMTFkR1ZrTGx4dUlDQWdJQ0FnZG1GeUlHbGtjeUE5SUhObGJHWXVYMmRsZEZOdmRXNWtTV1J6S0dsa0tUdGNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBHbGtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJIWlhRZ2RHaGxJSE52ZFc1a0xseHVJQ0FnSUNBZ0lDQjJZWElnYzI5MWJtUWdQU0J6Wld4bUxsOXpiM1Z1WkVKNVNXUW9hV1J6VzJsZEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MyOTFibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJYVjBaV1FnUFNCdGRYUmxaRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRU5oYm1ObGJDQmhZM1JwZG1VZ1ptRmtaU0JoYm1RZ2MyVjBJSFJvWlNCMmIyeDFiV1VnZEc4Z2RHaGxJR1Z1WkNCMllXeDFaUzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxYm1RdVgybHVkR1Z5ZG1Gc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDl6ZEc5d1JtRmtaU2h6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5M1pXSkJkV1JwYnlBbUppQnpiM1Z1WkM1ZmJtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNodGRYUmxaQ0EvSURBZ09pQnpiM1Z1WkM1ZmRtOXNkVzFsTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITnZkVzVrTGw5dWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzV0ZFhSbFpDQTlJRWh2ZDJ4bGNpNWZiWFYwWldRZ1B5QjBjblZsSURvZ2JYVjBaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmJYVjBaU2NzSUhOdmRXNWtMbDlwWkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRDOXpaWFFnZEdobElIWnZiSFZ0WlNCdlppQjBhR2x6SUhOdmRXNWtJRzl5SUc5bUlIUm9aU0JJYjNkc0lHZHliM1Z3TGlCVWFHbHpJRzFsZEdodlpDQmpZVzRnYjNCMGFXOXVZV3hzZVNCMFlXdGxJREFzSURFZ2IzSWdNaUJoY21kMWJXVnVkSE11WEc0Z0lDQWdJQ29nSUNCMmIyeDFiV1VvS1NBdFBpQlNaWFIxY201eklIUm9aU0JuY205MWNDZHpJSFp2YkhWdFpTQjJZV3gxWlM1Y2JpQWdJQ0FnS2lBZ0lIWnZiSFZ0WlNocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QmpkWEp5Wlc1MElIWnZiSFZ0WlM1Y2JpQWdJQ0FnS2lBZ0lIWnZiSFZ0WlNoMmIyd3BJQzArSUZObGRITWdkR2hsSUhadmJIVnRaU0J2WmlCaGJHd2djMjkxYm1SeklHbHVJSFJvYVhNZ1NHOTNiQ0JuY205MWNDNWNiaUFnSUNBZ0tpQWdJSFp2YkhWdFpTaDJiMndzSUdsa0tTQXRQaUJUWlhSeklIUm9aU0IyYjJ4MWJXVWdiMllnY0dGemMyVmtJSE52ZFc1a0lHbGtMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ3dlRuVnRZbVZ5ZlNCU1pYUjFjbTV6SUhObGJHWWdiM0lnWTNWeWNtVnVkQ0IyYjJ4MWJXVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtOXNkVzFsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUhaaGNpQmhjbWR6SUQwZ1lYSm5kVzFsYm5Sek8xeHVJQ0FnSUNBZ2RtRnlJSFp2YkN3Z2FXUTdYRzVjYmlBZ0lDQWdJQzh2SUVSbGRHVnliV2x1WlNCMGFHVWdkbUZzZFdWeklHSmhjMlZrSUc5dUlHRnlaM1Z0Wlc1MGN5NWNiaUFnSUNBZ0lHbG1JQ2hoY21kekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFIxY200Z2RHaGxJSFpoYkhWbElHOW1JSFJvWlNCbmNtOTFjSE1uSUhadmJIVnRaUzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzWnZiSFZ0WlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYSm5jeTVzWlc1bmRHZ2dQVDA5SURFZ2ZId2dZWEpuY3k1c1pXNW5kR2dnUFQwOUlESWdKaVlnZEhsd1pXOW1JR0Z5WjNOYk1WMGdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQzh2SUVacGNuTjBJR05vWldOcklHbG1JSFJvYVhNZ2FYTWdZVzRnU1VRc0lHRnVaQ0JwWmlCdWIzUXNJR0Z6YzNWdFpTQnBkQ0JwY3lCaElHNWxkeUIyYjJ4MWJXVXVYRzRnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWdwTzF4dUlDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQnBaSE11YVc1a1pYaFBaaWhoY21keld6QmRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVaR1Y0SUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFpDQTlJSEJoY25ObFNXNTBLR0Z5WjNOYk1GMHNJREV3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJiMndnUFNCd1lYSnpaVVpzYjJGMEtHRnlaM05iTUYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR0Z5WjNNdWJHVnVaM1JvSUQ0OUlESXBJSHRjYmlBZ0lDQWdJQ0FnZG05c0lEMGdjR0Z5YzJWR2JHOWhkQ2hoY21keld6QmRLVHRjYmlBZ0lDQWdJQ0FnYVdRZ1BTQndZWEp6WlVsdWRDaGhjbWR6V3pGZExDQXhNQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGVndaR0YwWlNCMGFHVWdkbTlzZFcxbElHOXlJSEpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0IyYjJ4MWJXVXVYRzRnSUNBZ0lDQjJZWElnYzI5MWJtUTdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFp2YkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RtOXNJRDQ5SURBZ0ppWWdkbTlzSUR3OUlERXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhOdmRXNWtJR2hoYzI0bmRDQnNiMkZrWldRc0lHRmtaQ0JwZENCMGJ5QjBhR1VnYkc5aFpDQnhkV1YxWlNCMGJ5QmphR0Z1WjJVZ2RtOXNkVzFsSUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNGMVpYVmxMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2QyYjJ4MWJXVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTUyYjJ4MWJXVXVZWEJ3Ykhrb2MyVnNaaXdnWVhKbmN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCMGFHVWdaM0p2ZFhBZ2RtOXNkVzFsTGx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM1p2YkhWdFpTQTlJSFp2YkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0J2Ym1VZ2IzSWdZV3hzSUhadmJIVnRaWE11WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjMlZzWmk1ZloyVjBVMjkxYm1SSlpITW9hV1FwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBUQTdJR2s4YVdRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnZEdobElITnZkVzVrTGx4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrSUQwZ2MyVnNaaTVmYzI5MWJtUkNlVWxrS0dsa1cybGRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNadmJIVnRaU0E5SUhadmJEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVM1J2Y0NCamRYSnlaVzUwYkhrZ2NuVnVibWx1WnlCbVlXUmxjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWVhKbmMxc3lYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOXpkRzl3Um1Ga1pTaHBaRnRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCemIzVnVaQzVmYm05a1pTQW1KaUFoYzI5MWJtUXVYMjExZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbWRoYVc0dWMyVjBWbUZzZFdWQmRGUnBiV1VvZG05c0xDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzI5MWJtUXVYMjV2WkdVZ0ppWWdJWE52ZFc1a0xsOXRkWFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNTJiMngxYldVZ1BTQjJiMndnS2lCSWIzZHNaWEl1ZG05c2RXMWxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM1p2YkhWdFpTY3NJSE52ZFc1a0xsOXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkNBOUlHbGtJRDhnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrS1NBNklITmxiR1l1WDNOdmRXNWtjMXN3WFR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOdmRXNWtJRDhnYzI5MWJtUXVYM1p2YkhWdFpTQTZJREE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdZV1JsSUdFZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jZ2MyOTFibVFnWW1WMGQyVmxiaUIwZDI4Z2RtOXNkVzFsY3lBb2FXWWdibThnYVdRZ2FYTWdjR0Z6YzNObFpDd2dZV3hzSUhOdmRXNWtjeUIzYVd4c0lHWmhaR1VwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTA1MWJXSmxjbjBnWm5KdmJTQlVhR1VnZG1Gc2RXVWdkRzhnWm1Ga1pTQm1jbTl0SUNnd0xqQWdkRzhnTVM0d0tTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIUnZJQ0FnVkdobElIWnZiSFZ0WlNCMGJ5Qm1ZV1JsSUhSdklDZ3dMakFnZEc4Z01TNHdLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR3hsYmlBZ1ZHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdkRzhnWm1Ga1pTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJQ0FnVkdobElITnZkVzVrSUdsa0lDaHZiV2wwSUhSdklHWmhaR1VnWVd4c0lITnZkVzVrY3lrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NHOTNiSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm1ZV1JsT2lCbWRXNWpkR2x2YmlobWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR1poWkdVZ2QyaGxiaUJqWVhCaFlteGxMbHh1SUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbDl4ZFdWMVpTNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ0oyWmhaR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lHRmpkR2x2YmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbVpoWkdVb1puSnZiU3dnZEc4c0lHeGxiaXdnYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGTmxkQ0IwYUdVZ2RtOXNkVzFsSUhSdklIUm9aU0J6ZEdGeWRDQndiM05wZEdsdmJpNWNiaUFnSUNBZ0lITmxiR1l1ZG05c2RXMWxLR1p5YjIwc0lHbGtLVHRjYmx4dUlDQWdJQ0FnTHk4Z1JtRmtaU0IwYUdVZ2RtOXNkVzFsSUc5bUlHOXVaU0J2Y2lCaGJHd2djMjkxYm1SekxseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHBaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdFZ2JHbHVaV0Z5SUdaaFpHVWdiM0lnWm1Gc2JDQmlZV05ySUhSdklIUnBiV1Z2ZFhSeklIZHBkR2dnU0ZSTlREVWdRWFZrYVc4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGTjBiM0FnZEdobElIQnlaWFpwYjNWeklHWmhaR1VnYVdZZ2JtOGdjM0J5YVhSbElHbHpJR0psYVc1bklIVnpaV1FnS0c5MGFHVnlkMmx6WlN3Z2RtOXNkVzFsSUdoaGJtUnNaWE1nZEdocGN5a3VYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmMzUnZjRVpoWkdVb2FXUnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCaGNtVWdkWE5wYm1jZ1YyVmlJRUYxWkdsdkxDQnNaWFFnZEdobElHNWhkR2wyWlNCdFpYUm9iMlJ6SUdSdklIUm9aU0JoWTNSMVlXd2dabUZrWlM1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZkMlZpUVhWa2FXOGdKaVlnSVhOdmRXNWtMbDl0ZFhSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR04xY25KbGJuUlVhVzFsSUQwZ1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsYm1RZ1BTQmpkWEp5Wlc1MFZHbHRaU0FySUNoc1pXNGdMeUF4TURBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDkyYjJ4MWJXVWdQU0JtY205dE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYMjV2WkdVdVoyRnBiaTV6WlhSV1lXeDFaVUYwVkdsdFpTaG1jbTl0TENCamRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNW5ZV2x1TG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLSFJ2TENCbGJtUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTjBZWEowUm1Ga1pVbHVkR1Z5ZG1Gc0tITnZkVzVrTENCbWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkhOYmFWMHNJSFI1Y0dWdlppQnBaQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRkR0Z5ZEhNZ2RHaGxJR2x1ZEdWeWJtRnNJR2x1ZEdWeWRtRnNJSFJ2SUdaaFpHVWdZU0J6YjNWdVpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlITnZkVzVrSUZKbFptVnlaVzVqWlNCMGJ5QnpiM1Z1WkNCMGJ5Qm1ZV1JsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTA1MWJXSmxjbjBnWm5KdmJTQlVhR1VnZG1Gc2RXVWdkRzhnWm1Ga1pTQm1jbTl0SUNnd0xqQWdkRzhnTVM0d0tTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIUnZJQ0FnVkdobElIWnZiSFZ0WlNCMGJ5Qm1ZV1JsSUhSdklDZ3dMakFnZEc4Z01TNHdLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR3hsYmlBZ1ZHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdkRzhnWm1Ga1pTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJQ0FnVkdobElITnZkVzVrSUdsa0lIUnZJR1poWkdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUNCN1FtOXZiR1ZoYm4wZ2FYTkhjbTkxY0NBZ0lFbG1JSFJ5ZFdVc0lITmxkQ0IwYUdVZ2RtOXNkVzFsSUc5dUlIUm9aU0JuY205MWNDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmMzUmhjblJHWVdSbFNXNTBaWEoyWVd3NklHWjFibU4wYVc5dUtITnZkVzVrTENCbWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkN3Z2FYTkhjbTkxY0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnZG1GeUlIWnZiQ0E5SUdaeWIyMDdYRzRnSUNBZ0lDQjJZWElnWkdsbVppQTlJSFJ2SUMwZ1puSnZiVHRjYmlBZ0lDQWdJSFpoY2lCemRHVndjeUE5SUUxaGRHZ3VZV0p6S0dScFptWWdMeUF3TGpBeEtUdGNiaUFnSUNBZ0lIWmhjaUJ6ZEdWd1RHVnVJRDBnVFdGMGFDNXRZWGdvTkN3Z0tITjBaWEJ6SUQ0Z01Da2dQeUJzWlc0Z0x5QnpkR1Z3Y3lBNklHeGxiaWs3WEc0Z0lDQWdJQ0IyWVhJZ2JHRnpkRlJwWTJzZ1BTQkVZWFJsTG01dmR5Z3BPMXh1WEc0Z0lDQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2RtRnNkV1VnWW1WcGJtY2dabUZrWldRZ2RHOHVYRzRnSUNBZ0lDQnpiM1Z1WkM1ZlptRmtaVlJ2SUQwZ2RHODdYRzVjYmlBZ0lDQWdJQzh2SUZWd1pHRjBaU0IwYUdVZ2RtOXNkVzFsSUhaaGJIVmxJRzl1SUdWaFkyZ2dhVzUwWlhKMllXd2dkR2xqYXk1Y2JpQWdJQ0FnSUhOdmRXNWtMbDlwYm5SbGNuWmhiQ0E5SUhObGRFbHVkR1Z5ZG1Gc0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCVmNHUmhkR1VnZEdobElIWnZiSFZ0WlNCaVlYTmxaQ0J2YmlCMGFHVWdkR2x0WlNCemFXNWpaU0IwYUdVZ2JHRnpkQ0IwYVdOckxseHVJQ0FnSUNBZ0lDQjJZWElnZEdsamF5QTlJQ2hFWVhSbExtNXZkeWdwSUMwZ2JHRnpkRlJwWTJzcElDOGdiR1Z1TzF4dUlDQWdJQ0FnSUNCc1lYTjBWR2xqYXlBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFp2YkNBclBTQmthV1ptSUNvZ2RHbGphenRjYmx4dUlDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUhadmJIVnRaU0JwY3lCcGJpQjBhR1VnY21sbmFIUWdZbTkxYm1SekxseHVJQ0FnSUNBZ0lDQjJiMndnUFNCTllYUm9MbTFoZUNnd0xDQjJiMndwTzF4dUlDQWdJQ0FnSUNCMmIyd2dQU0JOWVhSb0xtMXBiaWd4TENCMmIyd3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGSnZkVzVrSUhSdklIZHBkR2hwYmlBeUlHUmxZMmx0WVd3Z2NHOXBiblJ6TGx4dUlDQWdJQ0FnSUNCMmIyd2dQU0JOWVhSb0xuSnZkVzVrS0hadmJDQXFJREV3TUNrZ0x5QXhNREE3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0IyYjJ4MWJXVXVYRzRnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5MmIyeDFiV1VnUFNCMmIydzdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNTJiMngxYldVb2RtOXNMQ0J6YjNWdVpDNWZhV1FzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQm5jbTkxY0NkeklIWnZiSFZ0WlM1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UjNKdmRYQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDkyYjJ4MWJXVWdQU0IyYjJ3N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCWGFHVnVJSFJvWlNCbVlXUmxJR2x6SUdOdmJYQnNaWFJsTENCemRHOXdJR2wwSUdGdVpDQm1hWEpsSUdWMlpXNTBMbHh1SUNBZ0lDQWdJQ0JwWmlBb0tIUnZJRHdnWm5KdmJTQW1KaUIyYjJ3Z1BEMGdkRzhwSUh4OElDaDBieUErSUdaeWIyMGdKaVlnZG05c0lENDlJSFJ2S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2MyOTFibVF1WDJsdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmFXNTBaWEoyWVd3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5bVlXUmxWRzhnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVkbTlzZFcxbEtIUnZMQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KMlpoWkdVbkxDQnpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TENCemRHVndUR1Z1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNTBaWEp1WVd3Z2JXVjBhRzlrSUhSb1lYUWdjM1J2Y0hNZ2RHaGxJR04xY25KbGJuUnNlU0J3YkdGNWFXNW5JR1poWkdVZ2QyaGxibHh1SUNBZ0lDQXFJR0VnYm1WM0lHWmhaR1VnYzNSaGNuUnpMQ0IyYjJ4MWJXVWdhWE1nWTJoaGJtZGxaQ0J2Y2lCMGFHVWdjMjkxYm1RZ2FYTWdjM1J2Y0hCbFpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJRlJvWlNCemIzVnVaQ0JwWkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXpkRzl3Um1Ga1pUb2dablZ1WTNScGIyNG9hV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2hwWkNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6YjNWdVpDQW1KaUJ6YjNWdVpDNWZhVzUwWlhKMllXd3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WjJGcGJpNWpZVzVqWld4VFkyaGxaSFZzWldSV1lXeDFaWE1vU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamJHVmhja2x1ZEdWeWRtRnNLSE52ZFc1a0xsOXBiblJsY25aaGJDazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXBiblJsY25aaGJDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lITmxiR1l1ZG05c2RXMWxLSE52ZFc1a0xsOW1ZV1JsVkc4c0lHbGtLVHRjYmlBZ0lDQWdJQ0FnYzI5MWJtUXVYMlpoWkdWVWJ5QTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KMlpoWkdVbkxDQnBaQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFF2YzJWMElIUm9aU0JzYjI5d0lIQmhjbUZ0WlhSbGNpQnZiaUJoSUhOdmRXNWtMaUJVYUdseklHMWxkR2h2WkNCallXNGdiM0IwYVc5dVlXeHNlU0IwWVd0bElEQXNJREVnYjNJZ01pQmhjbWQxYldWdWRITXVYRzRnSUNBZ0lDb2dJQ0JzYjI5d0tDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ1ozSnZkWEFuY3lCc2IyOXdJSFpoYkhWbExseHVJQ0FnSUNBcUlDQWdiRzl2Y0NocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QnNiMjl3SUhaaGJIVmxMbHh1SUNBZ0lDQXFJQ0FnYkc5dmNDaHNiMjl3S1NBdFBpQlRaWFJ6SUhSb1pTQnNiMjl3SUhaaGJIVmxJR1p2Y2lCaGJHd2djMjkxYm1SeklHbHVJSFJvYVhNZ1NHOTNiQ0JuY205MWNDNWNiaUFnSUNBZ0tpQWdJR3h2YjNBb2JHOXZjQ3dnYVdRcElDMCtJRk5sZEhNZ2RHaGxJR3h2YjNBZ2RtRnNkV1VnYjJZZ2NHRnpjMlZrSUhOdmRXNWtJR2xrTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyd3ZRbTl2YkdWaGJuMGdVbVYwZFhKdWN5QnpaV3htSUc5eUlHTjFjbkpsYm5RZ2JHOXZjQ0IyWVd4MVpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCc2IyOXdPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnZG1GeUlHeHZiM0FzSUdsa0xDQnpiM1Z1WkR0Y2JseHVJQ0FnSUNBZ0x5OGdSR1YwWlhKdGFXNWxJSFJvWlNCMllXeDFaWE1nWm05eUlHeHZiM0FnWVc1a0lHbGtMbHh1SUNBZ0lDQWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRkpsZEhWeWJpQjBhR1VnWjNKdmRTZHpJR3h2YjNBZ2RtRnNkV1V1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bUxsOXNiMjl3TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaGNtZHpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR0Z5WjNOYk1GMGdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3h2YjNBZ1BTQmhjbWR6V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyeHZiM0FnUFNCc2IyOXdPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGSmxkSFZ5YmlCMGFHbHpJSE52ZFc1a0ozTWdiRzl2Y0NCMllXeDFaUzVjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2h3WVhKelpVbHVkQ2hoY21keld6QmRMQ0F4TUNrcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpiM1Z1WkNBL0lITnZkVzVrTGw5c2IyOXdJRG9nWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVhKbmN5NXNaVzVuZEdnZ1BUMDlJRElwSUh0Y2JpQWdJQ0FnSUNBZ2JHOXZjQ0E5SUdGeVozTmJNRjA3WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjR0Z5YzJWSmJuUW9ZWEpuYzFzeFhTd2dNVEFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QkpaaUJ1YnlCcFpDQnBjeUJ3WVhOelpXUXNJR2RsZENCaGJHd2dTVVFuY3lCMGJ5QmlaU0JzYjI5d1pXUXVYRzRnSUNBZ0lDQjJZWElnYVdSeklEMGdjMlZzWmk1ZloyVjBVMjkxYm1SSlpITW9hV1FwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDQTlJSE5sYkdZdVgzTnZkVzVrUW5sSlpDaHBaSE5iYVYwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5c2IyOXdJRDBnYkc5dmNEdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmZDJWaVFYVmthVzhnSmlZZ2MyOTFibVF1WDI1dlpHVWdKaVlnYzI5MWJtUXVYMjV2WkdVdVluVm1abVZ5VTI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWJHOXZjQ0E5SUd4dmIzQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iRzl2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ykc5dmNGTjBZWEowSUQwZ2MyOTFibVF1WDNOMFlYSjBJSHg4SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaUzVzYjI5d1JXNWtJRDBnYzI5MWJtUXVYM04wYjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUXZjMlYwSUhSb1pTQndiR0Y1WW1GamF5QnlZWFJsSUc5bUlHRWdjMjkxYm1RdUlGUm9hWE1nYldWMGFHOWtJR05oYmlCdmNIUnBiMjVoYkd4NUlIUmhhMlVnTUN3Z01TQnZjaUF5SUdGeVozVnRaVzUwY3k1Y2JpQWdJQ0FnS2lBZ0lISmhkR1VvS1NBdFBpQlNaWFIxY201eklIUm9aU0JtYVhKemRDQnpiM1Z1WkNCdWIyUmxKM01nWTNWeWNtVnVkQ0J3YkdGNVltRmpheUJ5WVhSbExseHVJQ0FnSUNBcUlDQWdjbUYwWlNocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QmpkWEp5Wlc1MElIQnNZWGxpWVdOcklISmhkR1V1WEc0Z0lDQWdJQ29nSUNCeVlYUmxLSEpoZEdVcElDMCtJRk5sZEhNZ2RHaGxJSEJzWVhsaVlXTnJJSEpoZEdVZ2IyWWdZV3hzSUhOdmRXNWtjeUJwYmlCMGFHbHpJRWh2ZDJ3Z1ozSnZkWEF1WEc0Z0lDQWdJQ29nSUNCeVlYUmxLSEpoZEdVc0lHbGtLU0F0UGlCVFpYUnpJSFJvWlNCd2JHRjVZbUZqYXlCeVlYUmxJRzltSUhCaGMzTmxaQ0J6YjNWdVpDQnBaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc0wwNTFiV0psY24wZ1VtVjBkWEp1Y3lCelpXeG1JRzl5SUhSb1pTQmpkWEp5Wlc1MElIQnNZWGxpWVdOcklISmhkR1V1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjbUYwWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdZWEpuY3lBOUlHRnlaM1Z0Wlc1MGN6dGNiaUFnSUNBZ0lIWmhjaUJ5WVhSbExDQnBaRHRjYmx4dUlDQWdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0IyWVd4MVpYTWdZbUZ6WldRZ2IyNGdZWEpuZFcxbGJuUnpMbHh1SUNBZ0lDQWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRmRsSUhkcGJHd2djMmx0Y0d4NUlISmxkSFZ5YmlCMGFHVWdZM1Z5Y21WdWRDQnlZWFJsSUc5bUlIUm9aU0JtYVhKemRDQnViMlJsTGx4dUlDQWdJQ0FnSUNCcFpDQTlJSE5sYkdZdVgzTnZkVzVrYzFzd1hTNWZhV1E3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVpwY25OMElHTm9aV05ySUdsbUlIUm9hWE1nYVhNZ1lXNGdTVVFzSUdGdVpDQnBaaUJ1YjNRc0lHRnpjM1Z0WlNCcGRDQnBjeUJoSUc1bGR5QnlZWFJsSUhaaGJIVmxMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FXUnpJRDBnYzJWc1ppNWZaMlYwVTI5MWJtUkpaSE1vS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x1WkdWNElEMGdhV1J6TG1sdVpHVjRUMllvWVhKbmMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibVJsZUNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXUWdQU0J3WVhKelpVbHVkQ2hoY21keld6QmRMQ0F4TUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbUYwWlNBOUlIQmhjbk5sUm14dllYUW9ZWEpuYzFzd1hTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVhKbmN5NXNaVzVuZEdnZ1BUMDlJRElwSUh0Y2JpQWdJQ0FnSUNBZ2NtRjBaU0E5SUhCaGNuTmxSbXh2WVhRb1lYSm5jMXN3WFNrN1hHNGdJQ0FnSUNBZ0lHbGtJRDBnY0dGeWMyVkpiblFvWVhKbmMxc3hYU3dnTVRBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhCc1lYbGlZV05ySUhKaGRHVWdiM0lnY21WMGRYSnVJSFJvWlNCamRYSnlaVzUwSUhaaGJIVmxMbHh1SUNBZ0lDQWdkbUZ5SUhOdmRXNWtPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ5WVhSbElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR05vWVc1blpTQndiR0Y1WW1GamF5QnlZWFJsSUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNGMVpYVmxMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R5WVhSbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdGamRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVjbUYwWlM1aGNIQnNlU2h6Wld4bUxDQmhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCbmNtOTFjQ0J5WVhSbExseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2xrSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNKaGRHVWdQU0J5WVhSbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUc5dVpTQnZjaUJoYkd3Z2RtOXNkVzFsY3k1Y2JpQWdJQ0FnSUNBZ2FXUWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWhwWkNrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4cFpDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWRsZENCMGFHVWdjMjkxYm1RdVhHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RZ1BTQnpaV3htTGw5emIzVnVaRUo1U1dRb2FXUmJhVjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOdmRXNWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJMWldWd0lIUnlZV05ySUc5bUlHOTFjaUJ3YjNOcGRHbHZiaUIzYUdWdUlIUm9aU0J5WVhSbElHTm9ZVzVuWldRZ1lXNWtJSFZ3WkdGMFpTQjBhR1VnY0d4aGVXSmhZMnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE4wWVhKMElIQnZjMmwwYVc5dUlITnZJSGRsSUdOaGJpQndjbTl3WlhKc2VTQmhaR3AxYzNRZ2RHaGxJSE5sWldzZ2NHOXphWFJwYjI0Z1ptOXlJSFJwYldVZ1pXeGhjSE5sWkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXlZWFJsVTJWbGF5QTlJSE5sYkdZdWMyVmxheWhwWkZ0cFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0d4aGVWTjBZWEowSUQwZ2MyVnNaaTVmZDJWaVFYVmthVzhnUHlCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxJRG9nYzI5MWJtUXVYM0JzWVhsVGRHRnlkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5eVlYUmxJRDBnY21GMFpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0J3YkdGNVltRmpheUJ5WVhSbExseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2SUNZbUlITnZkVzVrTGw5dWIyUmxJQ1ltSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjR3hoZVdKaFkydFNZWFJsTG5ObGRGWmhiSFZsUVhSVWFXMWxLSEpoZEdVc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6YjNWdVpDNWZibTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNXdiR0Y1WW1GamExSmhkR1VnUFNCeVlYUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaWE5sZENCMGFHVWdkR2x0WlhKekxseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxaV3NnUFNCelpXeG1Mbk5sWldzb2FXUmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ0tDaHpaV3htTGw5emNISnBkR1ZiYzI5MWJtUXVYM053Y21sMFpWMWJNRjBnS3lCelpXeG1MbDl6Y0hKcGRHVmJjMjkxYm1RdVgzTndjbWwwWlYxYk1WMHBJQzhnTVRBd01Da2dMU0J6WldWck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnBiV1Z2ZFhRZ1BTQW9aSFZ5WVhScGIyNGdLaUF4TURBd0tTQXZJRTFoZEdndVlXSnpLSE52ZFc1a0xsOXlZWFJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UzUmhjblFnWVNCdVpYY2daVzVrSUhScGJXVnlJR2xtSUhOdmRXNWtJR2x6SUdGc2NtVmhaSGtnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOWxibVJVYVcxbGNuTmJhV1JiYVYxZElIeDhJQ0Z6YjNWdVpDNWZjR0YxYzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJOc1pXRnlWR2x0WlhJb2FXUmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxibVJVYVcxbGNuTmJhV1JiYVYxZElEMGdjMlYwVkdsdFpXOTFkQ2h6Wld4bUxsOWxibVJsWkM1aWFXNWtLSE5sYkdZc0lITnZkVzVrS1N3Z2RHbHRaVzkxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjNKaGRHVW5MQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjMjkxYm1RZ1BTQnpaV3htTGw5emIzVnVaRUo1U1dRb2FXUXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RZ1B5QnpiM1Z1WkM1ZmNtRjBaU0E2SUhObGJHWXVYM0poZEdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRdmMyVjBJSFJvWlNCelpXVnJJSEJ2YzJsMGFXOXVJRzltSUdFZ2MyOTFibVF1SUZSb2FYTWdiV1YwYUc5a0lHTmhiaUJ2Y0hScGIyNWhiR3g1SUhSaGEyVWdNQ3dnTVNCdmNpQXlJR0Z5WjNWdFpXNTBjeTVjYmlBZ0lDQWdLaUFnSUhObFpXc29LU0F0UGlCU1pYUjFjbTV6SUhSb1pTQm1hWEp6ZENCemIzVnVaQ0J1YjJSbEozTWdZM1Z5Y21WdWRDQnpaV1ZySUhCdmMybDBhVzl1TGx4dUlDQWdJQ0FxSUNBZ2MyVmxheWhwWkNrZ0xUNGdVbVYwZFhKdWN5QjBhR1VnYzI5MWJtUWdhV1FuY3lCamRYSnlaVzUwSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDb2dJQ0J6WldWcktITmxaV3NwSUMwK0lGTmxkSE1nZEdobElITmxaV3NnY0c5emFYUnBiMjRnYjJZZ2RHaGxJR1pwY25OMElITnZkVzVrSUc1dlpHVXVYRzRnSUNBZ0lDb2dJQ0J6WldWcktITmxaV3NzSUdsa0tTQXRQaUJUWlhSeklIUm9aU0J6WldWcklIQnZjMmwwYVc5dUlHOW1JSEJoYzNObFpDQnpiM1Z1WkNCcFpDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEliM2RzTDA1MWJXSmxjbjBnVW1WMGRYSnVjeUJ6Wld4bUlHOXlJSFJvWlNCamRYSnlaVzUwSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVmxhem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0FnSUhaaGNpQnpaV1ZyTENCcFpEdGNibHh1SUNBZ0lDQWdMeThnUkdWMFpYSnRhVzVsSUhSb1pTQjJZV3gxWlhNZ1ltRnpaV1FnYjI0Z1lYSm5kVzFsYm5SekxseHVJQ0FnSUNBZ2FXWWdLR0Z5WjNNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZGxJSGRwYkd3Z2MybHRjR3g1SUhKbGRIVnliaUIwYUdVZ1kzVnljbVZ1ZENCd2IzTnBkR2x2YmlCdlppQjBhR1VnWm1seWMzUWdibTlrWlM1Y2JpQWdJQ0FnSUNBZ2FXUWdQU0J6Wld4bUxsOXpiM1Z1WkhOYk1GMHVYMmxrTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaGNtZHpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJHYVhKemRDQmphR1ZqYXlCcFppQjBhR2x6SUdseklHRnVJRWxFTENCaGJtUWdhV1lnYm05MExDQmhjM04xYldVZ2FYUWdhWE1nWVNCdVpYY2djMlZsYXlCd2IzTnBkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektDazdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUdsa2N5NXBibVJsZUU5bUtHRnlaM05iTUYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xrSUQwZ2NHRnljMlZKYm5Rb1lYSm5jMXN3WFN3Z01UQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0JwWkNBOUlITmxiR1l1WDNOdmRXNWtjMXN3WFM1ZmFXUTdYRzRnSUNBZ0lDQWdJQ0FnYzJWbGF5QTlJSEJoY25ObFJteHZZWFFvWVhKbmMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYSm5jeTVzWlc1bmRHZ2dQVDA5SURJcElIdGNiaUFnSUNBZ0lDQWdjMlZsYXlBOUlIQmhjbk5sUm14dllYUW9ZWEpuYzFzd1hTazdYRzRnSUNBZ0lDQWdJR2xrSUQwZ2NHRnljMlZKYm5Rb1lYSm5jMXN4WFN3Z01UQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCSlppQjBhR1Z5WlNCcGN5QnVieUJKUkN3Z1ltRnBiQ0J2ZFhRdVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdTV1lnZEdobElITnZkVzVrSUdoaGMyNG5kQ0JzYjJGa1pXUXNJR0ZrWkNCcGRDQjBieUIwYUdVZ2JHOWhaQ0J4ZFdWMVpTQjBieUJ6WldWcklIZG9aVzRnWTJGd1lXSnNaUzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmY1hWbGRXVXVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5RNklDZHpaV1ZySnl4Y2JpQWdJQ0FnSUNBZ0lDQmhZM1JwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV6WldWckxtRndjR3g1S0hObGJHWXNJR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFZGxkQ0IwYUdVZ2MyOTFibVF1WEc0Z0lDQWdJQ0IyWVhJZ2MyOTFibVFnUFNCelpXeG1MbDl6YjNWdVpFSjVTV1FvYVdRcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXVnJJRDA5UFNBbmJuVnRZbVZ5SnlBbUppQnpaV1ZySUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlFZWFZ6WlNCMGFHVWdjMjkxYm1RZ1lXNWtJSFZ3WkdGMFpTQndiM05wZEdsdmJpQm1iM0lnY21WemRHRnlkR2x1WnlCd2JHRjVZbUZqYXk1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnY0d4aGVXbHVaeUE5SUhObGJHWXVjR3hoZVdsdVp5aHBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJzWVhscGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1Y0dGMWMyVW9hV1FzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUUxdmRtVWdkR2hsSUhCdmMybDBhVzl1SUc5bUlIUm9aU0IwY21GamF5QmhibVFnWTJGdVkyVnNJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXpaV1ZySUQwZ2MyVmxhenRjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmWlc1a1pXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxsOWpiR1ZoY2xScGJXVnlLR2xrS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUZKbGMzUmhjblFnZEdobElIQnNZWGxpWVdOcklHbG1JSFJvWlNCemIzVnVaQ0IzWVhNZ2NHeGhlV2x1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0d4aGVXbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d2JHRjVLR2xrTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCVmNHUmhkR1VnZEdobElITmxaV3NnY0c5emFYUnBiMjRnWm05eUlFaFVUVXcxSUVGMVpHbHZMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1ZmQyVmlRWFZrYVc4Z0ppWWdjMjkxYm1RdVgyNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1OMWNuSmxiblJVYVcxbElEMGdjMlZsYXp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhZV2wwSUdadmNpQjBhR1VnY0d4aGVTQnNiMk5ySUhSdklHSmxJSFZ1YzJWMElHSmxabTl5WlNCbGJXbDBkR2x1WnlBb1NGUk5URFVnUVhWa2FXOHBMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdiR0Y1YVc1bklDWW1JQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z0YVhSVFpXVnJJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1ZmNHeGhlVXh2WTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2R6WldWckp5d2dhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWlcxcGRGTmxaV3NzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2hsYldsMFUyVmxheXdnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozTmxaV3NuTENCcFpDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsWVd4VWFXMWxJRDBnYzJWc1ppNXdiR0Y1YVc1bktHbGtLU0EvSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVWdMU0J6YjNWdVpDNWZjR3hoZVZOMFlYSjBJRG9nTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVlYUmxVMlZsYXlBOUlITnZkVzVrTGw5eVlYUmxVMlZsYXlBL0lITnZkVzVrTGw5eVlYUmxVMlZsYXlBdElITnZkVzVrTGw5elpXVnJJRG9nTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpiM1Z1WkM1ZmMyVmxheUFySUNoeVlYUmxVMlZsYXlBcklISmxZV3hVYVcxbElDb2dUV0YwYUM1aFluTW9jMjkxYm1RdVgzSmhkR1VwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE52ZFc1a0xsOXViMlJsTG1OMWNuSmxiblJVYVcxbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMmhsWTJzZ2FXWWdZU0J6Y0dWamFXWnBZeUJ6YjNWdVpDQnBjeUJqZFhKeVpXNTBiSGtnY0d4aGVXbHVaeUJ2Y2lCdWIzUWdLR2xtSUdsa0lHbHpJSEJ5YjNacFpHVmtLU3dnYjNJZ1kyaGxZMnNnYVdZZ1lYUWdiR1ZoYzNRZ2IyNWxJRzltSUhSb1pTQnpiM1Z1WkhNZ2FXNGdkR2hsSUdkeWIzVndJR2x6SUhCc1lYbHBibWNnYjNJZ2JtOTBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJR2xrSUZSb1pTQnpiM1Z1WkNCcFpDQjBieUJqYUdWamF5NGdTV1lnYm05dVpTQnBjeUJ3WVhOelpXUXNJSFJvWlNCM2FHOXNaU0J6YjNWdVpDQm5jbTkxY0NCcGN5QmphR1ZqYTJWa0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2NHeGhlV2x1WnlCaGJtUWdabUZzYzJVZ2FXWWdibTkwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEJzWVhscGJtYzZJR1oxYm1OMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUM4dklFTm9aV05ySUhSb1pTQndZWE56WldRZ2MyOTFibVFnU1VRZ0tHbG1JR0Z1ZVNrdVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzI5MWJtUWdQU0J6Wld4bUxsOXpiM1Z1WkVKNVNXUW9hV1FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzI5MWJtUWdQeUFoYzI5MWJtUXVYM0JoZFhObFpDQTZJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJQZEdobGNuZHBjMlVzSUd4dmIzQWdkR2h5YjNWbmFDQmhiR3dnYzI5MWJtUnpJR0Z1WkNCamFHVmpheUJwWmlCaGJua2dZWEpsSUhCc1lYbHBibWN1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwUFRBN0lHazhjMlZzWmk1ZmMyOTFibVJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaaTVmYzI5MWJtUnpXMmxkTGw5d1lYVnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZENCMGFHVWdaSFZ5WVhScGIyNGdiMllnZEdocGN5QnpiM1Z1WkM0Z1VHRnpjMmx1WnlCaElITnZkVzVrSUdsa0lIZHBiR3dnY21WMGRYSnVJSFJvWlNCemNISnBkR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0JwWkNCVWFHVWdjMjkxYm1RZ2FXUWdkRzhnWTJobFkyc3VJRWxtSUc1dmJtVWdhWE1nY0dGemMyVmtMQ0J5WlhSMWNtNGdablZzYkNCemIzVnlZMlVnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0JCZFdScGJ5QmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHUjFjbUYwYVc5dU9pQm1kVzVqZEdsdmJpaHBaQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ2MyVnNaaTVmWkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUM4dklFbG1JSGRsSUhCaGMzTWdZVzRnU1VRc0lHZGxkQ0IwYUdVZ2MyOTFibVFnWVc1a0lISmxkSFZ5YmlCMGFHVWdjM0J5YVhSbElHeGxibWQwYUM1Y2JpQWdJQ0FnSUhaaGNpQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNocFpDazdYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnWkhWeVlYUnBiMjRnUFNCelpXeG1MbDl6Y0hKcGRHVmJjMjkxYm1RdVgzTndjbWwwWlYxYk1WMGdMeUF4TURBd08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1pIVnlZWFJwYjI0N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR04xY25KbGJuUWdiRzloWkdWa0lITjBZWFJsSUc5bUlIUm9hWE1nU0c5M2JDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlDZDFibXh2WVdSbFpDY3NJQ2RzYjJGa2FXNW5KeXdnSjJ4dllXUmxaQ2RjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzNSaGRHVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Ykc5aFpDQmhibVFnWkdWemRISnZlU0IwYUdVZ1kzVnljbVZ1ZENCSWIzZHNJRzlpYW1WamRDNWNiaUFnSUNBZ0tpQlVhR2x6SUhkcGJHd2dhVzF0WldScFlYUmxiSGtnYzNSdmNDQmhiR3dnYzI5MWJtUWdhVzV6ZEdGdVkyVnpJR0YwZEdGamFHVmtJSFJ2SUhSb2FYTWdaM0p2ZFhBdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZFc1c2IyRmtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnTHk4Z1UzUnZjQ0J3YkdGNWFXNW5JR0Z1ZVNCaFkzUnBkbVVnYzI5MWJtUnpMbHh1SUNBZ0lDQWdkbUZ5SUhOdmRXNWtjeUE5SUhObGJHWXVYM052ZFc1a2N6dGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4emIzVnVaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdMeThnVTNSdmNDQjBhR1VnYzI5MWJtUWdhV1lnYVhRZ2FYTWdZM1Z5Y21WdWRHeDVJSEJzWVhscGJtY3VYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyOTFibVJ6VzJsZExsOXdZWFZ6WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxuTjBiM0FvYzI5MWJtUnpXMmxkTGw5cFpDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2RHaGxJSE52ZFhKalpTQnZjaUJrYVhOamIyNXVaV04wTGx4dUlDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgzZGxZa0YxWkdsdktTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCemIzVnlZMlVnZEc4Z01DMXpaV052Ym1RZ2MybHNaVzVqWlNCMGJ5QnpkRzl3SUdGdWVTQmtiM2R1Ykc5aFpHbHVaeUFvWlhoalpYQjBJR2x1SUVsRktTNWNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1kyaGxZMnRKUlNBOUlDOU5VMGxGSUh4VWNtbGtaVzUwWEZ3dkx5NTBaWE4wS0VodmQyeGxjaTVmYm1GMmFXZGhkRzl5SUNZbUlFaHZkMnhsY2k1ZmJtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmphR1ZqYTBsRktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaSE5iYVYwdVgyNXZaR1V1YzNKaklEMGdKMlJoZEdFNllYVmthVzh2ZDJGMk8ySmhjMlUyTkN4VmEyeEhVbWxuUVVGQlFsaFJWbHBHV20weE1FbENTVUZCUVVGQ1FVRkZRVkpMZDBGQlNXaFpRVkZCUTBGQ1FVRkJRVUpyV1ZoU2FFRm5RVUZCUVVWQkp6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdZVzU1SUdWMlpXNTBJR3hwYzNSbGJtVnljeTVjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaSE5iYVYwdVgyNXZaR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblpYSnliM0luTENCemIzVnVaSE5iYVYwdVgyVnljbTl5Um00c0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkhOYmFWMHVYMjV2WkdVdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaEliM2RzWlhJdVgyTmhibEJzWVhsRmRtVnVkQ3dnYzI5MWJtUnpXMmxkTGw5c2IyRmtSbTRzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRVZ0Y0hSNUlHOTFkQ0JoYkd3Z2IyWWdkR2hsSUc1dlpHVnpMbHh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdjMjkxYm1SelcybGRMbDl1YjJSbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCaGJHd2dkR2x0WlhKeklHRnlaU0JqYkdWaGNtVmtJRzkxZEM1Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmWTJ4bFlYSlVhVzFsY2loemIzVnVaSE5iYVYwdVgybGtLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2RHaGxJSEpsWm1WeVpXNWpaWE1nYVc0Z2RHaGxJR2RzYjJKaGJDQkliM2RzWlhJZ2IySnFaV04wTGx4dUlDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQkliM2RzWlhJdVgyaHZkMnh6TG1sdVpHVjRUMllvYzJWc1ppazdYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnU0c5M2JHVnlMbDlvYjNkc2N5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVSbGJHVjBaU0IwYUdseklITnZkVzVrSUdaeWIyMGdkR2hsSUdOaFkyaGxJQ2hwWmlCdWJ5QnZkR2hsY2lCSWIzZHNJR2x6SUhWemFXNW5JR2wwS1M1Y2JpQWdJQ0FnSUhaaGNpQnlaVzFEWVdOb1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCbWIzSWdLR2s5TURzZ2FUeEliM2RzWlhJdVgyaHZkMnh6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoSWIzZHNaWEl1WDJodmQyeHpXMmxkTGw5emNtTWdQVDA5SUhObGJHWXVYM055WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYlVOaFkyaGxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHTmhZMmhsSUNZbUlISmxiVU5oWTJobEtTQjdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmpZV05vWlZ0elpXeG1MbDl6Y21OZE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJEYkdWaGNpQm5iRzlpWVd3Z1pYSnliM0p6TGx4dUlDQWdJQ0FnU0c5M2JHVnlMbTV2UVhWa2FXOGdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdMeThnUTJ4bFlYSWdiM1YwSUdCelpXeG1ZQzVjYmlBZ0lDQWdJSE5sYkdZdVgzTjBZWFJsSUQwZ0ozVnViRzloWkdWa0p6dGNiaUFnSUNBZ0lITmxiR1l1WDNOdmRXNWtjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ2MyVnNaaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTWFYTjBaVzRnZEc4Z1lTQmpkWE4wYjIwZ1pYWmxiblF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUdWMlpXNTBJRVYyWlc1MElHNWhiV1V1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3Um5WdVkzUnBiMjU5SUdadUlDQWdJRXhwYzNSbGJtVnlJSFJ2SUdOaGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQWdJR2xrSUNBZ0lDaHZjSFJwYjI1aGJDa2dUMjVzZVNCc2FYTjBaVzRnZEc4Z1pYWmxiblJ6SUdadmNpQjBhR2x6SUhOdmRXNWtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJQ0J2Ym1ObElDQW9TVTVVUlZKT1FVd3BJRTFoY210eklHVjJaVzUwSUhSdklHWnBjbVVnYjI1c2VTQnZibU5sTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyeDlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNDZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQm1iaXdnYVdRc0lHOXVZMlVwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCbGRtVnVkSE1nUFNCelpXeG1XeWRmYjI0bklDc2daWFpsYm5SZE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1p1SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBjeTV3ZFhOb0tHOXVZMlVnUHlCN2FXUTZJR2xrTENCbWJqb2dabTRzSUc5dVkyVTZJRzl1WTJWOUlEb2dlMmxrT2lCcFpDd2dabTQ2SUdadWZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXMXZkbVVnWVNCamRYTjBiMjBnWlhabGJuUXVJRU5oYkd3Z2QybDBhRzkxZENCd1lYSmhiV1YwWlhKeklIUnZJSEpsYlc5MlpTQmhiR3dnWlhabGJuUnpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0JsZG1WdWRDQkZkbVZ1ZENCdVlXMWxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMFoxYm1OMGFXOXVmU0JtYmlBZ0lDQk1hWE4wWlc1bGNpQjBieUJ5WlcxdmRtVXVJRXhsWVhabElHVnRjSFI1SUhSdklISmxiVzkyWlNCaGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQWdJR2xrSUNBZ0lDaHZjSFJwYjI1aGJDa2dUMjVzZVNCeVpXMXZkbVVnWlhabGJuUnpJR1p2Y2lCMGFHbHpJSE52ZFc1a0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMng5WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMlptT2lCbWRXNWpkR2x2YmlobGRtVnVkQ3dnWm00c0lHbGtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnWlhabGJuUnpJRDBnYzJWc1psc25YMjl1SnlBcklHVjJaVzUwWFR0Y2JpQWdJQ0FnSUhaaGNpQnBJRDBnTUR0Y2JseHVJQ0FnSUNBZ0x5OGdRV3hzYjNjZ2NHRnpjMmx1WnlCcWRYTjBJR0Z1SUdWMlpXNTBJR0Z1WkNCSlJDNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdabTRnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ0lDQWdJR2xrSUQwZ1ptNDdYRzRnSUNBZ0lDQWdJR1p1SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHWnVJSHg4SUdsa0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUV4dmIzQWdkR2h5YjNWbmFDQmxkbVZ1ZENCemRHOXlaU0JoYm1RZ2NtVnRiM1psSUhSb1pTQndZWE56WldRZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYVQwd095QnBQR1YyWlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJwYzBsa0lEMGdLR2xrSUQwOVBTQmxkbVZ1ZEhOYmFWMHVhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2htYmlBOVBUMGdaWFpsYm5SelcybGRMbVp1SUNZbUlHbHpTV1FnZkh3Z0lXWnVJQ1ltSUdselNXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwY3k1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdMeThnUTJ4bFlYSWdiM1YwSUdGc2JDQmxkbVZ1ZEhNZ2IyWWdkR2hwY3lCMGVYQmxMbHh1SUNBZ0lDQWdJQ0J6Wld4bVd5ZGZiMjRuSUNzZ1pYWmxiblJkSUQwZ1cxMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJEYkdWaGNpQnZkWFFnWVd4c0lHVjJaVzUwY3lCdlppQmxkbVZ5ZVNCMGVYQmxMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektITmxiR1lwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR2s5TURzZ2FUeHJaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHJaWGx6VzJsZExtbHVaR1Y0VDJZb0oxOXZiaWNwSUQwOVBTQXdLU0FtSmlCQmNuSmhlUzVwYzBGeWNtRjVLSE5sYkdaYmEyVjVjMXRwWFYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1XMnRsZVhOYmFWMWRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk1hWE4wWlc0Z2RHOGdZU0JqZFhOMGIyMGdaWFpsYm5RZ1lXNWtJSEpsYlc5MlpTQnBkQ0J2Ym1ObElHWnBjbVZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUNCbGRtVnVkQ0JGZG1WdWRDQnVZVzFsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTBaMWJtTjBhVzl1ZlNCbWJpQWdJQ0JNYVhOMFpXNWxjaUIwYnlCallXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJQ0JwWkNBZ0lDQW9iM0IwYVc5dVlXd3BJRTl1YkhrZ2JHbHpkR1Z1SUhSdklHVjJaVzUwY3lCbWIzSWdkR2hwY3lCemIzVnVaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc2ZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVkyVTZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQm1iaXdnYVdRcElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0x5OGdVMlYwZFhBZ2RHaGxJR1YyWlc1MElHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ2MyVnNaaTV2YmlobGRtVnVkQ3dnWm00c0lHbGtMQ0F4S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ0YVhRZ1lXeHNJR1YyWlc1MGN5QnZaaUJoSUhOd1pXTnBabWxqSUhSNWNHVWdZVzVrSUhCaGMzTWdkR2hsSUhOdmRXNWtJR2xrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnWlhabGJuUWdSWFpsYm5RZ2JtRnRaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUNBZ0lGTnZkVzVrSUVsRUxseHVJQ0FnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2JYTm5JQ0FnVFdWemMyRm5aU0IwYnlCbmJ5QjNhWFJvSUdWMlpXNTBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJWdGFYUTZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQnBaQ3dnYlhObktTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdaWFpsYm5SeklEMGdjMlZzWmxzblgyOXVKeUFySUdWMlpXNTBYVHRjYmx4dUlDQWdJQ0FnTHk4Z1RHOXZjQ0IwYUhKdmRXZG9JR1YyWlc1MElITjBiM0psSUdGdVpDQm1hWEpsSUdGc2JDQm1kVzVqZEdsdmJuTXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQV1YyWlc1MGN5NXNaVzVuZEdndE1Uc2dhVDQ5TURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFOXViSGtnWm1seVpTQjBhR1VnYkdsemRHVnVaWElnYVdZZ2RHaGxJR052Y25KbFkzUWdTVVFnYVhNZ2RYTmxaQzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEhOYmFWMHVhV1FnZkh3Z1pYWmxiblJ6VzJsZExtbGtJRDA5UFNCcFpDQjhmQ0JsZG1WdWRDQTlQVDBnSjJ4dllXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpaG1iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTR1WTJGc2JDaDBhR2x6TENCcFpDd2diWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlMbUpwYm1Rb2MyVnNaaXdnWlhabGJuUnpXMmxkTG1adUtTd2dNQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHbHpJR1YyWlc1MElIZGhjeUJ6WlhSMWNDQjNhWFJvSUdCdmJtTmxZQ3dnY21WdGIzWmxJR2wwTGx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRITmJhVjB1YjI1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV2Wm1Zb1pYWmxiblFzSUdWMlpXNTBjMXRwWFM1bWJpd2daWFpsYm5SelcybGRMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1VHRnpjeUIwYUdVZ1pYWmxiblFnZEhsd1pTQnBiblJ2SUd4dllXUWdjWFZsZFdVZ2MyOGdkR2hoZENCcGRDQmpZVzRnWTI5dWRHbHVkV1VnYzNSbGNIQnBibWN1WEc0Z0lDQWdJQ0J6Wld4bUxsOXNiMkZrVVhWbGRXVW9aWFpsYm5RcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVVhWbGRXVWdiMllnWVdOMGFXOXVjeUJwYm1sMGFXRjBaV1FnWW1WbWIzSmxJSFJvWlNCemIzVnVaQ0JvWVhNZ2JHOWhaR1ZrTGx4dUlDQWdJQ0FxSUZSb1pYTmxJSGRwYkd3Z1ltVWdZMkZzYkdWa0lHbHVJSE5sY1hWbGJtTmxMQ0IzYVhSb0lIUm9aU0J1WlhoMElHOXViSGtnWm1seWFXNW5YRzRnSUNBZ0lDb2dZV1owWlhJZ2RHaGxJSEJ5WlhacGIzVnpJR2hoY3lCbWFXNXBjMmhsWkNCbGVHVmpkWFJwYm1jZ0tHVjJaVzRnYVdZZ1lYTjVibU1nYkdsclpTQndiR0Y1S1M1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXNiMkZrVVhWbGRXVTZJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6Wld4bUxsOXhkV1YxWlM1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMFlYTnJJRDBnYzJWc1ppNWZjWFZsZFdWYk1GMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUhSb2FYTWdkR0Z6YXlCcFppQmhJRzFoZEdOb2FXNW5JR1YyWlc1MElIZGhjeUJ3WVhOelpXUXVYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYTnJMbVYyWlc1MElEMDlQU0JsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0YxWlhWbExuTm9hV1owS0NrN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJHOWhaRkYxWlhWbEtDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlNkVzRnZEdobElIUmhjMnNnYVdZZ2JtOGdaWFpsYm5RZ2RIbHdaU0JwY3lCd1lYTnpaV1F1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0IwWVhOckxtRmpkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2FYSmxaQ0IzYUdWdUlIQnNZWGxpWVdOcklHVnVaSE1nWVhRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VTI5MWJtUjlJSE52ZFc1a0lGUm9aU0J6YjNWdVpDQnZZbXBsWTNRZ2RHOGdkMjl5YXlCM2FYUm9MbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJWdVpHVmtPaUJtZFc1amRHbHZiaWh6YjNWdVpDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ2RtRnlJSE53Y21sMFpTQTlJSE52ZFc1a0xsOXpjSEpwZEdVN1hHNWNiaUFnSUNBZ0lDOHZJRWxtSUhkbElHRnlaU0IxYzJsdVp5QkpSU0JoYm1RZ2RHaGxjbVVnZDJGeklHNWxkSGR2Y21zZ2JHRjBaVzVqZVNCM1pTQnRZWGtnWW1VZ1kyeHBjSEJwYm1kY2JpQWdJQ0FnSUM4dklHRjFaR2x2SUdKbFptOXlaU0JwZENCamIyMXdiR1YwWlhNZ2NHeGhlV2x1Wnk0Z1RHVjBjeUJqYUdWamF5QjBhR1VnYm05a1pTQjBieUJ0WVd0bElITjFjbVVnYVhSY2JpQWdJQ0FnSUM4dklHSmxiR2xsZG1WeklHbDBJR2hoY3lCamIyMXdiR1YwWldRc0lHSmxabTl5WlNCbGJtUnBibWNnZEdobElIQnNZWGxpWVdOckxseHVJQ0FnSUNBZ2FXWWdLQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5QW1KaUJ6YjNWdVpDNWZibTlrWlNBbUppQWhjMjkxYm1RdVgyNXZaR1V1Y0dGMWMyVmtJQ1ltSUNGemIzVnVaQzVmYm05a1pTNWxibVJsWkNBbUppQnpiM1Z1WkM1ZmJtOWtaUzVqZFhKeVpXNTBWR2x0WlNBOElITnZkVzVrTGw5emRHOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb2MyVnNaaTVmWlc1a1pXUXVZbWx1WkNoelpXeG1MQ0J6YjNWdVpDa3NJREV3TUNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCVGFHOTFiR1FnZEdocGN5QnpiM1Z1WkNCc2IyOXdQMXh1SUNBZ0lDQWdkbUZ5SUd4dmIzQWdQU0FoSVNoemIzVnVaQzVmYkc5dmNDQjhmQ0J6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzeVhTazdYRzVjYmlBZ0lDQWdJQzh2SUVacGNtVWdkR2hsSUdWdVpHVmtJR1YyWlc1MExseHVJQ0FnSUNBZ2MyVnNaaTVmWlcxcGRDZ25aVzVrSnl3Z2MyOTFibVF1WDJsa0tUdGNibHh1SUNBZ0lDQWdMeThnVW1WemRHRnlkQ0IwYUdVZ2NHeGhlV0poWTJzZ1ptOXlJRWhVVFV3MUlFRjFaR2x2SUd4dmIzQXVYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVYM2RsWWtGMVpHbHZJQ1ltSUd4dmIzQXBJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNXpkRzl3S0hOdmRXNWtMbDlwWkN3Z2RISjFaU2t1Y0d4aGVTaHpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCU1pYTjBZWEowSUhSb2FYTWdkR2x0WlhJZ2FXWWdiMjRnWVNCWFpXSWdRWFZrYVc4Z2JHOXZjQzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCc2IyOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmMyVmxheUE5SUhOdmRXNWtMbDl6ZEdGeWRDQjhmQ0F3TzF4dUlDQWdJQ0FnSUNCemIzVnVaQzVmY21GMFpWTmxaV3NnUFNBd08xeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHeGhlVk4wWVhKMElEMGdTRzkzYkdWeUxtTjBlQzVqZFhKeVpXNTBWR2x0WlR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUNnb2MyOTFibVF1WDNOMGIzQWdMU0J6YjNWdVpDNWZjM1JoY25RcElDb2dNVEF3TUNrZ0x5Qk5ZWFJvTG1GaWN5aHpiM1Z1WkM1ZmNtRjBaU2s3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ1WkZScGJXVnljMXR6YjNWdVpDNWZhV1JkSUQwZ2MyVjBWR2x0Wlc5MWRDaHpaV3htTGw5bGJtUmxaQzVpYVc1a0tITmxiR1lzSUhOdmRXNWtLU3dnZEdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFMWhjbXNnZEdobElHNXZaR1VnWVhNZ2NHRjFjMlZrTGx4dUlDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2SUNZbUlDRnNiMjl3S1NCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZaVzVrWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCemIzVnVaQzVmYzJWbGF5QTlJSE52ZFc1a0xsOXpkR0Z5ZENCOGZDQXdPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNCelpXeG1MbDlqYkdWaGNsUnBiV1Z5S0hOdmRXNWtMbDlwWkNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUTJ4bFlXNGdkWEFnZEdobElHSjFabVpsY2lCemIzVnlZMlV1WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGdVFuVm1abVZ5S0hOdmRXNWtMbDl1YjJSbEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCQmRIUmxiWEIwSUhSdklHRjFkRzh0YzNWemNHVnVaQ0JCZFdScGIwTnZiblJsZUhRZ2FXWWdibThnYzI5MWJtUnpJR0Z5WlNCemRHbHNiQ0J3YkdGNWFXNW5MbHh1SUNBZ0lDQWdJQ0JJYjNkc1pYSXVYMkYxZEc5VGRYTndaVzVrS0NrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRmRvWlc0Z2RYTnBibWNnWVNCemNISnBkR1VzSUdWdVpDQjBhR1VnZEhKaFkyc3VYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVYM2RsWWtGMVpHbHZJQ1ltSUNGc2IyOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVjM1J2Y0NoemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJ4bFlYSWdkR2hsSUdWdVpDQjBhVzFsY2lCbWIzSWdZU0J6YjNWdVpDQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJRlJvWlNCemIzVnVaQ0JKUkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWpiR1ZoY2xScGJXVnlPaUJtZFc1amRHbHZiaWhwWkNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZlpXNWtWR2x0WlhKelcybGtYU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkRiR1ZoY2lCMGFHVWdkR2x0Wlc5MWRDQnZjaUJ5WlcxdmRtVWdkR2hsSUdWdVpHVmtJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGJHWXVYMlZ1WkZScGJXVnljMXRwWkYwZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvYzJWc1ppNWZaVzVrVkdsdFpYSnpXMmxrWFNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUWdKaVlnYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMlZ1WkdWa0p5d2djMlZzWmk1ZlpXNWtWR2x0WlhKelcybGtYU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQnpaV3htTGw5bGJtUlVhVzFsY25OYmFXUmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1SUhSb1pTQnpiM1Z1WkNCcFpHVnVkR2xtYVdWa0lHSjVJSFJvYVhNZ1NVUXNJRzl5SUhKbGRIVnliaUJ1ZFd4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2FXUWdVMjkxYm1RZ1NVUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOUlDQWdJRk52ZFc1a0lHOWlhbVZqZENCdmNpQnVkV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjl6YjNWdVpFSjVTV1E2SUdaMWJtTjBhVzl1S0dsa0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJHd2djMjkxYm1SeklHRnVaQ0JtYVc1a0lIUm9aU0J2Ym1VZ2QybDBhQ0IwYUdseklFbEVMbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBITmxiR1l1WDNOdmRXNWtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVdRZ1BUMDlJSE5sYkdZdVgzTnZkVzVrYzF0cFhTNWZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaaTVmYzI5MWJtUnpXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNGdZVzRnYVc1aFkzUnBkbVVnYzI5MWJtUWdabkp2YlNCMGFHVWdjRzl2YkNCdmNpQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bExseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlNCVGIzVnVaQ0J3YkdGNVltRmpheUJ2WW1wbFkzUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gybHVZV04wYVhabFUyOTFibVE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNCelpXeG1MbDlrY21GcGJpZ3BPMXh1WEc0Z0lDQWdJQ0F2THlCR2FXNWtJSFJvWlNCbWFYSnpkQ0JwYm1GamRHbDJaU0J1YjJSbElIUnZJSEpsWTNsamJHVXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQVEE3SUdrOGMyVnNaaTVmYzI5MWJtUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOXpiM1Z1WkhOYmFWMHVYMlZ1WkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzTnZkVzVrYzF0cFhTNXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHNXZJR2x1WVdOMGFYWmxJRzV2WkdVZ2QyRnpJR1p2ZFc1a0xDQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bExseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlRiM1Z1WkNoelpXeG1LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkhKaGFXNGdaWGhqWlhOeklHbHVZV04wYVhabElITnZkVzVrY3lCbWNtOXRJSFJvWlNCd2IyOXNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWtjbUZwYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdiR2x0YVhRZ1BTQnpaV3htTGw5d2IyOXNPMXh1SUNBZ0lDQWdkbUZ5SUdOdWRDQTlJREE3WEc0Z0lDQWdJQ0IyWVhJZ2FTQTlJREE3WEc1Y2JpQWdJQ0FnSUM4dklFbG1JSFJvWlhKbElHRnlaU0JzWlhOeklITnZkVzVrY3lCMGFHRnVJSFJvWlNCdFlYZ2djRzl2YkNCemFYcGxMQ0IzWlNCaGNtVWdaRzl1WlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5emIzVnVaSE11YkdWdVozUm9JRHdnYkdsdGFYUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCRGIzVnVkQ0IwYUdVZ2JuVnRZbVZ5SUc5bUlHbHVZV04wYVhabElITnZkVzVrY3k1Y2JpQWdJQ0FnSUdadmNpQW9hVDB3T3lCcFBITmxiR1l1WDNOdmRXNWtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZjMjkxYm1SelcybGRMbDlsYm1SbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdWRDc3JPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGSmxiVzkyWlNCbGVHTmxjM01nYVc1aFkzUnBkbVVnYzI5MWJtUnpMQ0JuYjJsdVp5QnBiaUJ5WlhabGNuTmxJRzl5WkdWeUxseHVJQ0FnSUNBZ1ptOXlJQ2hwUFhObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdnZ0xTQXhPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR051ZENBOFBTQnNhVzFwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5emIzVnVaSE5iYVYwdVgyVnVaR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnUkdselkyOXVibVZqZENCMGFHVWdZWFZrYVc4Z2MyOTFjbU5sSUhkb1pXNGdkWE5wYm1jZ1YyVmlJRUYxWkdsdkxseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCelpXeG1MbDl6YjNWdVpITmJhVjB1WDI1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDNOdmRXNWtjMXRwWFM1ZmJtOWtaUzVrYVhOamIyNXVaV04wS0RBcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsYlc5MlpTQnpiM1Z1WkhNZ2RXNTBhV3dnZDJVZ2FHRjJaU0IwYUdVZ2NHOXZiQ0J6YVhwbExseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTnZkVzVrY3k1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnWTI1MExTMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMElHRnNiQ0JKUkNkeklHWnliMjBnZEdobElITnZkVzVrY3lCd2IyOXNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdhV1FnVDI1c2VTQnlaWFIxY200Z2IyNWxJRWxFSUdsbUlHOXVaU0JwY3lCd1lYTnpaV1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UVhKeVlYbDlJQ0FnSUVGeWNtRjVJRzltSUVsRWN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZloyVjBVMjkxYm1SSlpITTZJR1oxYm1OMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FUMHdPeUJwUEhObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbGtjeTV3ZFhOb0tITmxiR1l1WDNOdmRXNWtjMXRwWFM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsa2N6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmFXUmRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJNYjJGa0lIUm9aU0J6YjNWdVpDQmlZV05ySUdsdWRHOGdkR2hsSUdKMVptWmxjaUJ6YjNWeVkyVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdVMjkxYm1SOUlITnZkVzVrSUZSb1pTQnpiM1Z1WkNCdlltcGxZM1FnZEc4Z2QyOXlheUIzYVhSb0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMng5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM0psWm5KbGMyaENkV1ptWlhJNklHWjFibU4wYVc5dUtITnZkVzVrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQmlkV1ptWlhJZ2MyOTFjbU5sSUdadmNpQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbUoxWm1abGNsTnZkWEpqWlNBOUlFaHZkMnhsY2k1amRIZ3VZM0psWVhSbFFuVm1abVZ5VTI5MWNtTmxLQ2s3WEc0Z0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVZblZtWm1WeUlEMGdZMkZqYUdWYmMyVnNaaTVmYzNKalhUdGNibHh1SUNBZ0lDQWdMeThnUTI5dWJtVmpkQ0IwYnlCMGFHVWdZMjl5Y21WamRDQnViMlJsTGx4dUlDQWdJQ0FnYVdZZ0tITnZkVzVrTGw5d1lXNXVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2MyOTFibVF1WDI1dlpHVXVZblZtWm1WeVUyOTFjbU5sTG1OdmJtNWxZM1FvYzI5MWJtUXVYM0JoYm01bGNpazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdVkyOXVibVZqZENoemIzVnVaQzVmYm05a1pTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJR3h2YjNCcGJtY2dZVzVrSUhCc1lYbGlZV05ySUhKaGRHVXVYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWJHOXZjQ0E5SUhOdmRXNWtMbDlzYjI5d08xeHVJQ0FnSUNBZ2FXWWdLSE52ZFc1a0xsOXNiMjl3S1NCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbUoxWm1abGNsTnZkWEpqWlM1c2IyOXdVM1JoY25RZ1BTQnpiM1Z1WkM1ZmMzUmhjblFnZkh3Z01EdGNiaUFnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WW5WbVptVnlVMjkxY21ObExteHZiM0JGYm1RZ1BTQnpiM1Z1WkM1ZmMzUnZjRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTNXdiR0Y1WW1GamExSmhkR1V1YzJWMFZtRnNkV1ZCZEZScGJXVW9jMjkxYm1RdVgzSmhkR1VzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISmxkbVZ1ZENCdFpXMXZjbmtnYkdWaGEzTWdZbmtnWTJ4bFlXNXBibWNnZFhBZ2RHaGxJR0oxWm1abGNpQnpiM1Z5WTJVZ1lXWjBaWElnY0d4aGVXSmhZMnN1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0J1YjJSbElGTnZkVzVrSjNNZ1lYVmthVzhnYm05a1pTQmpiMjUwWVdsdWFXNW5JSFJvWlNCaWRXWm1aWElnYzI5MWNtTmxMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJOc1pXRnVRblZtWm1WeU9pQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUdsbUlDaEliM2RzWlhJdVgzTmpjbUYwWTJoQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWIyNWxibVJsWkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUc1dlpHVXVZblZtWm1WeVUyOTFjbU5sTG1ScGMyTnZibTVsWTNRb01DazdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN0lHNXZaR1V1WW5WbVptVnlVMjkxY21ObExtSjFabVpsY2lBOUlFaHZkMnhsY2k1ZmMyTnlZWFJqYUVKMVptWmxjanNnZlNCallYUmphQ2hsS1NCN2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2JtOWtaUzVpZFdabVpYSlRiM1Z5WTJVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeW9xSUZOcGJtZHNaU0JUYjNWdVpDQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFIxY0NCMGFHVWdjMjkxYm1RZ2IySnFaV04wTENCM2FHbGphQ0JsWVdOb0lHNXZaR1VnWVhSMFlXTm9aV1FnZEc4Z1lTQkliM2RzSUdkeWIzVndJR2x6SUdOdmJuUmhhVzVsWkNCcGJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdodmQyd2dWR2hsSUVodmQyd2djR0Z5Wlc1MElHZHliM1Z3TGx4dUlDQWdLaTljYmlBZ2RtRnlJRk52ZFc1a0lEMGdablZ1WTNScGIyNG9hRzkzYkNrZ2UxeHVJQ0FnSUhSb2FYTXVYM0JoY21WdWRDQTlJR2h2ZDJ3N1hHNGdJQ0FnZEdocGN5NXBibWwwS0NrN1hHNGdJSDA3WEc0Z0lGTnZkVzVrTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibWwwYVdGc2FYcGxJR0VnYm1WM0lGTnZkVzVrSUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUYjNWdVpIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCd1lYSmxiblFnUFNCelpXeG1MbDl3WVhKbGJuUTdYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJSFJvWlNCa1pXWmhkV3gwSUhCaGNtRnRaWFJsY25NdVhHNGdJQ0FnSUNCelpXeG1MbDl0ZFhSbFpDQTlJSEJoY21WdWRDNWZiWFYwWldRN1hHNGdJQ0FnSUNCelpXeG1MbDlzYjI5d0lEMGdjR0Z5Wlc1MExsOXNiMjl3TzF4dUlDQWdJQ0FnYzJWc1ppNWZkbTlzZFcxbElEMGdjR0Z5Wlc1MExsOTJiMngxYldVN1hHNGdJQ0FnSUNCelpXeG1MbDl5WVhSbElEMGdjR0Z5Wlc1MExsOXlZWFJsTzF4dUlDQWdJQ0FnYzJWc1ppNWZjMlZsYXlBOUlEQTdYRzRnSUNBZ0lDQnpaV3htTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZlpXNWtaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzQnlhWFJsSUQwZ0oxOWZaR1ZtWVhWc2RDYzdYRzVjYmlBZ0lDQWdJQzh2SUVkbGJtVnlZWFJsSUdFZ2RXNXBjWFZsSUVsRUlHWnZjaUIwYUdseklITnZkVzVrTGx4dUlDQWdJQ0FnYzJWc1ppNWZhV1FnUFNBckswaHZkMnhsY2k1ZlkyOTFiblJsY2p0Y2JseHVJQ0FnSUNBZ0x5OGdRV1JrSUdsMGMyVnNaaUIwYnlCMGFHVWdjR0Z5Wlc1MEozTWdjRzl2YkM1Y2JpQWdJQ0FnSUhCaGNtVnVkQzVmYzI5MWJtUnpMbkIxYzJnb2MyVnNaaWs3WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCMGFHVWdibVYzSUc1dlpHVXVYRzRnSUNBZ0lDQnpaV3htTG1OeVpXRjBaU2dwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRM0psWVhSbElHRnVaQ0J6WlhSMWNDQmhJRzVsZHlCemIzVnVaQ0J2WW1wbFkzUXNJSGRvWlhSb1pYSWdTRlJOVERVZ1FYVmthVzhnYjNJZ1YyVmlJRUYxWkdsdkxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR055WldGMFpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnY0dGeVpXNTBJRDBnYzJWc1ppNWZjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ2RtRnlJSFp2YkhWdFpTQTlJQ2hJYjNkc1pYSXVYMjExZEdWa0lIeDhJSE5sYkdZdVgyMTFkR1ZrSUh4OElITmxiR1l1WDNCaGNtVnVkQzVmYlhWMFpXUXBJRDhnTUNBNklITmxiR1l1WDNadmJIVnRaVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhjbVZ1ZEM1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdMeThnUTNKbFlYUmxJSFJvWlNCbllXbHVJRzV2WkdVZ1ptOXlJR052Ym5SeWIyeHNhVzVuSUhadmJIVnRaU0FvZEdobElITnZkWEpqWlNCM2FXeHNJR052Ym01bFkzUWdkRzhnZEdocGN5a3VYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1VnUFNBb2RIbHdaVzltSUVodmQyeGxjaTVqZEhndVkzSmxZWFJsUjJGcGJpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElEOGdTRzkzYkdWeUxtTjBlQzVqY21WaGRHVkhZV2x1VG05a1pTZ3BJRG9nU0c5M2JHVnlMbU4wZUM1amNtVmhkR1ZIWVdsdUtDazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNoMmIyeDFiV1VzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG5CaGRYTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1V1WTI5dWJtVmpkQ2hJYjNkc1pYSXViV0Z6ZEdWeVIyRnBiaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsSUQwZ2JtVjNJRUYxWkdsdktDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1RHbHpkR1Z1SUdadmNpQmxjbkp2Y25NZ0tHaDBkSEE2THk5a1pYWXVkek11YjNKbkwyaDBiV3cxTDNOd1pXTXRZWFYwYUc5eUxYWnBaWGN2YzNCbFl5NW9kRzFzSTIxbFpHbGhaWEp5YjNJcExseHVJQ0FnSUNBZ0lDQnpaV3htTGw5bGNuSnZja1p1SUQwZ2MyVnNaaTVmWlhKeWIzSk1hWE4wWlc1bGNpNWlhVzVrS0hObGJHWXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJWeWNtOXlKeXdnYzJWc1ppNWZaWEp5YjNKR2Jpd2dabUZzYzJVcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUV4cGMzUmxiaUJtYjNJZ0oyTmhibkJzWVhsMGFISnZkV2RvSnlCbGRtVnVkQ0IwYnlCc1pYUWdkWE1nYTI1dmR5QjBhR1VnYzI5MWJtUWdhWE1nY21WaFpIa3VYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyeHZZV1JHYmlBOUlITmxiR1l1WDJ4dllXUk1hWE4wWlc1bGNpNWlhVzVrS0hObGJHWXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvU0c5M2JHVnlMbDlqWVc1UWJHRjVSWFpsYm5Rc0lITmxiR1l1WDJ4dllXUkdiaXdnWm1Gc2MyVXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQnVaWGNnWVhWa2FXOGdibTlrWlM1Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmYm05a1pTNXpjbU1nUFNCd1lYSmxiblF1WDNOeVl6dGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmJtOWtaUzV3Y21Wc2IyRmtJRDBnSjJGMWRHOG5PMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG5admJIVnRaU0E5SUhadmJIVnRaU0FxSUVodmQyeGxjaTUyYjJ4MWJXVW9LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkNaV2RwYmlCc2IyRmthVzVuSUhSb1pTQnpiM1Z5WTJVdVhHNGdJQ0FnSUNBZ0lITmxiR1l1WDI1dlpHVXViRzloWkNncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WelpYUWdkR2hsSUhCaGNtRnRaWFJsY25NZ2IyWWdkR2hwY3lCemIzVnVaQ0IwYnlCMGFHVWdiM0pwWjJsdVlXd2djM1JoZEdVZ0tHWnZjaUJ5WldONVkyeGxLUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUYjNWdVpIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpYTmxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ2NHRnlaVzUwSUQwZ2MyVnNaaTVmY0dGeVpXNTBPMXh1WEc0Z0lDQWdJQ0F2THlCU1pYTmxkQ0JoYkd3Z2IyWWdkR2hsSUhCaGNtRnRaWFJsY25NZ2IyWWdkR2hwY3lCemIzVnVaQzVjYmlBZ0lDQWdJSE5sYkdZdVgyMTFkR1ZrSUQwZ2NHRnlaVzUwTGw5dGRYUmxaRHRjYmlBZ0lDQWdJSE5sYkdZdVgyeHZiM0FnUFNCd1lYSmxiblF1WDJ4dmIzQTdYRzRnSUNBZ0lDQnpaV3htTGw5MmIyeDFiV1VnUFNCd1lYSmxiblF1WDNadmJIVnRaVHRjYmlBZ0lDQWdJSE5sYkdZdVgzSmhkR1VnUFNCd1lYSmxiblF1WDNKaGRHVTdYRzRnSUNBZ0lDQnpaV3htTGw5elpXVnJJRDBnTUR0Y2JpQWdJQ0FnSUhObGJHWXVYM0poZEdWVFpXVnJJRDBnTUR0Y2JpQWdJQ0FnSUhObGJHWXVYM0JoZFhObFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCelpXeG1MbDlsYm1SbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCelpXeG1MbDl6Y0hKcGRHVWdQU0FuWDE5a1pXWmhkV3gwSnp0Y2JseHVJQ0FnSUNBZ0x5OGdSMlZ1WlhKaGRHVWdZU0J1WlhjZ1NVUWdjMjhnZEdoaGRDQnBkQ0JwYzI0bmRDQmpiMjVtZFhObFpDQjNhWFJvSUhSb1pTQndjbVYyYVc5MWN5QnpiM1Z1WkM1Y2JpQWdJQ0FnSUhObGJHWXVYMmxrSUQwZ0t5dEliM2RzWlhJdVgyTnZkVzUwWlhJN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJVkUxTU5TQkJkV1JwYnlCbGNuSnZjaUJzYVhOMFpXNWxjaUJqWVd4c1ltRmpheTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZaWEp5YjNKTWFYTjBaVzVsY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDOHZJRVpwY21VZ1lXNGdaWEp5YjNJZ1pYWmxiblFnWVc1a0lIQmhjM01nWW1GamF5QjBhR1VnWTI5a1pTNWNiaUFnSUNBZ0lITmxiR1l1WDNCaGNtVnVkQzVmWlcxcGRDZ25iRzloWkdWeWNtOXlKeXdnYzJWc1ppNWZhV1FzSUhObGJHWXVYMjV2WkdVdVpYSnliM0lnUHlCelpXeG1MbDl1YjJSbExtVnljbTl5TG1OdlpHVWdPaUF3S1R0Y2JseHVJQ0FnSUNBZ0x5OGdRMnhsWVhJZ2RHaGxJR1YyWlc1MElHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ2MyVnNaaTVmYm05a1pTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2RsY25KdmNpY3NJSE5sYkdZdVgyVnljbTl5Um00c0lHWmhiSE5sS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NGUk5URFVnUVhWa2FXOGdZMkZ1Y0d4aGVYUm9jbTkxWjJnZ2JHbHpkR1Z1WlhJZ1kyRnNiR0poWTJzdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJ4dllXUk1hWE4wWlc1bGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnY0dGeVpXNTBJRDBnYzJWc1ppNWZjR0Z5Wlc1ME8xeHVYRzRnSUNBZ0lDQXZMeUJTYjNWdVpDQjFjQ0IwYUdVZ1pIVnlZWFJwYjI0Z2RHOGdZV05qYjNWdWRDQm1iM0lnZEdobElHeHZkMlZ5SUhCeVpXTnBjMmx2YmlCcGJpQklWRTFNTlNCQmRXUnBieTVjYmlBZ0lDQWdJSEJoY21WdWRDNWZaSFZ5WVhScGIyNGdQU0JOWVhSb0xtTmxhV3dvYzJWc1ppNWZibTlrWlM1a2RYSmhkR2x2YmlBcUlERXdLU0F2SURFd08xeHVYRzRnSUNBZ0lDQXZMeUJUWlhSMWNDQmhJSE53Y21sMFpTQnBaaUJ1YjI1bElHbHpJR1JsWm1sdVpXUXVYRzRnSUNBZ0lDQnBaaUFvVDJKcVpXTjBMbXRsZVhNb2NHRnlaVzUwTGw5emNISnBkR1VwTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J3WVhKbGJuUXVYM053Y21sMFpTQTlJSHRmWDJSbFptRjFiSFE2SUZzd0xDQndZWEpsYm5RdVgyUjFjbUYwYVc5dUlDb2dNVEF3TUYxOU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvY0dGeVpXNTBMbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NHRnlaVzUwTGw5emRHRjBaU0E5SUNkc2IyRmtaV1FuTzF4dUlDQWdJQ0FnSUNCd1lYSmxiblF1WDJWdGFYUW9KMnh2WVdRbktUdGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MExsOXNiMkZrVVhWbGRXVW9LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1EyeGxZWElnZEdobElHVjJaVzUwSUd4cGMzUmxibVZ5TGx4dUlDQWdJQ0FnYzJWc1ppNWZibTlrWlM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtFaHZkMnhsY2k1ZlkyRnVVR3hoZVVWMlpXNTBMQ0J6Wld4bUxsOXNiMkZrUm00c0lHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5b3FJRWhsYkhCbGNpQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lIWmhjaUJqWVdOb1pTQTlJSHQ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJDZFdabVpYSWdZU0J6YjNWdVpDQm1jbTl0SUZWU1RDd2dSR0YwWVNCVlVra2diM0lnWTJGamFHVWdZVzVrSUdSbFkyOWtaU0IwYnlCaGRXUnBieUJ6YjNWeVkyVWdLRmRsWWlCQmRXUnBieUJCVUVrcExseHVJQ0FnS2lCQWNHRnlZVzBnSUh0SWIzZHNmU0J6Wld4bVhHNGdJQ0FxTDF4dUlDQjJZWElnYkc5aFpFSjFabVpsY2lBOUlHWjFibU4wYVc5dUtITmxiR1lwSUh0Y2JpQWdJQ0IyWVhJZ2RYSnNJRDBnYzJWc1ppNWZjM0pqTzF4dVhHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2RHaGxJR0oxWm1abGNpQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHTmhZMmhsWkNCaGJtUWdkWE5sSUdsMElHbHVjM1JsWVdRdVhHNGdJQ0FnYVdZZ0tHTmhZMmhsVzNWeWJGMHBJSHRjYmlBZ0lDQWdJQzh2SUZObGRDQjBhR1VnWkhWeVlYUnBiMjRnWm5KdmJTQjBhR1VnWTJGamFHVXVYRzRnSUNBZ0lDQnpaV3htTGw5a2RYSmhkR2x2YmlBOUlHTmhZMmhsVzNWeWJGMHVaSFZ5WVhScGIyNDdYRzVjYmlBZ0lDQWdJQzh2SUV4dllXUWdkR2hsSUhOdmRXNWtJR2x1ZEc4Z2RHaHBjeUJJYjNkc0xseHVJQ0FnSUNBZ2JHOWhaRk52ZFc1a0tITmxiR1lwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0M5ZVpHRjBZVHBiWGp0ZEt6dGlZWE5sTmpRc0x5NTBaWE4wS0hWeWJDa3BJSHRjYmlBZ0lDQWdJQzh2SUVSbFkyOWtaU0IwYUdVZ1ltRnpaVFkwSUdSaGRHRWdWVkpKSUhkcGRHaHZkWFFnV0VoU0xDQnphVzVqWlNCemIyMWxJR0p5YjNkelpYSnpJR1J2YmlkMElITjFjSEJ2Y25RZ2FYUXVYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR0YwYjJJb2RYSnNMbk53YkdsMEtDY3NKeWxiTVYwcE8xeHVJQ0FnSUNBZ2RtRnlJR1JoZEdGV2FXVjNJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR1JoZEdFdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlWWnBaWGRiYVYwZ1BTQmtZWFJoTG1Ob1lYSkRiMlJsUVhRb2FTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1JsWTI5a1pVRjFaR2x2UkdGMFlTaGtZWFJoVm1sbGR5NWlkV1ptWlhJc0lITmxiR1lwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJNYjJGa0lIUm9aU0JpZFdabVpYSWdabkp2YlNCMGFHVWdWVkpNTGx4dUlDQWdJQ0FnZG1GeUlIaG9jaUE5SUc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZENncE8xeHVJQ0FnSUNBZ2VHaHlMbTl3Wlc0b0owZEZWQ2NzSUhWeWJDd2dkSEoxWlNrN1hHNGdJQ0FnSUNCNGFISXVkMmwwYUVOeVpXUmxiblJwWVd4eklEMGdjMlZzWmk1ZmVHaHlWMmwwYUVOeVpXUmxiblJwWVd4ek8xeHVJQ0FnSUNBZ2VHaHlMbkpsYzNCdmJuTmxWSGx3WlNBOUlDZGhjbkpoZVdKMVptWmxjaWM3WEc0Z0lDQWdJQ0I0YUhJdWIyNXNiMkZrSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCM1pTQm5aWFFnWVNCemRXTmpaWE56Wm5Wc0lISmxjM0J2Ym5ObElHSmhZMnN1WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMlJsSUQwZ0tIaG9jaTV6ZEdGMGRYTWdLeUFuSnlsYk1GMDdYRzRnSUNBZ0lDQWdJR2xtSUNoamIyUmxJQ0U5UFNBbk1DY2dKaVlnWTI5a1pTQWhQVDBnSnpJbklDWW1JR052WkdVZ0lUMDlJQ2N6SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjJ4dllXUmxjbkp2Y2ljc0lHNTFiR3dzSUNkR1lXbHNaV1FnYkc5aFpHbHVaeUJoZFdScGJ5Qm1hV3hsSUhkcGRHZ2djM1JoZEhWek9pQW5JQ3NnZUdoeUxuTjBZWFIxY3lBcklDY3VKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdaR1ZqYjJSbFFYVmthVzlFWVhSaEtIaG9jaTV5WlhOd2IyNXpaU3dnYzJWc1ppazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdlR2h5TG05dVpYSnliM0lnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxjbVVnYVhNZ1lXNGdaWEp5YjNJc0lITjNhWFJqYUNCMGJ5QklWRTFNTlNCQmRXUnBieTVjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmFIUnRiRFVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM2RsWWtGMVpHbHZJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZjMjkxYm1SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdOaFkyaGxXM1Z5YkYwN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1c2IyRmtLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCellXWmxXR2h5VTJWdVpDaDRhSElwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaQ0IwYUdVZ1dFaFNJSEpsY1hWbGMzUWdkM0poY0hCbFpDQnBiaUJoSUhSeWVTOWpZWFJqYUM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0I0YUhJZ1dFaFNJSFJ2SUhObGJtUXVYRzRnSUNBcUwxeHVJQ0IyWVhJZ2MyRm1aVmhvY2xObGJtUWdQU0JtZFc1amRHbHZiaWg0YUhJcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdlR2h5TG5ObGJtUW9LVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0I0YUhJdWIyNWxjbkp2Y2lncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1ZqYjJSbElHRjFaR2x2SUdSaGRHRWdabkp2YlNCaGJpQmhjbkpoZVNCaWRXWm1aWEl1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMEZ5Y21GNVFuVm1abVZ5ZlNCaGNuSmhlV0oxWm1abGNpQlVhR1VnWVhWa2FXOGdaR0YwWVM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3U0c5M2JIMGdJQ0FnSUNBZ0lITmxiR1pjYmlBZ0lDb3ZYRzRnSUhaaGNpQmtaV052WkdWQmRXUnBiMFJoZEdFZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVdKMVptWmxjaXdnYzJWc1ppa2dlMXh1SUNBZ0lDOHZJRVJsWTI5a1pTQjBhR1VnWW5WbVptVnlJR2x1ZEc4Z1lXNGdZWFZrYVc4Z2MyOTFjbU5sTGx4dUlDQWdJRWh2ZDJ4bGNpNWpkSGd1WkdWamIyUmxRWFZrYVc5RVlYUmhLR0Z5Y21GNVluVm1abVZ5TENCbWRXNWpkR2x2YmloaWRXWm1aWElwSUh0Y2JpQWdJQ0FnSUdsbUlDaGlkV1ptWlhJZ0ppWWdjMlZzWmk1ZmMyOTFibVJ6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWYmMyVnNaaTVmYzNKalhTQTlJR0oxWm1abGNqdGNiaUFnSUNBZ0lDQWdiRzloWkZOdmRXNWtLSE5sYkdZc0lHSjFabVpsY2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2RzYjJGa1pYSnliM0luTENCdWRXeHNMQ0FuUkdWamIyUnBibWNnWVhWa2FXOGdaR0YwWVNCbVlXbHNaV1F1SnlrN1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk52ZFc1a0lHbHpJRzV2ZHlCc2IyRmtaV1FzSUhOdklHWnBibWx6YUNCelpYUjBhVzVuSUdWMlpYSjVkR2hwYm1jZ2RYQWdZVzVrSUdacGNtVWdkR2hsSUd4dllXUmxaQ0JsZG1WdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1NHOTNiSDBnYzJWc1pseHVJQ0FnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUdKMVptWmxjaUJVYUdVZ1pHVmpiMlJsWkNCaWRXWm1aWElnYzI5MWJtUWdjMjkxY21ObExseHVJQ0FnS2k5Y2JpQWdkbUZ5SUd4dllXUlRiM1Z1WkNBOUlHWjFibU4wYVc5dUtITmxiR1lzSUdKMVptWmxjaWtnZTF4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdhV1lnS0dKMVptWmxjaUFtSmlBaGMyVnNaaTVmWkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYMlIxY21GMGFXOXVJRDBnWW5WbVptVnlMbVIxY21GMGFXOXVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRk5sZEhWd0lHRWdjM0J5YVhSbElHbG1JRzV2Ym1VZ2FYTWdaR1ZtYVc1bFpDNWNiaUFnSUNCcFppQW9UMkpxWldOMExtdGxlWE1vYzJWc1ppNWZjM0J5YVhSbEtTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYM053Y21sMFpTQTlJSHRmWDJSbFptRjFiSFE2SUZzd0xDQnpaV3htTGw5a2RYSmhkR2x2YmlBcUlERXdNREJkZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCR2FYSmxJSFJvWlNCc2IyRmtaV1FnWlhabGJuUXVYRzRnSUNBZ2FXWWdLSE5sYkdZdVgzTjBZWFJsSUNFOVBTQW5iRzloWkdWa0p5a2dlMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzUmhkR1VnUFNBbmJHOWhaR1ZrSnp0Y2JpQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyeHZZV1FuS1R0Y2JpQWdJQ0FnSUhObGJHWXVYMnh2WVdSUmRXVjFaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBkWEFnZEdobElHRjFaR2x2SUdOdmJuUmxlSFFnZDJobGJpQmhkbUZwYkdGaWJHVXNJRzl5SUhOM2FYUmphQ0IwYnlCSVZFMU1OU0JCZFdScGJ5QnRiMlJsTGx4dUlDQWdLaTljYmlBZ2RtRnlJSE5sZEhWd1FYVmthVzlEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2QyVWdZWEpsSUhWemFXNW5JRmRsWWlCQmRXUnBieUJoYm1RZ2MyVjBkWEFnZEdobElFRjFaR2x2UTI5dWRHVjRkQ0JwWmlCM1pTQmhjbVV1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1FYVmthVzlEYjI1MFpYaDBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0JJYjNkc1pYSXVZM1I0SUQwZ2JtVjNJRUYxWkdsdlEyOXVkR1Y0ZENncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2QyVmlhMmwwUVhWa2FXOURiMjUwWlhoMElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQkliM2RzWlhJdVkzUjRJRDBnYm1WM0lIZGxZbXRwZEVGMVpHbHZRMjl1ZEdWNGRDZ3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdTRzkzYkdWeUxuVnphVzVuVjJWaVFYVmthVzhnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJRWh2ZDJ4bGNpNTFjMmx1WjFkbFlrRjFaR2x2SUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJobFkyc2dhV1lnWVNCM1pXSjJhV1YzSUdseklHSmxhVzVuSUhWelpXUWdiMjRnYVU5VE9DQnZjaUJsWVhKc2FXVnlJQ2h5WVhSb1pYSWdkR2hoYmlCMGFHVWdZbkp2ZDNObGNpa3VYRzRnSUNBZ0x5OGdTV1lnYVhRZ2FYTXNJR1JwYzJGaWJHVWdWMlZpSUVGMVpHbHZJR0Z6SUdsMElHTmhkWE5sY3lCamNtRnphR2x1Wnk1Y2JpQWdJQ0IyWVhJZ2FVOVRJRDBnS0M5cFVDaG9iMjVsZkc5a2ZHRmtLUzh1ZEdWemRDaEliM2RzWlhJdVgyNWhkbWxuWVhSdmNpQW1KaUJJYjNkc1pYSXVYMjVoZG1sbllYUnZjaTV3YkdGMFptOXliU2twTzF4dUlDQWdJSFpoY2lCaGNIQldaWEp6YVc5dUlEMGdTRzkzYkdWeUxsOXVZWFpwWjJGMGIzSWdKaVlnU0c5M2JHVnlMbDl1WVhacFoyRjBiM0l1WVhCd1ZtVnljMmx2Ymk1dFlYUmphQ2d2VDFNZ0tGeGNaQ3NwWHloY1hHUXJLVjgvS0Z4Y1pDc3BQeThwTzF4dUlDQWdJSFpoY2lCMlpYSnphVzl1SUQwZ1lYQndWbVZ5YzJsdmJpQS9JSEJoY25ObFNXNTBLR0Z3Y0ZabGNuTnBiMjViTVYwc0lERXdLU0E2SUc1MWJHdzdYRzRnSUNBZ2FXWWdLR2xQVXlBbUppQjJaWEp6YVc5dUlDWW1JSFpsY25OcGIyNGdQQ0E1S1NCN1hHNGdJQ0FnSUNCMllYSWdjMkZtWVhKcElEMGdMM05oWm1GeWFTOHVkR1Z6ZENoSWIzZHNaWEl1WDI1aGRtbG5ZWFJ2Y2lBbUppQkliM2RzWlhJdVgyNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVkRzlNYjNkbGNrTmhjMlVvS1NrN1hHNGdJQ0FnSUNCcFppQW9TRzkzYkdWeUxsOXVZWFpwWjJGMGIzSWdKaVlnU0c5M2JHVnlMbDl1WVhacFoyRjBiM0l1YzNSaGJtUmhiRzl1WlNBbUppQWhjMkZtWVhKcElIeDhJRWh2ZDJ4bGNpNWZibUYyYVdkaGRHOXlJQ1ltSUNGSWIzZHNaWEl1WDI1aGRtbG5ZWFJ2Y2k1emRHRnVaR0ZzYjI1bElDWW1JQ0Z6WVdaaGNta3BJSHRjYmlBZ0lDQWdJQ0FnU0c5M2JHVnlMblZ6YVc1blYyVmlRWFZrYVc4Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCRGNtVmhkR1VnWVc1a0lHVjRjRzl6WlNCMGFHVWdiV0Z6ZEdWeUlFZGhhVzVPYjJSbElIZG9aVzRnZFhOcGJtY2dWMlZpSUVGMVpHbHZJQ2gxYzJWbWRXd2dabTl5SUhCc2RXZHBibk1nYjNJZ1lXUjJZVzVqWldRZ2RYTmhaMlVwTGx4dUlDQWdJR2xtSUNoSWIzZHNaWEl1ZFhOcGJtZFhaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdTRzkzYkdWeUxtMWhjM1JsY2tkaGFXNGdQU0FvZEhsd1pXOW1JRWh2ZDJ4bGNpNWpkSGd1WTNKbFlYUmxSMkZwYmlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUQ4Z1NHOTNiR1Z5TG1OMGVDNWpjbVZoZEdWSFlXbHVUbTlrWlNncElEb2dTRzkzYkdWeUxtTjBlQzVqY21WaGRHVkhZV2x1S0NrN1hHNGdJQ0FnSUNCSWIzZHNaWEl1YldGemRHVnlSMkZwYmk1bllXbHVMbk5sZEZaaGJIVmxRWFJVYVcxbEtFaHZkMnhsY2k1ZmJYVjBaV1FnUHlBd0lEb2dNU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQkliM2RzWlhJdWJXRnpkR1Z5UjJGcGJpNWpiMjV1WldOMEtFaHZkMnhsY2k1amRIZ3VaR1Z6ZEdsdVlYUnBiMjRwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZKbExYSjFiaUIwYUdVZ2MyVjBkWEFnYjI0Z1NHOTNiR1Z5TGx4dUlDQWdJRWh2ZDJ4bGNpNWZjMlYwZFhBb0tUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQlpHUWdjM1Z3Y0c5eWRDQm1iM0lnUVUxRUlDaEJjM2x1WTJoeWIyNXZkWE1nVFc5a2RXeGxJRVJsWm1sdWFYUnBiMjRwSUd4cFluSmhjbWxsY3lCemRXTm9JR0Z6SUhKbGNYVnBjbVV1YW5NdVhHNGdJR2xtSUNoMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwSUh0Y2JpQWdJQ0JrWldacGJtVW9XMTBzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ1NHOTNiR1Z5T2lCSWIzZHNaWElzWEc0Z0lDQWdJQ0FnSUVodmQydzZJRWh2ZDJ4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZMeUJCWkdRZ2MzVndjRzl5ZENCbWIzSWdRMjl0Ylc5dVNsTWdiR2xpY21GeWFXVnpJSE4xWTJnZ1lYTWdZbkp2ZDNObGNtbG1lUzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmxlSEJ2Y25SeklDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdWNGNHOXlkSE11U0c5M2JHVnlJRDBnU0c5M2JHVnlPMXh1SUNBZ0lHVjRjRzl5ZEhNdVNHOTNiQ0E5SUVodmQydzdYRzRnSUgxY2JseHVJQ0F2THlCRVpXWnBibVVnWjJ4dlltRnNiSGtnYVc0Z1kyRnpaU0JCVFVRZ2FYTWdibTkwSUdGMllXbHNZV0pzWlNCdmNpQjFiblZ6WldRdVhHNGdJR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lIZHBibVJ2ZHk1SWIzZHNaWEpIYkc5aVlXd2dQU0JJYjNkc1pYSkhiRzlpWVd3N1hHNGdJQ0FnZDJsdVpHOTNMa2h2ZDJ4bGNpQTlJRWh2ZDJ4bGNqdGNiaUFnSUNCM2FXNWtiM2N1U0c5M2JDQTlJRWh2ZDJ3N1hHNGdJQ0FnZDJsdVpHOTNMbE52ZFc1a0lEMGdVMjkxYm1RN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIc2dMeThnUVdSa0lIUnZJR2RzYjJKaGJDQnBiaUJPYjJSbExtcHpJQ2htYjNJZ2RHVnpkR2x1Wnl3Z1pYUmpLUzVjYmlBZ0lDQm5iRzlpWVd3dVNHOTNiR1Z5UjJ4dlltRnNJRDBnU0c5M2JHVnlSMnh2WW1Gc08xeHVJQ0FnSUdkc2IySmhiQzVJYjNkc1pYSWdQU0JJYjNkc1pYSTdYRzRnSUNBZ1oyeHZZbUZzTGtodmQyd2dQU0JJYjNkc08xeHVJQ0FnSUdkc2IySmhiQzVUYjNWdVpDQTlJRk52ZFc1a08xeHVJQ0I5WEc1OUtTZ3BPMXh1WEc1Y2JpOHFJVnh1SUNvZ0lGTndZWFJwWVd3Z1VHeDFaMmx1SUMwZ1FXUmtjeUJ6ZFhCd2IzSjBJR1p2Y2lCemRHVnlaVzhnWVc1a0lETkVJR0YxWkdsdklIZG9aWEpsSUZkbFlpQkJkV1JwYnlCcGN5QnpkWEJ3YjNKMFpXUXVYRzRnS2lBZ1hHNGdLaUFnYUc5M2JHVnlMbXB6SUhZeUxqQXVNVEpjYmlBcUlDQm9iM2RzWlhKcWN5NWpiMjFjYmlBcVhHNGdLaUFnS0dNcElESXdNVE10TWpBeE9Dd2dTbUZ0WlhNZ1UybHRjSE52YmlCdlppQkhiMnhrUm1seVpTQlRkSFZrYVc5elhHNGdLaUFnWjI5c1pHWnBjbVZ6ZEhWa2FXOXpMbU52YlZ4dUlDcGNiaUFxSUNCTlNWUWdUR2xqWlc1elpWeHVJQ292WEc1Y2JpaG1kVzVqZEdsdmJpZ3BJSHRjYmx4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdMeThnVTJWMGRYQWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNCSWIzZHNaWEpIYkc5aVlXd3VjSEp2ZEc5MGVYQmxMbDl3YjNNZ1BTQmJNQ3dnTUN3Z01GMDdYRzRnSUVodmQyeGxja2RzYjJKaGJDNXdjbTkwYjNSNWNHVXVYMjl5YVdWdWRHRjBhVzl1SUQwZ1d6QXNJREFzSUMweExDQXdMQ0F4TENBd1hUdGNibHh1SUNBdktpb2dSMnh2WW1Gc0lFMWxkR2h2WkhNZ0tpb3ZYRzRnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFaGxiSEJsY2lCdFpYUm9iMlFnZEc4Z2RYQmtZWFJsSUhSb1pTQnpkR1Z5Wlc4Z2NHRnVibWx1WnlCd2IzTnBkR2x2YmlCdlppQmhiR3dnWTNWeWNtVnVkQ0JJYjNkc2N5NWNiaUFnSUNvZ1JuVjBkWEpsSUVodmQyeHpJSGRwYkd3Z2JtOTBJSFZ6WlNCMGFHbHpJSFpoYkhWbElIVnViR1Z6Y3lCbGVIQnNhV05wZEd4NUlITmxkQzVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQndZVzRnUVNCMllXeDFaU0J2WmlBdE1TNHdJR2x6SUdGc2JDQjBhR1VnZDJGNUlHeGxablFnWVc1a0lERXVNQ0JwY3lCaGJHd2dkR2hsSUhkaGVTQnlhV2RvZEM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3U0c5M2JHVnlMMDUxYldKbGNuMGdJQ0FnSUZObGJHWWdiM0lnWTNWeWNtVnVkQ0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QjJZV3gxWlM1Y2JpQWdJQ292WEc0Z0lFaHZkMnhsY2tkc2IySmhiQzV3Y205MGIzUjVjR1V1YzNSbGNtVnZJRDBnWm5WdVkzUnBiMjRvY0dGdUtTQjdYRzRnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z1UzUnZjQ0J5YVdkb2RDQm9aWEpsSUdsbUlHNXZkQ0IxYzJsdVp5QlhaV0lnUVhWa2FXOHVYRzRnSUNBZ2FXWWdLQ0Z6Wld4bUxtTjBlQ0I4ZkNBaGMyVnNaaTVqZEhndWJHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJHd2dTRzkzYkhNZ1lXNWtJSFZ3WkdGMFpTQjBhR1ZwY2lCemRHVnlaVzhnY0dGdWJtbHVaeTVjYmlBZ0lDQm1iM0lnS0haaGNpQnBQWE5sYkdZdVgyaHZkMnh6TG14bGJtZDBhQzB4T3lCcFBqMHdPeUJwTFMwcElIdGNiaUFnSUNBZ0lITmxiR1l1WDJodmQyeHpXMmxkTG5OMFpYSmxieWh3WVc0cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNCd2IzTnBkR2x2YmlCdlppQjBhR1VnYkdsemRHVnVaWElnYVc0Z00wUWdZMkZ5ZEdWemFXRnVJSE53WVdObExpQlRiM1Z1WkhNZ2RYTnBibWRjYmlBZ0lDb2dNMFFnY0c5emFYUnBiMjRnZDJsc2JDQmlaU0J5Wld4aGRHbDJaU0IwYnlCMGFHVWdiR2x6ZEdWdVpYSW5jeUJ3YjNOcGRHbHZiaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjRJRlJvWlNCNExYQnZjMmwwYVc5dUlHOW1JSFJvWlNCc2FYTjBaVzVsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0I1SUZSb1pTQjVMWEJ2YzJsMGFXOXVJRzltSUhSb1pTQnNhWE4wWlc1bGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCNklGUm9aU0I2TFhCdmMybDBhVzl1SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeUwwRnljbUY1ZlNBZ0lGTmxiR1lnYjNJZ1kzVnljbVZ1ZENCc2FYTjBaVzVsY2lCd2IzTnBkR2x2Ymk1Y2JpQWdJQ292WEc0Z0lFaHZkMnhsY2tkc2IySmhiQzV3Y205MGIzUjVjR1V1Y0c5eklEMGdablZ1WTNScGIyNG9lQ3dnZVN3Z2Vpa2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dklGTjBiM0FnY21sbmFIUWdhR1Z5WlNCcFppQnViM1FnZFhOcGJtY2dWMlZpSUVGMVpHbHZMbHh1SUNBZ0lHbG1JQ2doYzJWc1ppNWpkSGdnZkh3Z0lYTmxiR1l1WTNSNExteHBjM1JsYm1WeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJUWlhRZ2RHaGxJR1JsWm1GMWJIUnpJR1p2Y2lCdmNIUnBiMjVoYkNBbmVTY2dKaUFuZWljdVhHNGdJQ0FnZVNBOUlDaDBlWEJsYjJZZ2VTQWhQVDBnSjI1MWJXSmxjaWNwSUQ4Z2MyVnNaaTVmY0c5eld6RmRJRG9nZVR0Y2JpQWdJQ0I2SUQwZ0tIUjVjR1Z2WmlCNklDRTlQU0FuYm5WdFltVnlKeWtnUHlCelpXeG1MbDl3YjNOYk1sMGdPaUI2TzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCNElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnYzJWc1ppNWZjRzl6SUQwZ1czZ3NJSGtzSUhwZE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbkJ2YzJsMGFXOXVXQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWpkSGd1YkdsemRHVnVaWEl1Y0c5emFYUnBiMjVZTG5ObGRGUmhjbWRsZEVGMFZHbHRaU2h6Wld4bUxsOXdiM05iTUYwc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VzSURBdU1TazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbkJ2YzJsMGFXOXVXUzV6WlhSVVlYSm5aWFJCZEZScGJXVW9jMlZzWmk1ZmNHOXpXekZkTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxMQ0F3TGpFcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTG1OMGVDNXNhWE4wWlc1bGNpNXdiM05wZEdsdmJsb3VjMlYwVkdGeVoyVjBRWFJVYVcxbEtITmxiR1l1WDNCdmMxc3lYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTd2dNQzR4S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVZM1I0TG14cGMzUmxibVZ5TG5ObGRGQnZjMmwwYVc5dUtITmxiR1l1WDNCdmMxc3dYU3dnYzJWc1ppNWZjRzl6V3pGZExDQnpaV3htTGw5d2IzTmJNbDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaaTVmY0c5ek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNCa2FYSmxZM1JwYjI0Z2RHaGxJR3hwYzNSbGJtVnlJR2x6SUhCdmFXNTBhVzVuSUdsdUlIUm9aU0F6UkNCallYSjBaWE5wWVc0Z2MzQmhZMlV1WEc0Z0lDQXFJRUVnWm5KdmJuUWdZVzVrSUhWd0lIWmxZM1J2Y2lCdGRYTjBJR0psSUhCeWIzWnBaR1ZrTGlCVWFHVWdabkp2Ym5RZ2FYTWdkR2hsSUdScGNtVmpkR2x2YmlCMGFHVmNiaUFnSUNvZ1ptRmpaU0J2WmlCMGFHVWdiR2x6ZEdWdVpYSWdhWE1nY0c5cGJuUnBibWNzSUdGdVpDQjFjQ0JwY3lCMGFHVWdaR2x5WldOMGFXOXVJSFJvWlNCMGIzQWdiMllnZEdobFhHNGdJQ0FxSUd4cGMzUmxibVZ5SUdseklIQnZhVzUwYVc1bkxpQlVhSFZ6TENCMGFHVnpaU0IyWVd4MVpYTWdZWEpsSUdWNGNHVmpkR1ZrSUhSdklHSmxJR0YwSUhKcFoyaDBJR0Z1WjJ4bGMxeHVJQ0FnS2lCbWNtOXRJR1ZoWTJnZ2IzUm9aWEl1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdlQ0FnSUZSb1pTQjRMVzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjVJQ0FnVkdobElIa3RiM0pwWlc1MFlYUnBiMjRnYjJZZ2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIb2dJQ0JVYUdVZ2VpMXZjbWxsYm5SaGRHbHZiaUJ2WmlCMGFHVWdiR2x6ZEdWdVpYSXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VGVndJRlJvWlNCNExXOXlhV1Z1ZEdGMGFXOXVJRzltSUhSb1pTQjBiM0FnYjJZZ2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIbFZjQ0JVYUdVZ2VTMXZjbWxsYm5SaGRHbHZiaUJ2WmlCMGFHVWdkRzl3SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjZWWEFnVkdobElIb3RiM0pwWlc1MFlYUnBiMjRnYjJZZ2RHaGxJSFJ2Y0NCdlppQjBhR1VnYkdsemRHVnVaWEl1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4bGNpOUJjbkpoZVgwZ0lDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0J2Y21sbGJuUmhkR2x2YmlCMlpXTjBiM0p6TGx4dUlDQWdLaTljYmlBZ1NHOTNiR1Z5UjJ4dlltRnNMbkJ5YjNSdmRIbHdaUzV2Y21sbGJuUmhkR2x2YmlBOUlHWjFibU4wYVc5dUtIZ3NJSGtzSUhvc0lIaFZjQ3dnZVZWd0xDQjZWWEFwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMeUJUZEc5d0lISnBaMmgwSUdobGNtVWdhV1lnYm05MElIVnphVzVuSUZkbFlpQkJkV1JwYnk1Y2JpQWdJQ0JwWmlBb0lYTmxiR1l1WTNSNElIeDhJQ0Z6Wld4bUxtTjBlQzVzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1UyVjBJSFJvWlNCa1pXWmhkV3gwY3lCbWIzSWdiM0IwYVc5dVlXd2dKM2tuSUNZZ0ozb25MbHh1SUNBZ0lIWmhjaUJ2Y2lBOUlITmxiR1l1WDI5eWFXVnVkR0YwYVc5dU8xeHVJQ0FnSUhrZ1BTQW9kSGx3Wlc5bUlIa2dJVDA5SUNkdWRXMWlaWEluS1NBL0lHOXlXekZkSURvZ2VUdGNiaUFnSUNCNklEMGdLSFI1Y0dWdlppQjZJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QnZjbHN5WFNBNklIbzdYRzRnSUNBZ2VGVndJRDBnS0hSNWNHVnZaaUI0VlhBZ0lUMDlJQ2R1ZFcxaVpYSW5LU0EvSUc5eVd6TmRJRG9nZUZWd08xeHVJQ0FnSUhsVmNDQTlJQ2gwZVhCbGIyWWdlVlZ3SUNFOVBTQW5iblZ0WW1WeUp5a2dQeUJ2Y2xzMFhTQTZJSGxWY0R0Y2JpQWdJQ0I2VlhBZ1BTQW9kSGx3Wlc5bUlIcFZjQ0FoUFQwZ0oyNTFiV0psY2ljcElEOGdiM0piTlYwZ09pQjZWWEE3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhnZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZjbWxsYm5SaGRHbHZiaUE5SUZ0NExDQjVMQ0I2TENCNFZYQXNJSGxWY0N3Z2VsVndYVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXeG1MbU4wZUM1c2FYTjBaVzVsY2k1bWIzSjNZWEprV0NBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVqZEhndWJHbHpkR1Z1WlhJdVptOXlkMkZ5WkZndWMyVjBWR0Z5WjJWMFFYUlVhVzFsS0hnc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VzSURBdU1TazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbVp2Y25kaGNtUlpMbk5sZEZSaGNtZGxkRUYwVkdsdFpTaDVMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbExDQXdMakVwTzF4dUlDQWdJQ0FnSUNCelpXeG1MbU4wZUM1c2FYTjBaVzVsY2k1bWIzSjNZWEprV2k1elpYUlVZWEpuWlhSQmRGUnBiV1VvZWl3Z1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaU3dnTUM0eEtUdGNiaUFnSUNBZ0lDQWdjMlZzWmk1amRIZ3ViR2x6ZEdWdVpYSXVkWEJZTG5ObGRGUmhjbWRsZEVGMFZHbHRaU2g0TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxMQ0F3TGpFcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTG1OMGVDNXNhWE4wWlc1bGNpNTFjRmt1YzJWMFZHRnlaMlYwUVhSVWFXMWxLSGtzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXNJREF1TVNrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNExteHBjM1JsYm1WeUxuVndXaTV6WlhSVVlYSm5aWFJCZEZScGJXVW9laXdnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTd2dNQzR4S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVZM1I0TG14cGMzUmxibVZ5TG5ObGRFOXlhV1Z1ZEdGMGFXOXVLSGdzSUhrc0lIb3NJSGhWY0N3Z2VWVndMQ0I2VlhBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM0k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FJRWR5YjNWd0lFMWxkR2h2WkhNZ0tpb3ZYRzRnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaQ0J1WlhjZ2NISnZjR1Z5ZEdsbGN5QjBieUIwYUdVZ1kyOXlaU0JwYm1sMExseHVJQ0FnS2lCQWNHRnlZVzBnSUh0R2RXNWpkR2x2Ym4wZ1gzTjFjR1Z5SUVOdmNtVWdhVzVwZENCdFpYUm9iMlF1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FxTDF4dUlDQkliM2RzTG5CeWIzUnZkSGx3WlM1cGJtbDBJRDBnS0daMWJtTjBhVzl1S0Y5emRYQmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHZLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJSFZ6WlhJdFpHVm1hVzVsWkNCa1pXWmhkV3gwSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNCelpXeG1MbDl2Y21sbGJuUmhkR2x2YmlBOUlHOHViM0pwWlc1MFlYUnBiMjRnZkh3Z1d6RXNJREFzSURCZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmYzNSbGNtVnZJRDBnYnk1emRHVnlaVzhnZkh3Z2JuVnNiRHRjYmlBZ0lDQWdJSE5sYkdZdVgzQnZjeUE5SUc4dWNHOXpJSHg4SUc1MWJHdzdYRzRnSUNBZ0lDQnpaV3htTGw5d1lXNXVaWEpCZEhSeUlEMGdlMXh1SUNBZ0lDQWdJQ0JqYjI1bFNXNXVaWEpCYm1kc1pUb2dkSGx3Wlc5bUlHOHVZMjl1WlVsdWJtVnlRVzVuYkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NWpiMjVsU1c1dVpYSkJibWRzWlNBNklETTJNQ3hjYmlBZ0lDQWdJQ0FnWTI5dVpVOTFkR1Z5UVc1bmJHVTZJSFI1Y0dWdlppQnZMbU52Ym1WUGRYUmxja0Z1WjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVZMjl1WlU5MWRHVnlRVzVuYkdVZ09pQXpOakFzWEc0Z0lDQWdJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNDZJSFI1Y0dWdlppQnZMbU52Ym1WUGRYUmxja2RoYVc0Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NWpiMjVsVDNWMFpYSkhZV2x1SURvZ01DeGNiaUFnSUNBZ0lDQWdaR2x6ZEdGdVkyVk5iMlJsYkRvZ2RIbHdaVzltSUc4dVpHbHpkR0Z1WTJWTmIyUmxiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2TG1ScGMzUmhibU5sVFc5a1pXd2dPaUFuYVc1MlpYSnpaU2NzWEc0Z0lDQWdJQ0FnSUcxaGVFUnBjM1JoYm1ObE9pQjBlWEJsYjJZZ2J5NXRZWGhFYVhOMFlXNWpaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2TG0xaGVFUnBjM1JoYm1ObElEb2dNVEF3TURBc1hHNGdJQ0FnSUNBZ0lIQmhibTVwYm1kTmIyUmxiRG9nZEhsd1pXOW1JRzh1Y0dGdWJtbHVaMDF2WkdWc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVjR0Z1Ym1sdVowMXZaR1ZzSURvZ0owaFNWRVluTEZ4dUlDQWdJQ0FnSUNCeVpXWkVhWE4wWVc1alpUb2dkSGx3Wlc5bUlHOHVjbVZtUkdsemRHRnVZMlVnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYnk1eVpXWkVhWE4wWVc1alpTQTZJREVzWEc0Z0lDQWdJQ0FnSUhKdmJHeHZabVpHWVdOMGIzSTZJSFI1Y0dWdlppQnZMbkp2Ykd4dlptWkdZV04wYjNJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NXliMnhzYjJabVJtRmpkRzl5SURvZ01WeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdMeThnVTJWMGRYQWdaWFpsYm5RZ2JHbHpkR1Z1WlhKekxseHVJQ0FnSUNBZ2MyVnNaaTVmYjI1emRHVnlaVzhnUFNCdkxtOXVjM1JsY21WdklEOGdXM3RtYmpvZ2J5NXZibk4wWlhKbGIzMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5CdmN5QTlJRzh1YjI1d2IzTWdQeUJiZTJadU9pQnZMbTl1Y0c5emZWMGdPaUJiWFR0Y2JpQWdJQ0FnSUhObGJHWXVYMjl1YjNKcFpXNTBZWFJwYjI0Z1BTQnZMbTl1YjNKcFpXNTBZWFJwYjI0Z1B5QmJlMlp1T2lCdkxtOXViM0pwWlc1MFlYUnBiMjU5WFNBNklGdGRPMXh1WEc0Z0lDQWdJQ0F2THlCRGIyMXdiR1YwWlNCcGJtbDBhV3hwZW1GMGFXOXVJSGRwZEdnZ2FHOTNiR1Z5TG1weklHTnZjbVVuY3lCcGJtbDBJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdjbVYwZFhKdUlGOXpkWEJsY2k1allXeHNLSFJvYVhNc0lHOHBPMXh1SUNBZ0lIMDdYRzRnSUgwcEtFaHZkMnd1Y0hKdmRHOTBlWEJsTG1sdWFYUXBPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFF2YzJWMElIUm9aU0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QnZaaUIwYUdVZ1lYVmthVzhnYzI5MWNtTmxJR1p2Y2lCMGFHbHpJSE52ZFc1a0lHOXlJR0ZzYkNCcGJpQjBhR1VnWjNKdmRYQXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2NHRnVJQ0JCSUhaaGJIVmxJRzltSUMweExqQWdhWE1nWVd4c0lIUm9aU0IzWVhrZ2JHVm1kQ0JoYm1RZ01TNHdJR2x6SUdGc2JDQjBhR1VnZDJGNUlISnBaMmgwTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUNodmNIUnBiMjVoYkNrZ1ZHaGxJSE52ZFc1a0lFbEVMaUJKWmlCdWIyNWxJR2x6SUhCaGMzTmxaQ3dnWVd4c0lHbHVJR2R5YjNWd0lIZHBiR3dnWW1VZ2RYQmtZWFJsWkM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3U0c5M2JDOU9kVzFpWlhKOUlDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QjJZV3gxWlM1Y2JpQWdJQ292WEc0Z0lFaHZkMnd1Y0hKdmRHOTBlWEJsTG5OMFpYSmxieUE5SUdaMWJtTjBhVzl1S0hCaGJpd2dhV1FwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMeUJUZEc5d0lISnBaMmgwSUdobGNtVWdhV1lnYm05MElIVnphVzVuSUZkbFlpQkJkV1JwYnk1Y2JpQWdJQ0JwWmlBb0lYTmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR05vWVc1blpTQnpkR1Z5Wlc4Z2NHRnVJSGRvWlc0Z1kyRndZV0pzWlM1Y2JpQWdJQ0JwWmlBb2MyVnNaaTVmYzNSaGRHVWdJVDA5SUNkc2IyRmtaV1FuS1NCN1hHNGdJQ0FnSUNCelpXeG1MbDl4ZFdWMVpTNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUNkemRHVnlaVzhuTEZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWMzUmxjbVZ2S0hCaGJpd2dhV1FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJobFkyc2dabTl5SUZCaGJtNWxjbE4wWlhKbGIwNXZaR1VnYzNWd2NHOXlkQ0JoYm1RZ1ptRnNiR0poWTJzZ2RHOGdVR0Z1Ym1WeVRtOWtaU0JwWmlCcGRDQmtiMlZ6YmlkMElHVjRhWE4wTGx4dUlDQWdJSFpoY2lCd1lXNXVaWEpVZVhCbElEMGdLSFI1Y0dWdlppQkliM2RzWlhJdVkzUjRMbU55WldGMFpWTjBaWEpsYjFCaGJtNWxjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRDhnSjNOd1lYUnBZV3duSURvZ0ozTjBaWEpsYnljN1hHNWNiaUFnSUNBdkx5QlRaWFIxY0NCMGFHVWdaM0p2ZFhBbmN5QnpkR1Z5Wlc4Z2NHRnVibWx1WnlCcFppQnVieUJKUkNCcGN5QndZWE56WldRdVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcFpDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDOHZJRkpsZEhWeWJpQjBhR1VnWjNKdmRYQW5jeUJ6ZEdWeVpXOGdjR0Z1Ym1sdVp5QnBaaUJ1YnlCd1lYSmhiV1YwWlhKeklHRnlaU0J3WVhOelpXUXVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSEJoYmlBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZjM1JsY21WdklEMGdjR0Z1TzF4dUlDQWdJQ0FnSUNCelpXeG1MbDl3YjNNZ1BTQmJjR0Z1TENBd0xDQXdYVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTGw5emRHVnlaVzg3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJoaGJtZGxJSFJvWlNCemRISmxieUJ3WVc1dWFXNW5JRzltSUc5dVpTQnZjaUJoYkd3Z2MyOTFibVJ6SUdsdUlHZHliM1Z3TGx4dUlDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWhwWkNrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lIWmhjaUJ6YjNWdVpDQTlJSE5sYkdZdVgzTnZkVzVrUW5sSlpDaHBaSE5iYVYwcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lXNGdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgzTjBaWEpsYnlBOUlIQmhianRjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0c5eklEMGdXM0JoYml3Z01Dd2dNRjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JSGRsSUdGeVpTQm1ZV3hzYVc1bklHSmhZMnNzSUcxaGEyVWdjM1Z5WlNCMGFHVWdjR0Z1Ym1sdVowMXZaR1ZzSUdseklHVnhkV0ZzY0c5M1pYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlRWFIwY2k1d1lXNXVhVzVuVFc5a1pXd2dQU0FuWlhGMVlXeHdiM2RsY2ljN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlIUm9aWEpsSUdseklHRWdjR0Z1Ym1WeUlITmxkSFZ3SUdGdVpDQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bElHbG1JRzV2ZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyOTFibVF1WDNCaGJtNWxjaUI4ZkNBaGMyOTFibVF1WDNCaGJtNWxjaTV3WVc0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkWEJRWVc1dVpYSW9jMjkxYm1Rc0lIQmhibTVsY2xSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0Z1Ym1WeVZIbHdaU0E5UFQwZ0ozTndZWFJwWVd3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMjkxYm1RdVgzQmhibTVsY2k1d2IzTnBkR2x2YmxnZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9jR0Z1TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdTNXpaWFJXWVd4MVpVRjBWR2x0WlNnd0xDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbkJ2YzJsMGFXOXVXaTV6WlhSV1lXeDFaVUYwVkdsdFpTZ3dMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbk5sZEZCdmMybDBhVzl1S0hCaGJpd2dNQ3dnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y0dGdUxuTmxkRlpoYkhWbFFYUlVhVzFsS0hCaGJpd2dTRzkzYkdWeUxtTjBlQzVqZFhKeVpXNTBWR2x0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmMzUmxjbVZ2Snl3Z2MyOTFibVF1WDJsa0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RdVgzTjBaWEpsYnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNBelJDQnpjR0YwYVdGc0lIQnZjMmwwYVc5dUlHOW1JSFJvWlNCaGRXUnBieUJ6YjNWeVkyVWdabTl5SUhSb2FYTWdjMjkxYm1RZ2IzSWdaM0p2ZFhBZ2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUdkc2IySmhiQ0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjRJQ0JVYUdVZ2VDMXdiM05wZEdsdmJpQnZaaUIwYUdVZ1lYVmthVzhnYzI5MWNtTmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIa2dJRlJvWlNCNUxYQnZjMmwwYVc5dUlHOW1JSFJvWlNCaGRXUnBieUJ6YjNWeVkyVXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VpQWdWR2hsSUhvdGNHOXphWFJwYjI0Z2IyWWdkR2hsSUdGMVpHbHZJSE52ZFhKalpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCcFpDQW9iM0IwYVc5dVlXd3BJRlJvWlNCemIzVnVaQ0JKUkM0Z1NXWWdibTl1WlNCcGN5QndZWE56WldRc0lHRnNiQ0JwYmlCbmNtOTFjQ0IzYVd4c0lHSmxJSFZ3WkdGMFpXUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UwaHZkMnd2UVhKeVlYbDlJQ0FnSUZKbGRIVnlibk1nYzJWc1ppQnZjaUIwYUdVZ1kzVnljbVZ1ZENBelJDQnpjR0YwYVdGc0lIQnZjMmwwYVc5dU9pQmJlQ3dnZVN3Z2VsMHVYRzRnSUNBcUwxeHVJQ0JJYjNkc0xuQnliM1J2ZEhsd1pTNXdiM01nUFNCbWRXNWpkR2x2YmloNExDQjVMQ0I2TENCcFpDa2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dklGTjBiM0FnY21sbmFIUWdhR1Z5WlNCcFppQnViM1FnZFhOcGJtY2dWMlZpSUVGMVpHbHZMbHh1SUNBZ0lHbG1JQ2doYzJWc1ppNWZkMlZpUVhWa2FXOHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVsbUlIUm9aU0J6YjNWdVpDQm9ZWE51SjNRZ2JHOWhaR1ZrTENCaFpHUWdhWFFnZEc4Z2RHaGxJR3h2WVdRZ2NYVmxkV1VnZEc4Z1kyaGhibWRsSUhCdmMybDBhVzl1SUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNCcFppQW9jMlZzWmk1ZmMzUmhkR1VnSVQwOUlDZHNiMkZrWldRbktTQjdYRzRnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdaWFpsYm5RNklDZHdiM01uTEZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWNHOXpLSGdzSUhrc0lIb3NJR2xrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkdWbVlYVnNkSE1nWm05eUlHOXdkR2x2Ym1Gc0lDZDVKeUFtSUNkNkp5NWNiaUFnSUNCNUlEMGdLSFI1Y0dWdlppQjVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QXdJRG9nZVR0Y2JpQWdJQ0I2SUQwZ0tIUjVjR1Z2WmlCNklDRTlQU0FuYm5WdFltVnlKeWtnUHlBdE1DNDFJRG9nZWp0Y2JseHVJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQm5jbTkxY0NkeklITndZWFJwWVd3Z2NHOXphWFJwYjI0Z2FXWWdibThnU1VRZ2FYTWdjR0Z6YzJWa0xseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQXZMeUJTWlhSMWNtNGdkR2hsSUdkeWIzVndKM01nYzNCaGRHbGhiQ0J3YjNOcGRHbHZiaUJwWmlCdWJ5QndZWEpoYldWMFpYSnpJR0Z5WlNCd1lYTnpaV1F1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhnZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM0J2Y3lBOUlGdDRMQ0I1TENCNlhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1MbDl3YjNNN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1EyaGhibWRsSUhSb1pTQnpjR0YwYVdGc0lIQnZjMmwwYVc5dUlHOW1JRzl1WlNCdmNpQmhiR3dnYzI5MWJtUnpJR2x1SUdkeWIzVndMbHh1SUNBZ0lIWmhjaUJwWkhNZ1BTQnpaV3htTGw5blpYUlRiM1Z1WkVsa2N5aHBaQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBHbGtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0x5OGdSMlYwSUhSb1pTQnpiM1Z1WkM1Y2JpQWdJQ0FnSUhaaGNpQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNocFpITmJhVjBwTzF4dVhHNGdJQ0FnSUNCcFppQW9jMjkxYm1RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUI0SUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YjNNZ1BTQmJlQ3dnZVN3Z2VsMDdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxYm1RdVgyNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOb1pXTnJJR2xtSUhSb1pYSmxJR2x6SUdFZ2NHRnVibVZ5SUhObGRIVndJR0Z1WkNCamNtVmhkR1VnWVNCdVpYY2diMjVsSUdsbUlHNXZkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzI5MWJtUXVYM0JoYm01bGNpQjhmQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQmhiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMWNGQmhibTVsY2loemIzVnVaQ3dnSjNOd1lYUnBZV3duS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9lQ3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y0c5emFYUnBiMjVaTG5ObGRGWmhiSFZsUVhSVWFXMWxLSGtzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CdmMybDBhVzl1V2k1elpYUldZV3gxWlVGMFZHbHRaU2g2TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjMlYwVDNKcFpXNTBZWFJwYjI0b2VDd2dlU3dnZWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmNHOXpKeXdnYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDNCdmN6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSFpYUXZjMlYwSUhSb1pTQmthWEpsWTNScGIyNGdkR2hsSUdGMVpHbHZJSE52ZFhKalpTQnBjeUJ3YjJsdWRHbHVaeUJwYmlCMGFHVWdNMFFnWTJGeWRHVnphV0Z1SUdOdmIzSmthVzVoZEdWY2JpQWdJQ29nYzNCaFkyVXVJRVJsY0dWdVpHbHVaeUJ2YmlCb2IzY2daR2x5WldOMGFXOXVJSFJvWlNCemIzVnVaQ0JwY3l3Z1ltRnpaV1FnYjI0Z2RHaGxJR0JqYjI1bFlDQmhkSFJ5YVdKMWRHVnpMRnh1SUNBZ0tpQmhJSE52ZFc1a0lIQnZhVzUwYVc1bklHRjNZWGtnWm5KdmJTQjBhR1VnYkdsemRHVnVaWElnWTJGdUlHSmxJSEYxYVdWMElHOXlJSE5wYkdWdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCNElDQlVhR1VnZUMxdmNtbGxiblJoZEdsdmJpQnZaaUIwYUdVZ2MyOTFjbU5sTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJSGtnSUZSb1pTQjVMVzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0J6YjNWeVkyVXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VpQWdWR2hsSUhvdGIzSnBaVzUwWVhScGIyNGdiMllnZEdobElITnZkWEpqWlM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0JwWkNBb2IzQjBhVzl1WVd3cElGUm9aU0J6YjNWdVpDQkpSQzRnU1dZZ2JtOXVaU0JwY3lCd1lYTnpaV1FzSUdGc2JDQnBiaUJuY205MWNDQjNhV3hzSUdKbElIVndaR0YwWldRdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyd3ZRWEp5WVhsOUlDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0F6UkNCemNHRjBhV0ZzSUc5eWFXVnVkR0YwYVc5dU9pQmJlQ3dnZVN3Z2VsMHVYRzRnSUNBcUwxeHVJQ0JJYjNkc0xuQnliM1J2ZEhsd1pTNXZjbWxsYm5SaGRHbHZiaUE5SUdaMWJtTjBhVzl1S0hnc0lIa3NJSG9zSUdsa0tTQjdYRzRnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z1UzUnZjQ0J5YVdkb2RDQm9aWEpsSUdsbUlHNXZkQ0IxYzJsdVp5QlhaV0lnUVhWa2FXOHVYRzRnSUNBZ2FXWWdLQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHaGhjMjRuZENCc2IyRmtaV1FzSUdGa1pDQnBkQ0IwYnlCMGFHVWdiRzloWkNCeGRXVjFaU0IwYnlCamFHRnVaMlVnYjNKcFpXNTBZWFJwYjI0Z2QyaGxiaUJqWVhCaFlteGxMbHh1SUNBZ0lHbG1JQ2h6Wld4bUxsOXpkR0YwWlNBaFBUMGdKMnh2WVdSbFpDY3BJSHRjYmlBZ0lDQWdJSE5sYkdZdVgzRjFaWFZsTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0JsZG1WdWREb2dKMjl5YVdWdWRHRjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxtOXlhV1Z1ZEdGMGFXOXVLSGdzSUhrc0lIb3NJR2xrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkdWbVlYVnNkSE1nWm05eUlHOXdkR2x2Ym1Gc0lDZDVKeUFtSUNkNkp5NWNiaUFnSUNCNUlEMGdLSFI1Y0dWdlppQjVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QnpaV3htTGw5dmNtbGxiblJoZEdsdmJsc3hYU0E2SUhrN1hHNGdJQ0FnZWlBOUlDaDBlWEJsYjJZZ2VpQWhQVDBnSjI1MWJXSmxjaWNwSUQ4Z2MyVnNaaTVmYjNKcFpXNTBZWFJwYjI1Yk1sMGdPaUI2TzF4dVhHNGdJQ0FnTHk4Z1UyVjBkWEFnZEdobElHZHliM1Z3SjNNZ2MzQmhkR2xoYkNCdmNtbGxiblJoZEdsdmJpQnBaaUJ1YnlCSlJDQnBjeUJ3WVhOelpXUXVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnBaQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQzh2SUZKbGRIVnliaUIwYUdVZ1ozSnZkWEFuY3lCemNHRjBhV0ZzSUc5eWFXVnVkR0YwYVc5dUlHbG1JRzV2SUhCaGNtRnRaWFJsY25NZ1lYSmxJSEJoYzNObFpDNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdlQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNGdQU0JiZUN3Z2VTd2dlbDA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0J6Y0dGMGFXRnNJRzl5YVdWdWRHRjBhVzl1SUc5bUlHOXVaU0J2Y2lCaGJHd2djMjkxYm1SeklHbHVJR2R5YjNWd0xseHVJQ0FnSUhaaGNpQnBaSE1nUFNCelpXeG1MbDluWlhSVGIzVnVaRWxrY3locFpDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FUMHdPeUJwUEdsa2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnTHk4Z1IyVjBJSFJvWlNCemIzVnVaQzVjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2hwWkhOYmFWMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MyOTFibVFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjRJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXZjbWxsYm5SaGRHbHZiaUE5SUZ0NExDQjVMQ0I2WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQzVmYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2FXWWdkR2hsY21VZ2FYTWdZU0J3WVc1dVpYSWdjMlYwZFhBZ1lXNWtJR055WldGMFpTQmhJRzVsZHlCdmJtVWdhV1lnYm05MExseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpiM1Z1WkM1ZmNHRnVibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjNaU0JvWVhabElHRWdjRzl6YVhScGIyNGdkRzhnYzJWMGRYQWdkR2hsSUc1dlpHVWdkMmwwYUM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpiM1Z1WkM1ZmNHOXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM0J2Y3lBOUlITmxiR1l1WDNCdmN5QjhmQ0JiTUN3Z01Dd2dMVEF1TlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjFjRkJoYm01bGNpaHpiM1Z1WkN3Z0ozTndZWFJwWVd3bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM0JoYm01bGNpNXZjbWxsYm5SaGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9lQ3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbTl5YVdWdWRHRjBhVzl1V1M1elpYUldZV3gxWlVGMFZHbHRaU2g1TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1YjNKcFpXNTBZWFJwYjI1YUxuTmxkRlpoYkhWbFFYUlVhVzFsS0hvc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyOXlhV1Z1ZEdGMGFXOXVKeXdnYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDI5eWFXVnVkR0YwYVc5dU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDOXpaWFFnZEdobElIQmhibTVsY2lCdWIyUmxKM01nWVhSMGNtbGlkWFJsY3lCbWIzSWdZU0J6YjNWdVpDQnZjaUJuY205MWNDQnZaaUJ6YjNWdVpITXVYRzRnSUNBcUlGUm9hWE1nYldWMGFHOWtJR05oYmlCdmNIUnBiMjVoYkd3Z2RHRnJaU0F3TENBeElHOXlJRElnWVhKbmRXMWxiblJ6TGx4dUlDQWdLaUFnSUhCaGJtNWxja0YwZEhJb0tTQXRQaUJTWlhSMWNtNXpJSFJvWlNCbmNtOTFjQ2R6SUhaaGJIVmxjeTVjYmlBZ0lDb2dJQ0J3WVc1dVpYSkJkSFJ5S0dsa0tTQXRQaUJTWlhSMWNtNXpJSFJvWlNCemIzVnVaQ0JwWkNkeklIWmhiSFZsY3k1Y2JpQWdJQ29nSUNCd1lXNXVaWEpCZEhSeUtHOHBJQzArSUZObGRDZHpJSFJvWlNCMllXeDFaWE1nYjJZZ1lXeHNJSE52ZFc1a2N5QnBiaUIwYUdseklFaHZkMndnWjNKdmRYQXVYRzRnSUNBcUlDQWdjR0Z1Ym1WeVFYUjBjaWh2TENCcFpDa2dMVDRnVTJWMEozTWdkR2hsSUhaaGJIVmxjeUJ2WmlCd1lYTnpaV1FnYzI5MWJtUWdhV1F1WEc0Z0lDQXFYRzRnSUNBcUlDQWdRWFIwY21saWRYUmxjenBjYmlBZ0lDb2dJQ0FnSUdOdmJtVkpibTVsY2tGdVoyeGxJQzBnS0RNMk1DQmllU0JrWldaaGRXeDBLU0JCSUhCaGNtRnRaWFJsY2lCbWIzSWdaR2x5WldOMGFXOXVZV3dnWVhWa2FXOGdjMjkxY21ObGN5d2dkR2hwY3lCcGN5QmhiaUJoYm1kc1pTd2dhVzRnWkdWbmNtVmxjeXhjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1emFXUmxJRzltSUhkb2FXTm9JSFJvWlhKbElIZHBiR3dnWW1VZ2JtOGdkbTlzZFcxbElISmxaSFZqZEdsdmJpNWNiaUFnSUNvZ0lDQWdJR052Ym1WUGRYUmxja0Z1WjJ4bElDMGdLRE0yTUNCaWVTQmtaV1poZFd4MEtTQkJJSEJoY21GdFpYUmxjaUJtYjNJZ1pHbHlaV04wYVc5dVlXd2dZWFZrYVc4Z2MyOTFjbU5sY3l3Z2RHaHBjeUJwY3lCaGJpQmhibWRzWlN3Z2FXNGdaR1ZuY21WbGN5eGNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwYzJsa1pTQnZaaUIzYUdsamFDQjBhR1VnZG05c2RXMWxJSGRwYkd3Z1ltVWdjbVZrZFdObFpDQjBieUJoSUdOdmJuTjBZVzUwSUhaaGJIVmxJRzltSUdCamIyNWxUM1YwWlhKSFlXbHVZQzVjYmlBZ0lDb2dJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNGdMU0FvTUNCaWVTQmtaV1poZFd4MEtTQkJJSEJoY21GdFpYUmxjaUJtYjNJZ1pHbHlaV04wYVc5dVlXd2dZWFZrYVc4Z2MyOTFjbU5sY3l3Z2RHaHBjeUJwY3lCMGFHVWdaMkZwYmlCdmRYUnphV1JsSUc5bUlIUm9aVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JqYjI1bFQzVjBaWEpCYm1kc1pXQXVJRWwwSUdseklHRWdiR2x1WldGeUlIWmhiSFZsSUdsdUlIUm9aU0J5WVc1blpTQmdXekFzSURGZFlDNWNiaUFnSUNvZ0lDQWdJR1JwYzNSaGJtTmxUVzlrWld3Z0xTQW9KMmx1ZG1WeWMyVW5JR0o1SUdSbFptRjFiSFFwSUVSbGRHVnliV2x1WlhNZ1lXeG5iM0pwZEdodElIVnpaV1FnZEc4Z2NtVmtkV05sSUhadmJIVnRaU0JoY3lCaGRXUnBieUJ0YjNabGN5QmhkMkY1SUdaeWIyMWNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNpNGdRMkZ1SUdKbElHQnNhVzVsWVhKZ0xDQmdhVzUyWlhKelpXQWdiM0lnWUdWNGNHOXVaVzUwYVdGc0xseHVJQ0FnS2lBZ0lDQWdiV0Y0UkdsemRHRnVZMlVnTFNBb01UQXdNREFnWW5rZ1pHVm1ZWFZzZENrZ1ZHaGxJRzFoZUdsdGRXMGdaR2x6ZEdGdVkyVWdZbVYwZDJWbGJpQnpiM1Z5WTJVZ1lXNWtJR3hwYzNSbGJtVnlMQ0JoWm5SbGNpQjNhR2xqYUNCMGFHVWdkbTlzZFcxbFhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJHd2dibTkwSUdKbElISmxaSFZqWldRZ1lXNTVJR1oxY25Sb1pYSXVYRzRnSUNBcUlDQWdJQ0J5WldaRWFYTjBZVzVqWlNBdElDZ3hJR0o1SUdSbFptRjFiSFFwSUVFZ2NtVm1aWEpsYm1ObElHUnBjM1JoYm1ObElHWnZjaUJ5WldSMVkybHVaeUIyYjJ4MWJXVWdZWE1nYzI5MWNtTmxJRzF2ZG1WeklHWjFjblJvWlhJZ1puSnZiU0IwYUdVZ2JHbHpkR1Z1WlhJdVhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSb2FYTWdhWE1nYzJsdGNHeDVJR0VnZG1GeWFXRmliR1VnYjJZZ2RHaGxJR1JwYzNSaGJtTmxJRzF2WkdWc0lHRnVaQ0JvWVhNZ1lTQmthV1ptWlhKbGJuUWdaV1ptWldOMElHUmxjR1Z1WkdsdVp5QnZiaUIzYUdsamFDQnRiMlJsYkZ4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwY3lCMWMyVmtJR0Z1WkNCMGFHVWdjMk5oYkdVZ2IyWWdlVzkxY2lCamIyOXlaR2x1WVhSbGN5NGdSMlZ1WlhKaGJHeDVMQ0IyYjJ4MWJXVWdkMmxzYkNCaVpTQmxjWFZoYkNCMGJ5QXhJR0YwSUhSb2FYTWdaR2x6ZEdGdVkyVXVYRzRnSUNBcUlDQWdJQ0J5YjJ4c2IyWm1SbUZqZEc5eUlDMGdLREVnWW5rZ1pHVm1ZWFZzZENrZ1NHOTNJSEYxYVdOcmJIa2dkR2hsSUhadmJIVnRaU0J5WldSMVkyVnpJR0Z6SUhOdmRYSmpaU0J0YjNabGN5Qm1jbTl0SUd4cGMzUmxibVZ5TGlCVWFHbHpJR2x6SUhOcGJYQnNlU0JoWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRmliR1VnYjJZZ2RHaGxJR1JwYzNSaGJtTmxJRzF2WkdWc0lHRnVaQ0JqWVc0Z1ltVWdhVzRnZEdobElISmhibWRsSUc5bUlHQmJNQ3dnTVYxZ0lIZHBkR2dnWUd4cGJtVmhjbUFnWVc1a0lHQmJNQ3dnNG9pZVhXQmNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhWFJvSUdCcGJuWmxjbk5sWUNCaGJtUWdZR1Y0Y0c5dVpXNTBhV0ZzWUM1Y2JpQWdJQ29nSUNBZ0lIQmhibTVwYm1kTmIyUmxiQ0F0SUNnblNGSlVSaWNnWW5rZ1pHVm1ZWFZzZENrZ1JHVjBaWEp0YVc1bGN5QjNhR2xqYUNCemNHRjBhV0ZzYVhwaGRHbHZiaUJoYkdkdmNtbDBhRzBnYVhNZ2RYTmxaQ0IwYnlCd2IzTnBkR2x2YmlCaGRXUnBieTVjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEWVc0Z1ltVWdZRWhTVkVaZ0lHOXlJR0JsY1hWaGJIQnZkMlZ5WUM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkM5UFltcGxZM1I5SUZKbGRIVnlibk1nYzJWc1ppQnZjaUJqZFhKeVpXNTBJSEJoYm01bGNpQmhkSFJ5YVdKMWRHVnpMbHh1SUNBZ0tpOWNiaUFnU0c5M2JDNXdjbTkwYjNSNWNHVXVjR0Z1Ym1WeVFYUjBjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQjJZWElnYnl3Z2FXUXNJSE52ZFc1a08xeHVYRzRnSUNBZ0x5OGdVM1J2Y0NCeWFXZG9kQ0JvWlhKbElHbG1JRzV2ZENCMWMybHVaeUJYWldJZ1FYVmthVzh1WEc0Z0lDQWdhV1lnS0NGelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0IyWVd4MVpYTWdZbUZ6WldRZ2IyNGdZWEpuZFcxbGJuUnpMbHh1SUNBZ0lHbG1JQ2hoY21kekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnTHk4Z1VtVjBkWEp1SUhSb1pTQm5jbTkxY0NkeklIQmhibTVsY2lCaGRIUnlhV0oxZEdVZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhjbWR6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJoY21keld6QmRJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQnZJRDBnWVhKbmMxc3dYVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnZEdobElHZHliM1VuY3lCd1lXNXVaWElnWVhSMGNtbGlkWFJsSUhaaGJIVmxjeTVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcFpDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXOHVjR0Z1Ym1WeVFYUjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdieTV3WVc1dVpYSkJkSFJ5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNWxTVzV1WlhKQmJtZHNaVG9nYnk1amIyNWxTVzV1WlhKQmJtZHNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1WlU5MWRHVnlRVzVuYkdVNklHOHVZMjl1WlU5MWRHVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNDZJRzh1WTI5dVpVOTFkR1Z5UjJGcGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJWTmIyUmxiRG9nYnk1a2FYTjBZVzVqWlUxdlpHVnNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhFYVhOMFlXNWpaVG9nYnk1dFlYaEVhWE4wWVc1alpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1SR2x6ZEdGdVkyVTZJRzh1Y21WbVJHbHpkR0Z1WTJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmJHeHZabVpHWVdOMGIzSTZJRzh1Y205c2JHOW1aa1poWTNSdmNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVibWx1WjAxdlpHVnNPaUJ2TG5CaGJtNXBibWROYjJSbGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDl3WVc1dVpYSkJkSFJ5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVpVbHVibVZ5UVc1bmJHVTZJSFI1Y0dWdlppQnZMbkJoYm01bGNrRjBkSEl1WTI5dVpVbHVibVZ5UVc1bmJHVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG1OdmJtVkpibTVsY2tGdVoyeGxJRG9nYzJWc1ppNWZZMjl1WlVsdWJtVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bFQzVjBaWEpCYm1kc1pUb2dkSGx3Wlc5bUlHOHVjR0Z1Ym1WeVFYUjBjaTVqYjI1bFQzVjBaWEpCYm1kc1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnZMbkJoYm01bGNrRjBkSEl1WTI5dVpVOTFkR1Z5UVc1bmJHVWdPaUJ6Wld4bUxsOWpiMjVsVDNWMFpYSkJibWRzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym1WUGRYUmxja2RoYVc0NklIUjVjR1Z2WmlCdkxuQmhibTVsY2tGMGRISXVZMjl1WlU5MWRHVnlSMkZwYmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVZMjl1WlU5MWRHVnlSMkZwYmlBNklITmxiR1l1WDJOdmJtVlBkWFJsY2tkaGFXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlUxdlpHVnNPaUIwZVhCbGIyWWdieTV3WVc1dVpYSkJkSFJ5TG1ScGMzUmhibU5sVFc5a1pXd2dJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG1ScGMzUmhibU5sVFc5a1pXd2dPaUJ6Wld4bUxsOWthWE4wWVc1alpVMXZaR1ZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0UkdsemRHRnVZMlU2SUhSNWNHVnZaaUJ2TG5CaGJtNWxja0YwZEhJdWJXRjRSR2x6ZEdGdVkyVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG0xaGVFUnBjM1JoYm1ObElEb2djMlZzWmk1ZmJXRjRSR2x6ZEdGdVkyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXWkVhWE4wWVc1alpUb2dkSGx3Wlc5bUlHOHVjR0Z1Ym1WeVFYUjBjaTV5WldaRWFYTjBZVzVqWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVjbVZtUkdsemRHRnVZMlVnT2lCelpXeG1MbDl5WldaRWFYTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEp2Ykd4dlptWkdZV04wYjNJNklIUjVjR1Z2WmlCdkxuQmhibTVsY2tGMGRISXVjbTlzYkc5bVprWmhZM1J2Y2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVjbTlzYkc5bVprWmhZM1J2Y2lBNklITmxiR1l1WDNKdmJHeHZabVpHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lXNXVhVzVuVFc5a1pXdzZJSFI1Y0dWdlppQnZMbkJoYm01bGNrRjBkSEl1Y0dGdWJtbHVaMDF2WkdWc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVjR0Z1Ym1WeVFYUjBjaTV3WVc1dWFXNW5UVzlrWld3Z09pQnpaV3htTGw5d1lXNXVhVzVuVFc5a1pXeGNiaUFnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFIxY200Z2RHaHBjeUJ6YjNWdVpDZHpJSEJoYm01bGNpQmhkSFJ5YVdKMWRHVWdkbUZzZFdWekxseHVJQ0FnSUNBZ0lDQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNod1lYSnpaVWx1ZENoaGNtZHpXekJkTENBeE1Da3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RZ1B5QnpiM1Z1WkM1ZmNHRnVibVZ5UVhSMGNpQTZJSE5sYkdZdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhjbWR6TG14bGJtZDBhQ0E5UFQwZ01pa2dlMXh1SUNBZ0lDQWdieUE5SUdGeVozTmJNRjA3WEc0Z0lDQWdJQ0JwWkNBOUlIQmhjbk5sU1c1MEtHRnlaM05iTVYwc0lERXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhaaGJIVmxjeUJ2WmlCMGFHVWdjM0JsWTJsbWFXVmtJSE52ZFc1a2N5NWNiaUFnSUNCMllYSWdhV1J6SUQwZ2MyVnNaaTVmWjJWMFUyOTFibVJKWkhNb2FXUXBPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4cFpITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJR2xtSUNoemIzVnVaQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5Qk5aWEpuWlNCMGFHVWdibVYzSUhaaGJIVmxjeUJwYm5SdklIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaElEMGdjMjkxYm1RdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ0lDQWdJSEJoSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym1WSmJtNWxja0Z1WjJ4bE9pQjBlWEJsYjJZZ2J5NWpiMjVsU1c1dVpYSkJibWRzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtTnZibVZKYm01bGNrRnVaMnhsSURvZ2NHRXVZMjl1WlVsdWJtVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdZMjl1WlU5MWRHVnlRVzVuYkdVNklIUjVjR1Z2WmlCdkxtTnZibVZQZFhSbGNrRnVaMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUc4dVkyOXVaVTkxZEdWeVFXNW5iR1VnT2lCd1lTNWpiMjVsVDNWMFpYSkJibWRzWlN4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjVsVDNWMFpYSkhZV2x1T2lCMGVYQmxiMllnYnk1amIyNWxUM1YwWlhKSFlXbHVJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1WTI5dVpVOTFkR1Z5UjJGcGJpQTZJSEJoTG1OdmJtVlBkWFJsY2tkaGFXNHNYRzRnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlZOYjJSbGJEb2dkSGx3Wlc5bUlHOHVaR2x6ZEdGdVkyVk5iMlJsYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtUnBjM1JoYm1ObFRXOWtaV3dnT2lCd1lTNWthWE4wWVc1alpVMXZaR1ZzTEZ4dUlDQWdJQ0FnSUNBZ0lHMWhlRVJwYzNSaGJtTmxPaUIwZVhCbGIyWWdieTV0WVhoRWFYTjBZVzVqWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtMWhlRVJwYzNSaGJtTmxJRG9nY0dFdWJXRjRSR2x6ZEdGdVkyVXNYRzRnSUNBZ0lDQWdJQ0FnY21WbVJHbHpkR0Z1WTJVNklIUjVjR1Z2WmlCdkxuSmxaa1JwYzNSaGJtTmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1Y21WbVJHbHpkR0Z1WTJVZ09pQndZUzV5WldaRWFYTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ0lDQnliMnhzYjJabVJtRmpkRzl5T2lCMGVYQmxiMllnYnk1eWIyeHNiMlptUm1GamRHOXlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1Y205c2JHOW1aa1poWTNSdmNpQTZJSEJoTG5KdmJHeHZabVpHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnY0dGdWJtbHVaMDF2WkdWc09pQjBlWEJsYjJZZ2J5NXdZVzV1YVc1blRXOWtaV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYnk1d1lXNXVhVzVuVFc5a1pXd2dPaUJ3WVM1d1lXNXVhVzVuVFc5a1pXeGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSEJoYm01bGNpQjJZV3gxWlhNZ2IzSWdZM0psWVhSbElHRWdibVYzSUhCaGJtNWxjaUJwWmlCdWIyNWxJR1Y0YVhOMGN5NWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGJtNWxjaUE5SUhOdmRXNWtMbDl3WVc1dVpYSTdYRzRnSUNBZ0lDQWdJR2xtSUNod1lXNXVaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVWx1Ym1WeVFXNW5iR1VnUFNCd1lTNWpiMjVsU1c1dVpYSkJibWRzWlR0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVTkxZEdWeVFXNW5iR1VnUFNCd1lTNWpiMjVsVDNWMFpYSkJibWRzWlR0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVTkxZEdWeVIyRnBiaUE5SUhCaExtTnZibVZQZFhSbGNrZGhhVzQ3WEc0Z0lDQWdJQ0FnSUNBZ2NHRnVibVZ5TG1ScGMzUmhibU5sVFc5a1pXd2dQU0J3WVM1a2FYTjBZVzVqWlUxdlpHVnNPMXh1SUNBZ0lDQWdJQ0FnSUhCaGJtNWxjaTV0WVhoRWFYTjBZVzVqWlNBOUlIQmhMbTFoZUVScGMzUmhibU5sTzF4dUlDQWdJQ0FnSUNBZ0lIQmhibTVsY2k1eVpXWkVhWE4wWVc1alpTQTlJSEJoTG5KbFprUnBjM1JoYm1ObE8xeHVJQ0FnSUNBZ0lDQWdJSEJoYm01bGNpNXliMnhzYjJabVJtRmpkRzl5SUQwZ2NHRXVjbTlzYkc5bVprWmhZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdWNHRnVibWx1WjAxdlpHVnNJRDBnY0dFdWNHRnVibWx1WjAxdlpHVnNPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjNaU0JvWVhabElHRWdjRzl6YVhScGIyNGdkRzhnYzJWMGRYQWdkR2hsSUc1dlpHVWdkMmwwYUM1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhOdmRXNWtMbDl3YjNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YjNNZ1BTQnpaV3htTGw5d2IzTWdmSHdnV3pBc0lEQXNJQzB3TGpWZE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRU55WldGMFpTQmhJRzVsZHlCd1lXNXVaWElnYm05a1pTNWNiaUFnSUNBZ0lDQWdJQ0J6WlhSMWNGQmhibTVsY2loemIzVnVaQ3dnSjNOd1lYUnBZV3duS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2lCVGFXNW5iR1VnVTI5MWJtUWdUV1YwYUc5a2N5QXFLaTljYmlBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrSUc1bGR5QndjbTl3WlhKMGFXVnpJSFJ2SUhSb1pTQmpiM0psSUZOdmRXNWtJR2x1YVhRdVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTBaMWJtTjBhVzl1ZlNCZmMzVndaWElnUTI5eVpTQlRiM1Z1WkNCcGJtbDBJRzFsZEdodlpDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1UyOTFibVI5WEc0Z0lDQXFMMXh1SUNCVGIzVnVaQzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJQ2htZFc1amRHbHZiaWhmYzNWd1pYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdjR0Z5Wlc1MElEMGdjMlZzWmk1ZmNHRnlaVzUwTzF4dVhHNGdJQ0FnSUNBdkx5QlRaWFIxY0NCMWMyVnlMV1JsWm1sdVpXUWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNGdQU0J3WVhKbGJuUXVYMjl5YVdWdWRHRjBhVzl1TzF4dUlDQWdJQ0FnYzJWc1ppNWZjM1JsY21WdklEMGdjR0Z5Wlc1MExsOXpkR1Z5Wlc4N1hHNGdJQ0FnSUNCelpXeG1MbDl3YjNNZ1BTQndZWEpsYm5RdVgzQnZjenRjYmlBZ0lDQWdJSE5sYkdZdVgzQmhibTVsY2tGMGRISWdQU0J3WVhKbGJuUXVYM0JoYm01bGNrRjBkSEk3WEc1Y2JpQWdJQ0FnSUM4dklFTnZiWEJzWlhSbElHbHVhWFJwYkdsNllYUnBiMjRnZDJsMGFDQm9iM2RzWlhJdWFuTWdZMjl5WlNCVGIzVnVaQ2R6SUdsdWFYUWdablZ1WTNScGIyNHVYRzRnSUNBZ0lDQmZjM1Z3WlhJdVkyRnNiQ2gwYUdsektUdGNibHh1SUNBZ0lDQWdMeThnU1dZZ1lTQnpkR1Z5Wlc4Z2IzSWdjRzl6YVhScGIyNGdkMkZ6SUhOd1pXTnBabWxsWkN3Z2MyVjBJR2wwSUhWd0xseHVJQ0FnSUNBZ2FXWWdLSE5sYkdZdVgzTjBaWEpsYnlrZ2UxeHVJQ0FnSUNBZ0lDQndZWEpsYm5RdWMzUmxjbVZ2S0hObGJHWXVYM04wWlhKbGJ5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5sYkdZdVgzQnZjeWtnZTF4dUlDQWdJQ0FnSUNCd1lYSmxiblF1Y0c5ektITmxiR1l1WDNCdmMxc3dYU3dnYzJWc1ppNWZjRzl6V3pGZExDQnpaV3htTGw5d2IzTmJNbDBzSUhObGJHWXVYMmxrS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlLU2hUYjNWdVpDNXdjbTkwYjNSNWNHVXVhVzVwZENrN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUU5MlpYSnlhV1JsSUhSb1pTQlRiM1Z1WkM1eVpYTmxkQ0J0WlhSb2IyUWdkRzhnWTJ4bFlXNGdkWEFnY0hKdmNHVnlkR2xsY3lCbWNtOXRJSFJvWlNCemNHRjBhV0ZzSUhCc2RXZHBiaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdSblZ1WTNScGIyNTlJRjl6ZFhCbGNpQlRiM1Z1WkNCeVpYTmxkQ0J0WlhSb2IyUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlZ4dUlDQWdLaTljYmlBZ1UyOTFibVF1Y0hKdmRHOTBlWEJsTG5KbGMyVjBJRDBnS0daMWJtTjBhVzl1S0Y5emRYQmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNiaUFnSUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0J6Wld4bUxsOXdZWEpsYm5RN1hHNWNiaUFnSUNBZ0lDOHZJRkpsYzJWMElHRnNiQ0J6Y0dGMGFXRnNJSEJzZFdkcGJpQndjbTl3WlhKMGFXVnpJRzl1SUhSb2FYTWdjMjkxYm1RdVhHNGdJQ0FnSUNCelpXeG1MbDl2Y21sbGJuUmhkR2x2YmlBOUlIQmhjbVZ1ZEM1ZmIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQnpaV3htTGw5d2IzTWdQU0J3WVhKbGJuUXVYM0J2Y3p0Y2JpQWdJQ0FnSUhObGJHWXVYM0JoYm01bGNrRjBkSElnUFNCd1lYSmxiblF1WDNCaGJtNWxja0YwZEhJN1hHNWNiaUFnSUNBZ0lDOHZJRU52YlhCc1pYUmxJSEpsYzJWMGRHbHVaeUJ2WmlCMGFHVWdjMjkxYm1RdVhHNGdJQ0FnSUNCeVpYUjFjbTRnWDNOMWNHVnlMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZTa29VMjkxYm1RdWNISnZkRzkwZVhCbExuSmxjMlYwS1R0Y2JseHVJQ0F2S2lvZ1NHVnNjR1Z5SUUxbGRHaHZaSE1nS2lvdlhHNGdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QndZVzV1WlhJZ2JtOWtaU0JoYm1RZ2MyRjJaU0JwZENCdmJpQjBhR1VnYzI5MWJtUXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UxTnZkVzVrZlNCemIzVnVaQ0JUY0dWamFXWnBZeUJ6YjNWdVpDQjBieUJ6WlhSMWNDQndZVzV1YVc1bklHOXVMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RIbHdaU0JVZVhCbElHOW1JSEJoYm01bGNpQjBieUJqY21WaGRHVTZJQ2R6ZEdWeVpXOG5JRzl5SUNkemNHRjBhV0ZzSnk1Y2JpQWdJQ292WEc0Z0lIWmhjaUJ6WlhSMWNGQmhibTVsY2lBOUlHWjFibU4wYVc5dUtITnZkVzVrTENCMGVYQmxLU0I3WEc0Z0lDQWdkSGx3WlNBOUlIUjVjR1VnZkh3Z0ozTndZWFJwWVd3bk8xeHVYRzRnSUNBZ0x5OGdRM0psWVhSbElIUm9aU0J1WlhjZ2NHRnVibVZ5SUc1dlpHVXVYRzRnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R6Y0dGMGFXRnNKeWtnZTF4dUlDQWdJQ0FnYzI5MWJtUXVYM0JoYm01bGNpQTlJRWh2ZDJ4bGNpNWpkSGd1WTNKbFlYUmxVR0Z1Ym1WeUtDazdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVkpibTVsY2tGdVoyeGxJRDBnYzI5MWJtUXVYM0JoYm01bGNrRjBkSEl1WTI5dVpVbHVibVZ5UVc1bmJHVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVlBkWFJsY2tGdVoyeGxJRDBnYzI5MWJtUXVYM0JoYm01bGNrRjBkSEl1WTI5dVpVOTFkR1Z5UVc1bmJHVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVlBkWFJsY2tkaGFXNGdQU0J6YjNWdVpDNWZjR0Z1Ym1WeVFYUjBjaTVqYjI1bFQzVjBaWEpIWVdsdU8xeHVJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTVrYVhOMFlXNWpaVTF2WkdWc0lEMGdjMjkxYm1RdVgzQmhibTVsY2tGMGRISXVaR2x6ZEdGdVkyVk5iMlJsYkR0Y2JpQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXViV0Y0UkdsemRHRnVZMlVnUFNCemIzVnVaQzVmY0dGdWJtVnlRWFIwY2k1dFlYaEVhWE4wWVc1alpUdGNiaUFnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y21WbVJHbHpkR0Z1WTJVZ1BTQnpiM1Z1WkM1ZmNHRnVibVZ5UVhSMGNpNXlaV1pFYVhOMFlXNWpaVHRjYmlBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWNtOXNiRzltWmtaaFkzUnZjaUE5SUhOdmRXNWtMbDl3WVc1dVpYSkJkSFJ5TG5KdmJHeHZabVpHWVdOMGIzSTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CaGJtNXBibWROYjJSbGJDQTlJSE52ZFc1a0xsOXdZVzV1WlhKQmRIUnlMbkJoYm01cGJtZE5iMlJsYkR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CdmMybDBhVzl1V0NBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9jMjkxYm1RdVgzQnZjMXN3WFN3Z1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjRzl6YVhScGIyNVpMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5d2IzTmJNVjBzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdpNXpaWFJXWVd4MVpVRjBWR2x0WlNoemIzVnVaQzVmY0c5eld6SmRMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1YzJWMFVHOXphWFJwYjI0b2MyOTFibVF1WDNCdmMxc3dYU3dnYzI5MWJtUXVYM0J2YzFzeFhTd2djMjkxYm1RdVgzQnZjMXN5WFNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMjkxYm1RdVgzQmhibTVsY2k1dmNtbGxiblJoZEdsdmJsZ2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNVlMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3dYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNVpMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3hYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNWFMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3lYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5ObGRFOXlhV1Z1ZEdGMGFXOXVLSE52ZFc1a0xsOXZjbWxsYm5SaGRHbHZibHN3WFN3Z2MyOTFibVF1WDI5eWFXVnVkR0YwYVc5dVd6RmRMQ0J6YjNWdVpDNWZiM0pwWlc1MFlYUnBiMjViTWwwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUlEMGdTRzkzYkdWeUxtTjBlQzVqY21WaGRHVlRkR1Z5Wlc5UVlXNXVaWElvS1R0Y2JpQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjR0Z1TG5ObGRGWmhiSFZsUVhSVWFXMWxLSE52ZFc1a0xsOXpkR1Z5Wlc4c0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdVkyOXVibVZqZENoemIzVnVaQzVmYm05a1pTazdYRzVjYmlBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUdOdmJtNWxZM1JwYjI1ekxseHVJQ0FnSUdsbUlDZ2hjMjkxYm1RdVgzQmhkWE5sWkNrZ2UxeHVJQ0FnSUNBZ2MyOTFibVF1WDNCaGNtVnVkQzV3WVhWelpTaHpiM1Z1WkM1ZmFXUXNJSFJ5ZFdVcExuQnNZWGtvYzI5MWJtUXVYMmxrTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlLU2dwTzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTl1YjJSbFgyMXZaSFZzWlhNdmFHOTNiR1Z5TDJScGMzUXZhRzkzYkdWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNJc0luWmhjaUJuTzF4eVhHNWNjbHh1THk4Z1ZHaHBjeUIzYjNKcmN5QnBiaUJ1YjI0dGMzUnlhV04wSUcxdlpHVmNjbHh1WnlBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhIUnlaWFIxY200Z2RHaHBjenRjY2x4dWZTa29LVHRjY2x4dVhISmNiblJ5ZVNCN1hISmNibHgwTHk4Z1ZHaHBjeUIzYjNKcmN5QnBaaUJsZG1Gc0lHbHpJR0ZzYkc5M1pXUWdLSE5sWlNCRFUxQXBYSEpjYmx4MFp5QTlJR2NnZkh3Z1JuVnVZM1JwYjI0b1hDSnlaWFIxY200Z2RHaHBjMXdpS1NncElIeDhJQ2d4TEdWMllXd3BLRndpZEdocGMxd2lLVHRjY2x4dWZTQmpZWFJqYUNobEtTQjdYSEpjYmx4MEx5OGdWR2hwY3lCM2IzSnJjeUJwWmlCMGFHVWdkMmx1Wkc5M0lISmxabVZ5Wlc1alpTQnBjeUJoZG1GcGJHRmliR1ZjY2x4dVhIUnBaaWgwZVhCbGIyWWdkMmx1Wkc5M0lEMDlQU0JjSW05aWFtVmpkRndpS1Z4eVhHNWNkRngwWnlBOUlIZHBibVJ2ZHp0Y2NseHVmVnh5WEc1Y2NseHVMeThnWnlCallXNGdjM1JwYkd3Z1ltVWdkVzVrWldacGJtVmtMQ0JpZFhRZ2JtOTBhR2x1WnlCMGJ5QmtieUJoWW05MWRDQnBkQzR1TGx4eVhHNHZMeUJYWlNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTENCcGJuTjBaV0ZrSUc5bUlHNXZkR2hwYm1jZ2FHVnlaU3dnYzI4Z2FYUW5jMXh5WEc0dkx5QmxZWE5wWlhJZ2RHOGdhR0Z1Wkd4bElIUm9hWE1nWTJGelpTNGdhV1lvSVdkc2IySmhiQ2tnZXlBdUxpNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHYzdYSEpjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDaDNaV0p3WVdOcktTOWlkV2xzWkdsdUwyZHNiMkpoYkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZ0N1hDSmhkV1JwYjBacGJHVmNJanBjSW1OdmIzQXViWEF6WENJc1hDSnpjR1ZqZEhKMWJWd2lPbHQ3WENKbWNtVnhYQ0k2T0RZdU1UTXlPREV5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEk0TGprek1qVXpOMzBzZTF3aVpuSmxjVndpT2pJek5pNDROalV5TXpRc1hDSnRZV2R1YVhSMVpHVmNJam90TXpJdU16STNPVGsxZlN4N1hDSm1jbVZ4WENJNk5EVXlMakU1TnpJMk5peGNJbTFoWjI1cGRIVmtaVndpT2kwek5pNHlPRGswT1gwc2Uxd2labkpsY1Z3aU9qTTBOQzQxTXpFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwek5pNDNPRGt5TmpGOUxIdGNJbVp5WlhGY0lqbzFOVGt1T0RZek1qZ3hMRndpYldGbmJtbDBkV1JsWENJNkxUTTRMall4TmpnMGZTeDdYQ0ptY21WeFhDSTZOek15TGpFeU9Ea3dOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMHpPUzQwT1RRM056aDlMSHRjSW1aeVpYRmNJam8zT1RZdU56STROVEUyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE01TGpVeE1UazVNMzBzZTF3aVpuSmxjVndpT2pFd056WXVOall3TVRVMkxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRRNExqUXlNekE0T0gwc2Uxd2labkpsY1Z3aU9qRXhPRFF1TXpJMk1UY3lMRndpYldGbmJtbDBkV1JsWENJNkxUVXdMalE0TkRFNE9IMHNlMXdpWm5KbGNWd2lPakV5TkRndU9USTFOemd4TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV3TGpZMk5EZzBNWDBzZTF3aVpuSmxjVndpT2pFME5qUXVNalUzT0RFeUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVeExqQTNOVGN6TTMwc2Uxd2labkpsY1Z3aU9qRXpPVGt1TmpVNE1qQXpMRndpYldGbmJtbDBkV1JsWENJNkxUVXhMak15T1Rrd05uMHNlMXdpWm5KbGNWd2lPakUyTlRndU1EVTJOalF4TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV4TGpjeU9UZzVOMzBzZTF3aVpuSmxjVndpT2pFNE5URXVPRFUxTkRZNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVekxqQXhOalkzT0gwc2Uxd2labkpsY1Z3aU9qSXhNVEF1TWpVek9UQTJMRndpYldGbmJtbDBkV1JsWENJNkxUVTFMall5TVRNMk5YMHNlMXdpWm5KbGNWd2lPakl3TWpRdU1USXhNRGswTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFUzTGpVMU1EVTBPWDFkZlN4N1hDSmhkV1JwYjBacGJHVmNJanBjSW1OdmRXNTBhVzVuTVM1dGNETmNJaXhjSW5Od1pXTjBjblZ0WENJNlczdGNJbVp5WlhGY0lqb3hPVE11TnprNE9ESTRMRndpYldGbmJtbDBkV1JsWENJNkxUSTJMakF4TnpVMk1YMHNlMXdpWm5KbGNWd2lPalF3T1M0eE16QTROVGtzWENKdFlXZHVhWFIxWkdWY0lqb3RNelV1TkRjMU5EQXpmU3g3WENKbWNtVnhYQ0k2TmpBeUxqa3lPVFk0T0N4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTXk0d01qRTVNamQ5TEh0Y0ltWnlaWEZjSWpvM09UWXVOekk0TlRFMkxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRRMkxqUTRNRFU1T0gwc2Uxd2labkpsY1Z3aU9qY3hPVEl1TURnNU9EUTBMRndpYldGbmJtbDBkV1JsWENJNkxUVXlMak13T0RRNE0zMHNlMXdpWm5KbGNWd2lPamN5TXpVdU1UVTJNalVzWENKdFlXZHVhWFIxWkdWY0lqb3ROVEl1TmpNek16WTVmU3g3WENKbWNtVnhYQ0k2T0RJNU1DNHlPRE15TURNc1hDSnRZV2R1YVhSMVpHVmNJam90TlRJdU5qWTVOamM0ZlN4N1hDSm1jbVZ4WENJNk56RXdOUzQ1TlRjd016RXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5USXVPVFExTVRJeWZTeDdYQ0ptY21WeFhDSTZOalUyTnk0Mk1qWTVOVE1zWENKdFlXZHVhWFIxWkdWY0lqb3ROVEl1T1RnNE1EWjlMSHRjSW1aeVpYRmNJam8yTlRBekxqQXlOek0wTkN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTXk0eE9EUTVOamQ5TEh0Y0ltWnlaWEZjSWpvMk5ERTJMamc1TkRVek1TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU15NDBOek0wTkRaOUxIdGNJbVp5WlhGY0lqbzRNVGd5TGpZeE56RTRPQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDFNeTQxTXpFek5UZDlMSHRjSW1aeVpYRmNJam8xTmpnMExqYzJOVFl5TlN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTXk0Mk1ESTFNekY5TEh0Y0ltWnlaWEZjSWpvNE1UTTVMalUxTURjNE1TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU5DNHdOakkzTnpoOUxIdGNJbVp5WlhGY0lqbzJOalV6TGpjMU9UYzJOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDFOQzR4TlRjek9UaDlMSHRjSW1aeVpYRmNJam8xTlRjM0xqQTVPVFl3T1N4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTkM0ME5qa3pPRE45WFgwc2Uxd2lZWFZrYVc5R2FXeGxYQ0k2WENKbGJYQjBlVmR2Y21SelRtVmhMbTF3TTF3aUxGd2ljM0JsWTNSeWRXMWNJanBiZTF3aVpuSmxjVndpT2pJeE5TNHpNekl3TXpFc1hDSnRZV2R1YVhSMVpHVmNJam90TVRrdU5USXdNVFU1ZlN4N1hDSm1jbVZ4WENJNk5ETXdMalkyTkRBMk1peGNJbTFoWjI1cGRIVmtaVndpT2kweU5TNHlNVGt3TWpWOUxIdGNJbVp5WlhGY0lqbzJNREl1T1RJNU5qZzRMRndpYldGbmJtbDBkV1JsWENJNkxUTXhMakUzTlRVeU1uMHNlMXdpWm5KbGNWd2lPalkwTGpVNU9UWXdPU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpOUzR4T1RNeU56bDlMSHRjSW1aeVpYRmNJam8zT1RZdU56STROVEUyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE01TGpnMk9ESTNPWDBzZTF3aVpuSmxjVndpT2pFM09EY3VNalUxT0RVNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRReExqTTVNVEU0TW4wc2Uxd2labkpsY1Z3aU9qZzRNaTQ0TmpFek1qZ3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5ESXVPREkzTURRMWZTeDdYQ0ptY21WeFhDSTZNVEExTlM0eE1qWTVOVE1zWENKdFlXZHVhWFIxWkdWY0lqb3RORFV1TURBNU1UY3hmU3g3WENKbWNtVnhYQ0k2TVRZM09TNDFPRGs0TkRRc1hDSnRZV2R1YVhSMVpHVmNJam90TkRVdU1ERTVORFEwZlN4N1hDSm1jbVZ4WENJNk1URXhPUzQzTWpZMU5qSXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5EVXVNemMwT1RZeWZTeDdYQ0ptY21WeFhDSTZNVFUzTVM0NU1qTTRNamdzWENKdFlXZHVhWFIxWkdWY0lqb3RORFV1TXpreU16ZzNmU3g3WENKbWNtVnhYQ0k2TVRReU1TNHhPVEUwTURZc1hDSnRZV2R1YVhSMVpHVmNJam90TkRZdU1UVTJPVGd5ZlN4N1hDSm1jbVZ4WENJNk1USTNNQzQwTlRnNU9EUXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5EWXVNemMzTWpJNGZTeDdYQ0ptY21WeFhDSTZNVGc1TkM0NU1qRTROelVzWENKdFlXZHVhWFIxWkdWY0lqb3RORFl1TkRjd01qazFmU3g3WENKbWNtVnhYQ0k2TVRRNE5TNDNPVEV3TVRZc1hDSnRZV2R1YVhSMVpHVmNJam90TkRjdU1qWTJNelk1ZlN4N1hDSm1jbVZ4WENJNk9EWXhNeTR5T0RFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwME55NDBPRGsyTlRWOVhYMHNlMXdpWVhWa2FXOUdhV3hsWENJNlhDSnJhWFJqYUdWdU1TNXRjRE5jSWl4Y0luTndaV04wY25WdFhDSTZXM3RjSW1aeVpYRmNJam94TURjdU5qWTJNREUyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEl6TGpZNE16Z3pNbjBzZTF3aVpuSmxjVndpT2pFMU1DNDNNekkwTWpJc1hDSnRZV2R1YVhSMVpHVmNJam90TWpNdU9EY3dOalk0ZlN4N1hDSm1jbVZ4WENJNk1qTTJMamcyTlRJek5DeGNJbTFoWjI1cGRIVmtaVndpT2kweU9DNDBOVGcwTXpsOUxIdGNJbVp5WlhGY0lqb3pNREV1TkRZME9EUTBMRndpYldGbmJtbDBkV1JsWENJNkxUSTVMakUwTmpRMk1YMHNlMXdpWm5KbGNWd2lPalF6TUM0Mk5qUXdOaklzWENKdFlXZHVhWFIxWkdWY0lqb3RNekV1TmpJd056STJmU3g3WENKbWNtVnhYQ0k2TlRNNExqTXpNREEzT0N4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TWk0eU56azRORFo5TEh0Y0ltWnlaWEZjSWpvME9UVXVNall6TmpjeUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNeUxqYzRNakV5Tkgwc2Uxd2labkpsY1Z3aU9qWTBOUzQ1T1RZd09UUXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16TXVNVEl4TmpRM2ZTeDdYQ0ptY21WeFhDSTZPRGd5TGpnMk1UTXlPQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNeTQ0T0RJM05URjlMSHRjSW1aeVpYRmNJam8zTlRNdU5qWXlNVEE1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE0wTGpNNU5qQTBObjBzZTF3aVpuSmxjVndpT2pFeU5EZ3VPVEkxTnpneExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNMUxqY3pNelV3Tlgwc2Uxd2labkpsY1Z3aU9qRTRNekF1TXpJeU1qWTJMRndpYldGbmJtbDBkV1JsWENJNkxUTTJMamMwTlRRNU9YMHNlMXdpWm5KbGNWd2lPakV4TkRFdU1qVTVOelkyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE0zTGpFeE5qZzVPSDBzZTF3aVpuSmxjVndpT2pFd05UVXVNVEkyT1RVekxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNM0xqRXhPRGd5ZlN4N1hDSm1jbVZ4WENJNk16STFNUzQxTVRNMk56SXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16Z3VNRFl4TURrMmZTeDdYQ0ptY21WeFhDSTZNVFF5TVM0eE9URTBNRFlzWENKdFlXZHVhWFIxWkdWY0lqb3RNemd1TWpBM05EQTFmVjE5TEh0Y0ltRjFaR2x2Um1sc1pWd2lPbHdpYzI1dmR5NXRjRE5jSWl4Y0luTndaV04wY25WdFhDSTZXM3RjSW1aeVpYRmNJam8yTkM0MU9UazJNRGtzWENKdFlXZHVhWFIxWkdWY0lqb3RNamt1TmpjM01UWTJmU3g3WENKbWNtVnhYQ0k2TXpRMExqVXpNVEkxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFF3TGpNME56UTROWDBzZTF3aVpuSmxjVndpT2pZd01pNDVNamsyT0Rnc1hDSnRZV2R1YVhSMVpHVmNJam90TkRRdU1EUXdOVFU0ZlN4N1hDSm1jbVZ4WENJNk5qZzVMakEyTWpVc1hDSnRZV2R1YVhSMVpHVmNJam90TkRRdU9EazNPVEUxZlN4N1hDSm1jbVZ4WENJNk9USTFMamt5Tnpjek5DeGNJbTFoWjI1cGRIVmtaVndpT2kwME9DNDROekF4TURaOUxIdGNJbVp5WlhGY0lqb3hNakExTGpnMU9UTTNOU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDBPUzR3T0RZek1UbDlMSHRjSW1aeVpYRmNJam94TURrNExqRTVNek0xT1N4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTUM0NU56WXdNVE45TEh0Y0ltWnlaWEZjSWpveE1qa3hMams1TWpFNE9DeGNJbTFoWjI1cGRIVmtaVndpT2kwMU1pNHlNalF5TXpaOUxIdGNJbVp5WlhGY0lqb3hOREl4TGpFNU1UUXdOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDFNeTR6TXpBMU1qUjlMSHRjSW1aeVpYRmNJam94TkRnMUxqYzVNVEF4Tml4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTXk0ME56WXlNVFY5TEh0Y0ltWnlaWEZjSWpveE16YzRMakV5TlN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTXk0Mk1UVTRNemQ5TEh0Y0ltWnlaWEZjSWpveE5qTTJMalV5TXpRek9DeGNJbTFoWjI1cGRIVmtaVndpT2kwMU5DNDFPRE01T1RaOUxIdGNJbVp5WlhGY0lqb3hOelEwTGpFNE9UUTFNeXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDFOUzR5TkRFd01EVjlMSHRjSW1aeVpYRmNJam94T0RBNExqYzRPVEEyTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTlM0M01qWXhNVFo5TEh0Y0ltWnlaWEZjSWpveE9UTTNMams0T0RJNE1TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU55NDJOalV5TnpaOUxIdGNJbVp5WlhGY0lqb3lNREkwTGpFeU1UQTVOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDFPUzR5TlRJNE1UVjlYWDFkWEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOXpjbU12YzNCbFkzUnlZV3hFWVhSaExtcHpiMjVjYmk4dklHMXZaSFZzWlNCcFpDQTlJREV3WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9idWlsZC93bnMuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==