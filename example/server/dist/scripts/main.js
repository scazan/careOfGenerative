/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const WNS = __webpack_require__(1).WNS;
WNS({
    samplePath: "samples/",
});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("WNS", [], factory);
	else if(typeof exports === 'object')
		exports["WNS"] = factory();
	else
		root["WNS"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const utils = {
    mtof: (note) => Math.pow(2, (note) / 12) * 440,
    ftom: (note) => Math.sqrt(note / 440) / 12,
    choose: (array) => {
        return array[Math.floor(Math.random() * array.length)];
    },
    getRateFromFrequencies: (freq, baseFreq) => {
        return freq / baseFreq;
    },
    getClosestMember: (subject, set) => {
        return set.reduce((accum, member) => {
            const prevDistance = accum - subject;
            const currentDistance = member - subject;
            return Math.abs(currentDistance) < Math.abs(prevDistance) ? member : accum;
        }, set[0]);
    },
    findInCollection: (collection, predicateFunction) => {
        return collection.reduce((accum, member) => predicateFunction(member) ? member : accum);
    },
    mapToDomain: (set, domain) => {
        const setOffset = Math.min(...domain) - Math.min(...set);
        const domainRange = (Math.max(...domain) - Math.min(...domain));
        const setRange = (Math.max(...set) - Math.min(...set));
        return set.map(member => utils.getClosestMember((((member - Math.min(...set)) / setRange) * domainRange) + setOffset, domain));
    },
    // TODO: I did the true/false backwards on this but everything uses it this way.
    flipCoin: (probability = 0.5) => (Math.random() < probability) ? false : true,
    makeFunction: (value) => {
        if (typeof value === "function") {
            return value;
        }
        else {
            return () => value;
        }
    }
};
/* harmony default export */ __webpack_exports__["a"] = (utils);
const windex = (weights) => {
    let sumOfWeights = weights.reduce((prev, curr) => prev + curr);
    let randNum = Math.random() * sumOfWeights;
    let weightSum = 0;
    for (let i = 0; i < weights.length; i++) {
        weightSum += weights[i];
        weightSum = +weightSum.toFixed(2);
        if (randNum <= weightSum) {
            return i;
        }
    }
};
/* unused harmony export windex */

const normalize = (coll) => {
    let collSum = coll.reduce((a, b) => a + b);
    return collSum > 0 ? coll.map((weight) => weight / collSum) : coll.map(() => 0);
};
/* unused harmony export normalize */

const isEquivalent = (a, b) => {
    // Create arrays of property names
    var aProps = Object.getOwnPropertyNames(a);
    var bProps = Object.getOwnPropertyNames(b);
    // If number of properties is different,
    // objects are not equivalent
    if (aProps.length != bProps.length) {
        return false;
    }
    for (var i = 0; i < aProps.length; i++) {
        var propName = aProps[i];
        // If values of same property are not equal,
        // objects are not equivalent
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    // If we made it this far, objects
    // are considered equivalent
    return true;
};
/* unused harmony export isEquivalent */

const mod = (num, modulo) => (num % modulo + modulo) % modulo;
/* harmony export (immutable) */ __webpack_exports__["c"] = mod;

const getSequentialRandomIndex = (lastIndex, length) => {
    const possibleIndexes = Array(length).fill(0).map((item, i) => i).filter(item => item !== lastIndex);
    return utils.choose(possibleIndexes);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getSequentialRandomIndex;



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WNS", function() { return WNS; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Scene__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Synth__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Noise__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MultiSampler__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__spectralData_json__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__spectralData_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__spectralData_json__);







;
const defaultConfig = {
    samplePath: "samples/",
};
const WNS = (config) => {
    config = config ? Object.assign({}, defaultConfig, config) : defaultConfig;
    const backgroundSamples = __WEBPACK_IMPORTED_MODULE_5__spectralData_json___default.a;
    // Setup
    const populationSize = 16;
    const context = new AudioContext();
    const chordOscillators = Array(populationSize).fill(0).map(() => new __WEBPACK_IMPORTED_MODULE_1__Synth__["a" /* default */](context));
    const multiSamplerOpts = {
        samples: [
            //{ files: [ config.samplePath + "pipeG.mp3" ], freq: 199 },
            //{ files: [ config.samplePath + "pipeD.mp3" ], freq: 306 },
            { files: [config.samplePath + "pipeA.mp3"], freq: 445 },
            { files: [config.samplePath + "pipeE.mp3"], freq: 666 },
            { files: [config.samplePath + "piano2-324.mp3"], freq: 324 },
            { files: [config.samplePath + "piano3-814.mp3"], freq: 814 },
        ],
    };
    const melodyOscillators = Array(populationSize).fill(0).map(() => __WEBPACK_IMPORTED_MODULE_4__utils__["a" /* default */].flipCoin() ? new __WEBPACK_IMPORTED_MODULE_3__MultiSampler__["a" /* default */](context, multiSamplerOpts) : new __WEBPACK_IMPORTED_MODULE_1__Synth__["a" /* default */](context));
    const sourceSamples = backgroundSamples.map(sampleData => new __WEBPACK_IMPORTED_MODULE_3__MultiSampler__["a" /* default */](context, {
        samples: [
            { files: [config.samplePath + sampleData.audioFile], freq: 1 },
        ],
    }));
    const lowDronePlayer = new __WEBPACK_IMPORTED_MODULE_3__MultiSampler__["a" /* default */](context, {
        samples: [
            { files: [config.samplePath + "lowDrone.mp3"], freq: 1 },
        ],
    });
    const bells = Array(2).fill(0).map(() => new __WEBPACK_IMPORTED_MODULE_2__Noise__["a" /* Noise */](context));
    const playBells = () => {
        const duration = 45;
        bells.forEach((bell, i) => {
            const randomMul = (Math.random() * 0.25) + 1;
            const freqs = [2090, 2393];
            bell.play({
                pan: (i * 2) - 1,
                freq: freqs[i] * randomMul,
                vol: 7.8,
                time: duration,
            });
        });
        setTimeout(playNewScene, (duration + 12) * 1000); // Timing is weird in the player. This results in a gap which is what I want
    };
    const playDrone = () => {
        lowDroneIsPlaying = true;
        console.log('playing drone...');
        setTimeout(() => { lowDroneIsPlaying = false; }, 330 * 1000); // Low Drone last 300*1000 milliseconds, add an extra 30 seconds after to decrease repetition
        lowDronePlayer.play({ freq: 1, time: 300 * 1000, vol: 0.70 });
    };
    let sampleIndex = 0;
    let interludeJustPlayed = false;
    let lowDroneIsPlaying = false;
    const playNewScene = () => {
        // Occasionally we want to pause for a moment to play an interlude in silence
        const playInterlude = __WEBPACK_IMPORTED_MODULE_4__utils__["a" /* default */].flipCoin(0.80);
        const playLowDrone = __WEBPACK_IMPORTED_MODULE_4__utils__["a" /* default */].flipCoin(0.85);
        if (playInterlude && !interludeJustPlayed) {
            interludeJustPlayed = true;
            playBells();
            setTimeout(() => {
                sourceSamples.forEach(samplePlayer => samplePlayer.stop(0, samplePlayer.players[0]));
                chordOscillators.forEach(synth => synth.stop(0));
            }, 15 * 1000);
            return false;
        }
        if (playLowDrone && !lowDroneIsPlaying) {
            playDrone();
        }
        interludeJustPlayed = false;
        sampleIndex = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* getSequentialRandomIndex */])(sampleIndex, backgroundSamples.length);
        //const target = [193, 423, 1668, 2333, 2665, 3078, 4038, 6319, 193+1, 423+1, 1668+1, 2333+1, 2665+1, 3078+1, 4038+1, 6319+1 ]; // in frequency
        const backgroundSample = backgroundSamples[sampleIndex];
        console.log(backgroundSample.audioFile);
        const initialPopulation = Array(80).fill(backgroundSample.spectrum.map(bin => bin.freq));
        // Target is the overtones of the most prominent frequency in the spectrum
        const target = backgroundSample.spectrum
            .reduce((accum, bin) => accum[0].magnitude < bin.magnitude ? [bin] : accum, [{ freq: 0, magnitude: -100 }])
            .map(bin => bin.freq)
            .map((strongestFreq) => Array(backgroundSample.spectrum.length).fill(0).map((item, i) => {
            const harmonic = strongestFreq * (i + 1);
            const highestFreq = 7000;
            if (harmonic > highestFreq) {
                const divisor = Math.ceil(harmonic / highestFreq);
                return harmonic / divisor;
            }
            else {
                return harmonic;
            }
        }))[0];
        const sceneConfig = {
            initialPopulation: initialPopulation.map(item => item.map(item2 => {
                return (Math.random() * (target[target.length - 1] - target[0])) + (target[0] - 20);
            })),
            populationSize: 16,
            maxGenerations: 2,
            target,
            timeBetweenEvents: () => (Math.random() * 15) + 10,
            gapBetweenEvents: () => __WEBPACK_IMPORTED_MODULE_4__utils__["a" /* default */].choose([25, 10]),
            melodyOscillators,
            chordOscillators,
            onFinish: playNewScene
        };
        sourceSamples[sampleIndex].play({ freq: 1, time: 60 * 3 * 1000, vol: 0.23 });
        // Start the scene
        new __WEBPACK_IMPORTED_MODULE_0__Scene__["a" /* Scene */](sceneConfig).play();
    };
    //playNewScene();
    playBells();
};
/* harmony default export */ __webpack_exports__["default"] = (WNS);



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__patterns__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);



class Scene {
    constructor(config) {
        this.config = config;
        this.config.timeBetweenEvents = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].makeFunction(this.config.timeBetweenEvents);
        this.config.gapBetweenEvents = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].makeFunction(this.config.gapBetweenEvents);
        this.notes = Object(__WEBPACK_IMPORTED_MODULE_0__patterns__["a" /* Pgenetic */])(config.initialPopulation, config.target);
        this.config.maxGenerations = config.maxGenerations;
        this.currentGeneration = 0;
        this.config.onFinish = config.onFinish;
    }
    play() {
        const nextGen = this.notes.next().value;
        const newNotes = nextGen;
        let i = 0;
        let k = (Math.random() > 0.5) ? 0 : 1;
        this.config.chordOscillators.map((osc) => {
            const octave = Math.ceil(Math.random() * 5);
            osc.play({ freq: newNotes[i] / octave, time: this.config.timeBetweenEvents(), pan: ((k % 2) * 2) - 1, vol: 0.2 });
            i++;
            k++;
        });
        this.playMelody(newNotes, this.currentGeneration);
        //console.log('GENETIC GENERATION: ', this.currentGeneration, nextGen);
        if (this.currentGeneration <= (this.config.maxGenerations - 1)) {
            window.setTimeout(() => {
                this.currentGeneration++;
                this.play();
            }, (this.config.timeBetweenEvents() + this.config.gapBetweenEvents()) * 1000);
        }
        else {
            this.currentGeneration++;
            this.endOfScene();
        }
        return this;
    }
    playMelody(notes, generation) {
        const order = 3;
        const newNotes = notes;
        // Taken from the sequence of pitches in "Forever in Blue Jeans" by Neil Diamond
        const idealMelody = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].mapToDomain([0, 4, 2, 0, 7, 4, 2, 7, 7, 4, 2, 2, 4, 4, 2, 0], newNotes);
        const randomShiftAmount = Math.floor(Math.random() * (idealMelody.length));
        const initialState = [];
        for (let offset = order; offset >= 0; offset--) {
            initialState.push(idealMelody[Object(__WEBPACK_IMPORTED_MODULE_1__utils__["c" /* mod */])(randomShiftAmount - offset, idealMelody.length)]);
        }
        const markovMelody = Object(__WEBPACK_IMPORTED_MODULE_0__patterns__["b" /* Pmarkov */])(idealMelody, order, initialState);
        let i = 0;
        const playNextNote = (generation) => {
            const octave = Math.ceil(Math.random() * 3) + Math.ceil(Math.random() * 3) + 2;
            const nextNote = markovMelody.next().value;
            //if(nextNote !== undefined && utils.flipCoin(0.75) ) { // Sometimes probablities are zero, so we'll get an undefined next state
            if (nextNote !== undefined && __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].flipCoin(0.55)) {
                //console.log('playing note', nextNote);
                this.config.melodyOscillators[i % this.config.melodyOscillators.length].play({
                    freq: nextNote / octave,
                    time: 1 + (Math.random() * 6),
                    pan: 0,
                    vol: 0.15
                });
            }
            i++;
            window.setTimeout(() => {
                if (generation === this.currentGeneration && this.currentGeneration <= this.config.maxGenerations) {
                    playNextNote(generation);
                }
            }, ((Math.random() * 2) + 0.5) * 1000);
        };
        playNextNote(generation);
    }
    endOfScene() {
        const onFinishCallback = this.config.onFinish;
        this.config.chordOscillators.map(synth => synth.stop(1));
        window.setTimeout(onFinishCallback, 1000);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Scene;



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Genetic__ = __webpack_require__(5);
/*
 * Basic Patterns implementation
 */
const Markov = __webpack_require__(4).default;

const Pattern = (pattern) => [() => pattern.next().value];
/* unused harmony export Pattern */

const Pseq = function* Pseq(values, repetitions) {
    var index = 0;
    var result = () => values[index++ % values.length];
    if (repetitions == undefined) {
        while (true) {
            yield result();
        }
    }
    else {
        for (var i = 0; i < repetitions; i++) {
            yield result();
        }
    }
};
/* unused harmony export Pseq */

const Prand = function* Prand(values, repetitions) {
    var result = () => values[Math.floor(Math.random() * values.length)];
    if (repetitions == undefined) {
        while (true) {
            yield result();
        }
    }
    else {
        for (var i = 0; i < repetitions; i++) {
            yield result();
        }
    }
};
/* unused harmony export Prand */

const Pmarkov = function Pmarkov(seed, order, initialState) {
    const markovChain = new Markov(seed, order);
    return markovChain.asPattern(initialState);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = Pmarkov;

const Pgenetic = function* Pgenetic(inputPopulation, goal) {
    let genetic = new __WEBPACK_IMPORTED_MODULE_0__Genetic__["a" /* Genetic */](inputPopulation, goal);
    let lastState = goal;
    while (true) {
        let nextState = genetic.getNextState(lastState);
        lastState = [lastState[lastState.length - 1], nextState];
        yield nextState;
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Pgenetic;



/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define("MarkovN",[],e):"object"==typeof exports?exports.MarkovN=e():t.MarkovN=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const r=t=>{let e=t.reduce((t,e)=>t+e),n=Math.random()*e,r=0;for(let e=0;e<t.length;e++)if(n<=(r=+(r+=t[e]).toFixed(2)))return e},o=t=>{let e=t.reduce((t,e)=>t+e);return e>0?t.map(t=>t/e):t.map(()=>0)},i=(t,e)=>{var n=Object.getOwnPropertyNames(t),r=Object.getOwnPropertyNames(e);if(n.length!=r.length)return!1;for(var o=0;o<n.length;o++){var i=n[o];if(t[i]!==e[i])return!1}return!0},s=(t,e)=>(t%e+e)%e;n.d(e,"getAllTransitions",function(){return a}),n.d(e,"MarkovN",function(){return l});const a=(t,e)=>t.reduce((n,r,o)=>{const i=[];for(let n=e;n>=0;n--)i.push(t[s(o-n,t.length)]);return n.push(i),n},[]),u=(t,e)=>{const n=[...t];return n.shift(),n.push(e),n};class l{constructor(t,e){this.dictionary=[],this.combinations=[],this.lastState=[];for(let n=0;n<e;n++)this.lastState.push(t[n]);this.transitionMatrix=this.createTransitionMatrix(t,e)}createTransitionMatrix(t,e){this.dictionary=Array.from(new Set(t)),this.combinations=a(t,e);let n=[];for(let t=0;t<this.combinations.length;t++){let t=[];for(let e=0;e<this.dictionary.length;e++)t.push(0);n.push(t)}for(let r=0;r<t.length;r++){let o=[];for(let n=e;n>=0;n--)o.push(t[s(r-n,t.length)]);let a=this.combinations.findIndex(t=>i(o,t)),u=t[(r+1)%t.length],l=this.dictionary.indexOf(u);n[a][l]++}return n=n.map(o)}getNextState(t){const e=this.transitionMatrix[this.combinations.findIndex(e=>i(t,e))],n=r(e);return this.dictionary[n]}*asPattern(t){for(this.lastState=t;;){let t=this.getNextState(this.lastState);this.lastState=u(this.lastState,t),yield t}}}e.default=l}])});

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Genetic; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);

class Genetic {
    constructor(inputPopulation, goal) {
        this.population = inputPopulation;
        this.scores = Array(inputPopulation.length).fill(0);
        this.goal = goal;
        this.lastState = inputPopulation[Math.floor(Math.random() * (inputPopulation.length - 1))];
    }
    // Accumulate and return the score for a single collection
    getTotalFitnessRating(collection, goal) {
        let score = 0; // lower is better
        let normalizedCollection = collection.map((num) => num - Math.min.apply(null, collection));
        for (let i = normalizedCollection.length - 1; i >= 0; i--) {
            score += this.getDistance(normalizedCollection[i], goal[i]);
        }
        return score;
    }
    // TODO: test
    // Using the given scores, get the most "fit" two generations out of the population
    getTopTwoGenerations(scores, population) {
        let indexOfHighestScore = 0;
        for (let i = scores.length - 1; i >= 0; i--) {
            if (scores[indexOfHighestScore] < scores[i]) {
                indexOfHighestScore = i;
            }
            // If there are two of the same scores, choose one randomly
            if (scores[indexOfHighestScore] === scores[i]) {
                const coinFlip = Math.random();
                indexOfHighestScore = (coinFlip > 0.5) ? indexOfHighestScore : i;
            }
        }
        let indexOfNextHighestScore = 0;
        const topGenerationScore = scores[indexOfHighestScore];
        const coinFlipForMutate = __WEBPACK_IMPORTED_MODULE_0__utils__["a" /* default */].flipCoin(0.25);
        if (coinFlipForMutate) {
            indexOfNextHighestScore = Math.floor(Math.random() * scores.length);
        }
        else {
            for (let i = scores.length - 1; i >= 0; i--) {
                // Ignore any scores that are already the highest score
                if (scores[i] !== topGenerationScore) {
                    if (scores[indexOfNextHighestScore] < scores[i]) {
                        indexOfNextHighestScore = i;
                    }
                    // If there are two of the same scores, choose one randomly
                    if (scores[indexOfNextHighestScore] === scores[i]) {
                        const coinFlip = Math.random();
                        indexOfNextHighestScore = (coinFlip > 0.5) ? indexOfNextHighestScore : i;
                    }
                }
            }
        }
        return [population[indexOfHighestScore], population[indexOfNextHighestScore]];
    }
    // TODO: Make more than one type of mating
    // Take in two arrays (parents) and mate them in a number of different ways to produce multiple offspring
    mateGenerations(parents) {
        const splicedOffspring = this.getSplicedOffspring(parents[0], parents[1]);
        const interlacedOffspring = this.getInterlacedOffspring(parents[0], parents[1]);
        // Generate more than one offspring
        return [splicedOffspring, interlacedOffspring];
    }
    // Splice two equal-length arrays together and return the result
    getInterlacedOffspring(parentOne, parentTwo) {
        const interlacedOffspring = Array(parentOne.length);
        for (let i = interlacedOffspring.length - 1; i >= 0; i--) {
            interlacedOffspring[i] = (i % 2) === 0 ? parentOne[i] : parentTwo[i];
        }
        return interlacedOffspring;
    }
    getSplicedOffspring(parentOne, parentTwo) {
        const coinFlip = Math.random() > 0.5 ? 1 : 0;
        const parents = coinFlip == 0 ? [parentOne, parentTwo] : [parentTwo, parentOne];
        const splitPoint = Math.floor(parentOne.length / 2);
        const splicedOffspring = [...(parents[0].slice(0, splitPoint)), ...(parents[1].slice(splitPoint - 1, parents[1].length - 1))];
        return splicedOffspring;
    }
    // Returns a numerical distance between an input and a goal
    getDistance(input, goal) {
        let rating = goal - input;
        return rating;
    }
    // Calculate and return the scores for all current collections
    getPopulationScores(population, goal) {
        let scores = Array(population.length).fill(0);
        for (let i = (population.length - 1); i >= 0; i--) {
            scores[i] = this.getTotalFitnessRating(population[i], goal);
        }
        return scores;
    }
    getNextGeneration(population, goal) {
        const populationScores = this.getPopulationScores(population, goal);
        const topTwoGenerations = this.getTopTwoGenerations(populationScores, population);
        const newGenerations = this.mateGenerations(topTwoGenerations);
        for (let i = 0; i < (newGenerations.length - 1); i++) {
            this.population.splice(Math.floor(Math.random() * (this.population.length - 1)), 1);
        }
        this.population = [...this.population, ...newGenerations];
        // For now randomly select one of the best generations
        const bestFitGeneration = newGenerations[Math.floor(Math.random() * (newGenerations.length * 0.999))];
        return bestFitGeneration;
    }
    getNextState(state) {
        // TODO: Use state to add into the population
        const nextState = this.getNextGeneration(this.population, this.goal);
        return nextState;
    }
    asPattern() {
        const self = this;
        return function* asPattern(initialState) {
            self.lastState = initialState;
            while (true) {
                const nextState = self.getNextState(self.lastState);
                self.lastState = nextState;
                yield nextState;
            }
        };
    }
}
;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
// Basic curve from https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode
const makeDistortionCurve = amount => {
    var k = typeof amount === 'number' ? amount : 50, n_samples = 44100, curve = new Float32Array(n_samples), deg = Math.PI / 180, i = 0, x;
    for (; i < n_samples; ++i) {
        x = i * 2 / n_samples - 1;
        curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
    }
    return curve;
};

class Synth {
    constructor(context, config) {
        this.context = context;
        this.config = config ? config : {};
    }
    init() {
        this.oscillator = this.context.createOscillator();
        //this.config.waveformType && (this.oscillator.type = this.config.waveformType);
        this.gainNode = this.context.createGain();
        this.panner = this.context.createStereoPanner();
        this.waveShaper = this.context.createWaveShaper();
        this.waveShaper.curve = makeDistortionCurve(800);
        this.waveShaper.oversample = '4x';
        this.oscillator.connect(this.gainNode);
        this.gainNode.connect(this.panner);
        this.panner.connect(this.waveShaper);
        //this.panner.connect(this.context.destination);
        this.waveShaper.connect(this.context.destination);
        this.oscillator.type = this.config.waveformType ? this.config.waveformType : __WEBPACK_IMPORTED_MODULE_0__utils__["a" /* default */].flipCoin() ? 'triangle' : 'sine';
        this.gainNode.gain.value = 0;
    }
    play(opt) {
        const { freq = 220, time = 1, pan = 0, vol = 1 } = opt;
        this.init();
        let gain = 0.01;
        this.oscillator.frequency.value = freq;
        opt.distortion && (this.waveShaper.curve = makeDistortionCurve(opt.distortion));
        // some stupid basic psychoacoustic shaping
        if (freq > 200)
            gain = gain * 0.12;
        if (freq > 6000)
            gain = gain * 0.08;
        this.panner.pan.value = pan;
        this.oscillator.start(0);
        this.gainNode.gain.setTargetAtTime(vol * gain * (0.55 - (Math.random() * 0.01)), this.context.currentTime, time * 0.85);
        var self = this;
        window.setTimeout(function () {
            self.stop(time * 0.25);
        }, (time - (time * 0.25)) * 1000);
        return this;
    }
    stop(time) {
        this.gainNode.gain.setTargetAtTime(0, this.context.currentTime, time * 0.9);
        this.oscillator.stop(this.context.currentTime + (time * 4));
        return this;
    }
}
/* harmony default export */ __webpack_exports__["a"] = (Synth);


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Noise; });
// Basic curve from https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode
const makeDistortionCurve = amount => {
    var k = typeof amount === 'number' ? amount : 50, n_samples = 44100, curve = new Float32Array(n_samples), deg = Math.PI / 180, i = 0, x;
    for (; i < n_samples; ++i) {
        x = i * 2 / n_samples - 1;
        curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
    }
    return curve;
};
const bufferSize = 4096;
const createBrownNoise = audioContext => {
    var lastOut = 0.0;
    var node = audioContext.createScriptProcessor(bufferSize, 1, 1);
    node.onaudioprocess = function (e) {
        var output = e.outputBuffer.getChannelData(0);
        for (var i = 0; i < bufferSize; i++) {
            var white = Math.random() * 2 - 1;
            output[i] = (lastOut + (0.02 * white)) / 1.02;
            lastOut = output[i];
            output[i] *= 3.5; // (roughly) compensate for gain
        }
    };
    return node;
};
class Noise {
    constructor(context, config) {
        this.context = context;
        this.config = config ? config : {};
    }
    init() {
        this.oscillator = createBrownNoise(this.context);
        //this.config.waveformType && (this.oscillator.type = this.config.waveformType);
        this.gainNode = this.context.createGain();
        this.panner = this.context.createStereoPanner();
        this.filter = this.context.createBiquadFilter();
        this.filter.type = 'peaking';
        this.filter2 = this.context.createBiquadFilter();
        this.filter2.type = 'bandpass';
        this.waveShaper = this.context.createWaveShaper();
        this.waveShaper.curve = makeDistortionCurve(80);
        this.waveShaper.oversample = '4x';
        this.oscillator.connect(this.waveShaper);
        this.waveShaper.connect(this.filter);
        this.filter.connect(this.filter2);
        this.filter2.connect(this.panner);
        this.panner.connect(this.gainNode);
        this.gainNode.connect(this.context.destination);
        //this.oscillator.type = this.config.waveformType ? this.config.waveformType : utils.flipCoin() ? 'triangle' : 'sine';
        this.gainNode.gain.value = 0;
    }
    play(opt) {
        const { freq = 220, time = 1, pan = 0, vol = 1 } = opt;
        this.init();
        let gain = 1.0;
        //this.oscillator.frequency.value = freq;
        this.filter.frequency.value = freq;
        this.filter.Q.value = 50.901;
        this.filter.gain.value = 20;
        this.filter2.frequency.value = freq;
        this.filter2.Q.value = 15.901;
        this.filter2.gain.value = 60;
        opt.distortion && (this.waveShaper.curve = makeDistortionCurve(opt.distortion));
        // some stupid basic pyschoacoustic shaping
        if (freq > 200)
            gain = gain * 0.12;
        this.panner.pan.value = pan;
        this.gainNode.gain.value = 0.001;
        this.gainNode.gain.exponentialRampToValueAtTime(vol * gain, this.context.currentTime + time);
        setTimeout(this.stop.bind(this), (time + 1) * 1000);
        return this;
    }
    stop() {
        this.gainNode.gain.setTargetAtTime(0, this.context.currentTime, 0.01);
        return this;
    }
}



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_howler__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_howler___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_howler__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);


class MultiSampler {
    constructor(context, opt) {
        this.context = context;
        this.players = opt.samples.map(sampleConfig => ({ player: new __WEBPACK_IMPORTED_MODULE_0_howler__["Howl"]({ src: sampleConfig.files }), baseFreq: sampleConfig.freq }));
    }
    play(opt) {
        const { freq = 220, time = 1, pan = 0, vol = 1 } = opt;
        let gain = 1;
        const samplePlayer = this.findClosestSamplePlayer(freq);
        const currentlyPlayingSampleID = samplePlayer.player.play();
        samplePlayer.player.loop(false, currentlyPlayingSampleID);
        samplePlayer.player.rate(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].getRateFromFrequencies(freq, samplePlayer.baseFreq), currentlyPlayingSampleID);
        // some stupid basic pyschoacoustic shaping
        if (freq > 200)
            gain = gain * 0.2;
        samplePlayer.player.fade(0, gain * vol, 200, currentlyPlayingSampleID);
        samplePlayer.player.stereo(pan, currentlyPlayingSampleID);
        window.setTimeout(function () {
            samplePlayer.player.fade(gain * vol, 0, 200, currentlyPlayingSampleID);
            this.stop(time, samplePlayer, currentlyPlayingSampleID);
        }.bind(this), (time * 1000) + 200); // adding a 100 ms buffer to avoid any issues
        return this;
    }
    stop(time, samplePlayer, currentlyPlayingSampleID) {
        window.setTimeout(function () {
            samplePlayer.player.stop();
        }.bind(this), 300); // adding a 100 ms buffer to avoid any issues
        return this;
    }
    findClosestSamplePlayer(freq) {
        // Can only get the closest frequency in the set of Players' frequencies so get that frequency, then filter the players
        const closestPlayerFrequency = __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].getClosestMember(freq, this.players.map(player => player.baseFreq));
        return __WEBPACK_IMPORTED_MODULE_1__utils__["a" /* default */].findInCollection(this.players, member => member === closestPlayerFrequency);
    }
}
/* harmony default export */ __webpack_exports__["a"] = (MultiSampler);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 *  howler.js v2.0.12
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Create a global ID counter.
      self._counter = 1000;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

      // Public properties.
      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null;

      // Set to false to disable the auto iOS enabler.
      self.mobileAutoEnable = true;

      // Setup the various state values for global tracking.
      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // Don't update any of the nodes if we are muted.
        if (self._muted) {
          return self;
        }

        // When using Web Audio, we just need to adjust the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (self.usingWebAudio) {
        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function() {
      var self = this || Howler;

      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].unload();
      }

      // Create a new AudioContext to make sure it is fully reset.
      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function() {
      var self = this || Howler;

      // Keeps track of the suspend/resume state of the AudioContext.
      self.state = self.ctx ? self.ctx.state || 'running' : 'running';

      // Automatically begin the 30-second suspend process
      self._autoSuspend();

      // Check if audio is available.
      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio();

            // Check if the canplaythrough event is available.
            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch(e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      }

      // Test to make sure audio isn't disabled in Internet Explorer.
      try {
        var test = new Audio();
        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {}

      // Check for supported codecs.
      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = null;

      // Must wrap in a try/catch because IE11 in server mode throws an error.
      try {
        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };

      return self;
    },

    /**
     * Mobile browsers will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableMobileAudio: function() {
      var self = this || Howler;

      // Only run this on mobile devices if audio isn't already eanbled.
      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));
      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {
        return;
      }

      self._mobileEnabled = false;

      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      }

      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684
      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.
      var unlock = function() {
        // Fix Android can not play in suspend state.
        Howler._autoResume();

        // Create an empty buffer.
        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function() {
          source.disconnect(0);

          // Update the unlocked state and prevent this check from happening again.
          self._mobileEnabled = true;
          self.mobileAutoEnable = false;

          // Remove the touch start listener.
          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
        };
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);

      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      // Check if any sounds are playing.
      for (var i=0; i<self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j=0; j<self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      }

      // If no sound has played after 30 seconds, suspend the context.
      self._suspendTimer = setTimeout(function() {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';
        self.ctx.suspend().then(function() {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;
            self._autoResume();
          }
        });
      }, 30000);

      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended') {
        self.ctx.resume().then(function() {
          self.state = 'running';

          // Emit to all Howls that the audio has resumed.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // If we don't have an AudioContext created yet, run the setup.
      if (!Howler.ctx) {
        setupAudioContext();
      }

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhrWithCredentials = o.xhrWithCredentials || false;

      // Setup all other default properties.
      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = [];
      self._playLock = false;

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
      self._onresume = [];

      // Web Audio or HTML5 Audio?
      self._webAudio = Howler.usingWebAudio && !self._html5;

      // Automatically try to enable audio on iOS.
      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {
        Howler._enableMobileAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // If they selected autoplay, add a play event to the load queue.
      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function() {
            self.play();
          }
        });
      }

      // Load the source file unless otherwise specified.
      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];
          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
            continue;
          }

          // Extract the file extension from the URL or base64 data URI.
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Log a warning if no extension was found.
        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        }

        // Check if this extension is available.
        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');
        return;
      }

      self._src = url;
      self._state = 'loading';

      // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.
      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      }

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function(sprite, internal) {
      var self = this;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.
        var num = 0;
        for (var i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
            num++;
            id = self._sounds[i]._id;
          }
        }

        if (num === 1) {
          sprite = null;
        } else {
          id = null;
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.
      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite;

        // Makr this sounded as not ended in case another sound is played before this one loads.
        sound._ended = false;

        // Add the sound to the queue to be played on load.
        var soundId = sound._id;
        self._queue.push({
          event: 'play',
          action: function() {
            self.play(soundId);
          }
        });

        return soundId;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          self._loadQueue('play');
        }

        return sound._id;
      }

      // Make sure the AudioContext isn't suspended, and resume it if it is.
      if (self._webAudio) {
        Howler._autoResume();
      }

      // Determine how long to play for and where to start playing.
      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
      var timeout = (duration * 1000) / Math.abs(sound._rate);

      // Update the parameters of the sound
      sound._paused = false;
      sound._ended = false;
      sound._sprite = sprite;
      sound._seek = seek;
      sound._start = self._sprite[sprite][0] / 1000;
      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._loop = !!(sound._loop || self._sprite[sprite][2]);

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function() {
              self._emit('play', sound._id);
            }, 0);
          }
        };

        if (Howler.state === 'running') {
          playWebAudio();
        } else {
          self.once('resume', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate;

          // Mobile browsers will throw an error if this is called without user interaction.
          try {
            var play = node.play();

            // Support older browsers that don't support promises, and thus don't have this issue.
            if (typeof Promise !== 'undefined' && play instanceof Promise) {
              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
              self._playLock = true;

              // Releases the lock and executes queued actions.
              var runLoadQueue = function() {
                self._playLock = false;
                if (!internal) {
                  self._emit('play', sound._id);
                }
              };
              play.then(runLoadQueue, runLoadQueue);
            } else if (!internal) {
              self._emit('play', sound._id);
            }

            // Setting rate before playing won't work in IE, so we set it again here.
            node.playbackRate = sound._rate;

            // If the node is still paused, then we can assume there was a playback issue.
            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                'on mobile devices where playback was not within a user interaction.');
              return;
            }

            // Setup the end timer on sprites or listen for the ended event.
            if (sprite !== '__default' || sound._loop) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            } else {
              self._endTimers[sound._id] = function() {
                // Fire ended on this audio node.
                self._ended(sound);

                // Clear this listener.
                node.removeEventListener('ended', self._endTimers[sound._id], false);
              };
              node.addEventListener('ended', self._endTimers[sound._id], false);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        };

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
        if (node.readyState >= 3 || loadedNoReadyState) {
          playHtml5();
        } else {
          var listener = function() {
            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };
          node.addEventListener(Howler._canPlayEvent, listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'pause',
          action: function() {
            self.pause(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              }

              // Clean up the buffer source.
              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        }

        // Fire the pause event, unless `true` is passed as the 2nd argument.
        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function(id, internal) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to stop when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'stop',
          action: function() {
            self.stop(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;
              sound._node.pause();
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to mute when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'mute',
          action: function() {
            self.mute(muted, id);
          }
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          // Cancel active fade and set the volume to the end value.
          if (sound._interval) {
            self._stopFade(sound._id);
          }

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'volume',
            action: function() {
              self.volume.apply(self, args);
            }
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            // Stop currently running fades.
            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to fade when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'fade',
          action: function() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      }

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          }

          // If we are using Web Audio, let the native methods do the actual fade.
          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     * @param  {Boolean} isGroup   If true, set the volume on the group.
     */
    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
      var self = this;
      var vol = from;
      var diff = to - from;
      var steps = Math.abs(diff / 0.01);
      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
      var lastTick = Date.now();

      // Store the value being faded to.
      sound._fadeTo = to;

      // Update the volume value on each interval tick.
      sound._interval = setInterval(function() {
        // Update the volume based on the time since the last tick.
        var tick = (Date.now() - lastTick) / len;
        lastTick = Date.now();
        vol += diff * tick;

        // Make sure the volume is in the right bounds.
        vol = Math.max(0, vol);
        vol = Math.min(1, vol);

        // Round to within 2 decimal points.
        vol = Math.round(vol * 100) / 100;

        // Change the volume.
        if (self._webAudio) {
          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        }

        // Set the group's volume.
        if (isGroup) {
          self._volume = vol;
        }

        // When the fade is complete, stop it and fire event.
        if ((to < from && vol <= to) || (to > from && vol >= to)) {
          clearInterval(sound._interval);
          sound._interval = null;
          sound._fadeTo = null;
          self.volume(to, sound._id);
          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function(id) {
      var self = this;
      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;
        self.volume(sound._fadeTo, id);
        sound._fadeTo = null;
        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;
            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function() {
      var self = this;
      var args = arguments;
      var rate, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the playback rate or return the current value.
      var sound;
      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'rate',
            action: function() {
              self.rate.apply(self, args);
            }
          });

          return self;
        }

        // Set the group rate.
        if (typeof id === 'undefined') {
          self._rate = rate;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            sound._rateSeek = self.seek(id[i]);
            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            sound._rate = rate;

            // Change the playback rate.
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            }

            // Reset the timers.
            var seek = self.seek(id[i]);
            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
            var timeout = (duration * 1000) / Math.abs(sound._rate);

            // Start a new end timer if sound is already playing.
            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);
              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // If the sound hasn't loaded, add it to the load queue to seek when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'seek',
          action: function() {
            self.seek.apply(self, args);
          }
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          sound._ended = false;
          self._clearTimer(id);

          // Restart the playback if the sound was playing.
          if (playing) {
            self.play(id, true);
          }

          // Update the seek position for HTML5 Audio.
          if (!self._webAudio && sound._node) {
            sound._node.currentTime = seek;
          }

          // Wait for the play lock to be unset before emitting (HTML5 Audio).
          if (playing && !self._webAudio) {
            var emitSeek = function() {
              if (!self._playLock) {
                self._emit('seek', id);
              } else {
                setTimeout(emitSeek, 0);
              }
            };
            setTimeout(emitSeek, 0);
          } else {
            self._emit('seek', id);
          }
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function(id) {
      var self = this;

      // Check the passed sound ID (if any).
      if (typeof id === 'number') {
        var sound = self._soundById(id);
        return sound ? !sound._paused : false;
      }

      // Otherwise, loop through all sounds and check if any are playing.
      for (var i=0; i<self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function(id) {
      var self = this;
      var duration = self._duration;

      // If we pass an ID, get the sound and return the sprite length.
      var sound = self._soundById(id);
      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
          if (!checkIE) {
            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
          }

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);

        // Remove the references in the global Howler object.
        var index = Howler._howls.indexOf(self);
        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
      }

      // Delete this sound from the cache (if no other Howl is using it).
      var remCache = true;
      for (i=0; i<Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      }

      // Clear global errors.
      Howler.noAudio = false;

      // Clear out `self`.
      self._state = 'unloaded';
      self._sounds = [];
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0;

      // Allow passing just an event and ID.
      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i=0; i<events.length; i++) {
          var isId = (id === events[i].id);
          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);
        for (i=0; i<keys.length; i++) {
          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Setup the event listener.
      self.on(event, fn, id, 1);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=events.length-1; i>=0; i--) {
        // Only fire the listener if the correct ID is used.
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);

          // If this event was setup with `once`, remove it.
          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      // Pass the event type into load queue so that it can continue stepping.
      self._loadQueue(event);

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function(event) {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0];

        // Remove this task if a matching event was passed.
        if (task.event === event) {
          self._queue.shift();
          self._loadQueue();
        }

        // Run the task if no event type is passed.
        if (!event) {
          task.action();
        }
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function(sound) {
      var self = this;
      var sprite = sound._sprite;

      // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.
      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      }

      // Should this sound loop?
      var loop = !!(sound._loop || self._sprite[sprite][2]);

      // Fire the ended event.
      self._emit('end', sound._id);

      // Restart the playback for HTML5 Audio loop.
      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      }

      // Restart this timer if on a Web Audio loop.
      if (self._webAudio && loop) {
        self._emit('play', sound._id);
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;

        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      }

      // Mark the node as paused.
      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        self._clearTimer(sound._id);

        // Clean up the buffer source.
        self._cleanBuffer(sound._node);

        // Attempt to auto-suspend AudioContext if no sounds are still playing.
        Howler._autoSuspend();
      }

      // When using a sprite, end the track.
      if (!self._webAudio && !loop) {
        self.stop(sound._id);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        // Clear the timeout or remove the ended listener.
        if (typeof self._endTimers[id] !== 'function') {
          clearTimeout(self._endTimers[id]);
        } else {
          var sound = self._soundById(id);
          if (sound && sound._node) {
            sound._node.removeEventListener('ended', self._endTimers[id], false);
          }
        }

        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop;
      }
      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function(node) {
      var self = this;

      if (Howler._scratchBuffer) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);
        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
      }
      node.bufferSource = null;

      return self;
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a unique ID for this sound.
      self._id = ++Howler._counter;

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
        self._node.paused = true;
        self._node.connect(Howler.masterGain);
      } else {
        self._node = new Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume * Howler.volume();

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = ++Howler._counter;

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';
        parent._emit('load');
        parent._loadQueue();
      }

      // Clear the event listener.
      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  var cache = {};

  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */
  var loadBuffer = function(self) {
    var url = self._src;

    // Check if the buffer has already been cached and use it instead.
    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration;

      // Load the sound into this Howl.
      loadSound(self);

      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);
      for (var i=0; i<data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.withCredentials = self._xhrWithCredentials;
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];
        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
          return;
        }

        decodeAudioData(xhr.response, self);
      };
      xhr.onerror = function() {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };
      safeXhrSend(xhr);
    }
  };

  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */
  var safeXhrSend = function(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };

  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */
  var decodeAudioData = function(arraybuffer, self) {
    // Decode the buffer into an audio source.
    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      }
    }, function() {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    });
  };

  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */
  var loadSound = function(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    }

    // Setup a sprite if none is defined.
    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {__default: [0, self._duration * 1000]};
    }

    // Fire the loaded event.
    if (self._state !== 'loaded') {
      self._state = 'loaded';
      self._emit('load');
      self._loadQueue();
    }
  };

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  var setupAudioContext = function() {
    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch(e) {
      Howler.usingWebAudio = false;
    }

    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.
    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
        Howler.usingWebAudio = false;
      }
    }

    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    if (Howler.usingWebAudio) {
      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
      Howler.masterGain.connect(Howler.ctx.destination);
    }

    // Re-run the setup on Howler.
    Howler._setup();
  };

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  // Add support for CommonJS libraries such as browserify.
  if (true) {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Define globally in case AMD is not available or unused.
  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  }
})();


/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.0.12
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup default properties.
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */
  HowlerGlobal.prototype.stereo = function(pan) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Loop through all Howls and update their stereo panning.
    for (var i=self._howls.length-1; i>=0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };

  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */
  HowlerGlobal.prototype.pos = function(x, y, z) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._pos[1] : y;
    z = (typeof z !== 'number') ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];

      if (typeof self.ctx.listener.positionX !== 'undefined') {
        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
      }
    } else {
      return self._pos;
    }

    return self;
  };

  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */
  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    var or = self._orientation;
    y = (typeof y !== 'number') ? or[1] : y;
    z = (typeof z !== 'number') ? or[2] : z;
    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];

      if (typeof self.ctx.listener.forwardX !== 'undefined') {
        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
      }
    } else {
      return or;
    }

    return self;
  };

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */
  Howl.prototype.init = (function(_super) {
    return function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      };

      // Setup event listeners.
      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

      // Complete initilization with howler.js core's init function.
      return _super.call(this, o);
    };
  })(Howl.prototype.init);

  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */
  Howl.prototype.stereo = function(pan, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function() {
          self.stereo(pan, id);
        }
      });

      return self;
    }

    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    // Setup the group's stereo panning if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    }

    // Change the streo panning of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower';

            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              if (typeof sound._panner.positionX !== 'undefined') {
                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
              } else {
                sound._panner.setPosition(pan, 0, 0);
              }
            } else {
              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */
  Howl.prototype.pos = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? 0 : y;
    z = (typeof z !== 'number') ? -0.5 : z;

    // Setup the group's spatial position if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    }

    // Change the spatial position of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.positionX !== 'undefined') {
              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(x, y, z);
            }
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */
  Howl.prototype.orientation = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._orientation[1] : y;
    z = (typeof z !== 'number') ? self._orientation[2] : z;

    // Setup the group's spatial orientation if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    }

    // Change the spatial orientation of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
            sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
            sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   *
   * @return {Howl/Object} Returns self or current panner attributes.
   */
  Howl.prototype.pannerAttr = function() {
    var self = this;
    var args = arguments;
    var o, id, sound;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // Determine the values based on arguments.
    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0];

        // Set the grou's panner attribute values.
        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    }

    // Update the values of the specified sounds.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        };

        // Update the panner values or create a new panner if none exists.
        var panner = sound._panner;
        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          }

          // Create a new panner node.
          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */
  Sound.prototype.init = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Setup user-defined default properties.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete initilization with howler.js core Sound's init function.
      _super.call(this);

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  })(Sound.prototype.init);

  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */
  Sound.prototype.reset = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Reset all spatial plugin properties on this sound.
      self._orientation = parent._orientation;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete resetting of the sound.
      return _super.call(this);
    };
  })(Sound.prototype.reset);

  /** Helper Methods **/
  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */
  var setupPanner = function(sound, type) {
    type = type || 'spatial';

    // Create the new panner node.
    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;

      if (typeof sound._panner.positionX !== 'undefined') {
        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
      }

      if (typeof sound._panner.orientationX !== 'undefined') {
        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
      }
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    }

    sound._panner.connect(sound._node);

    // Update the connections.
    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id, true);
    }
  };
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = [{"audioFile":"bollnasBus.mp3","spectrum":[{"freq":172.265625,"magnitude":-17.399746},{"freq":64.599609,"magnitude":-21.96829},{"freq":366.064453,"magnitude":-32.528049},{"freq":516.796875,"magnitude":-38.542358},{"freq":689.0625,"magnitude":-39.038445},{"freq":861.328125,"magnitude":-39.638317},{"freq":775.195312,"magnitude":-39.66655},{"freq":990.527344,"magnitude":-40.016201},{"freq":925.927734,"magnitude":-40.517895},{"freq":1098.193359,"magnitude":-41.060593},{"freq":1356.591797,"magnitude":-41.274876},{"freq":1270.458984,"magnitude":-43.702244},{"freq":1873.388672,"magnitude":-44.169426},{"freq":1528.857422,"magnitude":-45.135281},{"freq":1636.523438,"magnitude":-45.653736},{"freq":1744.189453,"magnitude":-45.790058}]},{"audioFile":"coop.mp3","spectrum":[{"freq":86.132812,"magnitude":-28.932537},{"freq":236.865234,"magnitude":-32.327995},{"freq":452.197266,"magnitude":-36.28949},{"freq":344.53125,"magnitude":-36.789261},{"freq":559.863281,"magnitude":-38.61684},{"freq":732.128906,"magnitude":-39.494778},{"freq":796.728516,"magnitude":-39.511993},{"freq":1076.660156,"magnitude":-48.423088},{"freq":1184.326172,"magnitude":-50.484188},{"freq":1248.925781,"magnitude":-50.664841},{"freq":1464.257812,"magnitude":-51.075733},{"freq":1399.658203,"magnitude":-51.329906},{"freq":1658.056641,"magnitude":-51.729897},{"freq":1851.855469,"magnitude":-53.016678},{"freq":2110.253906,"magnitude":-55.621365},{"freq":2024.121094,"magnitude":-57.550549}]},{"audioFile":"counting1.mp3","spectrum":[{"freq":193.798828,"magnitude":-26.017561},{"freq":409.130859,"magnitude":-35.475403},{"freq":602.929688,"magnitude":-43.021927},{"freq":796.728516,"magnitude":-46.480598},{"freq":7192.089844,"magnitude":-52.308483},{"freq":7235.15625,"magnitude":-52.633369},{"freq":8290.283203,"magnitude":-52.669678},{"freq":7105.957031,"magnitude":-52.945122},{"freq":6567.626953,"magnitude":-52.98806},{"freq":6503.027344,"magnitude":-53.184967},{"freq":6416.894531,"magnitude":-53.473446},{"freq":8182.617188,"magnitude":-53.531357},{"freq":5684.765625,"magnitude":-53.602531},{"freq":8139.550781,"magnitude":-54.062778},{"freq":6653.759766,"magnitude":-54.157398},{"freq":5577.099609,"magnitude":-54.469383}]},{"audioFile":"countingSvenska.mp3","spectrum":[{"freq":215.332031,"magnitude":-18.976727},{"freq":430.664062,"magnitude":-23.805183},{"freq":473.730469,"magnitude":-23.937403},{"freq":667.529297,"magnitude":-36.477356},{"freq":9776.074219,"magnitude":-46.779316},{"freq":9883.740234,"magnitude":-46.87299},{"freq":9948.339844,"magnitude":-47.843761},{"freq":818.261719,"magnitude":-47.975559},{"freq":9108.544922,"magnitude":-50.064014},{"freq":8656.347656,"magnitude":-50.149624},{"freq":2002.587891,"magnitude":-50.343147},{"freq":9711.474609,"magnitude":-50.482002},{"freq":7385.888672,"magnitude":-50.554905},{"freq":9173.144531,"magnitude":-50.921734},{"freq":9646.875,"magnitude":-51.072002},{"freq":1765.722656,"magnitude":-51.101601}]},{"audioFile":"crosswalk.mp3","spectrum":[{"freq":257.8125,"magnitude":-37.666729},{"freq":820.3125,"magnitude":-41.777088},{"freq":750,"magnitude":-43.647976},{"freq":539.0625,"magnitude":-47.038448},{"freq":1382.8125,"magnitude":-47.713871},{"freq":960.9375,"magnitude":-47.815086},{"freq":1453.125,"magnitude":-49.521015},{"freq":1218.75,"magnitude":-49.886189},{"freq":2906.25,"magnitude":-50.243725},{"freq":1289.0625,"magnitude":-50.455692},{"freq":2625,"magnitude":-51.801075},{"freq":1593.75,"magnitude":-51.846096},{"freq":3023.4375,"magnitude":-52.134571},{"freq":2039.0625,"magnitude":-52.144482},{"freq":2320.3125,"magnitude":-52.657024},{"freq":1921.875,"magnitude":-53.338219}]},{"audioFile":"emptyWordsNea.mp3","spectrum":[{"freq":215.332031,"magnitude":-19.520159},{"freq":430.664062,"magnitude":-25.219025},{"freq":602.929688,"magnitude":-31.175522},{"freq":64.599609,"magnitude":-35.193279},{"freq":796.728516,"magnitude":-39.868279},{"freq":1787.255859,"magnitude":-41.391182},{"freq":882.861328,"magnitude":-42.827045},{"freq":1055.126953,"magnitude":-45.009171},{"freq":1679.589844,"magnitude":-45.019444},{"freq":1119.726562,"magnitude":-45.374962},{"freq":1571.923828,"magnitude":-45.392387},{"freq":1421.191406,"magnitude":-46.156982},{"freq":1270.458984,"magnitude":-46.377228},{"freq":1894.921875,"magnitude":-46.470295},{"freq":1485.791016,"magnitude":-47.266369},{"freq":8613.28125,"magnitude":-47.489655}]},{"audioFile":"flightLanding.mp3","spectrum":[{"freq":150.732422,"magnitude":-23.22921},{"freq":322.998047,"magnitude":-27.817633},{"freq":86.132812,"magnitude":-28.757832},{"freq":882.861328,"magnitude":-36.045925},{"freq":452.197266,"magnitude":-36.165146},{"freq":516.796875,"magnitude":-38.192909},{"freq":645.996094,"magnitude":-39.4725},{"freq":1055.126953,"magnitude":-40.918613},{"freq":990.527344,"magnitude":-40.968189},{"freq":732.128906,"magnitude":-41.37928},{"freq":796.728516,"magnitude":-41.518967},{"freq":1485.791016,"magnitude":-42.438782},{"freq":1248.925781,"magnitude":-44.283665},{"freq":1765.722656,"magnitude":-44.834751},{"freq":1162.792969,"magnitude":-45.961536},{"freq":1356.591797,"magnitude":-46.540531}]},{"audioFile":"fromBerlin.mp3","spectrum":[{"freq":129.199219,"magnitude":-19.337328},{"freq":172.265625,"magnitude":-20.061157},{"freq":236.865234,"magnitude":-21.243382},{"freq":366.064453,"magnitude":-25.249617},{"freq":409.130859,"magnitude":-25.250202},{"freq":322.998047,"magnitude":-25.32493},{"freq":473.730469,"magnitude":-25.473864},{"freq":645.996094,"magnitude":-26.291237},{"freq":602.929688,"magnitude":-26.820797},{"freq":968.994141,"magnitude":-28.423075},{"freq":796.728516,"magnitude":-28.616865},{"freq":904.394531,"magnitude":-30.327291},{"freq":1464.257812,"magnitude":-32.71851},{"freq":1184.326172,"magnitude":-33.538372},{"freq":1119.726562,"magnitude":-33.638268},{"freq":1270.458984,"magnitude":-34.200172}]},{"audioFile":"kitchen1.mp3","spectrum":[{"freq":107.666016,"magnitude":-23.018032},{"freq":150.732422,"magnitude":-23.063093},{"freq":107.666016,"magnitude":-23.683832},{"freq":150.732422,"magnitude":-23.870668},{"freq":236.865234,"magnitude":-27.578087},{"freq":236.865234,"magnitude":-28.458439},{"freq":301.464844,"magnitude":-28.528795},{"freq":301.464844,"magnitude":-29.146461},{"freq":430.664062,"magnitude":-31.122925},{"freq":430.664062,"magnitude":-31.620726},{"freq":538.330078,"magnitude":-32.279846},{"freq":538.330078,"magnitude":-32.766731},{"freq":495.263672,"magnitude":-32.782124},{"freq":495.263672,"magnitude":-32.833862},{"freq":645.996094,"magnitude":-33.121647},{"freq":645.996094,"magnitude":-33.218231}]},{"audioFile":"pendelTag.mp3","spectrum":[{"freq":236.865234,"magnitude":-16.221592},{"freq":64.599609,"magnitude":-18.688091},{"freq":409.130859,"magnitude":-20.336178},{"freq":559.863281,"magnitude":-21.620527},{"freq":624.462891,"magnitude":-23.685429},{"freq":861.328125,"magnitude":-25.067635},{"freq":925.927734,"magnitude":-25.832678},{"freq":1722.65625,"magnitude":-27.109802},{"freq":1873.388672,"magnitude":-27.189735},{"freq":1055.126953,"magnitude":-29.507767},{"freq":1248.925781,"magnitude":-29.806211},{"freq":1141.259766,"magnitude":-30.065187},{"freq":1313.525391,"magnitude":-30.253767},{"freq":1916.455078,"magnitude":-30.367163},{"freq":1421.191406,"magnitude":-31.539719},{"freq":1528.857422,"magnitude":-31.722507}]},{"audioFile":"pendelTag2.mp3","spectrum":[{"freq":301.464844,"magnitude":-28.588257},{"freq":150.732422,"magnitude":-29.29398},{"freq":366.064453,"magnitude":-31.429947},{"freq":86.132812,"magnitude":-31.997349},{"freq":689.0625,"magnitude":-32.262497},{"freq":775.195312,"magnitude":-33.855614},{"freq":559.863281,"magnitude":-34.162552},{"freq":947.460938,"magnitude":-35.370667},{"freq":861.328125,"magnitude":-36.640476},{"freq":1076.660156,"magnitude":-39.055378},{"freq":1248.925781,"magnitude":-40.740498},{"freq":1313.525391,"magnitude":-41.248177},{"freq":1442.724609,"magnitude":-43.415245},{"freq":1550.390625,"magnitude":-44.174026},{"freq":1658.056641,"magnitude":-44.426029},{"freq":2002.587891,"magnitude":-45.137405}]},{"audioFile":"sirenBirds.mp3","spectrum":[{"freq":2906.982422,"magnitude":-23.156624},{"freq":732.128906,"magnitude":-26.645731},{"freq":322.998047,"magnitude":-27.420908},{"freq":968.994141,"magnitude":-27.515535},{"freq":172.265625,"magnitude":-27.680265},{"freq":129.199219,"magnitude":-27.757851},{"freq":1937.988281,"magnitude":-29.04484},{"freq":882.861328,"magnitude":-29.5805},{"freq":602.929688,"magnitude":-29.844624},{"freq":452.197266,"magnitude":-30.23547},{"freq":538.330078,"magnitude":-30.711304},{"freq":1098.193359,"magnitude":-31.065268},{"freq":1313.525391,"magnitude":-33.923553},{"freq":2196.386719,"magnitude":-33.927032},{"freq":2131.787109,"magnitude":-35.18816},{"freq":2304.052734,"magnitude":-35.270332}]},{"audioFile":"snow.mp3","spectrum":[{"freq":64.599609,"magnitude":-29.677166},{"freq":344.53125,"magnitude":-40.347485},{"freq":602.929688,"magnitude":-44.040558},{"freq":689.0625,"magnitude":-44.897915},{"freq":925.927734,"magnitude":-48.870106},{"freq":1205.859375,"magnitude":-49.086319},{"freq":1098.193359,"magnitude":-50.976013},{"freq":1291.992188,"magnitude":-52.224236},{"freq":1421.191406,"magnitude":-53.330524},{"freq":1485.791016,"magnitude":-53.476215},{"freq":1378.125,"magnitude":-53.615837},{"freq":1636.523438,"magnitude":-54.583996},{"freq":1744.189453,"magnitude":-55.241005},{"freq":1808.789062,"magnitude":-55.726116},{"freq":1937.988281,"magnitude":-57.665276},{"freq":2024.121094,"magnitude":-59.252815}]},{"audioFile":"walkingInStreet.mp3","spectrum":[{"freq":129.199219,"magnitude":-24.899473},{"freq":258.398438,"magnitude":-30.800665},{"freq":215.332031,"magnitude":-31.003553},{"freq":64.599609,"magnitude":-32.746632},{"freq":904.394531,"magnitude":-35.545536},{"freq":602.929688,"magnitude":-35.755497},{"freq":366.064453,"magnitude":-35.907131},{"freq":839.794922,"magnitude":-36.146004},{"freq":452.197266,"magnitude":-36.174366},{"freq":689.0625,"magnitude":-36.796539},{"freq":968.994141,"magnitude":-37.352345},{"freq":1098.193359,"magnitude":-38.130184},{"freq":1184.326172,"magnitude":-38.222878},{"freq":1141.259766,"magnitude":-38.283627},{"freq":1399.658203,"magnitude":-41.17009},{"freq":1787.255859,"magnitude":-43.650486}]}]

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjJjZGY2YTNiNmFkNzUxOGRkM2YiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NjcmlwdHMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi4vYnVpbGQvd25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQzVEQSxNQUFNLEdBQUcsR0FBRyxtQkFBTyxDQUFDLENBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFFOUMsR0FBRyxDQUFDO0lBQ0YsVUFBVSxFQUFFLFVBQVU7Q0FDdkIsQ0FBQyxDQUFDOzs7Ozs7O0FDTEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEIsRUFBRTtBQUMvRCx5Q0FBeUMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtEQUErRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSwwREFBMEQsY0FBYztBQUN4RSw2RkFBNkYsWUFBWSxFQUFFO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUF3RDtBQUN2RSxlQUFlLHdEQUF3RDtBQUN2RSxhQUFhLHNEQUFzRDtBQUNuRSxhQUFhLHNEQUFzRDtBQUNuRSxhQUFhLDJEQUEyRDtBQUN4RSxhQUFhLDJEQUEyRDtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw2REFBNkQ7QUFDMUU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWEsdURBQXVEO0FBQ3BFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwyQkFBMkIsRUFBRSxjQUFjO0FBQ3JFLDZCQUE2Qix1Q0FBdUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVJQUF1STtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEZBQTBGLDJCQUEyQjtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMENBQTBDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzR0FBc0c7QUFDNUg7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxlQUFlLGlKQUFpSiwrQ0FBK0MsbUJBQW1CLFNBQVMsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELHVDQUF1QyxxQ0FBcUMsb0JBQW9CLEVBQUUsaUJBQWlCLDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEVBQUUsbUJBQW1CLDhCQUE4QixxREFBcUQsMEJBQTBCLDZDQUE2QyxzQkFBc0IsNkRBQTZELFlBQVksZUFBZSxTQUFTLGlCQUFpQixpQ0FBaUMsaUJBQWlCLFlBQVksVUFBVSxzQkFBc0IsbUJBQW1CLGlEQUFpRCxpQkFBaUIsa0JBQWtCLGFBQWEsT0FBTyxZQUFZLGlEQUFpRCxZQUFZLFdBQVcsNkNBQTZDLE9BQU8sMkJBQTJCLHNDQUFzQyxXQUFXLG9FQUFvRSwrQkFBK0IsWUFBWSxXQUFXLEtBQUssV0FBVyx3QkFBd0IsU0FBUyxvQkFBb0IscUNBQXFDLFNBQVMsNkJBQTZCLFNBQVMsRUFBRSxrQ0FBa0MsV0FBVyxZQUFZLEtBQUssK0JBQStCLG1CQUFtQixlQUFlLGVBQWUsOEJBQThCLFFBQVEsaUJBQWlCLDBEQUEwRCxZQUFZLElBQUksOEJBQThCLHVEQUF1RCw0QkFBNEIsZ0VBQWdFLFNBQVMsWUFBWSwyQkFBMkIsS0FBSyxTQUFTLFlBQVkseUJBQXlCLGNBQWMsVUFBVSxZQUFZLFdBQVcsS0FBSyxTQUFTLFlBQVksS0FBSywrQkFBK0IsOEZBQThGLFVBQVUsa0JBQWtCLGdCQUFnQiw2RUFBNkUsMEJBQTBCLGNBQWMsc0JBQXNCLEVBQUUsd0NBQXdDLDZDQUE2QyxZQUFZLEdBQUc7O0FBRXBvRixPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLDJGQUEyRixnQkFBZ0IsRUFBRTtBQUM3Rzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFFBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsUUFBUTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUNBQXlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsMkZBQTJGLGNBQWMsRUFBRTtBQUMzRztBQUNBO0FBQ0E7QUFDQSxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixnQkFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5Q0FBeUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwyREFBMkQsMEJBQTBCLGdDQUFnQztBQUM5SztBQUNBO0FBQ0EsZUFBZSx5Q0FBeUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtDQUFrQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSw4Q0FBOEMsZ0VBQWdFO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEIsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLGNBQWM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixjQUFjO0FBQ3JDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLE1BQU07QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0EsaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCxnREFBZ0Q7QUFDaEQsZ0RBQWdEO0FBQ2hELGdEQUFnRDtBQUNoRCxrREFBa0Q7QUFDbEQsbURBQW1ELHVDQUF1Qyx1Q0FBdUM7QUFDakksbURBQW1ELHVDQUF1Qyx1Q0FBdUM7QUFDakksa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQscURBQXFELHdDQUF3QztBQUM3Rjs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBLHVCQUF1QixpQ0FBaUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QyxrQ0FBa0MsYUFBYTtBQUMvQyxrQ0FBa0MsYUFBYTtBQUMvQyw0Q0FBNEMsa0JBQWtCO0FBQzlELDRDQUE0QyxrQkFBa0I7QUFDOUQsb0NBQW9DLGNBQWM7QUFDbEQsa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0Msc0NBQXNDLGVBQWU7QUFDckQsa0NBQWtDLGFBQWE7QUFDL0Msa0NBQWtDLGFBQWE7QUFDL0M7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsS0FBSztBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsd0JBQXdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsU0FBUztBQUN6QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsMkJBQTJCLElBQUksZUFBZTtBQUMxRTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsU0FBUztBQUN6QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsTUFBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLE1BQU07QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrREFBa0QsRUFBRTtBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsR0FBRztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQixjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxLQUFLO0FBQ25CLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsMENBQTBDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLE1BQU07QUFDMUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxhQUFhO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JELGdDQUFnQyxZQUFZO0FBQzVDLGdEQUFnRCxvQkFBb0I7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsV0FBVztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixjQUFjO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGNBQWMsU0FBUztBQUN2QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw0QkFBNEI7O0FBRTVCLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDOzs7QUFHQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxtQkFBbUIsMENBQTBDLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsb0NBQW9DLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUseUNBQXlDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsK0NBQStDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHVDQUF1QyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUseUNBQXlDLHVDQUF1QyxFQUFFLHVDQUF1QyxFQUFFLGtDQUFrQyxFQUFFLHVDQUF1QyxFQUFFLHdDQUF3QyxFQUFFLHVDQUF1QyxFQUFFLHVDQUF1QyxFQUFFLHNDQUFzQyxFQUFFLHNDQUFzQyxFQUFFLHdDQUF3QyxFQUFFLG1DQUFtQyxFQUFFLHNDQUFzQyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHVDQUF1QyxFQUFFLEVBQUUsNkNBQTZDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLEVBQUUsNkNBQTZDLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsMENBQTBDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsd0NBQXdDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLEVBQUUseUNBQXlDLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsMENBQTBDLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsMENBQTBDLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsb0NBQW9DLHdDQUF3QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHVDQUF1QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsK0NBQStDLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHdDQUF3QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHlDQUF5QyxFQUFFLHVDQUF1QyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLDBDQUEwQyxFQUFFLHlDQUF5QyxFQUFFLDBDQUEwQyxFQUFFOztBQUVyaVUsT0FBTztBQUNQO0FBQ0EsQ0FBQztBQUNELDJDQUEyQyxjQUFjLCs4OVAiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGIyY2RmNmEzYjZhZDc1MThkZDNmIiwiXG5jb25zdCBXTlMgPSByZXF1aXJlKCcuLi8uLi8uLi9idWlsZC93bnMnKS5XTlM7XG5cbldOUyh7XG4gIHNhbXBsZVBhdGg6IFwic2FtcGxlcy9cIixcbn0pO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc2NyaXB0cy9tYWluLnRzIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJXTlNcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiV05TXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIldOU1wiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgdXRpbHMgPSB7XHJcbiAgICBtdG9mOiAobm90ZSkgPT4gTWF0aC5wb3coMiwgKG5vdGUpIC8gMTIpICogNDQwLFxyXG4gICAgZnRvbTogKG5vdGUpID0+IE1hdGguc3FydChub3RlIC8gNDQwKSAvIDEyLFxyXG4gICAgY2hvb3NlOiAoYXJyYXkpID0+IHtcclxuICAgICAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XHJcbiAgICB9LFxyXG4gICAgZ2V0UmF0ZUZyb21GcmVxdWVuY2llczogKGZyZXEsIGJhc2VGcmVxKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGZyZXEgLyBiYXNlRnJlcTtcclxuICAgIH0sXHJcbiAgICBnZXRDbG9zZXN0TWVtYmVyOiAoc3ViamVjdCwgc2V0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNldC5yZWR1Y2UoKGFjY3VtLCBtZW1iZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJldkRpc3RhbmNlID0gYWNjdW0gLSBzdWJqZWN0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGlzdGFuY2UgPSBtZW1iZXIgLSBzdWJqZWN0O1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3VycmVudERpc3RhbmNlKSA8IE1hdGguYWJzKHByZXZEaXN0YW5jZSkgPyBtZW1iZXIgOiBhY2N1bTtcclxuICAgICAgICB9LCBzZXRbMF0pO1xyXG4gICAgfSxcclxuICAgIGZpbmRJbkNvbGxlY3Rpb246IChjb2xsZWN0aW9uLCBwcmVkaWNhdGVGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnJlZHVjZSgoYWNjdW0sIG1lbWJlcikgPT4gcHJlZGljYXRlRnVuY3Rpb24obWVtYmVyKSA/IG1lbWJlciA6IGFjY3VtKTtcclxuICAgIH0sXHJcbiAgICBtYXBUb0RvbWFpbjogKHNldCwgZG9tYWluKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2V0T2Zmc2V0ID0gTWF0aC5taW4oLi4uZG9tYWluKSAtIE1hdGgubWluKC4uLnNldCk7XHJcbiAgICAgICAgY29uc3QgZG9tYWluUmFuZ2UgPSAoTWF0aC5tYXgoLi4uZG9tYWluKSAtIE1hdGgubWluKC4uLmRvbWFpbikpO1xyXG4gICAgICAgIGNvbnN0IHNldFJhbmdlID0gKE1hdGgubWF4KC4uLnNldCkgLSBNYXRoLm1pbiguLi5zZXQpKTtcclxuICAgICAgICByZXR1cm4gc2V0Lm1hcChtZW1iZXIgPT4gdXRpbHMuZ2V0Q2xvc2VzdE1lbWJlcigoKChtZW1iZXIgLSBNYXRoLm1pbiguLi5zZXQpKSAvIHNldFJhbmdlKSAqIGRvbWFpblJhbmdlKSArIHNldE9mZnNldCwgZG9tYWluKSk7XHJcbiAgICB9LFxyXG4gICAgLy8gVE9ETzogSSBkaWQgdGhlIHRydWUvZmFsc2UgYmFja3dhcmRzIG9uIHRoaXMgYnV0IGV2ZXJ5dGhpbmcgdXNlcyBpdCB0aGlzIHdheS5cclxuICAgIGZsaXBDb2luOiAocHJvYmFiaWxpdHkgPSAwLjUpID0+IChNYXRoLnJhbmRvbSgpIDwgcHJvYmFiaWxpdHkpID8gZmFsc2UgOiB0cnVlLFxyXG4gICAgbWFrZUZ1bmN0aW9uOiAodmFsdWUpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9ICh1dGlscyk7XHJcbmNvbnN0IHdpbmRleCA9ICh3ZWlnaHRzKSA9PiB7XHJcbiAgICBsZXQgc3VtT2ZXZWlnaHRzID0gd2VpZ2h0cy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYgKyBjdXJyKTtcclxuICAgIGxldCByYW5kTnVtID0gTWF0aC5yYW5kb20oKSAqIHN1bU9mV2VpZ2h0cztcclxuICAgIGxldCB3ZWlnaHRTdW0gPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWlnaHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgd2VpZ2h0U3VtICs9IHdlaWdodHNbaV07XHJcbiAgICAgICAgd2VpZ2h0U3VtID0gK3dlaWdodFN1bS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIGlmIChyYW5kTnVtIDw9IHdlaWdodFN1bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgd2luZGV4ICovXG5cclxuY29uc3Qgbm9ybWFsaXplID0gKGNvbGwpID0+IHtcclxuICAgIGxldCBjb2xsU3VtID0gY29sbC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcclxuICAgIHJldHVybiBjb2xsU3VtID4gMCA/IGNvbGwubWFwKCh3ZWlnaHQpID0+IHdlaWdodCAvIGNvbGxTdW0pIDogY29sbC5tYXAoKCkgPT4gMCk7XHJcbn07XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgbm9ybWFsaXplICovXG5cclxuY29uc3QgaXNFcXVpdmFsZW50ID0gKGEsIGIpID0+IHtcclxuICAgIC8vIENyZWF0ZSBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXNcclxuICAgIHZhciBhUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhKTtcclxuICAgIHZhciBiUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiKTtcclxuICAgIC8vIElmIG51bWJlciBvZiBwcm9wZXJ0aWVzIGlzIGRpZmZlcmVudCxcclxuICAgIC8vIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XHJcbiAgICBpZiAoYVByb3BzLmxlbmd0aCAhPSBiUHJvcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhUHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgcHJvcE5hbWUgPSBhUHJvcHNbaV07XHJcbiAgICAgICAgLy8gSWYgdmFsdWVzIG9mIHNhbWUgcHJvcGVydHkgYXJlIG5vdCBlcXVhbCxcclxuICAgICAgICAvLyBvYmplY3RzIGFyZSBub3QgZXF1aXZhbGVudFxyXG4gICAgICAgIGlmIChhW3Byb3BOYW1lXSAhPT0gYltwcm9wTmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIElmIHdlIG1hZGUgaXQgdGhpcyBmYXIsIG9iamVjdHNcclxuICAgIC8vIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnRcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IGlzRXF1aXZhbGVudCAqL1xuXHJcbmNvbnN0IG1vZCA9IChudW0sIG1vZHVsbykgPT4gKG51bSAlIG1vZHVsbyArIG1vZHVsbykgJSBtb2R1bG87XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiY1wiXSA9IG1vZDtcblxyXG5jb25zdCBnZXRTZXF1ZW50aWFsUmFuZG9tSW5kZXggPSAobGFzdEluZGV4LCBsZW5ndGgpID0+IHtcclxuICAgIGNvbnN0IHBvc3NpYmxlSW5kZXhlcyA9IEFycmF5KGxlbmd0aCkuZmlsbCgwKS5tYXAoKGl0ZW0sIGkpID0+IGkpLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IGxhc3RJbmRleCk7XHJcbiAgICByZXR1cm4gdXRpbHMuY2hvb3NlKHBvc3NpYmxlSW5kZXhlcyk7XHJcbn07XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYlwiXSA9IGdldFNlcXVlbnRpYWxSYW5kb21JbmRleDtcblxyXG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIldOU1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFdOUzsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19TY2VuZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1N5bnRoX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fTm9pc2VfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19NdWx0aVNhbXBsZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X191dGlsc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3NwZWN0cmFsRGF0YV9qc29uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3NwZWN0cmFsRGF0YV9qc29uX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3NwZWN0cmFsRGF0YV9qc29uX18pO1xuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbjtcclxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcclxuICAgIHNhbXBsZVBhdGg6IFwic2FtcGxlcy9cIixcclxufTtcclxuY29uc3QgV05TID0gKGNvbmZpZykgPT4ge1xyXG4gICAgY29uZmlnID0gY29uZmlnID8gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgY29uZmlnKSA6IGRlZmF1bHRDb25maWc7XHJcbiAgICBjb25zdCBiYWNrZ3JvdW5kU2FtcGxlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fc3BlY3RyYWxEYXRhX2pzb25fX19kZWZhdWx0LmE7XHJcbiAgICAvLyBTZXR1cFxyXG4gICAgY29uc3QgcG9wdWxhdGlvblNpemUgPSAxNjtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbiAgICBjb25zdCBjaG9yZE9zY2lsbGF0b3JzID0gQXJyYXkocG9wdWxhdGlvblNpemUpLmZpbGwoMCkubWFwKCgpID0+IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1N5bnRoX19bXCJhXCIgLyogZGVmYXVsdCAqL10oY29udGV4dCkpO1xyXG4gICAgY29uc3QgbXVsdGlTYW1wbGVyT3B0cyA9IHtcclxuICAgICAgICBzYW1wbGVzOiBbXHJcbiAgICAgICAgICAgIC8veyBmaWxlczogWyBjb25maWcuc2FtcGxlUGF0aCArIFwicGlwZUcubXAzXCIgXSwgZnJlcTogMTk5IH0sXHJcbiAgICAgICAgICAgIC8veyBmaWxlczogWyBjb25maWcuc2FtcGxlUGF0aCArIFwicGlwZUQubXAzXCIgXSwgZnJlcTogMzA2IH0sXHJcbiAgICAgICAgICAgIHsgZmlsZXM6IFtjb25maWcuc2FtcGxlUGF0aCArIFwicGlwZUEubXAzXCJdLCBmcmVxOiA0NDUgfSxcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgXCJwaXBlRS5tcDNcIl0sIGZyZXE6IDY2NiB9LFxyXG4gICAgICAgICAgICB7IGZpbGVzOiBbY29uZmlnLnNhbXBsZVBhdGggKyBcInBpYW5vMi0zMjQubXAzXCJdLCBmcmVxOiAzMjQgfSxcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgXCJwaWFubzMtODE0Lm1wM1wiXSwgZnJlcTogODE0IH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcbiAgICBjb25zdCBtZWxvZHlPc2NpbGxhdG9ycyA9IEFycmF5KHBvcHVsYXRpb25TaXplKS5maWxsKDApLm1hcCgoKSA9PiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZmxpcENvaW4oKSA/IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX011bHRpU2FtcGxlcl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKGNvbnRleHQsIG11bHRpU2FtcGxlck9wdHMpIDogbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fU3ludGhfX1tcImFcIiAvKiBkZWZhdWx0ICovXShjb250ZXh0KSk7XHJcbiAgICBjb25zdCBzb3VyY2VTYW1wbGVzID0gYmFja2dyb3VuZFNhbXBsZXMubWFwKHNhbXBsZURhdGEgPT4gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fTXVsdGlTYW1wbGVyX19bXCJhXCIgLyogZGVmYXVsdCAqL10oY29udGV4dCwge1xyXG4gICAgICAgIHNhbXBsZXM6IFtcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgc2FtcGxlRGF0YS5hdWRpb0ZpbGVdLCBmcmVxOiAxIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0pKTtcclxuICAgIGNvbnN0IGxvd0Ryb25lUGxheWVyID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fTXVsdGlTYW1wbGVyX19bXCJhXCIgLyogZGVmYXVsdCAqL10oY29udGV4dCwge1xyXG4gICAgICAgIHNhbXBsZXM6IFtcclxuICAgICAgICAgICAgeyBmaWxlczogW2NvbmZpZy5zYW1wbGVQYXRoICsgXCJsb3dEcm9uZS5tcDNcIl0sIGZyZXE6IDEgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBiZWxscyA9IEFycmF5KDIpLmZpbGwoMCkubWFwKCgpID0+IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX05vaXNlX19bXCJhXCIgLyogTm9pc2UgKi9dKGNvbnRleHQpKTtcclxuICAgIGNvbnN0IHBsYXlCZWxscyA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDQ1O1xyXG4gICAgICAgIGJlbGxzLmZvckVhY2goKGJlbGwsIGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZG9tTXVsID0gKE1hdGgucmFuZG9tKCkgKiAwLjI1KSArIDE7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyZXFzID0gWzIwOTAsIDIzOTNdO1xyXG4gICAgICAgICAgICBiZWxsLnBsYXkoe1xyXG4gICAgICAgICAgICAgICAgcGFuOiAoaSAqIDIpIC0gMSxcclxuICAgICAgICAgICAgICAgIGZyZXE6IGZyZXFzW2ldICogcmFuZG9tTXVsLFxyXG4gICAgICAgICAgICAgICAgdm9sOiA3LjgsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dChwbGF5TmV3U2NlbmUsIChkdXJhdGlvbiArIDEyKSAqIDEwMDApOyAvLyBUaW1pbmcgaXMgd2VpcmQgaW4gdGhlIHBsYXllci4gVGhpcyByZXN1bHRzIGluIGEgZ2FwIHdoaWNoIGlzIHdoYXQgSSB3YW50XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGxheURyb25lID0gKCkgPT4ge1xyXG4gICAgICAgIGxvd0Ryb25lSXNQbGF5aW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZygncGxheWluZyBkcm9uZS4uLicpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBsb3dEcm9uZUlzUGxheWluZyA9IGZhbHNlOyB9LCAzMzAgKiAxMDAwKTsgLy8gTG93IERyb25lIGxhc3QgMzAwKjEwMDAgbWlsbGlzZWNvbmRzLCBhZGQgYW4gZXh0cmEgMzAgc2Vjb25kcyBhZnRlciB0byBkZWNyZWFzZSByZXBldGl0aW9uXHJcbiAgICAgICAgbG93RHJvbmVQbGF5ZXIucGxheSh7IGZyZXE6IDEsIHRpbWU6IDMwMCAqIDEwMDAsIHZvbDogMC43MCB9KTtcclxuICAgIH07XHJcbiAgICBsZXQgc2FtcGxlSW5kZXggPSAwO1xyXG4gICAgbGV0IGludGVybHVkZUp1c3RQbGF5ZWQgPSBmYWxzZTtcclxuICAgIGxldCBsb3dEcm9uZUlzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgY29uc3QgcGxheU5ld1NjZW5lID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIE9jY2FzaW9uYWxseSB3ZSB3YW50IHRvIHBhdXNlIGZvciBhIG1vbWVudCB0byBwbGF5IGFuIGludGVybHVkZSBpbiBzaWxlbmNlXHJcbiAgICAgICAgY29uc3QgcGxheUludGVybHVkZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5mbGlwQ29pbigwLjgwKTtcclxuICAgICAgICBjb25zdCBwbGF5TG93RHJvbmUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZmxpcENvaW4oMC44NSk7XHJcbiAgICAgICAgaWYgKHBsYXlJbnRlcmx1ZGUgJiYgIWludGVybHVkZUp1c3RQbGF5ZWQpIHtcclxuICAgICAgICAgICAgaW50ZXJsdWRlSnVzdFBsYXllZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHBsYXlCZWxscygpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZVNhbXBsZXMuZm9yRWFjaChzYW1wbGVQbGF5ZXIgPT4gc2FtcGxlUGxheWVyLnN0b3AoMCwgc2FtcGxlUGxheWVyLnBsYXllcnNbMF0pKTtcclxuICAgICAgICAgICAgICAgIGNob3JkT3NjaWxsYXRvcnMuZm9yRWFjaChzeW50aCA9PiBzeW50aC5zdG9wKDApKTtcclxuICAgICAgICAgICAgfSwgMTUgKiAxMDAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGxheUxvd0Ryb25lICYmICFsb3dEcm9uZUlzUGxheWluZykge1xyXG4gICAgICAgICAgICBwbGF5RHJvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW50ZXJsdWRlSnVzdFBsYXllZCA9IGZhbHNlO1xyXG4gICAgICAgIHNhbXBsZUluZGV4ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fdXRpbHNfX1tcImJcIiAvKiBnZXRTZXF1ZW50aWFsUmFuZG9tSW5kZXggKi9dKShzYW1wbGVJbmRleCwgYmFja2dyb3VuZFNhbXBsZXMubGVuZ3RoKTtcclxuICAgICAgICAvL2NvbnN0IHRhcmdldCA9IFsxOTMsIDQyMywgMTY2OCwgMjMzMywgMjY2NSwgMzA3OCwgNDAzOCwgNjMxOSwgMTkzKzEsIDQyMysxLCAxNjY4KzEsIDIzMzMrMSwgMjY2NSsxLCAzMDc4KzEsIDQwMzgrMSwgNjMxOSsxIF07IC8vIGluIGZyZXF1ZW5jeVxyXG4gICAgICAgIGNvbnN0IGJhY2tncm91bmRTYW1wbGUgPSBiYWNrZ3JvdW5kU2FtcGxlc1tzYW1wbGVJbmRleF07XHJcbiAgICAgICAgY29uc29sZS5sb2coYmFja2dyb3VuZFNhbXBsZS5hdWRpb0ZpbGUpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxQb3B1bGF0aW9uID0gQXJyYXkoODApLmZpbGwoYmFja2dyb3VuZFNhbXBsZS5zcGVjdHJ1bS5tYXAoYmluID0+IGJpbi5mcmVxKSk7XHJcbiAgICAgICAgLy8gVGFyZ2V0IGlzIHRoZSBvdmVydG9uZXMgb2YgdGhlIG1vc3QgcHJvbWluZW50IGZyZXF1ZW5jeSBpbiB0aGUgc3BlY3RydW1cclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBiYWNrZ3JvdW5kU2FtcGxlLnNwZWN0cnVtXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoKGFjY3VtLCBiaW4pID0+IGFjY3VtWzBdLm1hZ25pdHVkZSA8IGJpbi5tYWduaXR1ZGUgPyBbYmluXSA6IGFjY3VtLCBbeyBmcmVxOiAwLCBtYWduaXR1ZGU6IC0xMDAgfV0pXHJcbiAgICAgICAgICAgIC5tYXAoYmluID0+IGJpbi5mcmVxKVxyXG4gICAgICAgICAgICAubWFwKChzdHJvbmdlc3RGcmVxKSA9PiBBcnJheShiYWNrZ3JvdW5kU2FtcGxlLnNwZWN0cnVtLmxlbmd0aCkuZmlsbCgwKS5tYXAoKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaGFybW9uaWMgPSBzdHJvbmdlc3RGcmVxICogKGkgKyAxKTtcclxuICAgICAgICAgICAgY29uc3QgaGlnaGVzdEZyZXEgPSA3MDAwO1xyXG4gICAgICAgICAgICBpZiAoaGFybW9uaWMgPiBoaWdoZXN0RnJlcSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGl2aXNvciA9IE1hdGguY2VpbChoYXJtb25pYyAvIGhpZ2hlc3RGcmVxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoYXJtb25pYyAvIGRpdmlzb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFybW9uaWM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSlbMF07XHJcbiAgICAgICAgY29uc3Qgc2NlbmVDb25maWcgPSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxQb3B1bGF0aW9uOiBpbml0aWFsUG9wdWxhdGlvbi5tYXAoaXRlbSA9PiBpdGVtLm1hcChpdGVtMiA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgKiAodGFyZ2V0W3RhcmdldC5sZW5ndGggLSAxXSAtIHRhcmdldFswXSkpICsgKHRhcmdldFswXSAtIDIwKTtcclxuICAgICAgICAgICAgfSkpLFxyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2l6ZTogMTYsXHJcbiAgICAgICAgICAgIG1heEdlbmVyYXRpb25zOiAyLFxyXG4gICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgIHRpbWVCZXR3ZWVuRXZlbnRzOiAoKSA9PiAoTWF0aC5yYW5kb20oKSAqIDE1KSArIDEwLFxyXG4gICAgICAgICAgICBnYXBCZXR3ZWVuRXZlbnRzOiAoKSA9PiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uY2hvb3NlKFsyNSwgMTBdKSxcclxuICAgICAgICAgICAgbWVsb2R5T3NjaWxsYXRvcnMsXHJcbiAgICAgICAgICAgIGNob3JkT3NjaWxsYXRvcnMsXHJcbiAgICAgICAgICAgIG9uRmluaXNoOiBwbGF5TmV3U2NlbmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNvdXJjZVNhbXBsZXNbc2FtcGxlSW5kZXhdLnBsYXkoeyBmcmVxOiAxLCB0aW1lOiA2MCAqIDMgKiAxMDAwLCB2b2w6IDAuMjMgfSk7XHJcbiAgICAgICAgLy8gU3RhcnQgdGhlIHNjZW5lXHJcbiAgICAgICAgbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fU2NlbmVfX1tcImFcIiAvKiBTY2VuZSAqL10oc2NlbmVDb25maWcpLnBsYXkoKTtcclxuICAgIH07XHJcbiAgICAvL3BsYXlOZXdTY2VuZSgpO1xyXG4gICAgcGxheUJlbGxzKCk7XHJcbn07XHJcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoV05TKTtcclxuXHJcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wYXR0ZXJuc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXHJcblxyXG5cclxuY2xhc3MgU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5jb25maWcudGltZUJldHdlZW5FdmVudHMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10ubWFrZUZ1bmN0aW9uKHRoaXMuY29uZmlnLnRpbWVCZXR3ZWVuRXZlbnRzKTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5nYXBCZXR3ZWVuRXZlbnRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLm1ha2VGdW5jdGlvbih0aGlzLmNvbmZpZy5nYXBCZXR3ZWVuRXZlbnRzKTtcclxuICAgICAgICB0aGlzLm5vdGVzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcGF0dGVybnNfX1tcImFcIiAvKiBQZ2VuZXRpYyAqL10pKGNvbmZpZy5pbml0aWFsUG9wdWxhdGlvbiwgY29uZmlnLnRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jb25maWcubWF4R2VuZXJhdGlvbnMgPSBjb25maWcubWF4R2VuZXJhdGlvbnM7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50R2VuZXJhdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5jb25maWcub25GaW5pc2ggPSBjb25maWcub25GaW5pc2g7XHJcbiAgICB9XHJcbiAgICBwbGF5KCkge1xyXG4gICAgICAgIGNvbnN0IG5leHRHZW4gPSB0aGlzLm5vdGVzLm5leHQoKS52YWx1ZTtcclxuICAgICAgICBjb25zdCBuZXdOb3RlcyA9IG5leHRHZW47XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGxldCBrID0gKE1hdGgucmFuZG9tKCkgPiAwLjUpID8gMCA6IDE7XHJcbiAgICAgICAgdGhpcy5jb25maWcuY2hvcmRPc2NpbGxhdG9ycy5tYXAoKG9zYykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvY3RhdmUgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDUpO1xyXG4gICAgICAgICAgICBvc2MucGxheSh7IGZyZXE6IG5ld05vdGVzW2ldIC8gb2N0YXZlLCB0aW1lOiB0aGlzLmNvbmZpZy50aW1lQmV0d2VlbkV2ZW50cygpLCBwYW46ICgoayAlIDIpICogMikgLSAxLCB2b2w6IDAuMiB9KTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBrKys7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wbGF5TWVsb2R5KG5ld05vdGVzLCB0aGlzLmN1cnJlbnRHZW5lcmF0aW9uKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdHRU5FVElDIEdFTkVSQVRJT046ICcsIHRoaXMuY3VycmVudEdlbmVyYXRpb24sIG5leHRHZW4pO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRHZW5lcmF0aW9uIDw9ICh0aGlzLmNvbmZpZy5tYXhHZW5lcmF0aW9ucyAtIDEpKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEdlbmVyYXRpb24rKztcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgICAgICB9LCAodGhpcy5jb25maWcudGltZUJldHdlZW5FdmVudHMoKSArIHRoaXMuY29uZmlnLmdhcEJldHdlZW5FdmVudHMoKSkgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEdlbmVyYXRpb24rKztcclxuICAgICAgICAgICAgdGhpcy5lbmRPZlNjZW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcGxheU1lbG9keShub3RlcywgZ2VuZXJhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IG9yZGVyID0gMztcclxuICAgICAgICBjb25zdCBuZXdOb3RlcyA9IG5vdGVzO1xyXG4gICAgICAgIC8vIFRha2VuIGZyb20gdGhlIHNlcXVlbmNlIG9mIHBpdGNoZXMgaW4gXCJGb3JldmVyIGluIEJsdWUgSmVhbnNcIiBieSBOZWlsIERpYW1vbmRcclxuICAgICAgICBjb25zdCBpZGVhbE1lbG9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5tYXBUb0RvbWFpbihbMCwgNCwgMiwgMCwgNywgNCwgMiwgNywgNywgNCwgMiwgMiwgNCwgNCwgMiwgMF0sIG5ld05vdGVzKTtcclxuICAgICAgICBjb25zdCByYW5kb21TaGlmdEFtb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpZGVhbE1lbG9keS5sZW5ndGgpKTtcclxuICAgICAgICBjb25zdCBpbml0aWFsU3RhdGUgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSBvcmRlcjsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZS5wdXNoKGlkZWFsTWVsb2R5W09iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJjXCIgLyogbW9kICovXSkocmFuZG9tU2hpZnRBbW91bnQgLSBvZmZzZXQsIGlkZWFsTWVsb2R5Lmxlbmd0aCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWFya292TWVsb2R5ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcGF0dGVybnNfX1tcImJcIiAvKiBQbWFya292ICovXSkoaWRlYWxNZWxvZHksIG9yZGVyLCBpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBjb25zdCBwbGF5TmV4dE5vdGUgPSAoZ2VuZXJhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvY3RhdmUgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDMpICsgTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHROb3RlID0gbWFya292TWVsb2R5Lm5leHQoKS52YWx1ZTtcclxuICAgICAgICAgICAgLy9pZihuZXh0Tm90ZSAhPT0gdW5kZWZpbmVkICYmIHV0aWxzLmZsaXBDb2luKDAuNzUpICkgeyAvLyBTb21ldGltZXMgcHJvYmFibGl0aWVzIGFyZSB6ZXJvLCBzbyB3ZSdsbCBnZXQgYW4gdW5kZWZpbmVkIG5leHQgc3RhdGVcclxuICAgICAgICAgICAgaWYgKG5leHROb3RlICE9PSB1bmRlZmluZWQgJiYgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmZsaXBDb2luKDAuNTUpKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdwbGF5aW5nIG5vdGUnLCBuZXh0Tm90ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5tZWxvZHlPc2NpbGxhdG9yc1tpICUgdGhpcy5jb25maWcubWVsb2R5T3NjaWxsYXRvcnMubGVuZ3RoXS5wbGF5KHtcclxuICAgICAgICAgICAgICAgICAgICBmcmVxOiBuZXh0Tm90ZSAvIG9jdGF2ZSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiAxICsgKE1hdGgucmFuZG9tKCkgKiA2KSxcclxuICAgICAgICAgICAgICAgICAgICBwYW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdm9sOiAwLjE1XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChnZW5lcmF0aW9uID09PSB0aGlzLmN1cnJlbnRHZW5lcmF0aW9uICYmIHRoaXMuY3VycmVudEdlbmVyYXRpb24gPD0gdGhpcy5jb25maWcubWF4R2VuZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGF5TmV4dE5vdGUoZ2VuZXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sICgoTWF0aC5yYW5kb20oKSAqIDIpICsgMC41KSAqIDEwMDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcGxheU5leHROb3RlKGdlbmVyYXRpb24pO1xyXG4gICAgfVxyXG4gICAgZW5kT2ZTY2VuZSgpIHtcclxuICAgICAgICBjb25zdCBvbkZpbmlzaENhbGxiYWNrID0gdGhpcy5jb25maWcub25GaW5pc2g7XHJcbiAgICAgICAgdGhpcy5jb25maWcuY2hvcmRPc2NpbGxhdG9ycy5tYXAoc3ludGggPT4gc3ludGguc3RvcCgxKSk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob25GaW5pc2hDYWxsYmFjaywgMTAwMCk7XHJcbiAgICB9XHJcbn1cbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gU2NlbmU7XG5cclxuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0dlbmV0aWNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKlxyXG4gKiBCYXNpYyBQYXR0ZXJucyBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuY29uc3QgTWFya292ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KS5kZWZhdWx0O1xyXG5cclxuY29uc3QgUGF0dGVybiA9IChwYXR0ZXJuKSA9PiBbKCkgPT4gcGF0dGVybi5uZXh0KCkudmFsdWVdO1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IFBhdHRlcm4gKi9cblxyXG5jb25zdCBQc2VxID0gZnVuY3Rpb24qIFBzZXEodmFsdWVzLCByZXBldGl0aW9ucykge1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHZhciByZXN1bHQgPSAoKSA9PiB2YWx1ZXNbaW5kZXgrKyAlIHZhbHVlcy5sZW5ndGhdO1xyXG4gICAgaWYgKHJlcGV0aXRpb25zID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHJlc3VsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVwZXRpdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICB5aWVsZCByZXN1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgUHNlcSAqL1xuXHJcbmNvbnN0IFByYW5kID0gZnVuY3Rpb24qIFByYW5kKHZhbHVlcywgcmVwZXRpdGlvbnMpIHtcclxuICAgIHZhciByZXN1bHQgPSAoKSA9PiB2YWx1ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsdWVzLmxlbmd0aCldO1xyXG4gICAgaWYgKHJlcGV0aXRpb25zID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHJlc3VsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVwZXRpdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICB5aWVsZCByZXN1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgUHJhbmQgKi9cblxyXG5jb25zdCBQbWFya292ID0gZnVuY3Rpb24gUG1hcmtvdihzZWVkLCBvcmRlciwgaW5pdGlhbFN0YXRlKSB7XHJcbiAgICBjb25zdCBtYXJrb3ZDaGFpbiA9IG5ldyBNYXJrb3Yoc2VlZCwgb3JkZXIpO1xyXG4gICAgcmV0dXJuIG1hcmtvdkNoYWluLmFzUGF0dGVybihpbml0aWFsU3RhdGUpO1xyXG59O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImJcIl0gPSBQbWFya292O1xuXHJcbmNvbnN0IFBnZW5ldGljID0gZnVuY3Rpb24qIFBnZW5ldGljKGlucHV0UG9wdWxhdGlvbiwgZ29hbCkge1xyXG4gICAgbGV0IGdlbmV0aWMgPSBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19HZW5ldGljX19bXCJhXCIgLyogR2VuZXRpYyAqL10oaW5wdXRQb3B1bGF0aW9uLCBnb2FsKTtcclxuICAgIGxldCBsYXN0U3RhdGUgPSBnb2FsO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBsZXQgbmV4dFN0YXRlID0gZ2VuZXRpYy5nZXROZXh0U3RhdGUobGFzdFN0YXRlKTtcclxuICAgICAgICBsYXN0U3RhdGUgPSBbbGFzdFN0YXRlW2xhc3RTdGF0ZS5sZW5ndGggLSAxXSwgbmV4dFN0YXRlXTtcclxuICAgICAgICB5aWVsZCBuZXh0U3RhdGU7XHJcbiAgICB9XHJcbn07XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IFBnZW5ldGljO1xuXHJcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuIWZ1bmN0aW9uKHQsZSl7IHRydWU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJNYXJrb3ZOXCIsW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5NYXJrb3ZOPWUoKTp0Lk1hcmtvdk49ZSgpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihyKXtpZihlW3JdKXJldHVybiBlW3JdLmV4cG9ydHM7dmFyIG89ZVtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsbiksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxyKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KW4uZChyLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCJcIixuKG4ucz0wKX0oW2Z1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuLnIoZSk7Y29uc3Qgcj10PT57bGV0IGU9dC5yZWR1Y2UoKHQsZSk9PnQrZSksbj1NYXRoLnJhbmRvbSgpKmUscj0wO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKG48PShyPSsocis9dFtlXSkudG9GaXhlZCgyKSkpcmV0dXJuIGV9LG89dD0+e2xldCBlPXQucmVkdWNlKCh0LGUpPT50K2UpO3JldHVybiBlPjA/dC5tYXAodD0+dC9lKTp0Lm1hcCgoKT0+MCl9LGk9KHQsZSk9Pnt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSxyPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpO2lmKG4ubGVuZ3RoIT1yLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZih0W2ldIT09ZVtpXSlyZXR1cm4hMX1yZXR1cm4hMH0scz0odCxlKT0+KHQlZStlKSVlO24uZChlLFwiZ2V0QWxsVHJhbnNpdGlvbnNcIixmdW5jdGlvbigpe3JldHVybiBhfSksbi5kKGUsXCJNYXJrb3ZOXCIsZnVuY3Rpb24oKXtyZXR1cm4gbH0pO2NvbnN0IGE9KHQsZSk9PnQucmVkdWNlKChuLHIsbyk9Pntjb25zdCBpPVtdO2ZvcihsZXQgbj1lO24+PTA7bi0tKWkucHVzaCh0W3Moby1uLHQubGVuZ3RoKV0pO3JldHVybiBuLnB1c2goaSksbn0sW10pLHU9KHQsZSk9Pntjb25zdCBuPVsuLi50XTtyZXR1cm4gbi5zaGlmdCgpLG4ucHVzaChlKSxufTtjbGFzcyBse2NvbnN0cnVjdG9yKHQsZSl7dGhpcy5kaWN0aW9uYXJ5PVtdLHRoaXMuY29tYmluYXRpb25zPVtdLHRoaXMubGFzdFN0YXRlPVtdO2ZvcihsZXQgbj0wO248ZTtuKyspdGhpcy5sYXN0U3RhdGUucHVzaCh0W25dKTt0aGlzLnRyYW5zaXRpb25NYXRyaXg9dGhpcy5jcmVhdGVUcmFuc2l0aW9uTWF0cml4KHQsZSl9Y3JlYXRlVHJhbnNpdGlvbk1hdHJpeCh0LGUpe3RoaXMuZGljdGlvbmFyeT1BcnJheS5mcm9tKG5ldyBTZXQodCkpLHRoaXMuY29tYmluYXRpb25zPWEodCxlKTtsZXQgbj1bXTtmb3IobGV0IHQ9MDt0PHRoaXMuY29tYmluYXRpb25zLmxlbmd0aDt0Kyspe2xldCB0PVtdO2ZvcihsZXQgZT0wO2U8dGhpcy5kaWN0aW9uYXJ5Lmxlbmd0aDtlKyspdC5wdXNoKDApO24ucHVzaCh0KX1mb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7bGV0IG89W107Zm9yKGxldCBuPWU7bj49MDtuLS0pby5wdXNoKHRbcyhyLW4sdC5sZW5ndGgpXSk7bGV0IGE9dGhpcy5jb21iaW5hdGlvbnMuZmluZEluZGV4KHQ9Pmkobyx0KSksdT10WyhyKzEpJXQubGVuZ3RoXSxsPXRoaXMuZGljdGlvbmFyeS5pbmRleE9mKHUpO25bYV1bbF0rK31yZXR1cm4gbj1uLm1hcChvKX1nZXROZXh0U3RhdGUodCl7Y29uc3QgZT10aGlzLnRyYW5zaXRpb25NYXRyaXhbdGhpcy5jb21iaW5hdGlvbnMuZmluZEluZGV4KGU9PmkodCxlKSldLG49cihlKTtyZXR1cm4gdGhpcy5kaWN0aW9uYXJ5W25dfSphc1BhdHRlcm4odCl7Zm9yKHRoaXMubGFzdFN0YXRlPXQ7Oyl7bGV0IHQ9dGhpcy5nZXROZXh0U3RhdGUodGhpcy5sYXN0U3RhdGUpO3RoaXMubGFzdFN0YXRlPXUodGhpcy5sYXN0U3RhdGUsdCkseWllbGQgdH19fWUuZGVmYXVsdD1sfV0pfSk7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gR2VuZXRpYzsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX191dGlsc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxyXG5jbGFzcyBHZW5ldGljIHtcclxuICAgIGNvbnN0cnVjdG9yKGlucHV0UG9wdWxhdGlvbiwgZ29hbCkge1xyXG4gICAgICAgIHRoaXMucG9wdWxhdGlvbiA9IGlucHV0UG9wdWxhdGlvbjtcclxuICAgICAgICB0aGlzLnNjb3JlcyA9IEFycmF5KGlucHV0UG9wdWxhdGlvbi5sZW5ndGgpLmZpbGwoMCk7XHJcbiAgICAgICAgdGhpcy5nb2FsID0gZ29hbDtcclxuICAgICAgICB0aGlzLmxhc3RTdGF0ZSA9IGlucHV0UG9wdWxhdGlvbltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaW5wdXRQb3B1bGF0aW9uLmxlbmd0aCAtIDEpKV07XHJcbiAgICB9XHJcbiAgICAvLyBBY2N1bXVsYXRlIGFuZCByZXR1cm4gdGhlIHNjb3JlIGZvciBhIHNpbmdsZSBjb2xsZWN0aW9uXHJcbiAgICBnZXRUb3RhbEZpdG5lc3NSYXRpbmcoY29sbGVjdGlvbiwgZ29hbCkge1xyXG4gICAgICAgIGxldCBzY29yZSA9IDA7IC8vIGxvd2VyIGlzIGJldHRlclxyXG4gICAgICAgIGxldCBub3JtYWxpemVkQ29sbGVjdGlvbiA9IGNvbGxlY3Rpb24ubWFwKChudW0pID0+IG51bSAtIE1hdGgubWluLmFwcGx5KG51bGwsIGNvbGxlY3Rpb24pKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gbm9ybWFsaXplZENvbGxlY3Rpb24ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgc2NvcmUgKz0gdGhpcy5nZXREaXN0YW5jZShub3JtYWxpemVkQ29sbGVjdGlvbltpXSwgZ29hbFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29yZTtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IHRlc3RcclxuICAgIC8vIFVzaW5nIHRoZSBnaXZlbiBzY29yZXMsIGdldCB0aGUgbW9zdCBcImZpdFwiIHR3byBnZW5lcmF0aW9ucyBvdXQgb2YgdGhlIHBvcHVsYXRpb25cclxuICAgIGdldFRvcFR3b0dlbmVyYXRpb25zKHNjb3JlcywgcG9wdWxhdGlvbikge1xyXG4gICAgICAgIGxldCBpbmRleE9mSGlnaGVzdFNjb3JlID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gc2NvcmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmIChzY29yZXNbaW5kZXhPZkhpZ2hlc3RTY29yZV0gPCBzY29yZXNbaV0pIHtcclxuICAgICAgICAgICAgICAgIGluZGV4T2ZIaWdoZXN0U2NvcmUgPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSB0d28gb2YgdGhlIHNhbWUgc2NvcmVzLCBjaG9vc2Ugb25lIHJhbmRvbWx5XHJcbiAgICAgICAgICAgIGlmIChzY29yZXNbaW5kZXhPZkhpZ2hlc3RTY29yZV0gPT09IHNjb3Jlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29pbkZsaXAgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXhPZkhpZ2hlc3RTY29yZSA9IChjb2luRmxpcCA+IDAuNSkgPyBpbmRleE9mSGlnaGVzdFNjb3JlIDogaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW5kZXhPZk5leHRIaWdoZXN0U2NvcmUgPSAwO1xyXG4gICAgICAgIGNvbnN0IHRvcEdlbmVyYXRpb25TY29yZSA9IHNjb3Jlc1tpbmRleE9mSGlnaGVzdFNjb3JlXTtcclxuICAgICAgICBjb25zdCBjb2luRmxpcEZvck11dGF0ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5mbGlwQ29pbigwLjI1KTtcclxuICAgICAgICBpZiAoY29pbkZsaXBGb3JNdXRhdGUpIHtcclxuICAgICAgICAgICAgaW5kZXhPZk5leHRIaWdoZXN0U2NvcmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzY29yZXMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzY29yZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBhbnkgc2NvcmVzIHRoYXQgYXJlIGFscmVhZHkgdGhlIGhpZ2hlc3Qgc2NvcmVcclxuICAgICAgICAgICAgICAgIGlmIChzY29yZXNbaV0gIT09IHRvcEdlbmVyYXRpb25TY29yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29yZXNbaW5kZXhPZk5leHRIaWdoZXN0U2NvcmVdIDwgc2NvcmVzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4T2ZOZXh0SGlnaGVzdFNjb3JlID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHR3byBvZiB0aGUgc2FtZSBzY29yZXMsIGNob29zZSBvbmUgcmFuZG9tbHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmVzW2luZGV4T2ZOZXh0SGlnaGVzdFNjb3JlXSA9PT0gc2NvcmVzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvaW5GbGlwID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZk5leHRIaWdoZXN0U2NvcmUgPSAoY29pbkZsaXAgPiAwLjUpID8gaW5kZXhPZk5leHRIaWdoZXN0U2NvcmUgOiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3BvcHVsYXRpb25baW5kZXhPZkhpZ2hlc3RTY29yZV0sIHBvcHVsYXRpb25baW5kZXhPZk5leHRIaWdoZXN0U2NvcmVdXTtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IE1ha2UgbW9yZSB0aGFuIG9uZSB0eXBlIG9mIG1hdGluZ1xyXG4gICAgLy8gVGFrZSBpbiB0d28gYXJyYXlzIChwYXJlbnRzKSBhbmQgbWF0ZSB0aGVtIGluIGEgbnVtYmVyIG9mIGRpZmZlcmVudCB3YXlzIHRvIHByb2R1Y2UgbXVsdGlwbGUgb2Zmc3ByaW5nXHJcbiAgICBtYXRlR2VuZXJhdGlvbnMocGFyZW50cykge1xyXG4gICAgICAgIGNvbnN0IHNwbGljZWRPZmZzcHJpbmcgPSB0aGlzLmdldFNwbGljZWRPZmZzcHJpbmcocGFyZW50c1swXSwgcGFyZW50c1sxXSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJsYWNlZE9mZnNwcmluZyA9IHRoaXMuZ2V0SW50ZXJsYWNlZE9mZnNwcmluZyhwYXJlbnRzWzBdLCBwYXJlbnRzWzFdKTtcclxuICAgICAgICAvLyBHZW5lcmF0ZSBtb3JlIHRoYW4gb25lIG9mZnNwcmluZ1xyXG4gICAgICAgIHJldHVybiBbc3BsaWNlZE9mZnNwcmluZywgaW50ZXJsYWNlZE9mZnNwcmluZ107XHJcbiAgICB9XHJcbiAgICAvLyBTcGxpY2UgdHdvIGVxdWFsLWxlbmd0aCBhcnJheXMgdG9nZXRoZXIgYW5kIHJldHVybiB0aGUgcmVzdWx0XHJcbiAgICBnZXRJbnRlcmxhY2VkT2Zmc3ByaW5nKHBhcmVudE9uZSwgcGFyZW50VHdvKSB7XHJcbiAgICAgICAgY29uc3QgaW50ZXJsYWNlZE9mZnNwcmluZyA9IEFycmF5KHBhcmVudE9uZS5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbnRlcmxhY2VkT2Zmc3ByaW5nLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGludGVybGFjZWRPZmZzcHJpbmdbaV0gPSAoaSAlIDIpID09PSAwID8gcGFyZW50T25lW2ldIDogcGFyZW50VHdvW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW50ZXJsYWNlZE9mZnNwcmluZztcclxuICAgIH1cclxuICAgIGdldFNwbGljZWRPZmZzcHJpbmcocGFyZW50T25lLCBwYXJlbnRUd28pIHtcclxuICAgICAgICBjb25zdCBjb2luRmxpcCA9IE1hdGgucmFuZG9tKCkgPiAwLjUgPyAxIDogMDtcclxuICAgICAgICBjb25zdCBwYXJlbnRzID0gY29pbkZsaXAgPT0gMCA/IFtwYXJlbnRPbmUsIHBhcmVudFR3b10gOiBbcGFyZW50VHdvLCBwYXJlbnRPbmVdO1xyXG4gICAgICAgIGNvbnN0IHNwbGl0UG9pbnQgPSBNYXRoLmZsb29yKHBhcmVudE9uZS5sZW5ndGggLyAyKTtcclxuICAgICAgICBjb25zdCBzcGxpY2VkT2Zmc3ByaW5nID0gWy4uLihwYXJlbnRzWzBdLnNsaWNlKDAsIHNwbGl0UG9pbnQpKSwgLi4uKHBhcmVudHNbMV0uc2xpY2Uoc3BsaXRQb2ludCAtIDEsIHBhcmVudHNbMV0ubGVuZ3RoIC0gMSkpXTtcclxuICAgICAgICByZXR1cm4gc3BsaWNlZE9mZnNwcmluZztcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgYSBudW1lcmljYWwgZGlzdGFuY2UgYmV0d2VlbiBhbiBpbnB1dCBhbmQgYSBnb2FsXHJcbiAgICBnZXREaXN0YW5jZShpbnB1dCwgZ29hbCkge1xyXG4gICAgICAgIGxldCByYXRpbmcgPSBnb2FsIC0gaW5wdXQ7XHJcbiAgICAgICAgcmV0dXJuIHJhdGluZztcclxuICAgIH1cclxuICAgIC8vIENhbGN1bGF0ZSBhbmQgcmV0dXJuIHRoZSBzY29yZXMgZm9yIGFsbCBjdXJyZW50IGNvbGxlY3Rpb25zXHJcbiAgICBnZXRQb3B1bGF0aW9uU2NvcmVzKHBvcHVsYXRpb24sIGdvYWwpIHtcclxuICAgICAgICBsZXQgc2NvcmVzID0gQXJyYXkocG9wdWxhdGlvbi5sZW5ndGgpLmZpbGwoMCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IChwb3B1bGF0aW9uLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBzY29yZXNbaV0gPSB0aGlzLmdldFRvdGFsRml0bmVzc1JhdGluZyhwb3B1bGF0aW9uW2ldLCBnb2FsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNjb3JlcztcclxuICAgIH1cclxuICAgIGdldE5leHRHZW5lcmF0aW9uKHBvcHVsYXRpb24sIGdvYWwpIHtcclxuICAgICAgICBjb25zdCBwb3B1bGF0aW9uU2NvcmVzID0gdGhpcy5nZXRQb3B1bGF0aW9uU2NvcmVzKHBvcHVsYXRpb24sIGdvYWwpO1xyXG4gICAgICAgIGNvbnN0IHRvcFR3b0dlbmVyYXRpb25zID0gdGhpcy5nZXRUb3BUd29HZW5lcmF0aW9ucyhwb3B1bGF0aW9uU2NvcmVzLCBwb3B1bGF0aW9uKTtcclxuICAgICAgICBjb25zdCBuZXdHZW5lcmF0aW9ucyA9IHRoaXMubWF0ZUdlbmVyYXRpb25zKHRvcFR3b0dlbmVyYXRpb25zKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChuZXdHZW5lcmF0aW9ucy5sZW5ndGggLSAxKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGlvbi5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHRoaXMucG9wdWxhdGlvbi5sZW5ndGggLSAxKSksIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBvcHVsYXRpb24gPSBbLi4udGhpcy5wb3B1bGF0aW9uLCAuLi5uZXdHZW5lcmF0aW9uc107XHJcbiAgICAgICAgLy8gRm9yIG5vdyByYW5kb21seSBzZWxlY3Qgb25lIG9mIHRoZSBiZXN0IGdlbmVyYXRpb25zXHJcbiAgICAgICAgY29uc3QgYmVzdEZpdEdlbmVyYXRpb24gPSBuZXdHZW5lcmF0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobmV3R2VuZXJhdGlvbnMubGVuZ3RoICogMC45OTkpKV07XHJcbiAgICAgICAgcmV0dXJuIGJlc3RGaXRHZW5lcmF0aW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0TmV4dFN0YXRlKHN0YXRlKSB7XHJcbiAgICAgICAgLy8gVE9ETzogVXNlIHN0YXRlIHRvIGFkZCBpbnRvIHRoZSBwb3B1bGF0aW9uXHJcbiAgICAgICAgY29uc3QgbmV4dFN0YXRlID0gdGhpcy5nZXROZXh0R2VuZXJhdGlvbih0aGlzLnBvcHVsYXRpb24sIHRoaXMuZ29hbCk7XHJcbiAgICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcclxuICAgIH1cclxuICAgIGFzUGF0dGVybigpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24qIGFzUGF0dGVybihpbml0aWFsU3RhdGUpIHtcclxuICAgICAgICAgICAgc2VsZi5sYXN0U3RhdGUgPSBpbml0aWFsU3RhdGU7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSBzZWxmLmdldE5leHRTdGF0ZShzZWxmLmxhc3RTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RTdGF0ZSA9IG5leHRTdGF0ZTtcclxuICAgICAgICAgICAgICAgIHlpZWxkIG5leHRTdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuO1xyXG5cclxuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3V0aWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gQmFzaWMgY3VydmUgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2F2ZVNoYXBlck5vZGVcclxuY29uc3QgbWFrZURpc3RvcnRpb25DdXJ2ZSA9IGFtb3VudCA9PiB7XHJcbiAgICB2YXIgayA9IHR5cGVvZiBhbW91bnQgPT09ICdudW1iZXInID8gYW1vdW50IDogNTAsIG5fc2FtcGxlcyA9IDQ0MTAwLCBjdXJ2ZSA9IG5ldyBGbG9hdDMyQXJyYXkobl9zYW1wbGVzKSwgZGVnID0gTWF0aC5QSSAvIDE4MCwgaSA9IDAsIHg7XHJcbiAgICBmb3IgKDsgaSA8IG5fc2FtcGxlczsgKytpKSB7XHJcbiAgICAgICAgeCA9IGkgKiAyIC8gbl9zYW1wbGVzIC0gMTtcclxuICAgICAgICBjdXJ2ZVtpXSA9ICgzICsgaykgKiB4ICogMjAgKiBkZWcgLyAoTWF0aC5QSSArIGsgKiBNYXRoLmFicyh4KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VydmU7XHJcbn07XHJcblxyXG5jbGFzcyBTeW50aCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjb25maWcpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnID8gY29uZmlnIDoge307XHJcbiAgICB9XHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMub3NjaWxsYXRvciA9IHRoaXMuY29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XHJcbiAgICAgICAgLy90aGlzLmNvbmZpZy53YXZlZm9ybVR5cGUgJiYgKHRoaXMub3NjaWxsYXRvci50eXBlID0gdGhpcy5jb25maWcud2F2ZWZvcm1UeXBlKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuICAgICAgICB0aGlzLnBhbm5lciA9IHRoaXMuY29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTtcclxuICAgICAgICB0aGlzLndhdmVTaGFwZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlV2F2ZVNoYXBlcigpO1xyXG4gICAgICAgIHRoaXMud2F2ZVNoYXBlci5jdXJ2ZSA9IG1ha2VEaXN0b3J0aW9uQ3VydmUoODAwKTtcclxuICAgICAgICB0aGlzLndhdmVTaGFwZXIub3ZlcnNhbXBsZSA9ICc0eCc7XHJcbiAgICAgICAgdGhpcy5vc2NpbGxhdG9yLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XHJcbiAgICAgICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KHRoaXMucGFubmVyKTtcclxuICAgICAgICB0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMud2F2ZVNoYXBlcik7XHJcbiAgICAgICAgLy90aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgdGhpcy53YXZlU2hhcGVyLmNvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3IudHlwZSA9IHRoaXMuY29uZmlnLndhdmVmb3JtVHlwZSA/IHRoaXMuY29uZmlnLndhdmVmb3JtVHlwZSA6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXRpbHNfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5mbGlwQ29pbigpID8gJ3RyaWFuZ2xlJyA6ICdzaW5lJztcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAwO1xyXG4gICAgfVxyXG4gICAgcGxheShvcHQpIHtcclxuICAgICAgICBjb25zdCB7IGZyZXEgPSAyMjAsIHRpbWUgPSAxLCBwYW4gPSAwLCB2b2wgPSAxIH0gPSBvcHQ7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgbGV0IGdhaW4gPSAwLjAxO1xyXG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5mcmVxdWVuY3kudmFsdWUgPSBmcmVxO1xyXG4gICAgICAgIG9wdC5kaXN0b3J0aW9uICYmICh0aGlzLndhdmVTaGFwZXIuY3VydmUgPSBtYWtlRGlzdG9ydGlvbkN1cnZlKG9wdC5kaXN0b3J0aW9uKSk7XHJcbiAgICAgICAgLy8gc29tZSBzdHVwaWQgYmFzaWMgcHN5Y2hvYWNvdXN0aWMgc2hhcGluZ1xyXG4gICAgICAgIGlmIChmcmVxID4gMjAwKVxyXG4gICAgICAgICAgICBnYWluID0gZ2FpbiAqIDAuMTI7XHJcbiAgICAgICAgaWYgKGZyZXEgPiA2MDAwKVxyXG4gICAgICAgICAgICBnYWluID0gZ2FpbiAqIDAuMDg7XHJcbiAgICAgICAgdGhpcy5wYW5uZXIucGFuLnZhbHVlID0gcGFuO1xyXG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5zdGFydCgwKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKHZvbCAqIGdhaW4gKiAoMC41NSAtIChNYXRoLnJhbmRvbSgpICogMC4wMSkpLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIHRpbWUgKiAwLjg1KTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnN0b3AodGltZSAqIDAuMjUpO1xyXG4gICAgICAgIH0sICh0aW1lIC0gKHRpbWUgKiAwLjI1KSkgKiAxMDAwKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHN0b3AodGltZSkge1xyXG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoMCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCB0aW1lICogMC45KTtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3Iuc3RvcCh0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyAodGltZSAqIDQpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFN5bnRoKTtcclxuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTm9pc2U7IH0pO1xuLy8gQmFzaWMgY3VydmUgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2F2ZVNoYXBlck5vZGVcclxuY29uc3QgbWFrZURpc3RvcnRpb25DdXJ2ZSA9IGFtb3VudCA9PiB7XHJcbiAgICB2YXIgayA9IHR5cGVvZiBhbW91bnQgPT09ICdudW1iZXInID8gYW1vdW50IDogNTAsIG5fc2FtcGxlcyA9IDQ0MTAwLCBjdXJ2ZSA9IG5ldyBGbG9hdDMyQXJyYXkobl9zYW1wbGVzKSwgZGVnID0gTWF0aC5QSSAvIDE4MCwgaSA9IDAsIHg7XHJcbiAgICBmb3IgKDsgaSA8IG5fc2FtcGxlczsgKytpKSB7XHJcbiAgICAgICAgeCA9IGkgKiAyIC8gbl9zYW1wbGVzIC0gMTtcclxuICAgICAgICBjdXJ2ZVtpXSA9ICgzICsgaykgKiB4ICogMjAgKiBkZWcgLyAoTWF0aC5QSSArIGsgKiBNYXRoLmFicyh4KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VydmU7XHJcbn07XHJcbmNvbnN0IGJ1ZmZlclNpemUgPSA0MDk2O1xyXG5jb25zdCBjcmVhdGVCcm93bk5vaXNlID0gYXVkaW9Db250ZXh0ID0+IHtcclxuICAgIHZhciBsYXN0T3V0ID0gMC4wO1xyXG4gICAgdmFyIG5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKGJ1ZmZlclNpemUsIDEsIDEpO1xyXG4gICAgbm9kZS5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IGUub3V0cHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB3aGl0ZSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcclxuICAgICAgICAgICAgb3V0cHV0W2ldID0gKGxhc3RPdXQgKyAoMC4wMiAqIHdoaXRlKSkgLyAxLjAyO1xyXG4gICAgICAgICAgICBsYXN0T3V0ID0gb3V0cHV0W2ldO1xyXG4gICAgICAgICAgICBvdXRwdXRbaV0gKj0gMy41OyAvLyAocm91Z2hseSkgY29tcGVuc2F0ZSBmb3IgZ2FpblxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gbm9kZTtcclxufTtcclxuY2xhc3MgTm9pc2Uge1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyA/IGNvbmZpZyA6IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBjcmVhdGVCcm93bk5vaXNlKHRoaXMuY29udGV4dCk7XHJcbiAgICAgICAgLy90aGlzLmNvbmZpZy53YXZlZm9ybVR5cGUgJiYgKHRoaXMub3NjaWxsYXRvci50eXBlID0gdGhpcy5jb25maWcud2F2ZWZvcm1UeXBlKTtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuICAgICAgICB0aGlzLnBhbm5lciA9IHRoaXMuY29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTtcclxuICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcclxuICAgICAgICB0aGlzLmZpbHRlci50eXBlID0gJ3BlYWtpbmcnO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyMiA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcclxuICAgICAgICB0aGlzLmZpbHRlcjIudHlwZSA9ICdiYW5kcGFzcyc7XHJcbiAgICAgICAgdGhpcy53YXZlU2hhcGVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVdhdmVTaGFwZXIoKTtcclxuICAgICAgICB0aGlzLndhdmVTaGFwZXIuY3VydmUgPSBtYWtlRGlzdG9ydGlvbkN1cnZlKDgwKTtcclxuICAgICAgICB0aGlzLndhdmVTaGFwZXIub3ZlcnNhbXBsZSA9ICc0eCc7XHJcbiAgICAgICAgdGhpcy5vc2NpbGxhdG9yLmNvbm5lY3QodGhpcy53YXZlU2hhcGVyKTtcclxuICAgICAgICB0aGlzLndhdmVTaGFwZXIuY29ubmVjdCh0aGlzLmZpbHRlcik7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIuY29ubmVjdCh0aGlzLmZpbHRlcjIpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyMi5jb25uZWN0KHRoaXMucGFubmVyKTtcclxuICAgICAgICB0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xyXG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgIC8vdGhpcy5vc2NpbGxhdG9yLnR5cGUgPSB0aGlzLmNvbmZpZy53YXZlZm9ybVR5cGUgPyB0aGlzLmNvbmZpZy53YXZlZm9ybVR5cGUgOiB1dGlscy5mbGlwQ29pbigpID8gJ3RyaWFuZ2xlJyA6ICdzaW5lJztcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSAwO1xyXG4gICAgfVxyXG4gICAgcGxheShvcHQpIHtcclxuICAgICAgICBjb25zdCB7IGZyZXEgPSAyMjAsIHRpbWUgPSAxLCBwYW4gPSAwLCB2b2wgPSAxIH0gPSBvcHQ7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgbGV0IGdhaW4gPSAxLjA7XHJcbiAgICAgICAgLy90aGlzLm9zY2lsbGF0b3IuZnJlcXVlbmN5LnZhbHVlID0gZnJlcTtcclxuICAgICAgICB0aGlzLmZpbHRlci5mcmVxdWVuY3kudmFsdWUgPSBmcmVxO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyLlEudmFsdWUgPSA1MC45MDE7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIuZ2Fpbi52YWx1ZSA9IDIwO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyMi5mcmVxdWVuY3kudmFsdWUgPSBmcmVxO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyMi5RLnZhbHVlID0gMTUuOTAxO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyMi5nYWluLnZhbHVlID0gNjA7XHJcbiAgICAgICAgb3B0LmRpc3RvcnRpb24gJiYgKHRoaXMud2F2ZVNoYXBlci5jdXJ2ZSA9IG1ha2VEaXN0b3J0aW9uQ3VydmUob3B0LmRpc3RvcnRpb24pKTtcclxuICAgICAgICAvLyBzb21lIHN0dXBpZCBiYXNpYyBweXNjaG9hY291c3RpYyBzaGFwaW5nXHJcbiAgICAgICAgaWYgKGZyZXEgPiAyMDApXHJcbiAgICAgICAgICAgIGdhaW4gPSBnYWluICogMC4xMjtcclxuICAgICAgICB0aGlzLnBhbm5lci5wYW4udmFsdWUgPSBwYW47XHJcbiAgICAgICAgdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlID0gMC4wMDE7XHJcbiAgICAgICAgdGhpcy5nYWluTm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUodm9sICogZ2FpbiwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGltZSk7XHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnN0b3AuYmluZCh0aGlzKSwgKHRpbWUgKyAxKSAqIDEwMDApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLmdhaW5Ob2RlLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKDAsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcblxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2hvd2xlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaG93bGVyX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaG93bGVyX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdXRpbHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cclxuXHJcbmNsYXNzIE11bHRpU2FtcGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBvcHQpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMucGxheWVycyA9IG9wdC5zYW1wbGVzLm1hcChzYW1wbGVDb25maWcgPT4gKHsgcGxheWVyOiBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2hvd2xlcl9fW1wiSG93bFwiXSh7IHNyYzogc2FtcGxlQ29uZmlnLmZpbGVzIH0pLCBiYXNlRnJlcTogc2FtcGxlQ29uZmlnLmZyZXEgfSkpO1xyXG4gICAgfVxyXG4gICAgcGxheShvcHQpIHtcclxuICAgICAgICBjb25zdCB7IGZyZXEgPSAyMjAsIHRpbWUgPSAxLCBwYW4gPSAwLCB2b2wgPSAxIH0gPSBvcHQ7XHJcbiAgICAgICAgbGV0IGdhaW4gPSAxO1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZVBsYXllciA9IHRoaXMuZmluZENsb3Nlc3RTYW1wbGVQbGF5ZXIoZnJlcSk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEID0gc2FtcGxlUGxheWVyLnBsYXllci5wbGF5KCk7XHJcbiAgICAgICAgc2FtcGxlUGxheWVyLnBsYXllci5sb29wKGZhbHNlLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpO1xyXG4gICAgICAgIHNhbXBsZVBsYXllci5wbGF5ZXIucmF0ZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZ2V0UmF0ZUZyb21GcmVxdWVuY2llcyhmcmVxLCBzYW1wbGVQbGF5ZXIuYmFzZUZyZXEpLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpO1xyXG4gICAgICAgIC8vIHNvbWUgc3R1cGlkIGJhc2ljIHB5c2Nob2Fjb3VzdGljIHNoYXBpbmdcclxuICAgICAgICBpZiAoZnJlcSA+IDIwMClcclxuICAgICAgICAgICAgZ2FpbiA9IGdhaW4gKiAwLjI7XHJcbiAgICAgICAgc2FtcGxlUGxheWVyLnBsYXllci5mYWRlKDAsIGdhaW4gKiB2b2wsIDIwMCwgY3VycmVudGx5UGxheWluZ1NhbXBsZUlEKTtcclxuICAgICAgICBzYW1wbGVQbGF5ZXIucGxheWVyLnN0ZXJlbyhwYW4sIGN1cnJlbnRseVBsYXlpbmdTYW1wbGVJRCk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzYW1wbGVQbGF5ZXIucGxheWVyLmZhZGUoZ2FpbiAqIHZvbCwgMCwgMjAwLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3AodGltZSwgc2FtcGxlUGxheWVyLCBjdXJyZW50bHlQbGF5aW5nU2FtcGxlSUQpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgKHRpbWUgKiAxMDAwKSArIDIwMCk7IC8vIGFkZGluZyBhIDEwMCBtcyBidWZmZXIgdG8gYXZvaWQgYW55IGlzc3Vlc1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc3RvcCh0aW1lLCBzYW1wbGVQbGF5ZXIsIGN1cnJlbnRseVBsYXlpbmdTYW1wbGVJRCkge1xyXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2FtcGxlUGxheWVyLnBsYXllci5zdG9wKCk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDApOyAvLyBhZGRpbmcgYSAxMDAgbXMgYnVmZmVyIHRvIGF2b2lkIGFueSBpc3N1ZXNcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGZpbmRDbG9zZXN0U2FtcGxlUGxheWVyKGZyZXEpIHtcclxuICAgICAgICAvLyBDYW4gb25seSBnZXQgdGhlIGNsb3Nlc3QgZnJlcXVlbmN5IGluIHRoZSBzZXQgb2YgUGxheWVycycgZnJlcXVlbmNpZXMgc28gZ2V0IHRoYXQgZnJlcXVlbmN5LCB0aGVuIGZpbHRlciB0aGUgcGxheWVyc1xyXG4gICAgICAgIGNvbnN0IGNsb3Nlc3RQbGF5ZXJGcmVxdWVuY3kgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3V0aWxzX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZ2V0Q2xvc2VzdE1lbWJlcihmcmVxLCB0aGlzLnBsYXllcnMubWFwKHBsYXllciA9PiBwbGF5ZXIuYmFzZUZyZXEpKTtcclxuICAgICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX191dGlsc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmZpbmRJbkNvbGxlY3Rpb24odGhpcy5wbGF5ZXJzLCBtZW1iZXIgPT4gbWVtYmVyID09PSBjbG9zZXN0UGxheWVyRnJlcXVlbmN5KTtcclxuICAgIH1cclxufVxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKE11bHRpU2FtcGxlcik7XHJcblxuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge3ZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKiFcbiAqICBob3dsZXIuanMgdjIuMC4xMlxuICogIGhvd2xlcmpzLmNvbVxuICpcbiAqICAoYykgMjAxMy0yMDE4LCBKYW1lcyBTaW1wc29uIG9mIEdvbGRGaXJlIFN0dWRpb3NcbiAqICBnb2xkZmlyZXN0dWRpb3MuY29tXG4gKlxuICogIE1JVCBMaWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKiogR2xvYmFsIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgZ2xvYmFsIGNvbnRyb2xsZXIuIEFsbCBjb250YWluZWQgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBhcHBseVxuICAgKiB0byBhbGwgc291bmRzIHRoYXQgYXJlIGN1cnJlbnRseSBwbGF5aW5nIG9yIHdpbGwgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICovXG4gIHZhciBIb3dsZXJHbG9iYWwgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfTtcbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBnbG9iYWwgSG93bGVyIG9iamVjdC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBDcmVhdGUgYSBnbG9iYWwgSUQgY291bnRlci5cbiAgICAgIHNlbGYuX2NvdW50ZXIgPSAxMDAwO1xuXG4gICAgICAvLyBJbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgc2VsZi5fY29kZWNzID0ge307XG4gICAgICBzZWxmLl9ob3dscyA9IFtdO1xuICAgICAgc2VsZi5fbXV0ZWQgPSBmYWxzZTtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IDE7XG4gICAgICBzZWxmLl9jYW5QbGF5RXZlbnQgPSAnY2FucGxheXRocm91Z2gnO1xuICAgICAgc2VsZi5fbmF2aWdhdG9yID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpID8gd2luZG93Lm5hdmlnYXRvciA6IG51bGw7XG5cbiAgICAgIC8vIFB1YmxpYyBwcm9wZXJ0aWVzLlxuICAgICAgc2VsZi5tYXN0ZXJHYWluID0gbnVsbDtcbiAgICAgIHNlbGYubm9BdWRpbyA9IGZhbHNlO1xuICAgICAgc2VsZi51c2luZ1dlYkF1ZGlvID0gdHJ1ZTtcbiAgICAgIHNlbGYuYXV0b1N1c3BlbmQgPSB0cnVlO1xuICAgICAgc2VsZi5jdHggPSBudWxsO1xuXG4gICAgICAvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGUgYXV0byBpT1MgZW5hYmxlci5cbiAgICAgIHNlbGYubW9iaWxlQXV0b0VuYWJsZSA9IHRydWU7XG5cbiAgICAgIC8vIFNldHVwIHRoZSB2YXJpb3VzIHN0YXRlIHZhbHVlcyBmb3IgZ2xvYmFsIHRyYWNraW5nLlxuICAgICAgc2VsZi5fc2V0dXAoKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldC9zZXQgdGhlIGdsb2JhbCB2b2x1bWUgZm9yIGFsbCBzb3VuZHMuXG4gICAgICogQHBhcmFtICB7RmxvYXR9IHZvbCBWb2x1bWUgZnJvbSAwLjAgdG8gMS4wLlxuICAgICAqIEByZXR1cm4ge0hvd2xlci9GbG9hdH0gICAgIFJldHVybnMgc2VsZiBvciBjdXJyZW50IHZvbHVtZS5cbiAgICAgKi9cbiAgICB2b2x1bWU6IGZ1bmN0aW9uKHZvbCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcbiAgICAgIHZvbCA9IHBhcnNlRmxvYXQodm9sKTtcblxuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBBdWRpb0NvbnRleHQgY3JlYXRlZCB5ZXQsIHJ1biB0aGUgc2V0dXAuXG4gICAgICBpZiAoIXNlbGYuY3R4KSB7XG4gICAgICAgIHNldHVwQXVkaW9Db250ZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygdm9sICE9PSAndW5kZWZpbmVkJyAmJiB2b2wgPj0gMCAmJiB2b2wgPD0gMSkge1xuICAgICAgICBzZWxmLl92b2x1bWUgPSB2b2w7XG5cbiAgICAgICAgLy8gRG9uJ3QgdXBkYXRlIGFueSBvZiB0aGUgbm9kZXMgaWYgd2UgYXJlIG11dGVkLlxuICAgICAgICBpZiAoc2VsZi5fbXV0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdXNpbmcgV2ViIEF1ZGlvLCB3ZSBqdXN0IG5lZWQgdG8gYWRqdXN0IHRoZSBtYXN0ZXIgZ2Fpbi5cbiAgICAgICAgaWYgKHNlbGYudXNpbmdXZWJBdWRpbykge1xuICAgICAgICAgIHNlbGYubWFzdGVyR2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKHZvbCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYW5kIGNoYW5nZSB2b2x1bWUgZm9yIGFsbCBIVE1MNSBhdWRpbyBub2Rlcy5cbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFzZWxmLl9ob3dsc1tpXS5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAgIC8vIEdldCBhbGwgb2YgdGhlIHNvdW5kcyBpbiB0aGlzIEhvd2wgZ3JvdXAuXG4gICAgICAgICAgICB2YXIgaWRzID0gc2VsZi5faG93bHNbaV0uX2dldFNvdW5kSWRzKCk7XG5cbiAgICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgc291bmRzIGFuZCBjaGFuZ2UgdGhlIHZvbHVtZXMuXG4gICAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8aWRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX2hvd2xzW2ldLl9zb3VuZEJ5SWQoaWRzW2pdKTtcblxuICAgICAgICAgICAgICBpZiAoc291bmQgJiYgc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5fbm9kZS52b2x1bWUgPSBzb3VuZC5fdm9sdW1lICogdm9sO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLl92b2x1bWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBtdXRpbmcgYW5kIHVubXV0aW5nIGdsb2JhbGx5LlxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IG11dGVkIElzIG11dGVkIG9yIG5vdC5cbiAgICAgKi9cbiAgICBtdXRlOiBmdW5jdGlvbihtdXRlZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcblxuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBBdWRpb0NvbnRleHQgY3JlYXRlZCB5ZXQsIHJ1biB0aGUgc2V0dXAuXG4gICAgICBpZiAoIXNlbGYuY3R4KSB7XG4gICAgICAgIHNldHVwQXVkaW9Db250ZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX211dGVkID0gbXV0ZWQ7XG5cbiAgICAgIC8vIFdpdGggV2ViIEF1ZGlvLCB3ZSBqdXN0IG5lZWQgdG8gbXV0ZSB0aGUgbWFzdGVyIGdhaW4uXG4gICAgICBpZiAoc2VsZi51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICAgIHNlbGYubWFzdGVyR2Fpbi5nYWluLnNldFZhbHVlQXRUaW1lKG11dGVkID8gMCA6IHNlbGYuX3ZvbHVtZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCBhbmQgbXV0ZSBhbGwgSFRNTDUgQXVkaW8gbm9kZXMuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzZWxmLl9ob3dsc1tpXS5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAvLyBHZXQgYWxsIG9mIHRoZSBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAgICAgIHZhciBpZHMgPSBzZWxmLl9ob3dsc1tpXS5fZ2V0U291bmRJZHMoKTtcblxuICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgc291bmRzIGFuZCBtYXJrIHRoZSBhdWRpbyBub2RlIGFzIG11dGVkLlxuICAgICAgICAgIGZvciAodmFyIGo9MDsgajxpZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX2hvd2xzW2ldLl9zb3VuZEJ5SWQoaWRzW2pdKTtcblxuICAgICAgICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLm11dGVkID0gKG11dGVkKSA/IHRydWUgOiBzb3VuZC5fbXV0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbmxvYWQgYW5kIGRlc3Ryb3kgYWxsIGN1cnJlbnRseSBsb2FkZWQgSG93bCBvYmplY3RzLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICB1bmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcblxuICAgICAgZm9yICh2YXIgaT1zZWxmLl9ob3dscy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG4gICAgICAgIHNlbGYuX2hvd2xzW2ldLnVubG9hZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgQXVkaW9Db250ZXh0IHRvIG1ha2Ugc3VyZSBpdCBpcyBmdWxseSByZXNldC5cbiAgICAgIGlmIChzZWxmLnVzaW5nV2ViQXVkaW8gJiYgc2VsZi5jdHggJiYgdHlwZW9mIHNlbGYuY3R4LmNsb3NlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmN0eC5jbG9zZSgpO1xuICAgICAgICBzZWxmLmN0eCA9IG51bGw7XG4gICAgICAgIHNldHVwQXVkaW9Db250ZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgY29kZWMgc3VwcG9ydCBvZiBzcGVjaWZpYyBleHRlbnNpb24uXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBleHQgQXVkaW8gZmlsZSBleHRlbnRpb24uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb2RlY3M6IGZ1bmN0aW9uKGV4dCkge1xuICAgICAgcmV0dXJuICh0aGlzIHx8IEhvd2xlcikuX2NvZGVjc1tleHQucmVwbGFjZSgvXngtLywgJycpXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgdmFyaW91cyBzdGF0ZSB2YWx1ZXMgZm9yIGdsb2JhbCB0cmFja2luZy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgX3NldHVwOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBzdXNwZW5kL3Jlc3VtZSBzdGF0ZSBvZiB0aGUgQXVkaW9Db250ZXh0LlxuICAgICAgc2VsZi5zdGF0ZSA9IHNlbGYuY3R4ID8gc2VsZi5jdHguc3RhdGUgfHwgJ3J1bm5pbmcnIDogJ3J1bm5pbmcnO1xuXG4gICAgICAvLyBBdXRvbWF0aWNhbGx5IGJlZ2luIHRoZSAzMC1zZWNvbmQgc3VzcGVuZCBwcm9jZXNzXG4gICAgICBzZWxmLl9hdXRvU3VzcGVuZCgpO1xuXG4gICAgICAvLyBDaGVjayBpZiBhdWRpbyBpcyBhdmFpbGFibGUuXG4gICAgICBpZiAoIXNlbGYudXNpbmdXZWJBdWRpbykge1xuICAgICAgICAvLyBObyBhdWRpbyBpcyBhdmFpbGFibGUgb24gdGhpcyBzeXN0ZW0gaWYgbm9BdWRpbyBpcyBzZXQgdG8gdHJ1ZS5cbiAgICAgICAgaWYgKHR5cGVvZiBBdWRpbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHRlc3QgPSBuZXcgQXVkaW8oKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNhbnBsYXl0aHJvdWdoIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGVzdC5vbmNhbnBsYXl0aHJvdWdoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBzZWxmLl9jYW5QbGF5RXZlbnQgPSAnY2FucGxheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBzZWxmLm5vQXVkaW8gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLm5vQXVkaW8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRlc3QgdG8gbWFrZSBzdXJlIGF1ZGlvIGlzbid0IGRpc2FibGVkIGluIEludGVybmV0IEV4cGxvcmVyLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHRlc3QgPSBuZXcgQXVkaW8oKTtcbiAgICAgICAgaWYgKHRlc3QubXV0ZWQpIHtcbiAgICAgICAgICBzZWxmLm5vQXVkaW8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICAvLyBDaGVjayBmb3Igc3VwcG9ydGVkIGNvZGVjcy5cbiAgICAgIGlmICghc2VsZi5ub0F1ZGlvKSB7XG4gICAgICAgIHNlbGYuX3NldHVwQ29kZWNzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgYnJvd3NlciBzdXBwb3J0IGZvciB2YXJpb3VzIGNvZGVjcyBhbmQgY2FjaGUgdGhlIHJlc3VsdHMuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9zZXR1cENvZGVjczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuICAgICAgdmFyIGF1ZGlvVGVzdCA9IG51bGw7XG5cbiAgICAgIC8vIE11c3Qgd3JhcCBpbiBhIHRyeS9jYXRjaCBiZWNhdXNlIElFMTEgaW4gc2VydmVyIG1vZGUgdGhyb3dzIGFuIGVycm9yLlxuICAgICAgdHJ5IHtcbiAgICAgICAgYXVkaW9UZXN0ID0gKHR5cGVvZiBBdWRpbyAhPT0gJ3VuZGVmaW5lZCcpID8gbmV3IEF1ZGlvKCkgOiBudWxsO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWF1ZGlvVGVzdCB8fCB0eXBlb2YgYXVkaW9UZXN0LmNhblBsYXlUeXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICB2YXIgbXBlZ1Rlc3QgPSBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL21wZWc7JykucmVwbGFjZSgvXm5vJC8sICcnKTtcblxuICAgICAgLy8gT3BlcmEgdmVyc2lvbiA8MzMgaGFzIG1peGVkIE1QMyBzdXBwb3J0LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGZvciBhbmQgYmxvY2sgaXQuXG4gICAgICB2YXIgY2hlY2tPcGVyYSA9IHNlbGYuX25hdmlnYXRvciAmJiBzZWxmLl9uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9PUFJcXC8oWzAtNl0uKS9nKTtcbiAgICAgIHZhciBpc09sZE9wZXJhID0gKGNoZWNrT3BlcmEgJiYgcGFyc2VJbnQoY2hlY2tPcGVyYVswXS5zcGxpdCgnLycpWzFdLCAxMCkgPCAzMyk7XG5cbiAgICAgIHNlbGYuX2NvZGVjcyA9IHtcbiAgICAgICAgbXAzOiAhISghaXNPbGRPcGVyYSAmJiAobXBlZ1Rlc3QgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tcDM7JykucmVwbGFjZSgvXm5vJC8sICcnKSkpLFxuICAgICAgICBtcGVnOiAhIW1wZWdUZXN0LFxuICAgICAgICBvcHVzOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJvcHVzXCInKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBvZ2c6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgb2dhOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIHdhdjogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgYWFjOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vYWFjOycpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIGNhZjogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3gtY2FmOycpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIG00YTogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LW00YTsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL200YTsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL2FhYzsnKSkucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgbXA0OiAhIShhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3gtbXA0OycpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vbXA0OycpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vYWFjOycpKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICB3ZWJhOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vd2VibTsgY29kZWNzPVwidm9yYmlzXCInKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICB3ZWJtOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vd2VibTsgY29kZWNzPVwidm9yYmlzXCInKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBkb2xieTogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL21wNDsgY29kZWNzPVwiZWMtM1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgZmxhYzogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LWZsYWM7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9mbGFjOycpKS5yZXBsYWNlKC9ebm8kLywgJycpXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW9iaWxlIGJyb3dzZXJzIHdpbGwgb25seSBhbGxvdyBhdWRpbyB0byBiZSBwbGF5ZWQgYWZ0ZXIgYSB1c2VyIGludGVyYWN0aW9uLlxuICAgICAqIEF0dGVtcHQgdG8gYXV0b21hdGljYWxseSB1bmxvY2sgYXVkaW8gb24gdGhlIGZpcnN0IHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICogQ29uY2VwdCBmcm9tOiBodHRwOi8vcGF1bGJha2F1cy5jb20vdHV0b3JpYWxzL2h0bWw1L3dlYi1hdWRpby1vbi1pb3MvXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9lbmFibGVNb2JpbGVBdWRpbzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBPbmx5IHJ1biB0aGlzIG9uIG1vYmlsZSBkZXZpY2VzIGlmIGF1ZGlvIGlzbid0IGFscmVhZHkgZWFuYmxlZC5cbiAgICAgIHZhciBpc01vYmlsZSA9IC9pUGhvbmV8aVBhZHxpUG9kfEFuZHJvaWR8QmxhY2tCZXJyeXxCQjEwfFNpbGt8TW9iaS9pLnRlc3Qoc2VsZi5fbmF2aWdhdG9yICYmIHNlbGYuX25hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIGlzVG91Y2ggPSAhISgoJ29udG91Y2hlbmQnIGluIHdpbmRvdykgfHwgKHNlbGYuX25hdmlnYXRvciAmJiBzZWxmLl9uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAoc2VsZi5fbmF2aWdhdG9yICYmIHNlbGYuX25hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkpO1xuICAgICAgaWYgKHNlbGYuX21vYmlsZUVuYWJsZWQgfHwgIXNlbGYuY3R4IHx8ICghaXNNb2JpbGUgJiYgIWlzVG91Y2gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fbW9iaWxlRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBTb21lIG1vYmlsZSBkZXZpY2VzL3BsYXRmb3JtcyBoYXZlIGRpc3RvcnRpb24gaXNzdWVzIHdoZW4gb3BlbmluZy9jbG9zaW5nIHRhYnMgYW5kL29yIHdlYiB2aWV3cy5cbiAgICAgIC8vIEJ1Z3MgaW4gdGhlIGJyb3dzZXIgKGVzcGVjaWFsbHkgTW9iaWxlIFNhZmFyaSkgY2FuIGNhdXNlIHRoZSBzYW1wbGVSYXRlIHRvIGNoYW5nZSBmcm9tIDQ0MTAwIHRvIDQ4MDAwLlxuICAgICAgLy8gQnkgY2FsbGluZyBIb3dsZXIudW5sb2FkKCksIHdlIGNyZWF0ZSBhIG5ldyBBdWRpb0NvbnRleHQgd2l0aCB0aGUgY29ycmVjdCBzYW1wbGVSYXRlLlxuICAgICAgaWYgKCFzZWxmLl9tb2JpbGVVbmxvYWRlZCAmJiBzZWxmLmN0eC5zYW1wbGVSYXRlICE9PSA0NDEwMCkge1xuICAgICAgICBzZWxmLl9tb2JpbGVVbmxvYWRlZCA9IHRydWU7XG4gICAgICAgIHNlbGYudW5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNjcmF0Y2ggYnVmZmVyIGZvciBlbmFibGluZyBpT1MgdG8gZGlzcG9zZSBvZiB3ZWIgYXVkaW8gYnVmZmVycyBjb3JyZWN0bHksIGFzIHBlcjpcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxMTk2ODRcbiAgICAgIHNlbGYuX3NjcmF0Y2hCdWZmZXIgPSBzZWxmLmN0eC5jcmVhdGVCdWZmZXIoMSwgMSwgMjIwNTApO1xuXG4gICAgICAvLyBDYWxsIHRoaXMgbWV0aG9kIG9uIHRvdWNoIHN0YXJ0IHRvIGNyZWF0ZSBhbmQgcGxheSBhIGJ1ZmZlcixcbiAgICAgIC8vIHRoZW4gY2hlY2sgaWYgdGhlIGF1ZGlvIGFjdHVhbGx5IHBsYXllZCB0byBkZXRlcm1pbmUgaWZcbiAgICAgIC8vIGF1ZGlvIGhhcyBub3cgYmVlbiB1bmxvY2tlZCBvbiBpT1MsIEFuZHJvaWQsIGV0Yy5cbiAgICAgIHZhciB1bmxvY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRml4IEFuZHJvaWQgY2FuIG5vdCBwbGF5IGluIHN1c3BlbmQgc3RhdGUuXG4gICAgICAgIEhvd2xlci5fYXV0b1Jlc3VtZSgpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBidWZmZXIuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWxmLmN0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgc291cmNlLmJ1ZmZlciA9IHNlbGYuX3NjcmF0Y2hCdWZmZXI7XG4gICAgICAgIHNvdXJjZS5jb25uZWN0KHNlbGYuY3R4LmRlc3RpbmF0aW9uKTtcblxuICAgICAgICAvLyBQbGF5IHRoZSBlbXB0eSBidWZmZXIuXG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlLnN0YXJ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNvdXJjZS5ub3RlT24oMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc291cmNlLnN0YXJ0KDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsbGluZyByZXN1bWUoKSBvbiBhIHN0YWNrIGluaXRpYXRlZCBieSB1c2VyIGdlc3R1cmUgaXMgd2hhdCBhY3R1YWxseSB1bmxvY2tzIHRoZSBhdWRpbyBvbiBBbmRyb2lkIENocm9tZSA+PSA1NS5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmN0eC5yZXN1bWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzZWxmLmN0eC5yZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGEgdGltZW91dCB0byBjaGVjayB0aGF0IHdlIGFyZSB1bmxvY2tlZCBvbiB0aGUgbmV4dCBldmVudCBsb29wLlxuICAgICAgICBzb3VyY2Uub25lbmRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNvdXJjZS5kaXNjb25uZWN0KDApO1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSB1bmxvY2tlZCBzdGF0ZSBhbmQgcHJldmVudCB0aGlzIGNoZWNrIGZyb20gaGFwcGVuaW5nIGFnYWluLlxuICAgICAgICAgIHNlbGYuX21vYmlsZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIHNlbGYubW9iaWxlQXV0b0VuYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSB0b3VjaCBzdGFydCBsaXN0ZW5lci5cbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdW5sb2NrLCB0cnVlKTtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHVubG9jaywgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICAvLyBTZXR1cCBhIHRvdWNoIHN0YXJ0IGxpc3RlbmVyIHRvIGF0dGVtcHQgYW4gdW5sb2NrIGluLlxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVubG9jaywgdHJ1ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHVubG9jaywgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWNhbGx5IHN1c3BlbmQgdGhlIFdlYiBBdWRpbyBBdWRpb0NvbnRleHQgYWZ0ZXIgbm8gc291bmQgaGFzIHBsYXllZCBmb3IgMzAgc2Vjb25kcy5cbiAgICAgKiBUaGlzIHNhdmVzIHByb2Nlc3NpbmcvZW5lcmd5IGFuZCBmaXhlcyB2YXJpb3VzIGJyb3dzZXItc3BlY2lmaWMgYnVncyB3aXRoIGF1ZGlvIGdldHRpbmcgc3R1Y2suXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9hdXRvU3VzcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICghc2VsZi5hdXRvU3VzcGVuZCB8fCAhc2VsZi5jdHggfHwgdHlwZW9mIHNlbGYuY3R4LnN1c3BlbmQgPT09ICd1bmRlZmluZWQnIHx8ICFIb3dsZXIudXNpbmdXZWJBdWRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIGFueSBzb3VuZHMgYXJlIHBsYXlpbmcuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNlbGYuX2hvd2xzW2ldLl93ZWJBdWRpbykge1xuICAgICAgICAgIGZvciAodmFyIGo9MDsgajxzZWxmLl9ob3dsc1tpXS5fc291bmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYuX2hvd2xzW2ldLl9zb3VuZHNbal0uX3BhdXNlZCkge1xuICAgICAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuX3N1c3BlbmRUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5fc3VzcGVuZFRpbWVyKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gc291bmQgaGFzIHBsYXllZCBhZnRlciAzMCBzZWNvbmRzLCBzdXNwZW5kIHRoZSBjb250ZXh0LlxuICAgICAgc2VsZi5fc3VzcGVuZFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFzZWxmLmF1dG9TdXNwZW5kKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5fc3VzcGVuZFRpbWVyID0gbnVsbDtcbiAgICAgICAgc2VsZi5zdGF0ZSA9ICdzdXNwZW5kaW5nJztcbiAgICAgICAgc2VsZi5jdHguc3VzcGVuZCgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5zdGF0ZSA9ICdzdXNwZW5kZWQnO1xuXG4gICAgICAgICAgaWYgKHNlbGYuX3Jlc3VtZUFmdGVyU3VzcGVuZCkge1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuX3Jlc3VtZUFmdGVyU3VzcGVuZDtcbiAgICAgICAgICAgIHNlbGYuX2F1dG9SZXN1bWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgMzAwMDApO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXV0b21hdGljYWxseSByZXN1bWUgdGhlIFdlYiBBdWRpbyBBdWRpb0NvbnRleHQgd2hlbiBhIG5ldyBzb3VuZCBpcyBwbGF5ZWQuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9hdXRvUmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKCFzZWxmLmN0eCB8fCB0eXBlb2Ygc2VsZi5jdHgucmVzdW1lID09PSAndW5kZWZpbmVkJyB8fCAhSG93bGVyLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gJ3J1bm5pbmcnICYmIHNlbGYuX3N1c3BlbmRUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5fc3VzcGVuZFRpbWVyKTtcbiAgICAgICAgc2VsZi5fc3VzcGVuZFRpbWVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5zdGF0ZSA9PT0gJ3N1c3BlbmRlZCcpIHtcbiAgICAgICAgc2VsZi5jdHgucmVzdW1lKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnN0YXRlID0gJ3J1bm5pbmcnO1xuXG4gICAgICAgICAgLy8gRW1pdCB0byBhbGwgSG93bHMgdGhhdCB0aGUgYXVkaW8gaGFzIHJlc3VtZWQuXG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZWxmLl9ob3dsc1tpXS5fZW1pdCgncmVzdW1lJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2VsZi5fc3VzcGVuZFRpbWVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3N1c3BlbmRUaW1lcik7XG4gICAgICAgICAgc2VsZi5fc3VzcGVuZFRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxmLnN0YXRlID09PSAnc3VzcGVuZGluZycpIHtcbiAgICAgICAgc2VsZi5fcmVzdW1lQWZ0ZXJTdXNwZW5kID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNldHVwIHRoZSBnbG9iYWwgYXVkaW8gY29udHJvbGxlci5cbiAgdmFyIEhvd2xlciA9IG5ldyBIb3dsZXJHbG9iYWwoKTtcblxuICAvKiogR3JvdXAgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGF1ZGlvIGdyb3VwIGNvbnRyb2xsZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvIFBhc3NlZCBpbiBwcm9wZXJ0aWVzIGZvciB0aGlzIGdyb3VwLlxuICAgKi9cbiAgdmFyIEhvd2wgPSBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgbm8gc291cmNlIGlzIHByb3ZpZGVkLlxuICAgIGlmICghby5zcmMgfHwgby5zcmMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBbiBhcnJheSBvZiBzb3VyY2UgZmlsZXMgbXVzdCBiZSBwYXNzZWQgd2l0aCBhbnkgbmV3IEhvd2wuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5pbml0KG8pO1xuICB9O1xuICBIb3dsLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGEgbmV3IEhvd2wgZ3JvdXAgb2JqZWN0LlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbyBQYXNzZWQgaW4gcHJvcGVydGllcyBmb3IgdGhpcyBncm91cC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKG8pIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBBdWRpb0NvbnRleHQgY3JlYXRlZCB5ZXQsIHJ1biB0aGUgc2V0dXAuXG4gICAgICBpZiAoIUhvd2xlci5jdHgpIHtcbiAgICAgICAgc2V0dXBBdWRpb0NvbnRleHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0dXAgdXNlci1kZWZpbmVkIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX2F1dG9wbGF5ID0gby5hdXRvcGxheSB8fCBmYWxzZTtcbiAgICAgIHNlbGYuX2Zvcm1hdCA9ICh0eXBlb2Ygby5mb3JtYXQgIT09ICdzdHJpbmcnKSA/IG8uZm9ybWF0IDogW28uZm9ybWF0XTtcbiAgICAgIHNlbGYuX2h0bWw1ID0gby5odG1sNSB8fCBmYWxzZTtcbiAgICAgIHNlbGYuX211dGVkID0gby5tdXRlIHx8IGZhbHNlO1xuICAgICAgc2VsZi5fbG9vcCA9IG8ubG9vcCB8fCBmYWxzZTtcbiAgICAgIHNlbGYuX3Bvb2wgPSBvLnBvb2wgfHwgNTtcbiAgICAgIHNlbGYuX3ByZWxvYWQgPSAodHlwZW9mIG8ucHJlbG9hZCA9PT0gJ2Jvb2xlYW4nKSA/IG8ucHJlbG9hZCA6IHRydWU7XG4gICAgICBzZWxmLl9yYXRlID0gby5yYXRlIHx8IDE7XG4gICAgICBzZWxmLl9zcHJpdGUgPSBvLnNwcml0ZSB8fCB7fTtcbiAgICAgIHNlbGYuX3NyYyA9ICh0eXBlb2Ygby5zcmMgIT09ICdzdHJpbmcnKSA/IG8uc3JjIDogW28uc3JjXTtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IG8udm9sdW1lICE9PSB1bmRlZmluZWQgPyBvLnZvbHVtZSA6IDE7XG4gICAgICBzZWxmLl94aHJXaXRoQ3JlZGVudGlhbHMgPSBvLnhocldpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcblxuICAgICAgLy8gU2V0dXAgYWxsIG90aGVyIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX2R1cmF0aW9uID0gMDtcbiAgICAgIHNlbGYuX3N0YXRlID0gJ3VubG9hZGVkJztcbiAgICAgIHNlbGYuX3NvdW5kcyA9IFtdO1xuICAgICAgc2VsZi5fZW5kVGltZXJzID0ge307XG4gICAgICBzZWxmLl9xdWV1ZSA9IFtdO1xuICAgICAgc2VsZi5fcGxheUxvY2sgPSBmYWxzZTtcblxuICAgICAgLy8gU2V0dXAgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgc2VsZi5fb25lbmQgPSBvLm9uZW5kID8gW3tmbjogby5vbmVuZH1dIDogW107XG4gICAgICBzZWxmLl9vbmZhZGUgPSBvLm9uZmFkZSA/IFt7Zm46IG8ub25mYWRlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ubG9hZCA9IG8ub25sb2FkID8gW3tmbjogby5vbmxvYWR9XSA6IFtdO1xuICAgICAgc2VsZi5fb25sb2FkZXJyb3IgPSBvLm9ubG9hZGVycm9yID8gW3tmbjogby5vbmxvYWRlcnJvcn1dIDogW107XG4gICAgICBzZWxmLl9vbnBsYXllcnJvciA9IG8ub25wbGF5ZXJyb3IgPyBbe2ZuOiBvLm9ucGxheWVycm9yfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ucGF1c2UgPSBvLm9ucGF1c2UgPyBbe2ZuOiBvLm9ucGF1c2V9XSA6IFtdO1xuICAgICAgc2VsZi5fb25wbGF5ID0gby5vbnBsYXkgPyBbe2ZuOiBvLm9ucGxheX1dIDogW107XG4gICAgICBzZWxmLl9vbnN0b3AgPSBvLm9uc3RvcCA/IFt7Zm46IG8ub25zdG9wfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ubXV0ZSA9IG8ub25tdXRlID8gW3tmbjogby5vbm11dGV9XSA6IFtdO1xuICAgICAgc2VsZi5fb252b2x1bWUgPSBvLm9udm9sdW1lID8gW3tmbjogby5vbnZvbHVtZX1dIDogW107XG4gICAgICBzZWxmLl9vbnJhdGUgPSBvLm9ucmF0ZSA/IFt7Zm46IG8ub25yYXRlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29uc2VlayA9IG8ub25zZWVrID8gW3tmbjogby5vbnNlZWt9XSA6IFtdO1xuICAgICAgc2VsZi5fb25yZXN1bWUgPSBbXTtcblxuICAgICAgLy8gV2ViIEF1ZGlvIG9yIEhUTUw1IEF1ZGlvP1xuICAgICAgc2VsZi5fd2ViQXVkaW8gPSBIb3dsZXIudXNpbmdXZWJBdWRpbyAmJiAhc2VsZi5faHRtbDU7XG5cbiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgdHJ5IHRvIGVuYWJsZSBhdWRpbyBvbiBpT1MuXG4gICAgICBpZiAodHlwZW9mIEhvd2xlci5jdHggIT09ICd1bmRlZmluZWQnICYmIEhvd2xlci5jdHggJiYgSG93bGVyLm1vYmlsZUF1dG9FbmFibGUpIHtcbiAgICAgICAgSG93bGVyLl9lbmFibGVNb2JpbGVBdWRpbygpO1xuICAgICAgfVxuXG4gICAgICAvLyBLZWVwIHRyYWNrIG9mIHRoaXMgSG93bCBncm91cCBpbiB0aGUgZ2xvYmFsIGNvbnRyb2xsZXIuXG4gICAgICBIb3dsZXIuX2hvd2xzLnB1c2goc2VsZik7XG5cbiAgICAgIC8vIElmIHRoZXkgc2VsZWN0ZWQgYXV0b3BsYXksIGFkZCBhIHBsYXkgZXZlbnQgdG8gdGhlIGxvYWQgcXVldWUuXG4gICAgICBpZiAoc2VsZi5fYXV0b3BsYXkpIHtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdwbGF5JyxcbiAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5wbGF5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gTG9hZCB0aGUgc291cmNlIGZpbGUgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gICAgICBpZiAoc2VsZi5fcHJlbG9hZCkge1xuICAgICAgICBzZWxmLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGF1ZGlvIGZpbGUuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHVybCA9IG51bGw7XG5cbiAgICAgIC8vIElmIG5vIGF1ZGlvIGlzIGF2YWlsYWJsZSwgcXVpdCBpbW1lZGlhdGVseS5cbiAgICAgIGlmIChIb3dsZXIubm9BdWRpbykge1xuICAgICAgICBzZWxmLl9lbWl0KCdsb2FkZXJyb3InLCBudWxsLCAnTm8gYXVkaW8gc3VwcG9ydC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgb3VyIHNvdXJjZSBpcyBpbiBhbiBhcnJheS5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZi5fc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZWxmLl9zcmMgPSBbc2VsZi5fc3JjXTtcbiAgICAgIH1cblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBzb3VyY2VzIGFuZCBwaWNrIHRoZSBmaXJzdCBvbmUgdGhhdCBpcyBjb21wYXRpYmxlLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NyYy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZXh0LCBzdHI7XG5cbiAgICAgICAgaWYgKHNlbGYuX2Zvcm1hdCAmJiBzZWxmLl9mb3JtYXRbaV0pIHtcbiAgICAgICAgICAvLyBJZiBhbiBleHRlbnNpb24gd2FzIHNwZWNpZmllZCwgdXNlIHRoYXQgaW5zdGVhZC5cbiAgICAgICAgICBleHQgPSBzZWxmLl9mb3JtYXRbaV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcuXG4gICAgICAgICAgc3RyID0gc2VsZi5fc3JjW2ldO1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ05vbi1zdHJpbmcgZm91bmQgaW4gc2VsZWN0ZWQgYXVkaW8gc291cmNlcyAtIGlnbm9yaW5nLicpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRXh0cmFjdCB0aGUgZmlsZSBleHRlbnNpb24gZnJvbSB0aGUgVVJMIG9yIGJhc2U2NCBkYXRhIFVSSS5cbiAgICAgICAgICBleHQgPSAvXmRhdGE6YXVkaW9cXC8oW147LF0rKTsvaS5leGVjKHN0cik7XG4gICAgICAgICAgaWYgKCFleHQpIHtcbiAgICAgICAgICAgIGV4dCA9IC9cXC4oW14uXSspJC8uZXhlYyhzdHIuc3BsaXQoJz8nLCAxKVswXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4dCkge1xuICAgICAgICAgICAgZXh0ID0gZXh0WzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9nIGEgd2FybmluZyBpZiBubyBleHRlbnNpb24gd2FzIGZvdW5kLlxuICAgICAgICBpZiAoIWV4dCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTm8gZmlsZSBleHRlbnNpb24gd2FzIGZvdW5kLiBDb25zaWRlciB1c2luZyB0aGUgXCJmb3JtYXRcIiBwcm9wZXJ0eSBvciBzcGVjaWZ5IGFuIGV4dGVuc2lvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgaWYgKGV4dCAmJiBIb3dsZXIuY29kZWNzKGV4dCkpIHtcbiAgICAgICAgICB1cmwgPSBzZWxmLl9zcmNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ05vIGNvZGVjIHN1cHBvcnQgZm9yIHNlbGVjdGVkIGF1ZGlvIHNvdXJjZXMuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fc3JjID0gdXJsO1xuICAgICAgc2VsZi5fc3RhdGUgPSAnbG9hZGluZyc7XG5cbiAgICAgIC8vIElmIHRoZSBob3N0aW5nIHBhZ2UgaXMgSFRUUFMgYW5kIHRoZSBzb3VyY2UgaXNuJ3QsXG4gICAgICAvLyBkcm9wIGRvd24gdG8gSFRNTDUgQXVkaW8gdG8gYXZvaWQgTWl4ZWQgQ29udGVudCBlcnJvcnMuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyAmJiB1cmwuc2xpY2UoMCwgNSkgPT09ICdodHRwOicpIHtcbiAgICAgICAgc2VsZi5faHRtbDUgPSB0cnVlO1xuICAgICAgICBzZWxmLl93ZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgc291bmQgb2JqZWN0IGFuZCBhZGQgaXQgdG8gdGhlIHBvb2wuXG4gICAgICBuZXcgU291bmQoc2VsZik7XG5cbiAgICAgIC8vIExvYWQgYW5kIGRlY29kZSB0aGUgYXVkaW8gZGF0YSBmb3IgcGxheWJhY2suXG4gICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgbG9hZEJ1ZmZlcihzZWxmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBsYXkgYSBzb3VuZCBvciByZXN1bWUgcHJldmlvdXMgcGxheWJhY2suXG4gICAgICogQHBhcmFtICB7U3RyaW5nL051bWJlcn0gc3ByaXRlICAgU3ByaXRlIG5hbWUgZm9yIHNwcml0ZSBwbGF5YmFjayBvciBzb3VuZCBpZCB0byBjb250aW51ZSBwcmV2aW91cy5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbnRlcm5hbCBJbnRlcm5hbCBVc2U6IHRydWUgcHJldmVudHMgZXZlbnQgZmlyaW5nLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgU291bmQgSUQuXG4gICAgICovXG4gICAgcGxheTogZnVuY3Rpb24oc3ByaXRlLCBpbnRlcm5hbCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGlkID0gbnVsbDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIGEgc3ByaXRlLCBzb3VuZCBpZCBvciBub3RoaW5nIHdhcyBwYXNzZWRcbiAgICAgIGlmICh0eXBlb2Ygc3ByaXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZCA9IHNwcml0ZTtcbiAgICAgICAgc3ByaXRlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwcml0ZSA9PT0gJ3N0cmluZycgJiYgc2VsZi5fc3RhdGUgPT09ICdsb2FkZWQnICYmICFzZWxmLl9zcHJpdGVbc3ByaXRlXSkge1xuICAgICAgICAvLyBJZiB0aGUgcGFzc2VkIHNwcml0ZSBkb2Vzbid0IGV4aXN0LCBkbyBub3RoaW5nLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwcml0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBkZWZhdWx0IHNvdW5kIHNwcml0ZSAocGxheXMgdGhlIGZ1bGwgYXVkaW8gbGVuZ3RoKS5cbiAgICAgICAgc3ByaXRlID0gJ19fZGVmYXVsdCc7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBzaW5nbGUgcGF1c2VkIHNvdW5kIHRoYXQgaXNuJ3QgZW5kZWQuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzLCBwbGF5IHRoYXQgc291bmQuIElmIG5vdCwgY29udGludWUgYXMgdXN1YWwuXG4gICAgICAgIHZhciBudW0gPSAwO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHNlbGYuX3NvdW5kc1tpXS5fcGF1c2VkICYmICFzZWxmLl9zb3VuZHNbaV0uX2VuZGVkKSB7XG4gICAgICAgICAgICBudW0rKztcbiAgICAgICAgICAgIGlkID0gc2VsZi5fc291bmRzW2ldLl9pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobnVtID09PSAxKSB7XG4gICAgICAgICAgc3ByaXRlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHRoZSBzZWxlY3RlZCBub2RlLCBvciBnZXQgb25lIGZyb20gdGhlIHBvb2wuXG4gICAgICB2YXIgc291bmQgPSBpZCA/IHNlbGYuX3NvdW5kQnlJZChpZCkgOiBzZWxmLl9pbmFjdGl2ZVNvdW5kKCk7XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBkb2Vzbid0IGV4aXN0LCBkbyBub3RoaW5nLlxuICAgICAgaWYgKCFzb3VuZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gU2VsZWN0IHRoZSBzcHJpdGUgZGVmaW5pdGlvbi5cbiAgICAgIGlmIChpZCAmJiAhc3ByaXRlKSB7XG4gICAgICAgIHNwcml0ZSA9IHNvdW5kLl9zcHJpdGUgfHwgJ19fZGVmYXVsdCc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCB3ZSBtdXN0IHdhaXQgdG8gZ2V0IHRoZSBhdWRpbydzIGR1cmF0aW9uLlxuICAgICAgLy8gV2UgYWxzbyBuZWVkIHRvIHdhaXQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHJ1biBpbnRvIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgICAvLyB0aGUgb3JkZXIgb2YgZnVuY3Rpb24gY2FsbHMuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIC8vIFNldCB0aGUgc3ByaXRlIHZhbHVlIG9uIHRoaXMgc291bmQuXG4gICAgICAgIHNvdW5kLl9zcHJpdGUgPSBzcHJpdGU7XG5cbiAgICAgICAgLy8gTWFrciB0aGlzIHNvdW5kZWQgYXMgbm90IGVuZGVkIGluIGNhc2UgYW5vdGhlciBzb3VuZCBpcyBwbGF5ZWQgYmVmb3JlIHRoaXMgb25lIGxvYWRzLlxuICAgICAgICBzb3VuZC5fZW5kZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBBZGQgdGhlIHNvdW5kIHRvIHRoZSBxdWV1ZSB0byBiZSBwbGF5ZWQgb24gbG9hZC5cbiAgICAgICAgdmFyIHNvdW5kSWQgPSBzb3VuZC5faWQ7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAncGxheScsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYucGxheShzb3VuZElkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzb3VuZElkO1xuICAgICAgfVxuXG4gICAgICAvLyBEb24ndCBwbGF5IHRoZSBzb3VuZCBpZiBhbiBpZCB3YXMgcGFzc2VkIGFuZCBpdCBpcyBhbHJlYWR5IHBsYXlpbmcuXG4gICAgICBpZiAoaWQgJiYgIXNvdW5kLl9wYXVzZWQpIHtcbiAgICAgICAgLy8gVHJpZ2dlciB0aGUgcGxheSBldmVudCwgaW4gb3JkZXIgdG8ga2VlcCBpdGVyYXRpbmcgdGhyb3VnaCBxdWV1ZS5cbiAgICAgICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgICAgIHNlbGYuX2xvYWRRdWV1ZSgncGxheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvdW5kLl9pZDtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBBdWRpb0NvbnRleHQgaXNuJ3Qgc3VzcGVuZGVkLCBhbmQgcmVzdW1lIGl0IGlmIGl0IGlzLlxuICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgIEhvd2xlci5fYXV0b1Jlc3VtZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXRlcm1pbmUgaG93IGxvbmcgdG8gcGxheSBmb3IgYW5kIHdoZXJlIHRvIHN0YXJ0IHBsYXlpbmcuXG4gICAgICB2YXIgc2VlayA9IE1hdGgubWF4KDAsIHNvdW5kLl9zZWVrID4gMCA/IHNvdW5kLl9zZWVrIDogc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gLyAxMDAwKTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IE1hdGgubWF4KDAsICgoc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gKyBzZWxmLl9zcHJpdGVbc3ByaXRlXVsxXSkgLyAxMDAwKSAtIHNlZWspO1xuICAgICAgdmFyIHRpbWVvdXQgPSAoZHVyYXRpb24gKiAxMDAwKSAvIE1hdGguYWJzKHNvdW5kLl9yYXRlKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBzb3VuZFxuICAgICAgc291bmQuX3BhdXNlZCA9IGZhbHNlO1xuICAgICAgc291bmQuX2VuZGVkID0gZmFsc2U7XG4gICAgICBzb3VuZC5fc3ByaXRlID0gc3ByaXRlO1xuICAgICAgc291bmQuX3NlZWsgPSBzZWVrO1xuICAgICAgc291bmQuX3N0YXJ0ID0gc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gLyAxMDAwO1xuICAgICAgc291bmQuX3N0b3AgPSAoc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gKyBzZWxmLl9zcHJpdGVbc3ByaXRlXVsxXSkgLyAxMDAwO1xuICAgICAgc291bmQuX2xvb3AgPSAhIShzb3VuZC5fbG9vcCB8fCBzZWxmLl9zcHJpdGVbc3ByaXRlXVsyXSk7XG5cbiAgICAgIC8vIEJlZ2luIHRoZSBhY3R1YWwgcGxheWJhY2suXG4gICAgICB2YXIgbm9kZSA9IHNvdW5kLl9ub2RlO1xuICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgIC8vIEZpcmUgdGhpcyB3aGVuIHRoZSBzb3VuZCBpcyByZWFkeSB0byBwbGF5IHRvIGJlZ2luIFdlYiBBdWRpbyBwbGF5YmFjay5cbiAgICAgICAgdmFyIHBsYXlXZWJBdWRpbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuX3JlZnJlc2hCdWZmZXIoc291bmQpO1xuXG4gICAgICAgICAgLy8gU2V0dXAgdGhlIHBsYXliYWNrIHBhcmFtcy5cbiAgICAgICAgICB2YXIgdm9sID0gKHNvdW5kLl9tdXRlZCB8fCBzZWxmLl9tdXRlZCkgPyAwIDogc291bmQuX3ZvbHVtZTtcbiAgICAgICAgICBub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICBzb3VuZC5fcGxheVN0YXJ0ID0gSG93bGVyLmN0eC5jdXJyZW50VGltZTtcblxuICAgICAgICAgIC8vIFBsYXkgdGhlIHNvdW5kIHVzaW5nIHRoZSBzdXBwb3J0ZWQgbWV0aG9kLlxuICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5idWZmZXJTb3VyY2Uuc3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzb3VuZC5fbG9vcCA/IG5vZGUuYnVmZmVyU291cmNlLm5vdGVHcmFpbk9uKDAsIHNlZWssIDg2NDAwKSA6IG5vZGUuYnVmZmVyU291cmNlLm5vdGVHcmFpbk9uKDAsIHNlZWssIGR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291bmQuX2xvb3AgPyBub2RlLmJ1ZmZlclNvdXJjZS5zdGFydCgwLCBzZWVrLCA4NjQwMCkgOiBub2RlLmJ1ZmZlclNvdXJjZS5zdGFydCgwLCBzZWVrLCBkdXJhdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RhcnQgYSBuZXcgdGltZXIgaWYgbm9uZSBpcyBwcmVzZW50LlxuICAgICAgICAgIGlmICh0aW1lb3V0ICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0gPSBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCB0aW1lb3V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoSG93bGVyLnN0YXRlID09PSAncnVubmluZycpIHtcbiAgICAgICAgICBwbGF5V2ViQXVkaW8oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLm9uY2UoJ3Jlc3VtZScsIHBsYXlXZWJBdWRpbyk7XG5cbiAgICAgICAgICAvLyBDYW5jZWwgdGhlIGVuZCB0aW1lci5cbiAgICAgICAgICBzZWxmLl9jbGVhclRpbWVyKHNvdW5kLl9pZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpcmUgdGhpcyB3aGVuIHRoZSBzb3VuZCBpcyByZWFkeSB0byBwbGF5IHRvIGJlZ2luIEhUTUw1IEF1ZGlvIHBsYXliYWNrLlxuICAgICAgICB2YXIgcGxheUh0bWw1ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbm9kZS5jdXJyZW50VGltZSA9IHNlZWs7XG4gICAgICAgICAgbm9kZS5tdXRlZCA9IHNvdW5kLl9tdXRlZCB8fCBzZWxmLl9tdXRlZCB8fCBIb3dsZXIuX211dGVkIHx8IG5vZGUubXV0ZWQ7XG4gICAgICAgICAgbm9kZS52b2x1bWUgPSBzb3VuZC5fdm9sdW1lICogSG93bGVyLnZvbHVtZSgpO1xuICAgICAgICAgIG5vZGUucGxheWJhY2tSYXRlID0gc291bmQuX3JhdGU7XG5cbiAgICAgICAgICAvLyBNb2JpbGUgYnJvd3NlcnMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGlzIGlzIGNhbGxlZCB3aXRob3V0IHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBwbGF5ID0gbm9kZS5wbGF5KCk7XG5cbiAgICAgICAgICAgIC8vIFN1cHBvcnQgb2xkZXIgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHByb21pc2VzLCBhbmQgdGh1cyBkb24ndCBoYXZlIHRoaXMgaXNzdWUuXG4gICAgICAgICAgICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIHBsYXkgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgIC8vIEltcGxlbWVudHMgYSBsb2NrIHRvIHByZXZlbnQgRE9NRXhjZXB0aW9uOiBUaGUgcGxheSgpIHJlcXVlc3Qgd2FzIGludGVycnVwdGVkIGJ5IGEgY2FsbCB0byBwYXVzZSgpLlxuICAgICAgICAgICAgICBzZWxmLl9wbGF5TG9jayA9IHRydWU7XG5cbiAgICAgICAgICAgICAgLy8gUmVsZWFzZXMgdGhlIGxvY2sgYW5kIGV4ZWN1dGVzIHF1ZXVlZCBhY3Rpb25zLlxuICAgICAgICAgICAgICB2YXIgcnVuTG9hZFF1ZXVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcGxheUxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHBsYXkudGhlbihydW5Mb2FkUXVldWUsIHJ1bkxvYWRRdWV1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0dGluZyByYXRlIGJlZm9yZSBwbGF5aW5nIHdvbid0IHdvcmsgaW4gSUUsIHNvIHdlIHNldCBpdCBhZ2FpbiBoZXJlLlxuICAgICAgICAgICAgbm9kZS5wbGF5YmFja1JhdGUgPSBzb3VuZC5fcmF0ZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgaXMgc3RpbGwgcGF1c2VkLCB0aGVuIHdlIGNhbiBhc3N1bWUgdGhlcmUgd2FzIGEgcGxheWJhY2sgaXNzdWUuXG4gICAgICAgICAgICBpZiAobm9kZS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheWVycm9yJywgc291bmQuX2lkLCAnUGxheWJhY2sgd2FzIHVuYWJsZSB0byBzdGFydC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGFuIGlzc3VlICcgK1xuICAgICAgICAgICAgICAgICdvbiBtb2JpbGUgZGV2aWNlcyB3aGVyZSBwbGF5YmFjayB3YXMgbm90IHdpdGhpbiBhIHVzZXIgaW50ZXJhY3Rpb24uJyk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0dXAgdGhlIGVuZCB0aW1lciBvbiBzcHJpdGVzIG9yIGxpc3RlbiBmb3IgdGhlIGVuZGVkIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHNwcml0ZSAhPT0gJ19fZGVmYXVsdCcgfHwgc291bmQuX2xvb3ApIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0gPSBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlyZSBlbmRlZCBvbiB0aGlzIGF1ZGlvIG5vZGUuXG4gICAgICAgICAgICAgICAgc2VsZi5fZW5kZWQoc291bmQpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5ZXJyb3InLCBzb3VuZC5faWQsIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFBsYXkgaW1tZWRpYXRlbHkgaWYgcmVhZHksIG9yIHdhaXQgZm9yIHRoZSAnY2FucGxheXRocm91Z2gnZSB2ZW50LlxuICAgICAgICB2YXIgbG9hZGVkTm9SZWFkeVN0YXRlID0gKHdpbmRvdyAmJiB3aW5kb3cuZWplY3RhKSB8fCAoIW5vZGUucmVhZHlTdGF0ZSAmJiBIb3dsZXIuX25hdmlnYXRvci5pc0NvY29vbkpTKTtcbiAgICAgICAgaWYgKG5vZGUucmVhZHlTdGF0ZSA+PSAzIHx8IGxvYWRlZE5vUmVhZHlTdGF0ZSkge1xuICAgICAgICAgIHBsYXlIdG1sNSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gQmVnaW4gcGxheWJhY2suXG4gICAgICAgICAgICBwbGF5SHRtbDUoKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihIb3dsZXIuX2NhblBsYXlFdmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihIb3dsZXIuX2NhblBsYXlFdmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcblxuICAgICAgICAgIC8vIENhbmNlbCB0aGUgZW5kIHRpbWVyLlxuICAgICAgICAgIHNlbGYuX2NsZWFyVGltZXIoc291bmQuX2lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc291bmQuX2lkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYXVzZSBwbGF5YmFjayBhbmQgc2F2ZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIElEIChlbXB0eSB0byBwYXVzZSBhbGwgaW4gZ3JvdXApLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgcGF1c2U6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkIG9yIGEgcGxheSgpIHByb21pc2UgaXMgcGVuZGluZywgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIHBhdXNlIHdoZW4gY2FwYWJsZS5cbiAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcgfHwgc2VsZi5fcGxheUxvY2spIHtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdwYXVzZScsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYucGF1c2UoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGlkIGlzIHBhc3NlZCwgZ2V0IGFsbCBJRCdzIHRvIGJlIHBhdXNlZC5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIGVuZCB0aW1lci5cbiAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihpZHNbaV0pO1xuXG4gICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICAgIGlmIChzb3VuZCAmJiAhc291bmQuX3BhdXNlZCkge1xuICAgICAgICAgIC8vIFJlc2V0IHRoZSBzZWVrIHBvc2l0aW9uLlxuICAgICAgICAgIHNvdW5kLl9zZWVrID0gc2VsZi5zZWVrKGlkc1tpXSk7XG4gICAgICAgICAgc291bmQuX3JhdGVTZWVrID0gMDtcbiAgICAgICAgICBzb3VuZC5fcGF1c2VkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFN0b3AgY3VycmVudGx5IHJ1bm5pbmcgZmFkZXMuXG4gICAgICAgICAgc2VsZi5fc3RvcEZhZGUoaWRzW2ldKTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc291bmQgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICAgICAgaWYgKCFzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLm5vdGVPZmYoMCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AoMCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgYnVmZmVyIHNvdXJjZS5cbiAgICAgICAgICAgICAgc2VsZi5fY2xlYW5CdWZmZXIoc291bmQuX25vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oc291bmQuX25vZGUuZHVyYXRpb24pIHx8IHNvdW5kLl9ub2RlLmR1cmF0aW9uID09PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgdGhlIHBhdXNlIGV2ZW50LCB1bmxlc3MgYHRydWVgIGlzIHBhc3NlZCBhcyB0aGUgMm5kIGFyZ3VtZW50LlxuICAgICAgICBpZiAoIWFyZ3VtZW50c1sxXSkge1xuICAgICAgICAgIHNlbGYuX2VtaXQoJ3BhdXNlJywgc291bmQgPyBzb3VuZC5faWQgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3RvcCBwbGF5YmFjayBhbmQgcmVzZXQgdG8gc3RhcnQuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCBUaGUgc291bmQgSUQgKGVtcHR5IHRvIHN0b3AgYWxsIGluIGdyb3VwKS5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbnRlcm5hbCBJbnRlcm5hbCBVc2U6IHRydWUgcHJldmVudHMgZXZlbnQgZmlyaW5nLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24oaWQsIGludGVybmFsKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gc3RvcCB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAnc3RvcCcsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuc3RvcChpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gaWQgaXMgcGFzc2VkLCBnZXQgYWxsIElEJ3MgdG8gYmUgc3RvcHBlZC5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIGVuZCB0aW1lci5cbiAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihpZHNbaV0pO1xuXG4gICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICAgIC8vIFJlc2V0IHRoZSBzZWVrIHBvc2l0aW9uLlxuICAgICAgICAgIHNvdW5kLl9zZWVrID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgICAgc291bmQuX3JhdGVTZWVrID0gMDtcbiAgICAgICAgICBzb3VuZC5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICBzb3VuZC5fZW5kZWQgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gU3RvcCBjdXJyZW50bHkgcnVubmluZyBmYWRlcy5cbiAgICAgICAgICBzZWxmLl9zdG9wRmFkZShpZHNbaV0pO1xuXG4gICAgICAgICAgaWYgKHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzb3VuZCdzIEF1ZGlvQnVmZmVyU291cmNlTm9kZSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgICAgICBpZiAoc291bmQuX25vZGUuYnVmZmVyU291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2Uuc3RvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5ub3RlT2ZmKDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2Uuc3RvcCgwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgYnVmZmVyIHNvdXJjZS5cbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhbkJ1ZmZlcihzb3VuZC5fbm9kZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHNvdW5kLl9ub2RlLmR1cmF0aW9uKSB8fCBzb3VuZC5fbm9kZS5kdXJhdGlvbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuY3VycmVudFRpbWUgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICBzZWxmLl9lbWl0KCdzdG9wJywgc291bmQuX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11dGUvdW5tdXRlIGEgc2luZ2xlIHNvdW5kIG9yIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IG11dGVkIFNldCB0byB0cnVlIHRvIG11dGUgYW5kIGZhbHNlIHRvIHVubXV0ZS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkICAgIFRoZSBzb3VuZCBJRCB0byB1cGRhdGUgKG9taXQgdG8gbXV0ZS91bm11dGUgYWxsKS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIG11dGU6IGZ1bmN0aW9uKG11dGVkLCBpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIG11dGUgd2hlbiBjYXBhYmxlLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ211dGUnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLm11dGUobXV0ZWQsIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhcHBseWluZyBtdXRlL3VubXV0ZSB0byBhbGwgc291bmRzLCB1cGRhdGUgdGhlIGdyb3VwJ3MgdmFsdWUuXG4gICAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIG11dGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBzZWxmLl9tdXRlZCA9IG11dGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzZWxmLl9tdXRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBpZCBpcyBwYXNzZWQsIGdldCBhbGwgSUQncyB0byBiZSBtdXRlZC5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgc291bmQuX211dGVkID0gbXV0ZWQ7XG5cbiAgICAgICAgICAvLyBDYW5jZWwgYWN0aXZlIGZhZGUgYW5kIHNldCB0aGUgdm9sdW1lIHRvIHRoZSBlbmQgdmFsdWUuXG4gICAgICAgICAgaWYgKHNvdW5kLl9pbnRlcnZhbCkge1xuICAgICAgICAgICAgc2VsZi5fc3RvcEZhZGUoc291bmQuX2lkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUobXV0ZWQgPyAwIDogc291bmQuX3ZvbHVtZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgc291bmQuX25vZGUubXV0ZWQgPSBIb3dsZXIuX211dGVkID8gdHJ1ZSA6IG11dGVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuX2VtaXQoJ211dGUnLCBzb3VuZC5faWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQvc2V0IHRoZSB2b2x1bWUgb2YgdGhpcyBzb3VuZCBvciBvZiB0aGUgSG93bCBncm91cC4gVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbHkgdGFrZSAwLCAxIG9yIDIgYXJndW1lbnRzLlxuICAgICAqICAgdm9sdW1lKCkgLT4gUmV0dXJucyB0aGUgZ3JvdXAncyB2b2x1bWUgdmFsdWUuXG4gICAgICogICB2b2x1bWUoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgY3VycmVudCB2b2x1bWUuXG4gICAgICogICB2b2x1bWUodm9sKSAtPiBTZXRzIHRoZSB2b2x1bWUgb2YgYWxsIHNvdW5kcyBpbiB0aGlzIEhvd2wgZ3JvdXAuXG4gICAgICogICB2b2x1bWUodm9sLCBpZCkgLT4gU2V0cyB0aGUgdm9sdW1lIG9mIHBhc3NlZCBzb3VuZCBpZC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsL051bWJlcn0gUmV0dXJucyBzZWxmIG9yIGN1cnJlbnQgdm9sdW1lLlxuICAgICAqL1xuICAgIHZvbHVtZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciB2b2wsIGlkO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBiYXNlZCBvbiBhcmd1bWVudHMuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZ3JvdXBzJyB2b2x1bWUuXG4gICAgICAgIHJldHVybiBzZWxmLl92b2x1bWU7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxIHx8IGFyZ3MubGVuZ3RoID09PSAyICYmIHR5cGVvZiBhcmdzWzFdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGlzIGlzIGFuIElELCBhbmQgaWYgbm90LCBhc3N1bWUgaXQgaXMgYSBuZXcgdm9sdW1lLlxuICAgICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gaWRzLmluZGV4T2YoYXJnc1swXSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzBdLCAxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm9sID0gcGFyc2VGbG9hdChhcmdzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHZvbCA9IHBhcnNlRmxvYXQoYXJnc1swXSk7XG4gICAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1sxXSwgMTApO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBvciByZXR1cm4gdGhlIGN1cnJlbnQgdm9sdW1lLlxuICAgICAgdmFyIHNvdW5kO1xuICAgICAgaWYgKHR5cGVvZiB2b2wgIT09ICd1bmRlZmluZWQnICYmIHZvbCA+PSAwICYmIHZvbCA8PSAxKSB7XG4gICAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gY2hhbmdlIHZvbHVtZSB3aGVuIGNhcGFibGUuXG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiAndm9sdW1lJyxcbiAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNlbGYudm9sdW1lLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGdyb3VwIHZvbHVtZS5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLl92b2x1bWUgPSB2b2w7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgb25lIG9yIGFsbCB2b2x1bWVzLlxuICAgICAgICBpZCA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgICAgICBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZFtpXSk7XG5cbiAgICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAgIHNvdW5kLl92b2x1bWUgPSB2b2w7XG5cbiAgICAgICAgICAgIC8vIFN0b3AgY3VycmVudGx5IHJ1bm5pbmcgZmFkZXMuXG4gICAgICAgICAgICBpZiAoIWFyZ3NbMl0pIHtcbiAgICAgICAgICAgICAgc2VsZi5fc3RvcEZhZGUoaWRbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUgJiYgIXNvdW5kLl9tdXRlZCkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdW5kLl9ub2RlICYmICFzb3VuZC5fbXV0ZWQpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUudm9sdW1lID0gdm9sICogSG93bGVyLnZvbHVtZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLl9lbWl0KCd2b2x1bWUnLCBzb3VuZC5faWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQgPSBpZCA/IHNlbGYuX3NvdW5kQnlJZChpZCkgOiBzZWxmLl9zb3VuZHNbMF07XG4gICAgICAgIHJldHVybiBzb3VuZCA/IHNvdW5kLl92b2x1bWUgOiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmFkZSBhIGN1cnJlbnRseSBwbGF5aW5nIHNvdW5kIGJldHdlZW4gdHdvIHZvbHVtZXMgKGlmIG5vIGlkIGlzIHBhc3NzZWQsIGFsbCBzb3VuZHMgd2lsbCBmYWRlKS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGZyb20gVGhlIHZhbHVlIHRvIGZhZGUgZnJvbSAoMC4wIHRvIDEuMCkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB0byAgIFRoZSB2b2x1bWUgdG8gZmFkZSB0byAoMC4wIHRvIDEuMCkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBsZW4gIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIGZhZGUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAgIFRoZSBzb3VuZCBpZCAob21pdCB0byBmYWRlIGFsbCBzb3VuZHMpLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgZmFkZTogZnVuY3Rpb24oZnJvbSwgdG8sIGxlbiwgaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBmYWRlIHdoZW4gY2FwYWJsZS5cbiAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdmYWRlJyxcbiAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5mYWRlKGZyb20sIHRvLCBsZW4sIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdGhlIHZvbHVtZSB0byB0aGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICBzZWxmLnZvbHVtZShmcm9tLCBpZCk7XG5cbiAgICAgIC8vIEZhZGUgdGhlIHZvbHVtZSBvZiBvbmUgb3IgYWxsIHNvdW5kcy5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIGxpbmVhciBmYWRlIG9yIGZhbGwgYmFjayB0byB0aW1lb3V0cyB3aXRoIEhUTUw1IEF1ZGlvLlxuICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAvLyBTdG9wIHRoZSBwcmV2aW91cyBmYWRlIGlmIG5vIHNwcml0ZSBpcyBiZWluZyB1c2VkIChvdGhlcndpc2UsIHZvbHVtZSBoYW5kbGVzIHRoaXMpLlxuICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKGlkc1tpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIFdlYiBBdWRpbywgbGV0IHRoZSBuYXRpdmUgbWV0aG9kcyBkbyB0aGUgYWN0dWFsIGZhZGUuXG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmICFzb3VuZC5fbXV0ZWQpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IEhvd2xlci5jdHguY3VycmVudFRpbWU7XG4gICAgICAgICAgICB2YXIgZW5kID0gY3VycmVudFRpbWUgKyAobGVuIC8gMTAwMCk7XG4gICAgICAgICAgICBzb3VuZC5fdm9sdW1lID0gZnJvbTtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoZnJvbSwgY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgc291bmQuX25vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh0bywgZW5kKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9zdGFydEZhZGVJbnRlcnZhbChzb3VuZCwgZnJvbSwgdG8sIGxlbiwgaWRzW2ldLCB0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBpbnRlcm5hbCBpbnRlcnZhbCB0byBmYWRlIGEgc291bmQuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBzb3VuZCBSZWZlcmVuY2UgdG8gc291bmQgdG8gZmFkZS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGZyb20gVGhlIHZhbHVlIHRvIGZhZGUgZnJvbSAoMC4wIHRvIDEuMCkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB0byAgIFRoZSB2b2x1bWUgdG8gZmFkZSB0byAoMC4wIHRvIDEuMCkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBsZW4gIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIGZhZGUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAgIFRoZSBzb3VuZCBpZCB0byBmYWRlLlxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IGlzR3JvdXAgICBJZiB0cnVlLCBzZXQgdGhlIHZvbHVtZSBvbiB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgX3N0YXJ0RmFkZUludGVydmFsOiBmdW5jdGlvbihzb3VuZCwgZnJvbSwgdG8sIGxlbiwgaWQsIGlzR3JvdXApIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciB2b2wgPSBmcm9tO1xuICAgICAgdmFyIGRpZmYgPSB0byAtIGZyb207XG4gICAgICB2YXIgc3RlcHMgPSBNYXRoLmFicyhkaWZmIC8gMC4wMSk7XG4gICAgICB2YXIgc3RlcExlbiA9IE1hdGgubWF4KDQsIChzdGVwcyA+IDApID8gbGVuIC8gc3RlcHMgOiBsZW4pO1xuICAgICAgdmFyIGxhc3RUaWNrID0gRGF0ZS5ub3coKTtcblxuICAgICAgLy8gU3RvcmUgdGhlIHZhbHVlIGJlaW5nIGZhZGVkIHRvLlxuICAgICAgc291bmQuX2ZhZGVUbyA9IHRvO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSB2YWx1ZSBvbiBlYWNoIGludGVydmFsIHRpY2suXG4gICAgICBzb3VuZC5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgYmFzZWQgb24gdGhlIHRpbWUgc2luY2UgdGhlIGxhc3QgdGljay5cbiAgICAgICAgdmFyIHRpY2sgPSAoRGF0ZS5ub3coKSAtIGxhc3RUaWNrKSAvIGxlbjtcbiAgICAgICAgbGFzdFRpY2sgPSBEYXRlLm5vdygpO1xuICAgICAgICB2b2wgKz0gZGlmZiAqIHRpY2s7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSB2b2x1bWUgaXMgaW4gdGhlIHJpZ2h0IGJvdW5kcy5cbiAgICAgICAgdm9sID0gTWF0aC5tYXgoMCwgdm9sKTtcbiAgICAgICAgdm9sID0gTWF0aC5taW4oMSwgdm9sKTtcblxuICAgICAgICAvLyBSb3VuZCB0byB3aXRoaW4gMiBkZWNpbWFsIHBvaW50cy5cbiAgICAgICAgdm9sID0gTWF0aC5yb3VuZCh2b2wgKiAxMDApIC8gMTAwO1xuXG4gICAgICAgIC8vIENoYW5nZSB0aGUgdm9sdW1lLlxuICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICBzb3VuZC5fdm9sdW1lID0gdm9sO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYudm9sdW1lKHZvbCwgc291bmQuX2lkLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgZ3JvdXAncyB2b2x1bWUuXG4gICAgICAgIGlmIChpc0dyb3VwKSB7XG4gICAgICAgICAgc2VsZi5fdm9sdW1lID0gdm9sO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiB0aGUgZmFkZSBpcyBjb21wbGV0ZSwgc3RvcCBpdCBhbmQgZmlyZSBldmVudC5cbiAgICAgICAgaWYgKCh0byA8IGZyb20gJiYgdm9sIDw9IHRvKSB8fCAodG8gPiBmcm9tICYmIHZvbCA+PSB0bykpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHNvdW5kLl9pbnRlcnZhbCk7XG4gICAgICAgICAgc291bmQuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgICBzb3VuZC5fZmFkZVRvID0gbnVsbDtcbiAgICAgICAgICBzZWxmLnZvbHVtZSh0bywgc291bmQuX2lkKTtcbiAgICAgICAgICBzZWxmLl9lbWl0KCdmYWRlJywgc291bmQuX2lkKTtcbiAgICAgICAgfVxuICAgICAgfSwgc3RlcExlbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB0aGF0IHN0b3BzIHRoZSBjdXJyZW50bHkgcGxheWluZyBmYWRlIHdoZW5cbiAgICAgKiBhIG5ldyBmYWRlIHN0YXJ0cywgdm9sdW1lIGlzIGNoYW5nZWQgb3IgdGhlIHNvdW5kIGlzIHN0b3BwZWQuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCBUaGUgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfc3RvcEZhZGU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWQpO1xuXG4gICAgICBpZiAoc291bmQgJiYgc291bmQuX2ludGVydmFsKSB7XG4gICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgIHNvdW5kLl9ub2RlLmdhaW4uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJJbnRlcnZhbChzb3VuZC5faW50ZXJ2YWwpO1xuICAgICAgICBzb3VuZC5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICBzZWxmLnZvbHVtZShzb3VuZC5fZmFkZVRvLCBpZCk7XG4gICAgICAgIHNvdW5kLl9mYWRlVG8gPSBudWxsO1xuICAgICAgICBzZWxmLl9lbWl0KCdmYWRlJywgaWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgbG9vcCBwYXJhbWV0ZXIgb24gYSBzb3VuZC4gVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbHkgdGFrZSAwLCAxIG9yIDIgYXJndW1lbnRzLlxuICAgICAqICAgbG9vcCgpIC0+IFJldHVybnMgdGhlIGdyb3VwJ3MgbG9vcCB2YWx1ZS5cbiAgICAgKiAgIGxvb3AoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgbG9vcCB2YWx1ZS5cbiAgICAgKiAgIGxvb3AobG9vcCkgLT4gU2V0cyB0aGUgbG9vcCB2YWx1ZSBmb3IgYWxsIHNvdW5kcyBpbiB0aGlzIEhvd2wgZ3JvdXAuXG4gICAgICogICBsb29wKGxvb3AsIGlkKSAtPiBTZXRzIHRoZSBsb29wIHZhbHVlIG9mIHBhc3NlZCBzb3VuZCBpZC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsL0Jvb2xlYW59IFJldHVybnMgc2VsZiBvciBjdXJyZW50IGxvb3AgdmFsdWUuXG4gICAgICovXG4gICAgbG9vcDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBsb29wLCBpZCwgc291bmQ7XG5cbiAgICAgIC8vIERldGVybWluZSB0aGUgdmFsdWVzIGZvciBsb29wIGFuZCBpZC5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIGdyb3UncyBsb29wIHZhbHVlLlxuICAgICAgICByZXR1cm4gc2VsZi5fbG9vcDtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBsb29wID0gYXJnc1swXTtcbiAgICAgICAgICBzZWxmLl9sb29wID0gbG9vcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXR1cm4gdGhpcyBzb3VuZCdzIGxvb3AgdmFsdWUuXG4gICAgICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQocGFyc2VJbnQoYXJnc1swXSwgMTApKTtcbiAgICAgICAgICByZXR1cm4gc291bmQgPyBzb3VuZC5fbG9vcCA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGxvb3AgPSBhcmdzWzBdO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gaWQgaXMgcGFzc2VkLCBnZXQgYWxsIElEJ3MgdG8gYmUgbG9vcGVkLlxuICAgICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICBzb3VuZC5fbG9vcCA9IGxvb3A7XG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlICYmIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZSkge1xuICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3AgPSBsb29wO1xuICAgICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3BTdGFydCA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UubG9vcEVuZCA9IHNvdW5kLl9zdG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgcGxheWJhY2sgcmF0ZSBvZiBhIHNvdW5kLiBUaGlzIG1ldGhvZCBjYW4gb3B0aW9uYWxseSB0YWtlIDAsIDEgb3IgMiBhcmd1bWVudHMuXG4gICAgICogICByYXRlKCkgLT4gUmV0dXJucyB0aGUgZmlyc3Qgc291bmQgbm9kZSdzIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS5cbiAgICAgKiAgIHJhdGUoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgY3VycmVudCBwbGF5YmFjayByYXRlLlxuICAgICAqICAgcmF0ZShyYXRlKSAtPiBTZXRzIHRoZSBwbGF5YmFjayByYXRlIG9mIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgcmF0ZShyYXRlLCBpZCkgLT4gU2V0cyB0aGUgcGxheWJhY2sgcmF0ZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9IFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlLlxuICAgICAqL1xuICAgIHJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgcmF0ZSwgaWQ7XG5cbiAgICAgIC8vIERldGVybWluZSB0aGUgdmFsdWVzIGJhc2VkIG9uIGFyZ3VtZW50cy5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBXZSB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgcmF0ZSBvZiB0aGUgZmlyc3Qgbm9kZS5cbiAgICAgICAgaWQgPSBzZWxmLl9zb3VuZHNbMF0uX2lkO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGlzIGlzIGFuIElELCBhbmQgaWYgbm90LCBhc3N1bWUgaXQgaXMgYSBuZXcgcmF0ZSB2YWx1ZS5cbiAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKCk7XG4gICAgICAgIHZhciBpbmRleCA9IGlkcy5pbmRleE9mKGFyZ3NbMF0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1swXSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGUgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJhdGUgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSBwbGF5YmFjayByYXRlIG9yIHJldHVybiB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgIHZhciBzb3VuZDtcbiAgICAgIGlmICh0eXBlb2YgcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBjaGFuZ2UgcGxheWJhY2sgcmF0ZSB3aGVuIGNhcGFibGUuXG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiAncmF0ZScsXG4gICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLnJhdGUuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgZ3JvdXAgcmF0ZS5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLl9yYXRlID0gcmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBvbmUgb3IgYWxsIHZvbHVtZXMuXG4gICAgICAgIGlkID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8aWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkW2ldKTtcblxuICAgICAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBvdXIgcG9zaXRpb24gd2hlbiB0aGUgcmF0ZSBjaGFuZ2VkIGFuZCB1cGRhdGUgdGhlIHBsYXliYWNrXG4gICAgICAgICAgICAvLyBzdGFydCBwb3NpdGlvbiBzbyB3ZSBjYW4gcHJvcGVybHkgYWRqdXN0IHRoZSBzZWVrIHBvc2l0aW9uIGZvciB0aW1lIGVsYXBzZWQuXG4gICAgICAgICAgICBzb3VuZC5fcmF0ZVNlZWsgPSBzZWxmLnNlZWsoaWRbaV0pO1xuICAgICAgICAgICAgc291bmQuX3BsYXlTdGFydCA9IHNlbGYuX3dlYkF1ZGlvID8gSG93bGVyLmN0eC5jdXJyZW50VGltZSA6IHNvdW5kLl9wbGF5U3RhcnQ7XG4gICAgICAgICAgICBzb3VuZC5fcmF0ZSA9IHJhdGU7XG5cbiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgcGxheWJhY2sgcmF0ZS5cbiAgICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiBzb3VuZC5fbm9kZSAmJiBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZShyYXRlLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUucGxheWJhY2tSYXRlID0gcmF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHRpbWVycy5cbiAgICAgICAgICAgIHZhciBzZWVrID0gc2VsZi5zZWVrKGlkW2ldKTtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9ICgoc2VsZi5fc3ByaXRlW3NvdW5kLl9zcHJpdGVdWzBdICsgc2VsZi5fc3ByaXRlW3NvdW5kLl9zcHJpdGVdWzFdKSAvIDEwMDApIC0gc2VlaztcbiAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gKGR1cmF0aW9uICogMTAwMCkgLyBNYXRoLmFicyhzb3VuZC5fcmF0ZSk7XG5cbiAgICAgICAgICAgIC8vIFN0YXJ0IGEgbmV3IGVuZCB0aW1lciBpZiBzb3VuZCBpcyBhbHJlYWR5IHBsYXlpbmcuXG4gICAgICAgICAgICBpZiAoc2VsZi5fZW5kVGltZXJzW2lkW2ldXSB8fCAhc291bmQuX3BhdXNlZCkge1xuICAgICAgICAgICAgICBzZWxmLl9jbGVhclRpbWVyKGlkW2ldKTtcbiAgICAgICAgICAgICAgc2VsZi5fZW5kVGltZXJzW2lkW2ldXSA9IHNldFRpbWVvdXQoc2VsZi5fZW5kZWQuYmluZChzZWxmLCBzb3VuZCksIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLl9lbWl0KCdyYXRlJywgc291bmQuX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcbiAgICAgICAgcmV0dXJuIHNvdW5kID8gc291bmQuX3JhdGUgOiBzZWxmLl9yYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgc2VlayBwb3NpdGlvbiBvZiBhIHNvdW5kLiBUaGlzIG1ldGhvZCBjYW4gb3B0aW9uYWxseSB0YWtlIDAsIDEgb3IgMiBhcmd1bWVudHMuXG4gICAgICogICBzZWVrKCkgLT4gUmV0dXJucyB0aGUgZmlyc3Qgc291bmQgbm9kZSdzIGN1cnJlbnQgc2VlayBwb3NpdGlvbi5cbiAgICAgKiAgIHNlZWsoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgY3VycmVudCBzZWVrIHBvc2l0aW9uLlxuICAgICAqICAgc2VlayhzZWVrKSAtPiBTZXRzIHRoZSBzZWVrIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBzb3VuZCBub2RlLlxuICAgICAqICAgc2VlayhzZWVrLCBpZCkgLT4gU2V0cyB0aGUgc2VlayBwb3NpdGlvbiBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9IFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCBzZWVrIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHNlZWs6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgc2VlaywgaWQ7XG5cbiAgICAgIC8vIERldGVybWluZSB0aGUgdmFsdWVzIGJhc2VkIG9uIGFyZ3VtZW50cy5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBXZSB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG5vZGUuXG4gICAgICAgIGlkID0gc2VsZi5fc291bmRzWzBdLl9pZDtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBJRCwgYW5kIGlmIG5vdCwgYXNzdW1lIGl0IGlzIGEgbmV3IHNlZWsgcG9zaXRpb24uXG4gICAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcygpO1xuICAgICAgICB2YXIgaW5kZXggPSBpZHMuaW5kZXhPZihhcmdzWzBdKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMF0sIDEwKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLl9zb3VuZHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWQgPSBzZWxmLl9zb3VuZHNbMF0uX2lkO1xuICAgICAgICAgIHNlZWsgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHNlZWsgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gSUQsIGJhaWwgb3V0LlxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gc2VlayB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAnc2VlaycsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuc2Vlay5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VlayA9PT0gJ251bWJlcicgJiYgc2VlayA+PSAwKSB7XG4gICAgICAgICAgLy8gUGF1c2UgdGhlIHNvdW5kIGFuZCB1cGRhdGUgcG9zaXRpb24gZm9yIHJlc3RhcnRpbmcgcGxheWJhY2suXG4gICAgICAgICAgdmFyIHBsYXlpbmcgPSBzZWxmLnBsYXlpbmcoaWQpO1xuICAgICAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgICAgICBzZWxmLnBhdXNlKGlkLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBNb3ZlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJhY2sgYW5kIGNhbmNlbCB0aW1lci5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNlZWs7XG4gICAgICAgICAgc291bmQuX2VuZGVkID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihpZCk7XG5cbiAgICAgICAgICAvLyBSZXN0YXJ0IHRoZSBwbGF5YmFjayBpZiB0aGUgc291bmQgd2FzIHBsYXlpbmcuXG4gICAgICAgICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgICAgICAgIHNlbGYucGxheShpZCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBzZWVrIHBvc2l0aW9uIGZvciBIVE1MNSBBdWRpby5cbiAgICAgICAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5jdXJyZW50VGltZSA9IHNlZWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHBsYXkgbG9jayB0byBiZSB1bnNldCBiZWZvcmUgZW1pdHRpbmcgKEhUTUw1IEF1ZGlvKS5cbiAgICAgICAgICBpZiAocGxheWluZyAmJiAhc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAgIHZhciBlbWl0U2VlayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoIXNlbGYuX3BsYXlMb2NrKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZW1pdCgnc2VlaycsIGlkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGVtaXRTZWVrLCAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZW1pdFNlZWssIDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLl9lbWl0KCdzZWVrJywgaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAgIHZhciByZWFsVGltZSA9IHNlbGYucGxheWluZyhpZCkgPyBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lIC0gc291bmQuX3BsYXlTdGFydCA6IDA7XG4gICAgICAgICAgICB2YXIgcmF0ZVNlZWsgPSBzb3VuZC5fcmF0ZVNlZWsgPyBzb3VuZC5fcmF0ZVNlZWsgLSBzb3VuZC5fc2VlayA6IDA7XG4gICAgICAgICAgICByZXR1cm4gc291bmQuX3NlZWsgKyAocmF0ZVNlZWsgKyByZWFsVGltZSAqIE1hdGguYWJzKHNvdW5kLl9yYXRlKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VuZC5fbm9kZS5jdXJyZW50VGltZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgc3BlY2lmaWMgc291bmQgaXMgY3VycmVudGx5IHBsYXlpbmcgb3Igbm90IChpZiBpZCBpcyBwcm92aWRlZCksIG9yIGNoZWNrIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgc291bmRzIGluIHRoZSBncm91cCBpcyBwbGF5aW5nIG9yIG5vdC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9ICBpZCBUaGUgc291bmQgaWQgdG8gY2hlY2suIElmIG5vbmUgaXMgcGFzc2VkLCB0aGUgd2hvbGUgc291bmQgZ3JvdXAgaXMgY2hlY2tlZC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHBsYXlpbmcgYW5kIGZhbHNlIGlmIG5vdC5cbiAgICAgKi9cbiAgICBwbGF5aW5nOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBDaGVjayB0aGUgcGFzc2VkIHNvdW5kIElEIChpZiBhbnkpLlxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcbiAgICAgICAgcmV0dXJuIHNvdW5kID8gIXNvdW5kLl9wYXVzZWQgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBsb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgY2hlY2sgaWYgYW55IGFyZSBwbGF5aW5nLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIXNlbGYuX3NvdW5kc1tpXS5fcGF1c2VkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGR1cmF0aW9uIG9mIHRoaXMgc291bmQuIFBhc3NpbmcgYSBzb3VuZCBpZCB3aWxsIHJldHVybiB0aGUgc3ByaXRlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIGlkIHRvIGNoZWNrLiBJZiBub25lIGlzIHBhc3NlZCwgcmV0dXJuIGZ1bGwgc291cmNlIGR1cmF0aW9uLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gQXVkaW8gZHVyYXRpb24gaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBkdXJhdGlvbjogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBkdXJhdGlvbiA9IHNlbGYuX2R1cmF0aW9uO1xuXG4gICAgICAvLyBJZiB3ZSBwYXNzIGFuIElELCBnZXQgdGhlIHNvdW5kIGFuZCByZXR1cm4gdGhlIHNwcml0ZSBsZW5ndGguXG4gICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWQpO1xuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGR1cmF0aW9uID0gc2VsZi5fc3ByaXRlW3NvdW5kLl9zcHJpdGVdWzFdIC8gMTAwMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvYWRlZCBzdGF0ZSBvZiB0aGlzIEhvd2wuXG4gICAgICogQHJldHVybiB7U3RyaW5nfSAndW5sb2FkZWQnLCAnbG9hZGluZycsICdsb2FkZWQnXG4gICAgICovXG4gICAgc3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbmxvYWQgYW5kIGRlc3Ryb3kgdGhlIGN1cnJlbnQgSG93bCBvYmplY3QuXG4gICAgICogVGhpcyB3aWxsIGltbWVkaWF0ZWx5IHN0b3AgYWxsIHNvdW5kIGluc3RhbmNlcyBhdHRhY2hlZCB0byB0aGlzIGdyb3VwLlxuICAgICAqL1xuICAgIHVubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFN0b3AgcGxheWluZyBhbnkgYWN0aXZlIHNvdW5kcy5cbiAgICAgIHZhciBzb3VuZHMgPSBzZWxmLl9zb3VuZHM7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8c291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIFN0b3AgdGhlIHNvdW5kIGlmIGl0IGlzIGN1cnJlbnRseSBwbGF5aW5nLlxuICAgICAgICBpZiAoIXNvdW5kc1tpXS5fcGF1c2VkKSB7XG4gICAgICAgICAgc2VsZi5zdG9wKHNvdW5kc1tpXS5faWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2Ugb3IgZGlzY29ubmVjdC5cbiAgICAgICAgaWYgKCFzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgIC8vIFNldCB0aGUgc291cmNlIHRvIDAtc2Vjb25kIHNpbGVuY2UgdG8gc3RvcCBhbnkgZG93bmxvYWRpbmcgKGV4Y2VwdCBpbiBJRSkuXG4gICAgICAgICAgdmFyIGNoZWNrSUUgPSAvTVNJRSB8VHJpZGVudFxcLy8udGVzdChIb3dsZXIuX25hdmlnYXRvciAmJiBIb3dsZXIuX25hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgIGlmICghY2hlY2tJRSkge1xuICAgICAgICAgICAgc291bmRzW2ldLl9ub2RlLnNyYyA9ICdkYXRhOmF1ZGlvL3dhdjtiYXNlNjQsVWtsR1JpZ0FBQUJYUVZaRlptMTBJQklBQUFBQkFBRUFSS3dBQUloWUFRQUNBQkFBQUFCa1lYUmhBZ0FBQUFFQSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmVtb3ZlIGFueSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgc291bmRzW2ldLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgc291bmRzW2ldLl9lcnJvckZuLCBmYWxzZSk7XG4gICAgICAgICAgc291bmRzW2ldLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIHNvdW5kc1tpXS5fbG9hZEZuLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbXB0eSBvdXQgYWxsIG9mIHRoZSBub2Rlcy5cbiAgICAgICAgZGVsZXRlIHNvdW5kc1tpXS5fbm9kZTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgYWxsIHRpbWVycyBhcmUgY2xlYXJlZCBvdXQuXG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoc291bmRzW2ldLl9pZCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSByZWZlcmVuY2VzIGluIHRoZSBnbG9iYWwgSG93bGVyIG9iamVjdC5cbiAgICAgICAgdmFyIGluZGV4ID0gSG93bGVyLl9ob3dscy5pbmRleE9mKHNlbGYpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIEhvd2xlci5faG93bHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZWxldGUgdGhpcyBzb3VuZCBmcm9tIHRoZSBjYWNoZSAoaWYgbm8gb3RoZXIgSG93bCBpcyB1c2luZyBpdCkuXG4gICAgICB2YXIgcmVtQ2FjaGUgPSB0cnVlO1xuICAgICAgZm9yIChpPTA7IGk8SG93bGVyLl9ob3dscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoSG93bGVyLl9ob3dsc1tpXS5fc3JjID09PSBzZWxmLl9zcmMpIHtcbiAgICAgICAgICByZW1DYWNoZSA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZSAmJiByZW1DYWNoZSkge1xuICAgICAgICBkZWxldGUgY2FjaGVbc2VsZi5fc3JjXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYXIgZ2xvYmFsIGVycm9ycy5cbiAgICAgIEhvd2xlci5ub0F1ZGlvID0gZmFsc2U7XG5cbiAgICAgIC8vIENsZWFyIG91dCBgc2VsZmAuXG4gICAgICBzZWxmLl9zdGF0ZSA9ICd1bmxvYWRlZCc7XG4gICAgICBzZWxmLl9zb3VuZHMgPSBbXTtcbiAgICAgIHNlbGYgPSBudWxsO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGlzdGVuIHRvIGEgY3VzdG9tIGV2ZW50LlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBldmVudCBFdmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICBMaXN0ZW5lciB0byBjYWxsLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gICBpZCAgICAob3B0aW9uYWwpIE9ubHkgbGlzdGVuIHRvIGV2ZW50cyBmb3IgdGhpcyBzb3VuZC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgb25jZSAgKElOVEVSTkFMKSBNYXJrcyBldmVudCB0byBmaXJlIG9ubHkgb25jZS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbihldmVudCwgZm4sIGlkLCBvbmNlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZXZlbnRzID0gc2VsZlsnX29uJyArIGV2ZW50XTtcblxuICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudHMucHVzaChvbmNlID8ge2lkOiBpZCwgZm46IGZuLCBvbmNlOiBvbmNlfSA6IHtpZDogaWQsIGZuOiBmbn0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgY3VzdG9tIGV2ZW50LiBDYWxsIHdpdGhvdXQgcGFyYW1ldGVycyB0byByZW1vdmUgYWxsIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZXZlbnQgRXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgTGlzdGVuZXIgdG8gcmVtb3ZlLiBMZWF2ZSBlbXB0eSB0byByZW1vdmUgYWxsLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gICBpZCAgICAob3B0aW9uYWwpIE9ubHkgcmVtb3ZlIGV2ZW50cyBmb3IgdGhpcyBzb3VuZC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIG9mZjogZnVuY3Rpb24oZXZlbnQsIGZuLCBpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGV2ZW50cyA9IHNlbGZbJ19vbicgKyBldmVudF07XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIC8vIEFsbG93IHBhc3NpbmcganVzdCBhbiBldmVudCBhbmQgSUQuXG4gICAgICBpZiAodHlwZW9mIGZuID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZCA9IGZuO1xuICAgICAgICBmbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChmbiB8fCBpZCkge1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggZXZlbnQgc3RvcmUgYW5kIHJlbW92ZSB0aGUgcGFzc2VkIGZ1bmN0aW9uLlxuICAgICAgICBmb3IgKGk9MDsgaTxldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgaXNJZCA9IChpZCA9PT0gZXZlbnRzW2ldLmlkKTtcbiAgICAgICAgICBpZiAoZm4gPT09IGV2ZW50c1tpXS5mbiAmJiBpc0lkIHx8ICFmbiAmJiBpc0lkKSB7XG4gICAgICAgICAgICBldmVudHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50KSB7XG4gICAgICAgIC8vIENsZWFyIG91dCBhbGwgZXZlbnRzIG9mIHRoaXMgdHlwZS5cbiAgICAgICAgc2VsZlsnX29uJyArIGV2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2xlYXIgb3V0IGFsbCBldmVudHMgb2YgZXZlcnkgdHlwZS5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzZWxmKTtcbiAgICAgICAgZm9yIChpPTA7IGk8a2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgoa2V5c1tpXS5pbmRleE9mKCdfb24nKSA9PT0gMCkgJiYgQXJyYXkuaXNBcnJheShzZWxmW2tleXNbaV1dKSkge1xuICAgICAgICAgICAgc2VsZltrZXlzW2ldXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGlzdGVuIHRvIGEgY3VzdG9tIGV2ZW50IGFuZCByZW1vdmUgaXQgb25jZSBmaXJlZC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZXZlbnQgRXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgTGlzdGVuZXIgdG8gY2FsbC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgaWQgICAgKG9wdGlvbmFsKSBPbmx5IGxpc3RlbiB0byBldmVudHMgZm9yIHRoaXMgc291bmQuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBvbmNlOiBmdW5jdGlvbihldmVudCwgZm4sIGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFNldHVwIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIHNlbGYub24oZXZlbnQsIGZuLCBpZCwgMSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFbWl0IGFsbCBldmVudHMgb2YgYSBzcGVjaWZpYyB0eXBlIGFuZCBwYXNzIHRoZSBzb3VuZCBpZC5cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGV2ZW50IEV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAgICBTb3VuZCBJRC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1zZyAgIE1lc3NhZ2UgdG8gZ28gd2l0aCBldmVudC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9lbWl0OiBmdW5jdGlvbihldmVudCwgaWQsIG1zZykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGV2ZW50cyA9IHNlbGZbJ19vbicgKyBldmVudF07XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCBldmVudCBzdG9yZSBhbmQgZmlyZSBhbGwgZnVuY3Rpb25zLlxuICAgICAgZm9yICh2YXIgaT1ldmVudHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICAvLyBPbmx5IGZpcmUgdGhlIGxpc3RlbmVyIGlmIHRoZSBjb3JyZWN0IElEIGlzIHVzZWQuXG4gICAgICAgIGlmICghZXZlbnRzW2ldLmlkIHx8IGV2ZW50c1tpXS5pZCA9PT0gaWQgfHwgZXZlbnQgPT09ICdsb2FkJykge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgaWQsIG1zZyk7XG4gICAgICAgICAgfS5iaW5kKHNlbGYsIGV2ZW50c1tpXS5mbiksIDApO1xuXG4gICAgICAgICAgLy8gSWYgdGhpcyBldmVudCB3YXMgc2V0dXAgd2l0aCBgb25jZWAsIHJlbW92ZSBpdC5cbiAgICAgICAgICBpZiAoZXZlbnRzW2ldLm9uY2UpIHtcbiAgICAgICAgICAgIHNlbGYub2ZmKGV2ZW50LCBldmVudHNbaV0uZm4sIGV2ZW50c1tpXS5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFBhc3MgdGhlIGV2ZW50IHR5cGUgaW50byBsb2FkIHF1ZXVlIHNvIHRoYXQgaXQgY2FuIGNvbnRpbnVlIHN0ZXBwaW5nLlxuICAgICAgc2VsZi5fbG9hZFF1ZXVlKGV2ZW50KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFF1ZXVlIG9mIGFjdGlvbnMgaW5pdGlhdGVkIGJlZm9yZSB0aGUgc291bmQgaGFzIGxvYWRlZC5cbiAgICAgKiBUaGVzZSB3aWxsIGJlIGNhbGxlZCBpbiBzZXF1ZW5jZSwgd2l0aCB0aGUgbmV4dCBvbmx5IGZpcmluZ1xuICAgICAqIGFmdGVyIHRoZSBwcmV2aW91cyBoYXMgZmluaXNoZWQgZXhlY3V0aW5nIChldmVuIGlmIGFzeW5jIGxpa2UgcGxheSkuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfbG9hZFF1ZXVlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZi5fcXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgdGFzayA9IHNlbGYuX3F1ZXVlWzBdO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIHRhc2sgaWYgYSBtYXRjaGluZyBldmVudCB3YXMgcGFzc2VkLlxuICAgICAgICBpZiAodGFzay5ldmVudCA9PT0gZXZlbnQpIHtcbiAgICAgICAgICBzZWxmLl9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgIHNlbGYuX2xvYWRRdWV1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUnVuIHRoZSB0YXNrIGlmIG5vIGV2ZW50IHR5cGUgaXMgcGFzc2VkLlxuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGFzay5hY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBwbGF5YmFjayBlbmRzIGF0IHRoZSBlbmQgb2YgdGhlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSAge1NvdW5kfSBzb3VuZCBUaGUgc291bmQgb2JqZWN0IHRvIHdvcmsgd2l0aC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9lbmRlZDogZnVuY3Rpb24oc291bmQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzcHJpdGUgPSBzb3VuZC5fc3ByaXRlO1xuXG4gICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgSUUgYW5kIHRoZXJlIHdhcyBuZXR3b3JrIGxhdGVuY3kgd2UgbWF5IGJlIGNsaXBwaW5nXG4gICAgICAvLyBhdWRpbyBiZWZvcmUgaXQgY29tcGxldGVzIHBsYXlpbmcuIExldHMgY2hlY2sgdGhlIG5vZGUgdG8gbWFrZSBzdXJlIGl0XG4gICAgICAvLyBiZWxpZXZlcyBpdCBoYXMgY29tcGxldGVkLCBiZWZvcmUgZW5kaW5nIHRoZSBwbGF5YmFjay5cbiAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUgJiYgIXNvdW5kLl9ub2RlLnBhdXNlZCAmJiAhc291bmQuX25vZGUuZW5kZWQgJiYgc291bmQuX25vZGUuY3VycmVudFRpbWUgPCBzb3VuZC5fc3RvcCkge1xuICAgICAgICBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCAxMDApO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gU2hvdWxkIHRoaXMgc291bmQgbG9vcD9cbiAgICAgIHZhciBsb29wID0gISEoc291bmQuX2xvb3AgfHwgc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMl0pO1xuXG4gICAgICAvLyBGaXJlIHRoZSBlbmRlZCBldmVudC5cbiAgICAgIHNlbGYuX2VtaXQoJ2VuZCcsIHNvdW5kLl9pZCk7XG5cbiAgICAgIC8vIFJlc3RhcnQgdGhlIHBsYXliYWNrIGZvciBIVE1MNSBBdWRpbyBsb29wLlxuICAgICAgaWYgKCFzZWxmLl93ZWJBdWRpbyAmJiBsb29wKSB7XG4gICAgICAgIHNlbGYuc3RvcChzb3VuZC5faWQsIHRydWUpLnBsYXkoc291bmQuX2lkKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzdGFydCB0aGlzIHRpbWVyIGlmIG9uIGEgV2ViIEF1ZGlvIGxvb3AuXG4gICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgbG9vcCkge1xuICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgc291bmQuX3NlZWsgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgc291bmQuX3JhdGVTZWVrID0gMDtcbiAgICAgICAgc291bmQuX3BsYXlTdGFydCA9IEhvd2xlci5jdHguY3VycmVudFRpbWU7XG5cbiAgICAgICAgdmFyIHRpbWVvdXQgPSAoKHNvdW5kLl9zdG9wIC0gc291bmQuX3N0YXJ0KSAqIDEwMDApIC8gTWF0aC5hYnMoc291bmQuX3JhdGUpO1xuICAgICAgICBzZWxmLl9lbmRUaW1lcnNbc291bmQuX2lkXSA9IHNldFRpbWVvdXQoc2VsZi5fZW5kZWQuYmluZChzZWxmLCBzb3VuZCksIHRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBNYXJrIHRoZSBub2RlIGFzIHBhdXNlZC5cbiAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiAhbG9vcCkge1xuICAgICAgICBzb3VuZC5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgc291bmQuX2VuZGVkID0gdHJ1ZTtcbiAgICAgICAgc291bmQuX3NlZWsgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgc291bmQuX3JhdGVTZWVrID0gMDtcbiAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihzb3VuZC5faWQpO1xuXG4gICAgICAgIC8vIENsZWFuIHVwIHRoZSBidWZmZXIgc291cmNlLlxuICAgICAgICBzZWxmLl9jbGVhbkJ1ZmZlcihzb3VuZC5fbm9kZSk7XG5cbiAgICAgICAgLy8gQXR0ZW1wdCB0byBhdXRvLXN1c3BlbmQgQXVkaW9Db250ZXh0IGlmIG5vIHNvdW5kcyBhcmUgc3RpbGwgcGxheWluZy5cbiAgICAgICAgSG93bGVyLl9hdXRvU3VzcGVuZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBXaGVuIHVzaW5nIGEgc3ByaXRlLCBlbmQgdGhlIHRyYWNrLlxuICAgICAgaWYgKCFzZWxmLl93ZWJBdWRpbyAmJiAhbG9vcCkge1xuICAgICAgICBzZWxmLnN0b3Aoc291bmQuX2lkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBlbmQgdGltZXIgZm9yIGEgc291bmQgcGxheWJhY2suXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBpZCBUaGUgc291bmQgSUQuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfY2xlYXJUaW1lcjogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKHNlbGYuX2VuZFRpbWVyc1tpZF0pIHtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHRpbWVvdXQgb3IgcmVtb3ZlIHRoZSBlbmRlZCBsaXN0ZW5lci5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9lbmRUaW1lcnNbaWRdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX2VuZFRpbWVyc1tpZF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZCk7XG4gICAgICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHNlbGYuX2VuZFRpbWVyc1tpZF0sIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc2VsZi5fZW5kVGltZXJzW2lkXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgc291bmQgaWRlbnRpZmllZCBieSB0aGlzIElELCBvciByZXR1cm4gbnVsbC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFNvdW5kIElEXG4gICAgICogQHJldHVybiB7T2JqZWN0fSAgICBTb3VuZCBvYmplY3Qgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBfc291bmRCeUlkOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgZmluZCB0aGUgb25lIHdpdGggdGhpcyBJRC5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlkID09PSBzZWxmLl9zb3VuZHNbaV0uX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuX3NvdW5kc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFuIGluYWN0aXZlIHNvdW5kIGZyb20gdGhlIHBvb2wgb3IgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgKiBAcmV0dXJuIHtTb3VuZH0gU291bmQgcGxheWJhY2sgb2JqZWN0LlxuICAgICAqL1xuICAgIF9pbmFjdGl2ZVNvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgc2VsZi5fZHJhaW4oKTtcblxuICAgICAgLy8gRmluZCB0aGUgZmlyc3QgaW5hY3RpdmUgbm9kZSB0byByZWN5Y2xlLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2VsZi5fc291bmRzW2ldLl9lbmRlZCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLl9zb3VuZHNbaV0ucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBpbmFjdGl2ZSBub2RlIHdhcyBmb3VuZCwgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgIHJldHVybiBuZXcgU291bmQoc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYWluIGV4Y2VzcyBpbmFjdGl2ZSBzb3VuZHMgZnJvbSB0aGUgcG9vbC5cbiAgICAgKi9cbiAgICBfZHJhaW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGxpbWl0ID0gc2VsZi5fcG9vbDtcbiAgICAgIHZhciBjbnQgPSAwO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbGVzcyBzb3VuZHMgdGhhbiB0aGUgbWF4IHBvb2wgc2l6ZSwgd2UgYXJlIGRvbmUuXG4gICAgICBpZiAoc2VsZi5fc291bmRzLmxlbmd0aCA8IGxpbWl0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQ291bnQgdGhlIG51bWJlciBvZiBpbmFjdGl2ZSBzb3VuZHMuXG4gICAgICBmb3IgKGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNlbGYuX3NvdW5kc1tpXS5fZW5kZWQpIHtcbiAgICAgICAgICBjbnQrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgZXhjZXNzIGluYWN0aXZlIHNvdW5kcywgZ29pbmcgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgIGZvciAoaT1zZWxmLl9zb3VuZHMubGVuZ3RoIC0gMTsgaT49MDsgaS0tKSB7XG4gICAgICAgIGlmIChjbnQgPD0gbGltaXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5fc291bmRzW2ldLl9lbmRlZCkge1xuICAgICAgICAgIC8vIERpc2Nvbm5lY3QgdGhlIGF1ZGlvIHNvdXJjZSB3aGVuIHVzaW5nIFdlYiBBdWRpby5cbiAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgc2VsZi5fc291bmRzW2ldLl9ub2RlKSB7XG4gICAgICAgICAgICBzZWxmLl9zb3VuZHNbaV0uX25vZGUuZGlzY29ubmVjdCgwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBSZW1vdmUgc291bmRzIHVudGlsIHdlIGhhdmUgdGhlIHBvb2wgc2l6ZS5cbiAgICAgICAgICBzZWxmLl9zb3VuZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGNudC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgSUQncyBmcm9tIHRoZSBzb3VuZHMgcG9vbC5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIE9ubHkgcmV0dXJuIG9uZSBJRCBpZiBvbmUgaXMgcGFzc2VkLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSAgICBBcnJheSBvZiBJRHMuXG4gICAgICovXG4gICAgX2dldFNvdW5kSWRzOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgaWRzID0gW107XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZHMucHVzaChzZWxmLl9zb3VuZHNbaV0uX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW2lkXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgc291bmQgYmFjayBpbnRvIHRoZSBidWZmZXIgc291cmNlLlxuICAgICAqIEBwYXJhbSAge1NvdW5kfSBzb3VuZCBUaGUgc291bmQgb2JqZWN0IHRvIHdvcmsgd2l0aC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9yZWZyZXNoQnVmZmVyOiBmdW5jdGlvbihzb3VuZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBTZXR1cCB0aGUgYnVmZmVyIHNvdXJjZSBmb3IgcGxheWJhY2suXG4gICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UgPSBIb3dsZXIuY3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmJ1ZmZlciA9IGNhY2hlW3NlbGYuX3NyY107XG5cbiAgICAgIC8vIENvbm5lY3QgdG8gdGhlIGNvcnJlY3Qgbm9kZS5cbiAgICAgIGlmIChzb3VuZC5fcGFubmVyKSB7XG4gICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5jb25uZWN0KHNvdW5kLl9wYW5uZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmNvbm5lY3Qoc291bmQuX25vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXR1cCBsb29waW5nIGFuZCBwbGF5YmFjayByYXRlLlxuICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3AgPSBzb3VuZC5fbG9vcDtcbiAgICAgIGlmIChzb3VuZC5fbG9vcCkge1xuICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UubG9vcFN0YXJ0ID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wRW5kID0gc291bmQuX3N0b3A7XG4gICAgICB9XG4gICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9yYXRlLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgbWVtb3J5IGxlYWtzIGJ5IGNsZWFuaW5nIHVwIHRoZSBidWZmZXIgc291cmNlIGFmdGVyIHBsYXliYWNrLlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbm9kZSBTb3VuZCdzIGF1ZGlvIG5vZGUgY29udGFpbmluZyB0aGUgYnVmZmVyIHNvdXJjZS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9jbGVhbkJ1ZmZlcjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoSG93bGVyLl9zY3JhdGNoQnVmZmVyKSB7XG4gICAgICAgIG5vZGUuYnVmZmVyU291cmNlLm9uZW5kZWQgPSBudWxsO1xuICAgICAgICBub2RlLmJ1ZmZlclNvdXJjZS5kaXNjb25uZWN0KDApO1xuICAgICAgICB0cnkgeyBub2RlLmJ1ZmZlclNvdXJjZS5idWZmZXIgPSBIb3dsZXIuX3NjcmF0Y2hCdWZmZXI7IH0gY2F0Y2goZSkge31cbiAgICAgIH1cbiAgICAgIG5vZGUuYnVmZmVyU291cmNlID0gbnVsbDtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBTaW5nbGUgU291bmQgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogU2V0dXAgdGhlIHNvdW5kIG9iamVjdCwgd2hpY2ggZWFjaCBub2RlIGF0dGFjaGVkIHRvIGEgSG93bCBncm91cCBpcyBjb250YWluZWQgaW4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBob3dsIFRoZSBIb3dsIHBhcmVudCBncm91cC5cbiAgICovXG4gIHZhciBTb3VuZCA9IGZ1bmN0aW9uKGhvd2wpIHtcbiAgICB0aGlzLl9wYXJlbnQgPSBob3dsO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9O1xuICBTb3VuZC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhIG5ldyBTb3VuZCBvYmplY3QuXG4gICAgICogQHJldHVybiB7U291bmR9XG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyZW50ID0gc2VsZi5fcGFyZW50O1xuXG4gICAgICAvLyBTZXR1cCB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzLlxuICAgICAgc2VsZi5fbXV0ZWQgPSBwYXJlbnQuX211dGVkO1xuICAgICAgc2VsZi5fbG9vcCA9IHBhcmVudC5fbG9vcDtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IHBhcmVudC5fdm9sdW1lO1xuICAgICAgc2VsZi5fcmF0ZSA9IHBhcmVudC5fcmF0ZTtcbiAgICAgIHNlbGYuX3NlZWsgPSAwO1xuICAgICAgc2VsZi5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX3Nwcml0ZSA9ICdfX2RlZmF1bHQnO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBJRCBmb3IgdGhpcyBzb3VuZC5cbiAgICAgIHNlbGYuX2lkID0gKytIb3dsZXIuX2NvdW50ZXI7XG5cbiAgICAgIC8vIEFkZCBpdHNlbGYgdG8gdGhlIHBhcmVudCdzIHBvb2wuXG4gICAgICBwYXJlbnQuX3NvdW5kcy5wdXNoKHNlbGYpO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIG5ldyBub2RlLlxuICAgICAgc2VsZi5jcmVhdGUoKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgc2V0dXAgYSBuZXcgc291bmQgb2JqZWN0LCB3aGV0aGVyIEhUTUw1IEF1ZGlvIG9yIFdlYiBBdWRpby5cbiAgICAgKiBAcmV0dXJuIHtTb3VuZH1cbiAgICAgKi9cbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcbiAgICAgIHZhciB2b2x1bWUgPSAoSG93bGVyLl9tdXRlZCB8fCBzZWxmLl9tdXRlZCB8fCBzZWxmLl9wYXJlbnQuX211dGVkKSA/IDAgOiBzZWxmLl92b2x1bWU7XG5cbiAgICAgIGlmIChwYXJlbnQuX3dlYkF1ZGlvKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgZ2FpbiBub2RlIGZvciBjb250cm9sbGluZyB2b2x1bWUgKHRoZSBzb3VyY2Ugd2lsbCBjb25uZWN0IHRvIHRoaXMpLlxuICAgICAgICBzZWxmLl9ub2RlID0gKHR5cGVvZiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4gPT09ICd1bmRlZmluZWQnKSA/IEhvd2xlci5jdHguY3JlYXRlR2Fpbk5vZGUoKSA6IEhvd2xlci5jdHguY3JlYXRlR2FpbigpO1xuICAgICAgICBzZWxmLl9ub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sdW1lLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc2VsZi5fbm9kZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICBzZWxmLl9ub2RlLmNvbm5lY3QoSG93bGVyLm1hc3RlckdhaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fbm9kZSA9IG5ldyBBdWRpbygpO1xuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgZXJyb3JzIChodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjLWF1dGhvci12aWV3L3NwZWMuaHRtbCNtZWRpYWVycm9yKS5cbiAgICAgICAgc2VsZi5fZXJyb3JGbiA9IHNlbGYuX2Vycm9yTGlzdGVuZXIuYmluZChzZWxmKTtcbiAgICAgICAgc2VsZi5fbm9kZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHNlbGYuX2Vycm9yRm4sIGZhbHNlKTtcblxuICAgICAgICAvLyBMaXN0ZW4gZm9yICdjYW5wbGF5dGhyb3VnaCcgZXZlbnQgdG8gbGV0IHVzIGtub3cgdGhlIHNvdW5kIGlzIHJlYWR5LlxuICAgICAgICBzZWxmLl9sb2FkRm4gPSBzZWxmLl9sb2FkTGlzdGVuZXIuYmluZChzZWxmKTtcbiAgICAgICAgc2VsZi5fbm9kZS5hZGRFdmVudExpc3RlbmVyKEhvd2xlci5fY2FuUGxheUV2ZW50LCBzZWxmLl9sb2FkRm4sIGZhbHNlKTtcblxuICAgICAgICAvLyBTZXR1cCB0aGUgbmV3IGF1ZGlvIG5vZGUuXG4gICAgICAgIHNlbGYuX25vZGUuc3JjID0gcGFyZW50Ll9zcmM7XG4gICAgICAgIHNlbGYuX25vZGUucHJlbG9hZCA9ICdhdXRvJztcbiAgICAgICAgc2VsZi5fbm9kZS52b2x1bWUgPSB2b2x1bWUgKiBIb3dsZXIudm9sdW1lKCk7XG5cbiAgICAgICAgLy8gQmVnaW4gbG9hZGluZyB0aGUgc291cmNlLlxuICAgICAgICBzZWxmLl9ub2RlLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBwYXJhbWV0ZXJzIG9mIHRoaXMgc291bmQgdG8gdGhlIG9yaWdpbmFsIHN0YXRlIChmb3IgcmVjeWNsZSkuXG4gICAgICogQHJldHVybiB7U291bmR9XG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUmVzZXQgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIG9mIHRoaXMgc291bmQuXG4gICAgICBzZWxmLl9tdXRlZCA9IHBhcmVudC5fbXV0ZWQ7XG4gICAgICBzZWxmLl9sb29wID0gcGFyZW50Ll9sb29wO1xuICAgICAgc2VsZi5fdm9sdW1lID0gcGFyZW50Ll92b2x1bWU7XG4gICAgICBzZWxmLl9yYXRlID0gcGFyZW50Ll9yYXRlO1xuICAgICAgc2VsZi5fc2VlayA9IDA7XG4gICAgICBzZWxmLl9yYXRlU2VlayA9IDA7XG4gICAgICBzZWxmLl9wYXVzZWQgPSB0cnVlO1xuICAgICAgc2VsZi5fZW5kZWQgPSB0cnVlO1xuICAgICAgc2VsZi5fc3ByaXRlID0gJ19fZGVmYXVsdCc7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IElEIHNvIHRoYXQgaXQgaXNuJ3QgY29uZnVzZWQgd2l0aCB0aGUgcHJldmlvdXMgc291bmQuXG4gICAgICBzZWxmLl9pZCA9ICsrSG93bGVyLl9jb3VudGVyO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSFRNTDUgQXVkaW8gZXJyb3IgbGlzdGVuZXIgY2FsbGJhY2suXG4gICAgICovXG4gICAgX2Vycm9yTGlzdGVuZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBGaXJlIGFuIGVycm9yIGV2ZW50IGFuZCBwYXNzIGJhY2sgdGhlIGNvZGUuXG4gICAgICBzZWxmLl9wYXJlbnQuX2VtaXQoJ2xvYWRlcnJvcicsIHNlbGYuX2lkLCBzZWxmLl9ub2RlLmVycm9yID8gc2VsZi5fbm9kZS5lcnJvci5jb2RlIDogMCk7XG5cbiAgICAgIC8vIENsZWFyIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIHNlbGYuX25vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBzZWxmLl9lcnJvckZuLCBmYWxzZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhUTUw1IEF1ZGlvIGNhbnBsYXl0aHJvdWdoIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIF9sb2FkTGlzdGVuZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUm91bmQgdXAgdGhlIGR1cmF0aW9uIHRvIGFjY291bnQgZm9yIHRoZSBsb3dlciBwcmVjaXNpb24gaW4gSFRNTDUgQXVkaW8uXG4gICAgICBwYXJlbnQuX2R1cmF0aW9uID0gTWF0aC5jZWlsKHNlbGYuX25vZGUuZHVyYXRpb24gKiAxMCkgLyAxMDtcblxuICAgICAgLy8gU2V0dXAgYSBzcHJpdGUgaWYgbm9uZSBpcyBkZWZpbmVkLlxuICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmVudC5fc3ByaXRlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcGFyZW50Ll9zcHJpdGUgPSB7X19kZWZhdWx0OiBbMCwgcGFyZW50Ll9kdXJhdGlvbiAqIDEwMDBdfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudC5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIHBhcmVudC5fc3RhdGUgPSAnbG9hZGVkJztcbiAgICAgICAgcGFyZW50Ll9lbWl0KCdsb2FkJyk7XG4gICAgICAgIHBhcmVudC5fbG9hZFF1ZXVlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIHNlbGYuX25vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihIb3dsZXIuX2NhblBsYXlFdmVudCwgc2VsZi5fbG9hZEZuLCBmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKiBIZWxwZXIgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICB2YXIgY2FjaGUgPSB7fTtcblxuICAvKipcbiAgICogQnVmZmVyIGEgc291bmQgZnJvbSBVUkwsIERhdGEgVVJJIG9yIGNhY2hlIGFuZCBkZWNvZGUgdG8gYXVkaW8gc291cmNlIChXZWIgQXVkaW8gQVBJKS5cbiAgICogQHBhcmFtICB7SG93bH0gc2VsZlxuICAgKi9cbiAgdmFyIGxvYWRCdWZmZXIgPSBmdW5jdGlvbihzZWxmKSB7XG4gICAgdmFyIHVybCA9IHNlbGYuX3NyYztcblxuICAgIC8vIENoZWNrIGlmIHRoZSBidWZmZXIgaGFzIGFscmVhZHkgYmVlbiBjYWNoZWQgYW5kIHVzZSBpdCBpbnN0ZWFkLlxuICAgIGlmIChjYWNoZVt1cmxdKSB7XG4gICAgICAvLyBTZXQgdGhlIGR1cmF0aW9uIGZyb20gdGhlIGNhY2hlLlxuICAgICAgc2VsZi5fZHVyYXRpb24gPSBjYWNoZVt1cmxdLmR1cmF0aW9uO1xuXG4gICAgICAvLyBMb2FkIHRoZSBzb3VuZCBpbnRvIHRoaXMgSG93bC5cbiAgICAgIGxvYWRTb3VuZChzZWxmKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvXmRhdGE6W147XSs7YmFzZTY0LC8udGVzdCh1cmwpKSB7XG4gICAgICAvLyBEZWNvZGUgdGhlIGJhc2U2NCBkYXRhIFVSSSB3aXRob3V0IFhIUiwgc2luY2Ugc29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgdmFyIGRhdGEgPSBhdG9iKHVybC5zcGxpdCgnLCcpWzFdKTtcbiAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGRhdGFWaWV3W2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgfVxuXG4gICAgICBkZWNvZGVBdWRpb0RhdGEoZGF0YVZpZXcuYnVmZmVyLCBzZWxmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTG9hZCB0aGUgYnVmZmVyIGZyb20gdGhlIFVSTC5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHNlbGYuX3hocldpdGhDcmVkZW50aWFscztcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZ2V0IGEgc3VjY2Vzc2Z1bCByZXNwb25zZSBiYWNrLlxuICAgICAgICB2YXIgY29kZSA9ICh4aHIuc3RhdHVzICsgJycpWzBdO1xuICAgICAgICBpZiAoY29kZSAhPT0gJzAnICYmIGNvZGUgIT09ICcyJyAmJiBjb2RlICE9PSAnMycpIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KCdsb2FkZXJyb3InLCBudWxsLCAnRmFpbGVkIGxvYWRpbmcgYXVkaW8gZmlsZSB3aXRoIHN0YXR1czogJyArIHhoci5zdGF0dXMgKyAnLicpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlY29kZUF1ZGlvRGF0YSh4aHIucmVzcG9uc2UsIHNlbGYpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGVycm9yLCBzd2l0Y2ggdG8gSFRNTDUgQXVkaW8uXG4gICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgIHNlbGYuX2h0bWw1ID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLl93ZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuX3NvdW5kcyA9IFtdO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZVt1cmxdO1xuICAgICAgICAgIHNlbGYubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgc2FmZVhoclNlbmQoeGhyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNlbmQgdGhlIFhIUiByZXF1ZXN0IHdyYXBwZWQgaW4gYSB0cnkvY2F0Y2guXG4gICAqIEBwYXJhbSAge09iamVjdH0geGhyIFhIUiB0byBzZW5kLlxuICAgKi9cbiAgdmFyIHNhZmVYaHJTZW5kID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgeGhyLm9uZXJyb3IoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY29kZSBhdWRpbyBkYXRhIGZyb20gYW4gYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gIHtBcnJheUJ1ZmZlcn0gYXJyYXlidWZmZXIgVGhlIGF1ZGlvIGRhdGEuXG4gICAqIEBwYXJhbSAge0hvd2x9ICAgICAgICBzZWxmXG4gICAqL1xuICB2YXIgZGVjb2RlQXVkaW9EYXRhID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHNlbGYpIHtcbiAgICAvLyBEZWNvZGUgdGhlIGJ1ZmZlciBpbnRvIGFuIGF1ZGlvIHNvdXJjZS5cbiAgICBIb3dsZXIuY3R4LmRlY29kZUF1ZGlvRGF0YShhcnJheWJ1ZmZlciwgZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICBpZiAoYnVmZmVyICYmIHNlbGYuX3NvdW5kcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNhY2hlW3NlbGYuX3NyY10gPSBidWZmZXI7XG4gICAgICAgIGxvYWRTb3VuZChzZWxmLCBidWZmZXIpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ0RlY29kaW5nIGF1ZGlvIGRhdGEgZmFpbGVkLicpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTb3VuZCBpcyBub3cgbG9hZGVkLCBzbyBmaW5pc2ggc2V0dGluZyBldmVyeXRoaW5nIHVwIGFuZCBmaXJlIHRoZSBsb2FkZWQgZXZlbnQuXG4gICAqIEBwYXJhbSAge0hvd2x9IHNlbGZcbiAgICogQHBhcmFtICB7T2JqZWN0fSBidWZmZXIgVGhlIGRlY29kZWQgYnVmZmVyIHNvdW5kIHNvdXJjZS5cbiAgICovXG4gIHZhciBsb2FkU291bmQgPSBmdW5jdGlvbihzZWxmLCBidWZmZXIpIHtcbiAgICAvLyBTZXQgdGhlIGR1cmF0aW9uLlxuICAgIGlmIChidWZmZXIgJiYgIXNlbGYuX2R1cmF0aW9uKSB7XG4gICAgICBzZWxmLl9kdXJhdGlvbiA9IGJ1ZmZlci5kdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBhIHNwcml0ZSBpZiBub25lIGlzIGRlZmluZWQuXG4gICAgaWYgKE9iamVjdC5rZXlzKHNlbGYuX3Nwcml0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9zcHJpdGUgPSB7X19kZWZhdWx0OiBbMCwgc2VsZi5fZHVyYXRpb24gKiAxMDAwXX07XG4gICAgfVxuXG4gICAgLy8gRmlyZSB0aGUgbG9hZGVkIGV2ZW50LlxuICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgIHNlbGYuX3N0YXRlID0gJ2xvYWRlZCc7XG4gICAgICBzZWxmLl9lbWl0KCdsb2FkJyk7XG4gICAgICBzZWxmLl9sb2FkUXVldWUoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSBhdWRpbyBjb250ZXh0IHdoZW4gYXZhaWxhYmxlLCBvciBzd2l0Y2ggdG8gSFRNTDUgQXVkaW8gbW9kZS5cbiAgICovXG4gIHZhciBzZXR1cEF1ZGlvQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIENoZWNrIGlmIHdlIGFyZSB1c2luZyBXZWIgQXVkaW8gYW5kIHNldHVwIHRoZSBBdWRpb0NvbnRleHQgaWYgd2UgYXJlLlxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIEF1ZGlvQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgSG93bGVyLmN0eCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdlYmtpdEF1ZGlvQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgSG93bGVyLmN0eCA9IG5ldyB3ZWJraXRBdWRpb0NvbnRleHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEhvd2xlci51c2luZ1dlYkF1ZGlvID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBIb3dsZXIudXNpbmdXZWJBdWRpbyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGEgd2VidmlldyBpcyBiZWluZyB1c2VkIG9uIGlPUzggb3IgZWFybGllciAocmF0aGVyIHRoYW4gdGhlIGJyb3dzZXIpLlxuICAgIC8vIElmIGl0IGlzLCBkaXNhYmxlIFdlYiBBdWRpbyBhcyBpdCBjYXVzZXMgY3Jhc2hpbmcuXG4gICAgdmFyIGlPUyA9ICgvaVAoaG9uZXxvZHxhZCkvLnRlc3QoSG93bGVyLl9uYXZpZ2F0b3IgJiYgSG93bGVyLl9uYXZpZ2F0b3IucGxhdGZvcm0pKTtcbiAgICB2YXIgYXBwVmVyc2lvbiA9IEhvd2xlci5fbmF2aWdhdG9yICYmIEhvd2xlci5fbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL09TIChcXGQrKV8oXFxkKylfPyhcXGQrKT8vKTtcbiAgICB2YXIgdmVyc2lvbiA9IGFwcFZlcnNpb24gPyBwYXJzZUludChhcHBWZXJzaW9uWzFdLCAxMCkgOiBudWxsO1xuICAgIGlmIChpT1MgJiYgdmVyc2lvbiAmJiB2ZXJzaW9uIDwgOSkge1xuICAgICAgdmFyIHNhZmFyaSA9IC9zYWZhcmkvLnRlc3QoSG93bGVyLl9uYXZpZ2F0b3IgJiYgSG93bGVyLl9uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKEhvd2xlci5fbmF2aWdhdG9yICYmIEhvd2xlci5fbmF2aWdhdG9yLnN0YW5kYWxvbmUgJiYgIXNhZmFyaSB8fCBIb3dsZXIuX25hdmlnYXRvciAmJiAhSG93bGVyLl9uYXZpZ2F0b3Iuc3RhbmRhbG9uZSAmJiAhc2FmYXJpKSB7XG4gICAgICAgIEhvd2xlci51c2luZ1dlYkF1ZGlvID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGFuZCBleHBvc2UgdGhlIG1hc3RlciBHYWluTm9kZSB3aGVuIHVzaW5nIFdlYiBBdWRpbyAodXNlZnVsIGZvciBwbHVnaW5zIG9yIGFkdmFuY2VkIHVzYWdlKS5cbiAgICBpZiAoSG93bGVyLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgIEhvd2xlci5tYXN0ZXJHYWluID0gKHR5cGVvZiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4gPT09ICd1bmRlZmluZWQnKSA/IEhvd2xlci5jdHguY3JlYXRlR2Fpbk5vZGUoKSA6IEhvd2xlci5jdHguY3JlYXRlR2FpbigpO1xuICAgICAgSG93bGVyLm1hc3RlckdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZShIb3dsZXIuX211dGVkID8gMCA6IDEsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgSG93bGVyLm1hc3RlckdhaW4uY29ubmVjdChIb3dsZXIuY3R4LmRlc3RpbmF0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBSZS1ydW4gdGhlIHNldHVwIG9uIEhvd2xlci5cbiAgICBIb3dsZXIuX3NldHVwKCk7XG4gIH07XG5cbiAgLy8gQWRkIHN1cHBvcnQgZm9yIEFNRCAoQXN5bmNocm9ub3VzIE1vZHVsZSBEZWZpbml0aW9uKSBsaWJyYXJpZXMgc3VjaCBhcyByZXF1aXJlLmpzLlxuICBpZiAodHJ1ZSkge1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIEhvd2xlcjogSG93bGVyLFxuICAgICAgICBIb3dsOiBIb3dsXG4gICAgICB9O1xuICAgIH0pLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH1cblxuICAvLyBBZGQgc3VwcG9ydCBmb3IgQ29tbW9uSlMgbGlicmFyaWVzIHN1Y2ggYXMgYnJvd3NlcmlmeS5cbiAgaWYgKHRydWUpIHtcbiAgICBleHBvcnRzLkhvd2xlciA9IEhvd2xlcjtcbiAgICBleHBvcnRzLkhvd2wgPSBIb3dsO1xuICB9XG5cbiAgLy8gRGVmaW5lIGdsb2JhbGx5IGluIGNhc2UgQU1EIGlzIG5vdCBhdmFpbGFibGUgb3IgdW51c2VkLlxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cuSG93bGVyR2xvYmFsID0gSG93bGVyR2xvYmFsO1xuICAgIHdpbmRvdy5Ib3dsZXIgPSBIb3dsZXI7XG4gICAgd2luZG93Lkhvd2wgPSBIb3dsO1xuICAgIHdpbmRvdy5Tb3VuZCA9IFNvdW5kO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IC8vIEFkZCB0byBnbG9iYWwgaW4gTm9kZS5qcyAoZm9yIHRlc3RpbmcsIGV0YykuXG4gICAgZ2xvYmFsLkhvd2xlckdsb2JhbCA9IEhvd2xlckdsb2JhbDtcbiAgICBnbG9iYWwuSG93bGVyID0gSG93bGVyO1xuICAgIGdsb2JhbC5Ib3dsID0gSG93bDtcbiAgICBnbG9iYWwuU291bmQgPSBTb3VuZDtcbiAgfVxufSkoKTtcblxuXG4vKiFcbiAqICBTcGF0aWFsIFBsdWdpbiAtIEFkZHMgc3VwcG9ydCBmb3Igc3RlcmVvIGFuZCAzRCBhdWRpbyB3aGVyZSBXZWIgQXVkaW8gaXMgc3VwcG9ydGVkLlxuICogIFxuICogIGhvd2xlci5qcyB2Mi4wLjEyXG4gKiAgaG93bGVyanMuY29tXG4gKlxuICogIChjKSAyMDEzLTIwMTgsIEphbWVzIFNpbXBzb24gb2YgR29sZEZpcmUgU3R1ZGlvc1xuICogIGdvbGRmaXJlc3R1ZGlvcy5jb21cbiAqXG4gKiAgTUlUIExpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNldHVwIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZS5fcG9zID0gWzAsIDAsIDBdO1xuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlLl9vcmllbnRhdGlvbiA9IFswLCAwLCAtMSwgMCwgMSwgMF07XG5cbiAgLyoqIEdsb2JhbCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgc3RlcmVvIHBhbm5pbmcgcG9zaXRpb24gb2YgYWxsIGN1cnJlbnQgSG93bHMuXG4gICAqIEZ1dHVyZSBIb3dscyB3aWxsIG5vdCB1c2UgdGhpcyB2YWx1ZSB1bmxlc3MgZXhwbGljaXRseSBzZXQuXG4gICAqIEBwYXJhbSAge051bWJlcn0gcGFuIEEgdmFsdWUgb2YgLTEuMCBpcyBhbGwgdGhlIHdheSBsZWZ0IGFuZCAxLjAgaXMgYWxsIHRoZSB3YXkgcmlnaHQuXG4gICAqIEByZXR1cm4ge0hvd2xlci9OdW1iZXJ9ICAgICBTZWxmIG9yIGN1cnJlbnQgc3RlcmVvIHBhbm5pbmcgdmFsdWUuXG4gICAqL1xuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlLnN0ZXJlbyA9IGZ1bmN0aW9uKHBhbikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5jdHggfHwgIXNlbGYuY3R4Lmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggYWxsIEhvd2xzIGFuZCB1cGRhdGUgdGhlaXIgc3RlcmVvIHBhbm5pbmcuXG4gICAgZm9yICh2YXIgaT1zZWxmLl9ob3dscy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG4gICAgICBzZWxmLl9ob3dsc1tpXS5zdGVyZW8ocGFuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgcG9zaXRpb24gb2YgdGhlIGxpc3RlbmVyIGluIDNEIGNhcnRlc2lhbiBzcGFjZS4gU291bmRzIHVzaW5nXG4gICAqIDNEIHBvc2l0aW9uIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhlIGxpc3RlbmVyJ3MgcG9zaXRpb24uXG4gICAqIEBwYXJhbSAge051bWJlcn0geCBUaGUgeC1wb3NpdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geSBUaGUgeS1wb3NpdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geiBUaGUgei1wb3NpdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEByZXR1cm4ge0hvd2xlci9BcnJheX0gICBTZWxmIG9yIGN1cnJlbnQgbGlzdGVuZXIgcG9zaXRpb24uXG4gICAqL1xuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlLnBvcyA9IGZ1bmN0aW9uKHgsIHksIHopIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuY3R4IHx8ICFzZWxmLmN0eC5saXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBmb3Igb3B0aW9uYWwgJ3knICYgJ3onLlxuICAgIHkgPSAodHlwZW9mIHkgIT09ICdudW1iZXInKSA/IHNlbGYuX3Bvc1sxXSA6IHk7XG4gICAgeiA9ICh0eXBlb2YgeiAhPT0gJ251bWJlcicpID8gc2VsZi5fcG9zWzJdIDogejtcblxuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHNlbGYuX3BvcyA9IFt4LCB5LCB6XTtcblxuICAgICAgaWYgKHR5cGVvZiBzZWxmLmN0eC5saXN0ZW5lci5wb3NpdGlvblggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnBvc2l0aW9uWC5zZXRUYXJnZXRBdFRpbWUoc2VsZi5fcG9zWzBdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5wb3NpdGlvblkuc2V0VGFyZ2V0QXRUaW1lKHNlbGYuX3Bvc1sxXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIucG9zaXRpb25aLnNldFRhcmdldEF0VGltZShzZWxmLl9wb3NbMl0sIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5zZXRQb3NpdGlvbihzZWxmLl9wb3NbMF0sIHNlbGYuX3Bvc1sxXSwgc2VsZi5fcG9zWzJdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNlbGYuX3BvcztcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgZGlyZWN0aW9uIHRoZSBsaXN0ZW5lciBpcyBwb2ludGluZyBpbiB0aGUgM0QgY2FydGVzaWFuIHNwYWNlLlxuICAgKiBBIGZyb250IGFuZCB1cCB2ZWN0b3IgbXVzdCBiZSBwcm92aWRlZC4gVGhlIGZyb250IGlzIHRoZSBkaXJlY3Rpb24gdGhlXG4gICAqIGZhY2Ugb2YgdGhlIGxpc3RlbmVyIGlzIHBvaW50aW5nLCBhbmQgdXAgaXMgdGhlIGRpcmVjdGlvbiB0aGUgdG9wIG9mIHRoZVxuICAgKiBsaXN0ZW5lciBpcyBwb2ludGluZy4gVGh1cywgdGhlc2UgdmFsdWVzIGFyZSBleHBlY3RlZCB0byBiZSBhdCByaWdodCBhbmdsZXNcbiAgICogZnJvbSBlYWNoIG90aGVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHggICBUaGUgeC1vcmllbnRhdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geSAgIFRoZSB5LW9yaWVudGF0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB6ICAgVGhlIHotb3JpZW50YXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHhVcCBUaGUgeC1vcmllbnRhdGlvbiBvZiB0aGUgdG9wIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB5VXAgVGhlIHktb3JpZW50YXRpb24gb2YgdGhlIHRvcCBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0gelVwIFRoZSB6LW9yaWVudGF0aW9uIG9mIHRoZSB0b3Agb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHtIb3dsZXIvQXJyYXl9ICAgICBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gdmVjdG9ycy5cbiAgICovXG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUub3JpZW50YXRpb24gPSBmdW5jdGlvbih4LCB5LCB6LCB4VXAsIHlVcCwgelVwKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLmN0eCB8fCAhc2VsZi5jdHgubGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdHMgZm9yIG9wdGlvbmFsICd5JyAmICd6Jy5cbiAgICB2YXIgb3IgPSBzZWxmLl9vcmllbnRhdGlvbjtcbiAgICB5ID0gKHR5cGVvZiB5ICE9PSAnbnVtYmVyJykgPyBvclsxXSA6IHk7XG4gICAgeiA9ICh0eXBlb2YgeiAhPT0gJ251bWJlcicpID8gb3JbMl0gOiB6O1xuICAgIHhVcCA9ICh0eXBlb2YgeFVwICE9PSAnbnVtYmVyJykgPyBvclszXSA6IHhVcDtcbiAgICB5VXAgPSAodHlwZW9mIHlVcCAhPT0gJ251bWJlcicpID8gb3JbNF0gOiB5VXA7XG4gICAgelVwID0gKHR5cGVvZiB6VXAgIT09ICdudW1iZXInKSA/IG9yWzVdIDogelVwO1xuXG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgc2VsZi5fb3JpZW50YXRpb24gPSBbeCwgeSwgeiwgeFVwLCB5VXAsIHpVcF07XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZi5jdHgubGlzdGVuZXIuZm9yd2FyZFggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLmZvcndhcmRYLnNldFRhcmdldEF0VGltZSh4LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5mb3J3YXJkWS5zZXRUYXJnZXRBdFRpbWUoeSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIuZm9yd2FyZFouc2V0VGFyZ2V0QXRUaW1lKHosIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnVwWC5zZXRUYXJnZXRBdFRpbWUoeCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIudXBZLnNldFRhcmdldEF0VGltZSh5LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci51cFouc2V0VGFyZ2V0QXRUaW1lKHosIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5zZXRPcmllbnRhdGlvbih4LCB5LCB6LCB4VXAsIHlVcCwgelVwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9yO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKiBHcm91cCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBBZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlIGNvcmUgaW5pdC5cbiAgICogQHBhcmFtICB7RnVuY3Rpb259IF9zdXBlciBDb3JlIGluaXQgbWV0aG9kLlxuICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgKi9cbiAgSG93bC5wcm90b3R5cGUuaW5pdCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBTZXR1cCB1c2VyLWRlZmluZWQgZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAgc2VsZi5fb3JpZW50YXRpb24gPSBvLm9yaWVudGF0aW9uIHx8IFsxLCAwLCAwXTtcbiAgICAgIHNlbGYuX3N0ZXJlbyA9IG8uc3RlcmVvIHx8IG51bGw7XG4gICAgICBzZWxmLl9wb3MgPSBvLnBvcyB8fCBudWxsO1xuICAgICAgc2VsZi5fcGFubmVyQXR0ciA9IHtcbiAgICAgICAgY29uZUlubmVyQW5nbGU6IHR5cGVvZiBvLmNvbmVJbm5lckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8uY29uZUlubmVyQW5nbGUgOiAzNjAsXG4gICAgICAgIGNvbmVPdXRlckFuZ2xlOiB0eXBlb2Ygby5jb25lT3V0ZXJBbmdsZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLmNvbmVPdXRlckFuZ2xlIDogMzYwLFxuICAgICAgICBjb25lT3V0ZXJHYWluOiB0eXBlb2Ygby5jb25lT3V0ZXJHYWluICE9PSAndW5kZWZpbmVkJyA/IG8uY29uZU91dGVyR2FpbiA6IDAsXG4gICAgICAgIGRpc3RhbmNlTW9kZWw6IHR5cGVvZiBvLmRpc3RhbmNlTW9kZWwgIT09ICd1bmRlZmluZWQnID8gby5kaXN0YW5jZU1vZGVsIDogJ2ludmVyc2UnLFxuICAgICAgICBtYXhEaXN0YW5jZTogdHlwZW9mIG8ubWF4RGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5tYXhEaXN0YW5jZSA6IDEwMDAwLFxuICAgICAgICBwYW5uaW5nTW9kZWw6IHR5cGVvZiBvLnBhbm5pbmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5pbmdNb2RlbCA6ICdIUlRGJyxcbiAgICAgICAgcmVmRGlzdGFuY2U6IHR5cGVvZiBvLnJlZkRpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ucmVmRGlzdGFuY2UgOiAxLFxuICAgICAgICByb2xsb2ZmRmFjdG9yOiB0eXBlb2Ygby5yb2xsb2ZmRmFjdG9yICE9PSAndW5kZWZpbmVkJyA/IG8ucm9sbG9mZkZhY3RvciA6IDFcbiAgICAgIH07XG5cbiAgICAgIC8vIFNldHVwIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgIHNlbGYuX29uc3RlcmVvID0gby5vbnN0ZXJlbyA/IFt7Zm46IG8ub25zdGVyZW99XSA6IFtdO1xuICAgICAgc2VsZi5fb25wb3MgPSBvLm9ucG9zID8gW3tmbjogby5vbnBvc31dIDogW107XG4gICAgICBzZWxmLl9vbm9yaWVudGF0aW9uID0gby5vbm9yaWVudGF0aW9uID8gW3tmbjogby5vbm9yaWVudGF0aW9ufV0gOiBbXTtcblxuICAgICAgLy8gQ29tcGxldGUgaW5pdGlsaXphdGlvbiB3aXRoIGhvd2xlci5qcyBjb3JlJ3MgaW5pdCBmdW5jdGlvbi5cbiAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBvKTtcbiAgICB9O1xuICB9KShIb3dsLnByb3RvdHlwZS5pbml0KTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgc3RlcmVvIHBhbm5pbmcgb2YgdGhlIGF1ZGlvIHNvdXJjZSBmb3IgdGhpcyBzb3VuZCBvciBhbGwgaW4gdGhlIGdyb3VwLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHBhbiAgQSB2YWx1ZSBvZiAtMS4wIGlzIGFsbCB0aGUgd2F5IGxlZnQgYW5kIDEuMCBpcyBhbGwgdGhlIHdheSByaWdodC5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAob3B0aW9uYWwpIFRoZSBzb3VuZCBJRC4gSWYgbm9uZSBpcyBwYXNzZWQsIGFsbCBpbiBncm91cCB3aWxsIGJlIHVwZGF0ZWQuXG4gICAqIEByZXR1cm4ge0hvd2wvTnVtYmVyfSAgICBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgc3RlcmVvIHBhbm5pbmcgdmFsdWUuXG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5zdGVyZW8gPSBmdW5jdGlvbihwYW4sIGlkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLl93ZWJBdWRpbykge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBjaGFuZ2Ugc3RlcmVvIHBhbiB3aGVuIGNhcGFibGUuXG4gICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgIGV2ZW50OiAnc3RlcmVvJyxcbiAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnN0ZXJlbyhwYW4sIGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBQYW5uZXJTdGVyZW9Ob2RlIHN1cHBvcnQgYW5kIGZhbGxiYWNrIHRvIFBhbm5lck5vZGUgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICB2YXIgcGFubmVyVHlwZSA9ICh0eXBlb2YgSG93bGVyLmN0eC5jcmVhdGVTdGVyZW9QYW5uZXIgPT09ICd1bmRlZmluZWQnKSA/ICdzcGF0aWFsJyA6ICdzdGVyZW8nO1xuXG4gICAgLy8gU2V0dXAgdGhlIGdyb3VwJ3Mgc3RlcmVvIHBhbm5pbmcgaWYgbm8gSUQgaXMgcGFzc2VkLlxuICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGdyb3VwJ3Mgc3RlcmVvIHBhbm5pbmcgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLlxuICAgICAgaWYgKHR5cGVvZiBwYW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNlbGYuX3N0ZXJlbyA9IHBhbjtcbiAgICAgICAgc2VsZi5fcG9zID0gW3BhbiwgMCwgMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5fc3RlcmVvO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoYW5nZSB0aGUgc3RyZW8gcGFubmluZyBvZiBvbmUgb3IgYWxsIHNvdW5kcyBpbiBncm91cC5cbiAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFuID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHNvdW5kLl9zdGVyZW8gPSBwYW47XG4gICAgICAgICAgc291bmQuX3BvcyA9IFtwYW4sIDAsIDBdO1xuXG4gICAgICAgICAgaWYgKHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgZmFsbGluZyBiYWNrLCBtYWtlIHN1cmUgdGhlIHBhbm5pbmdNb2RlbCBpcyBlcXVhbHBvd2VyLlxuICAgICAgICAgICAgc291bmQuX3Bhbm5lckF0dHIucGFubmluZ01vZGVsID0gJ2VxdWFscG93ZXInO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIHBhbm5lciBzZXR1cCBhbmQgY3JlYXRlIGEgbmV3IG9uZSBpZiBub3QuXG4gICAgICAgICAgICBpZiAoIXNvdW5kLl9wYW5uZXIgfHwgIXNvdW5kLl9wYW5uZXIucGFuKSB7XG4gICAgICAgICAgICAgIHNldHVwUGFubmVyKHNvdW5kLCBwYW5uZXJUeXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhbm5lclR5cGUgPT09ICdzcGF0aWFsJykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YLnNldFZhbHVlQXRUaW1lKHBhbiwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblkuc2V0VmFsdWVBdFRpbWUoMCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblouc2V0VmFsdWVBdFRpbWUoMCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5zZXRQb3NpdGlvbihwYW4sIDAsIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBhbi5zZXRWYWx1ZUF0VGltZShwYW4sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuX2VtaXQoJ3N0ZXJlbycsIHNvdW5kLl9pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHNvdW5kLl9zdGVyZW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgM0Qgc3BhdGlhbCBwb3NpdGlvbiBvZiB0aGUgYXVkaW8gc291cmNlIGZvciB0aGlzIHNvdW5kIG9yIGdyb3VwIHJlbGF0aXZlIHRvIHRoZSBnbG9iYWwgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geCAgVGhlIHgtcG9zaXRpb24gb2YgdGhlIGF1ZGlvIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB5ICBUaGUgeS1wb3NpdGlvbiBvZiB0aGUgYXVkaW8gc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHogIFRoZSB6LXBvc2l0aW9uIG9mIHRoZSBhdWRpbyBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0gaWQgKG9wdGlvbmFsKSBUaGUgc291bmQgSUQuIElmIG5vbmUgaXMgcGFzc2VkLCBhbGwgaW4gZ3JvdXAgd2lsbCBiZSB1cGRhdGVkLlxuICAgKiBAcmV0dXJuIHtIb3dsL0FycmF5fSAgICBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgM0Qgc3BhdGlhbCBwb3NpdGlvbjogW3gsIHksIHpdLlxuICAgKi9cbiAgSG93bC5wcm90b3R5cGUucG9zID0gZnVuY3Rpb24oeCwgeSwgeiwgaWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGNoYW5nZSBwb3NpdGlvbiB3aGVuIGNhcGFibGUuXG4gICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgIGV2ZW50OiAncG9zJyxcbiAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnBvcyh4LCB5LCB6LCBpZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHRzIGZvciBvcHRpb25hbCAneScgJiAneicuXG4gICAgeSA9ICh0eXBlb2YgeSAhPT0gJ251bWJlcicpID8gMCA6IHk7XG4gICAgeiA9ICh0eXBlb2YgeiAhPT0gJ251bWJlcicpID8gLTAuNSA6IHo7XG5cbiAgICAvLyBTZXR1cCB0aGUgZ3JvdXAncyBzcGF0aWFsIHBvc2l0aW9uIGlmIG5vIElEIGlzIHBhc3NlZC5cbiAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gUmV0dXJuIHRoZSBncm91cCdzIHNwYXRpYWwgcG9zaXRpb24gaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLlxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZWxmLl9wb3MgPSBbeCwgeSwgel07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5fcG9zO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoYW5nZSB0aGUgc3BhdGlhbCBwb3NpdGlvbiBvZiBvbmUgb3IgYWxsIHNvdW5kcyBpbiBncm91cC5cbiAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBzb3VuZC5fcG9zID0gW3gsIHksIHpdO1xuXG4gICAgICAgICAgaWYgKHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIHBhbm5lciBzZXR1cCBhbmQgY3JlYXRlIGEgbmV3IG9uZSBpZiBub3QuXG4gICAgICAgICAgICBpZiAoIXNvdW5kLl9wYW5uZXIgfHwgc291bmQuX3Bhbm5lci5wYW4pIHtcbiAgICAgICAgICAgICAgc2V0dXBQYW5uZXIoc291bmQsICdzcGF0aWFsJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291bmQuX3Bhbm5lci5wb3NpdGlvblggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YLnNldFZhbHVlQXRUaW1lKHgsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWS5zZXRWYWx1ZUF0VGltZSh5LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblouc2V0VmFsdWVBdFRpbWUoeiwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnNldE9yaWVudGF0aW9uKHgsIHksIHopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuX2VtaXQoJ3BvcycsIHNvdW5kLl9pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHNvdW5kLl9wb3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgZGlyZWN0aW9uIHRoZSBhdWRpbyBzb3VyY2UgaXMgcG9pbnRpbmcgaW4gdGhlIDNEIGNhcnRlc2lhbiBjb29yZGluYXRlXG4gICAqIHNwYWNlLiBEZXBlbmRpbmcgb24gaG93IGRpcmVjdGlvbiB0aGUgc291bmQgaXMsIGJhc2VkIG9uIHRoZSBgY29uZWAgYXR0cmlidXRlcyxcbiAgICogYSBzb3VuZCBwb2ludGluZyBhd2F5IGZyb20gdGhlIGxpc3RlbmVyIGNhbiBiZSBxdWlldCBvciBzaWxlbnQuXG4gICAqIEBwYXJhbSAge051bWJlcn0geCAgVGhlIHgtb3JpZW50YXRpb24gb2YgdGhlIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB5ICBUaGUgeS1vcmllbnRhdGlvbiBvZiB0aGUgc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHogIFRoZSB6LW9yaWVudGF0aW9uIG9mIHRoZSBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0gaWQgKG9wdGlvbmFsKSBUaGUgc291bmQgSUQuIElmIG5vbmUgaXMgcGFzc2VkLCBhbGwgaW4gZ3JvdXAgd2lsbCBiZSB1cGRhdGVkLlxuICAgKiBAcmV0dXJuIHtIb3dsL0FycmF5fSAgICBSZXR1cm5zIHNlbGYgb3IgdGhlIGN1cnJlbnQgM0Qgc3BhdGlhbCBvcmllbnRhdGlvbjogW3gsIHksIHpdLlxuICAgKi9cbiAgSG93bC5wcm90b3R5cGUub3JpZW50YXRpb24gPSBmdW5jdGlvbih4LCB5LCB6LCBpZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gY2hhbmdlIG9yaWVudGF0aW9uIHdoZW4gY2FwYWJsZS5cbiAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgZXZlbnQ6ICdvcmllbnRhdGlvbicsXG4gICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5vcmllbnRhdGlvbih4LCB5LCB6LCBpZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHRzIGZvciBvcHRpb25hbCAneScgJiAneicuXG4gICAgeSA9ICh0eXBlb2YgeSAhPT0gJ251bWJlcicpID8gc2VsZi5fb3JpZW50YXRpb25bMV0gOiB5O1xuICAgIHogPSAodHlwZW9mIHogIT09ICdudW1iZXInKSA/IHNlbGYuX29yaWVudGF0aW9uWzJdIDogejtcblxuICAgIC8vIFNldHVwIHRoZSBncm91cCdzIHNwYXRpYWwgb3JpZW50YXRpb24gaWYgbm8gSUQgaXMgcGFzc2VkLlxuICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGdyb3VwJ3Mgc3BhdGlhbCBvcmllbnRhdGlvbiBpZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQuXG4gICAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gW3gsIHksIHpdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX29yaWVudGF0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoYW5nZSB0aGUgc3BhdGlhbCBvcmllbnRhdGlvbiBvZiBvbmUgb3IgYWxsIHNvdW5kcyBpbiBncm91cC5cbiAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgIGZvciAodmFyIGk9MDsgaTxpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBzb3VuZC5fb3JpZW50YXRpb24gPSBbeCwgeSwgel07XG5cbiAgICAgICAgICBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgcGFubmVyIHNldHVwIGFuZCBjcmVhdGUgYSBuZXcgb25lIGlmIG5vdC5cbiAgICAgICAgICAgIGlmICghc291bmQuX3Bhbm5lcikge1xuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHBvc2l0aW9uIHRvIHNldHVwIHRoZSBub2RlIHdpdGguXG4gICAgICAgICAgICAgIGlmICghc291bmQuX3Bvcykge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9wb3MgPSBzZWxmLl9wb3MgfHwgWzAsIDAsIC0wLjVdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2V0dXBQYW5uZXIoc291bmQsICdzcGF0aWFsJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25YLnNldFZhbHVlQXRUaW1lKHgsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblkuc2V0VmFsdWVBdFRpbWUoeSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWi5zZXRWYWx1ZUF0VGltZSh6LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9lbWl0KCdvcmllbnRhdGlvbicsIHNvdW5kLl9pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHNvdW5kLl9vcmllbnRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSBwYW5uZXIgbm9kZSdzIGF0dHJpYnV0ZXMgZm9yIGEgc291bmQgb3IgZ3JvdXAgb2Ygc291bmRzLlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gb3B0aW9uYWxsIHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICogICBwYW5uZXJBdHRyKCkgLT4gUmV0dXJucyB0aGUgZ3JvdXAncyB2YWx1ZXMuXG4gICAqICAgcGFubmVyQXR0cihpZCkgLT4gUmV0dXJucyB0aGUgc291bmQgaWQncyB2YWx1ZXMuXG4gICAqICAgcGFubmVyQXR0cihvKSAtPiBTZXQncyB0aGUgdmFsdWVzIG9mIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgKiAgIHBhbm5lckF0dHIobywgaWQpIC0+IFNldCdzIHRoZSB2YWx1ZXMgb2YgcGFzc2VkIHNvdW5kIGlkLlxuICAgKlxuICAgKiAgIEF0dHJpYnV0ZXM6XG4gICAqICAgICBjb25lSW5uZXJBbmdsZSAtICgzNjAgYnkgZGVmYXVsdCkgQSBwYXJhbWV0ZXIgZm9yIGRpcmVjdGlvbmFsIGF1ZGlvIHNvdXJjZXMsIHRoaXMgaXMgYW4gYW5nbGUsIGluIGRlZ3JlZXMsXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGluc2lkZSBvZiB3aGljaCB0aGVyZSB3aWxsIGJlIG5vIHZvbHVtZSByZWR1Y3Rpb24uXG4gICAqICAgICBjb25lT3V0ZXJBbmdsZSAtICgzNjAgYnkgZGVmYXVsdCkgQSBwYXJhbWV0ZXIgZm9yIGRpcmVjdGlvbmFsIGF1ZGlvIHNvdXJjZXMsIHRoaXMgaXMgYW4gYW5nbGUsIGluIGRlZ3JlZXMsXG4gICAqICAgICAgICAgICAgICAgICAgICAgIG91dHNpZGUgb2Ygd2hpY2ggdGhlIHZvbHVtZSB3aWxsIGJlIHJlZHVjZWQgdG8gYSBjb25zdGFudCB2YWx1ZSBvZiBgY29uZU91dGVyR2FpbmAuXG4gICAqICAgICBjb25lT3V0ZXJHYWluIC0gKDAgYnkgZGVmYXVsdCkgQSBwYXJhbWV0ZXIgZm9yIGRpcmVjdGlvbmFsIGF1ZGlvIHNvdXJjZXMsIHRoaXMgaXMgdGhlIGdhaW4gb3V0c2lkZSBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICBgY29uZU91dGVyQW5nbGVgLiBJdCBpcyBhIGxpbmVhciB2YWx1ZSBpbiB0aGUgcmFuZ2UgYFswLCAxXWAuXG4gICAqICAgICBkaXN0YW5jZU1vZGVsIC0gKCdpbnZlcnNlJyBieSBkZWZhdWx0KSBEZXRlcm1pbmVzIGFsZ29yaXRobSB1c2VkIHRvIHJlZHVjZSB2b2x1bWUgYXMgYXVkaW8gbW92ZXMgYXdheSBmcm9tXG4gICAqICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuIENhbiBiZSBgbGluZWFyYCwgYGludmVyc2VgIG9yIGBleHBvbmVudGlhbC5cbiAgICogICAgIG1heERpc3RhbmNlIC0gKDEwMDAwIGJ5IGRlZmF1bHQpIFRoZSBtYXhpbXVtIGRpc3RhbmNlIGJldHdlZW4gc291cmNlIGFuZCBsaXN0ZW5lciwgYWZ0ZXIgd2hpY2ggdGhlIHZvbHVtZVxuICAgKiAgICAgICAgICAgICAgICAgICB3aWxsIG5vdCBiZSByZWR1Y2VkIGFueSBmdXJ0aGVyLlxuICAgKiAgICAgcmVmRGlzdGFuY2UgLSAoMSBieSBkZWZhdWx0KSBBIHJlZmVyZW5jZSBkaXN0YW5jZSBmb3IgcmVkdWNpbmcgdm9sdW1lIGFzIHNvdXJjZSBtb3ZlcyBmdXJ0aGVyIGZyb20gdGhlIGxpc3RlbmVyLlxuICAgKiAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHNpbXBseSBhIHZhcmlhYmxlIG9mIHRoZSBkaXN0YW5jZSBtb2RlbCBhbmQgaGFzIGEgZGlmZmVyZW50IGVmZmVjdCBkZXBlbmRpbmcgb24gd2hpY2ggbW9kZWxcbiAgICogICAgICAgICAgICAgICAgICAgaXMgdXNlZCBhbmQgdGhlIHNjYWxlIG9mIHlvdXIgY29vcmRpbmF0ZXMuIEdlbmVyYWxseSwgdm9sdW1lIHdpbGwgYmUgZXF1YWwgdG8gMSBhdCB0aGlzIGRpc3RhbmNlLlxuICAgKiAgICAgcm9sbG9mZkZhY3RvciAtICgxIGJ5IGRlZmF1bHQpIEhvdyBxdWlja2x5IHRoZSB2b2x1bWUgcmVkdWNlcyBhcyBzb3VyY2UgbW92ZXMgZnJvbSBsaXN0ZW5lci4gVGhpcyBpcyBzaW1wbHkgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlIG9mIHRoZSBkaXN0YW5jZSBtb2RlbCBhbmQgY2FuIGJlIGluIHRoZSByYW5nZSBvZiBgWzAsIDFdYCB3aXRoIGBsaW5lYXJgIGFuZCBgWzAsIOKInl1gXG4gICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCBgaW52ZXJzZWAgYW5kIGBleHBvbmVudGlhbGAuXG4gICAqICAgICBwYW5uaW5nTW9kZWwgLSAoJ0hSVEYnIGJ5IGRlZmF1bHQpIERldGVybWluZXMgd2hpY2ggc3BhdGlhbGl6YXRpb24gYWxnb3JpdGhtIGlzIHVzZWQgdG8gcG9zaXRpb24gYXVkaW8uXG4gICAqICAgICAgICAgICAgICAgICAgICAgQ2FuIGJlIGBIUlRGYCBvciBgZXF1YWxwb3dlcmAuXG4gICAqXG4gICAqIEByZXR1cm4ge0hvd2wvT2JqZWN0fSBSZXR1cm5zIHNlbGYgb3IgY3VycmVudCBwYW5uZXIgYXR0cmlidXRlcy5cbiAgICovXG4gIEhvd2wucHJvdG90eXBlLnBhbm5lckF0dHIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIG8sIGlkLCBzb3VuZDtcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSB0aGUgdmFsdWVzIGJhc2VkIG9uIGFyZ3VtZW50cy5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFJldHVybiB0aGUgZ3JvdXAncyBwYW5uZXIgYXR0cmlidXRlIHZhbHVlcy5cbiAgICAgIHJldHVybiBzZWxmLl9wYW5uZXJBdHRyO1xuICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbyA9IGFyZ3NbMF07XG5cbiAgICAgICAgLy8gU2V0IHRoZSBncm91J3MgcGFubmVyIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKCFvLnBhbm5lckF0dHIpIHtcbiAgICAgICAgICAgIG8ucGFubmVyQXR0ciA9IHtcbiAgICAgICAgICAgICAgY29uZUlubmVyQW5nbGU6IG8uY29uZUlubmVyQW5nbGUsXG4gICAgICAgICAgICAgIGNvbmVPdXRlckFuZ2xlOiBvLmNvbmVPdXRlckFuZ2xlLFxuICAgICAgICAgICAgICBjb25lT3V0ZXJHYWluOiBvLmNvbmVPdXRlckdhaW4sXG4gICAgICAgICAgICAgIGRpc3RhbmNlTW9kZWw6IG8uZGlzdGFuY2VNb2RlbCxcbiAgICAgICAgICAgICAgbWF4RGlzdGFuY2U6IG8ubWF4RGlzdGFuY2UsXG4gICAgICAgICAgICAgIHJlZkRpc3RhbmNlOiBvLnJlZkRpc3RhbmNlLFxuICAgICAgICAgICAgICByb2xsb2ZmRmFjdG9yOiBvLnJvbGxvZmZGYWN0b3IsXG4gICAgICAgICAgICAgIHBhbm5pbmdNb2RlbDogby5wYW5uaW5nTW9kZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fcGFubmVyQXR0ciA9IHtcbiAgICAgICAgICAgIGNvbmVJbm5lckFuZ2xlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLmNvbmVJbm5lckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5jb25lSW5uZXJBbmdsZSA6IHNlbGYuX2NvbmVJbm5lckFuZ2xlLFxuICAgICAgICAgICAgY29uZU91dGVyQW5nbGU6IHR5cGVvZiBvLnBhbm5lckF0dHIuY29uZU91dGVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLmNvbmVPdXRlckFuZ2xlIDogc2VsZi5fY29uZU91dGVyQW5nbGUsXG4gICAgICAgICAgICBjb25lT3V0ZXJHYWluOiB0eXBlb2Ygby5wYW5uZXJBdHRyLmNvbmVPdXRlckdhaW4gIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLmNvbmVPdXRlckdhaW4gOiBzZWxmLl9jb25lT3V0ZXJHYWluLFxuICAgICAgICAgICAgZGlzdGFuY2VNb2RlbDogdHlwZW9mIG8ucGFubmVyQXR0ci5kaXN0YW5jZU1vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5kaXN0YW5jZU1vZGVsIDogc2VsZi5fZGlzdGFuY2VNb2RlbCxcbiAgICAgICAgICAgIG1heERpc3RhbmNlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLm1heERpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5tYXhEaXN0YW5jZSA6IHNlbGYuX21heERpc3RhbmNlLFxuICAgICAgICAgICAgcmVmRGlzdGFuY2U6IHR5cGVvZiBvLnBhbm5lckF0dHIucmVmRGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLnJlZkRpc3RhbmNlIDogc2VsZi5fcmVmRGlzdGFuY2UsXG4gICAgICAgICAgICByb2xsb2ZmRmFjdG9yOiB0eXBlb2Ygby5wYW5uZXJBdHRyLnJvbGxvZmZGYWN0b3IgIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLnJvbGxvZmZGYWN0b3IgOiBzZWxmLl9yb2xsb2ZmRmFjdG9yLFxuICAgICAgICAgICAgcGFubmluZ01vZGVsOiB0eXBlb2Ygby5wYW5uZXJBdHRyLnBhbm5pbmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIucGFubmluZ01vZGVsIDogc2VsZi5fcGFubmluZ01vZGVsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoaXMgc291bmQncyBwYW5uZXIgYXR0cmlidXRlIHZhbHVlcy5cbiAgICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQocGFyc2VJbnQoYXJnc1swXSwgMTApKTtcbiAgICAgICAgcmV0dXJuIHNvdW5kID8gc291bmQuX3Bhbm5lckF0dHIgOiBzZWxmLl9wYW5uZXJBdHRyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgIG8gPSBhcmdzWzBdO1xuICAgICAgaWQgPSBwYXJzZUludChhcmdzWzFdLCAxMCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSB2YWx1ZXMgb2YgdGhlIHNwZWNpZmllZCBzb3VuZHMuXG4gICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgLy8gTWVyZ2UgdGhlIG5ldyB2YWx1ZXMgaW50byB0aGUgc291bmQuXG4gICAgICAgIHZhciBwYSA9IHNvdW5kLl9wYW5uZXJBdHRyO1xuICAgICAgICBwYSA9IHtcbiAgICAgICAgICBjb25lSW5uZXJBbmdsZTogdHlwZW9mIG8uY29uZUlubmVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5jb25lSW5uZXJBbmdsZSA6IHBhLmNvbmVJbm5lckFuZ2xlLFxuICAgICAgICAgIGNvbmVPdXRlckFuZ2xlOiB0eXBlb2Ygby5jb25lT3V0ZXJBbmdsZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLmNvbmVPdXRlckFuZ2xlIDogcGEuY29uZU91dGVyQW5nbGUsXG4gICAgICAgICAgY29uZU91dGVyR2FpbjogdHlwZW9mIG8uY29uZU91dGVyR2FpbiAhPT0gJ3VuZGVmaW5lZCcgPyBvLmNvbmVPdXRlckdhaW4gOiBwYS5jb25lT3V0ZXJHYWluLFxuICAgICAgICAgIGRpc3RhbmNlTW9kZWw6IHR5cGVvZiBvLmRpc3RhbmNlTW9kZWwgIT09ICd1bmRlZmluZWQnID8gby5kaXN0YW5jZU1vZGVsIDogcGEuZGlzdGFuY2VNb2RlbCxcbiAgICAgICAgICBtYXhEaXN0YW5jZTogdHlwZW9mIG8ubWF4RGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5tYXhEaXN0YW5jZSA6IHBhLm1heERpc3RhbmNlLFxuICAgICAgICAgIHJlZkRpc3RhbmNlOiB0eXBlb2Ygby5yZWZEaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnJlZkRpc3RhbmNlIDogcGEucmVmRGlzdGFuY2UsXG4gICAgICAgICAgcm9sbG9mZkZhY3RvcjogdHlwZW9mIG8ucm9sbG9mZkZhY3RvciAhPT0gJ3VuZGVmaW5lZCcgPyBvLnJvbGxvZmZGYWN0b3IgOiBwYS5yb2xsb2ZmRmFjdG9yLFxuICAgICAgICAgIHBhbm5pbmdNb2RlbDogdHlwZW9mIG8ucGFubmluZ01vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmluZ01vZGVsIDogcGEucGFubmluZ01vZGVsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBwYW5uZXIgdmFsdWVzIG9yIGNyZWF0ZSBhIG5ldyBwYW5uZXIgaWYgbm9uZSBleGlzdHMuXG4gICAgICAgIHZhciBwYW5uZXIgPSBzb3VuZC5fcGFubmVyO1xuICAgICAgICBpZiAocGFubmVyKSB7XG4gICAgICAgICAgcGFubmVyLmNvbmVJbm5lckFuZ2xlID0gcGEuY29uZUlubmVyQW5nbGU7XG4gICAgICAgICAgcGFubmVyLmNvbmVPdXRlckFuZ2xlID0gcGEuY29uZU91dGVyQW5nbGU7XG4gICAgICAgICAgcGFubmVyLmNvbmVPdXRlckdhaW4gPSBwYS5jb25lT3V0ZXJHYWluO1xuICAgICAgICAgIHBhbm5lci5kaXN0YW5jZU1vZGVsID0gcGEuZGlzdGFuY2VNb2RlbDtcbiAgICAgICAgICBwYW5uZXIubWF4RGlzdGFuY2UgPSBwYS5tYXhEaXN0YW5jZTtcbiAgICAgICAgICBwYW5uZXIucmVmRGlzdGFuY2UgPSBwYS5yZWZEaXN0YW5jZTtcbiAgICAgICAgICBwYW5uZXIucm9sbG9mZkZhY3RvciA9IHBhLnJvbGxvZmZGYWN0b3I7XG4gICAgICAgICAgcGFubmVyLnBhbm5pbmdNb2RlbCA9IHBhLnBhbm5pbmdNb2RlbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHBvc2l0aW9uIHRvIHNldHVwIHRoZSBub2RlIHdpdGguXG4gICAgICAgICAgaWYgKCFzb3VuZC5fcG9zKSB7XG4gICAgICAgICAgICBzb3VuZC5fcG9zID0gc2VsZi5fcG9zIHx8IFswLCAwLCAtMC41XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFubmVyIG5vZGUuXG4gICAgICAgICAgc2V0dXBQYW5uZXIoc291bmQsICdzcGF0aWFsJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKiogU2luZ2xlIFNvdW5kIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEFkZCBuZXcgcHJvcGVydGllcyB0byB0aGUgY29yZSBTb3VuZCBpbml0LlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gX3N1cGVyIENvcmUgU291bmQgaW5pdCBtZXRob2QuXG4gICAqIEByZXR1cm4ge1NvdW5kfVxuICAgKi9cbiAgU291bmQucHJvdG90eXBlLmluaXQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gU2V0dXAgdXNlci1kZWZpbmVkIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gcGFyZW50Ll9vcmllbnRhdGlvbjtcbiAgICAgIHNlbGYuX3N0ZXJlbyA9IHBhcmVudC5fc3RlcmVvO1xuICAgICAgc2VsZi5fcG9zID0gcGFyZW50Ll9wb3M7XG4gICAgICBzZWxmLl9wYW5uZXJBdHRyID0gcGFyZW50Ll9wYW5uZXJBdHRyO1xuXG4gICAgICAvLyBDb21wbGV0ZSBpbml0aWxpemF0aW9uIHdpdGggaG93bGVyLmpzIGNvcmUgU291bmQncyBpbml0IGZ1bmN0aW9uLlxuICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG5cbiAgICAgIC8vIElmIGEgc3RlcmVvIG9yIHBvc2l0aW9uIHdhcyBzcGVjaWZpZWQsIHNldCBpdCB1cC5cbiAgICAgIGlmIChzZWxmLl9zdGVyZW8pIHtcbiAgICAgICAgcGFyZW50LnN0ZXJlbyhzZWxmLl9zdGVyZW8pO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLl9wb3MpIHtcbiAgICAgICAgcGFyZW50LnBvcyhzZWxmLl9wb3NbMF0sIHNlbGYuX3Bvc1sxXSwgc2VsZi5fcG9zWzJdLCBzZWxmLl9pZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoU291bmQucHJvdG90eXBlLmluaXQpO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgU291bmQucmVzZXQgbWV0aG9kIHRvIGNsZWFuIHVwIHByb3BlcnRpZXMgZnJvbSB0aGUgc3BhdGlhbCBwbHVnaW4uXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBfc3VwZXIgU291bmQgcmVzZXQgbWV0aG9kLlxuICAgKiBAcmV0dXJuIHtTb3VuZH1cbiAgICovXG4gIFNvdW5kLnByb3RvdHlwZS5yZXNldCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyZW50ID0gc2VsZi5fcGFyZW50O1xuXG4gICAgICAvLyBSZXNldCBhbGwgc3BhdGlhbCBwbHVnaW4gcHJvcGVydGllcyBvbiB0aGlzIHNvdW5kLlxuICAgICAgc2VsZi5fb3JpZW50YXRpb24gPSBwYXJlbnQuX29yaWVudGF0aW9uO1xuICAgICAgc2VsZi5fcG9zID0gcGFyZW50Ll9wb3M7XG4gICAgICBzZWxmLl9wYW5uZXJBdHRyID0gcGFyZW50Ll9wYW5uZXJBdHRyO1xuXG4gICAgICAvLyBDb21wbGV0ZSByZXNldHRpbmcgb2YgdGhlIHNvdW5kLlxuICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH0pKFNvdW5kLnByb3RvdHlwZS5yZXNldCk7XG5cbiAgLyoqIEhlbHBlciBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcGFubmVyIG5vZGUgYW5kIHNhdmUgaXQgb24gdGhlIHNvdW5kLlxuICAgKiBAcGFyYW0gIHtTb3VuZH0gc291bmQgU3BlY2lmaWMgc291bmQgdG8gc2V0dXAgcGFubmluZyBvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiBwYW5uZXIgdG8gY3JlYXRlOiAnc3RlcmVvJyBvciAnc3BhdGlhbCcuXG4gICAqL1xuICB2YXIgc2V0dXBQYW5uZXIgPSBmdW5jdGlvbihzb3VuZCwgdHlwZSkge1xuICAgIHR5cGUgPSB0eXBlIHx8ICdzcGF0aWFsJztcblxuICAgIC8vIENyZWF0ZSB0aGUgbmV3IHBhbm5lciBub2RlLlxuICAgIGlmICh0eXBlID09PSAnc3BhdGlhbCcpIHtcbiAgICAgIHNvdW5kLl9wYW5uZXIgPSBIb3dsZXIuY3R4LmNyZWF0ZVBhbm5lcigpO1xuICAgICAgc291bmQuX3Bhbm5lci5jb25lSW5uZXJBbmdsZSA9IHNvdW5kLl9wYW5uZXJBdHRyLmNvbmVJbm5lckFuZ2xlO1xuICAgICAgc291bmQuX3Bhbm5lci5jb25lT3V0ZXJBbmdsZSA9IHNvdW5kLl9wYW5uZXJBdHRyLmNvbmVPdXRlckFuZ2xlO1xuICAgICAgc291bmQuX3Bhbm5lci5jb25lT3V0ZXJHYWluID0gc291bmQuX3Bhbm5lckF0dHIuY29uZU91dGVyR2FpbjtcbiAgICAgIHNvdW5kLl9wYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHNvdW5kLl9wYW5uZXJBdHRyLmRpc3RhbmNlTW9kZWw7XG4gICAgICBzb3VuZC5fcGFubmVyLm1heERpc3RhbmNlID0gc291bmQuX3Bhbm5lckF0dHIubWF4RGlzdGFuY2U7XG4gICAgICBzb3VuZC5fcGFubmVyLnJlZkRpc3RhbmNlID0gc291bmQuX3Bhbm5lckF0dHIucmVmRGlzdGFuY2U7XG4gICAgICBzb3VuZC5fcGFubmVyLnJvbGxvZmZGYWN0b3IgPSBzb3VuZC5fcGFubmVyQXR0ci5yb2xsb2ZmRmFjdG9yO1xuICAgICAgc291bmQuX3Bhbm5lci5wYW5uaW5nTW9kZWwgPSBzb3VuZC5fcGFubmVyQXR0ci5wYW5uaW5nTW9kZWw7XG5cbiAgICAgIGlmICh0eXBlb2Ygc291bmQuX3Bhbm5lci5wb3NpdGlvblggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25YLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9wb3NbMF0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWS5zZXRWYWx1ZUF0VGltZShzb3VuZC5fcG9zWzFdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblouc2V0VmFsdWVBdFRpbWUoc291bmQuX3Bvc1syXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3VuZC5fcGFubmVyLnNldFBvc2l0aW9uKHNvdW5kLl9wb3NbMF0sIHNvdW5kLl9wb3NbMV0sIHNvdW5kLl9wb3NbMl0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25YICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWC5zZXRWYWx1ZUF0VGltZShzb3VuZC5fb3JpZW50YXRpb25bMF0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWS5zZXRWYWx1ZUF0VGltZShzb3VuZC5fb3JpZW50YXRpb25bMV0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWi5zZXRWYWx1ZUF0VGltZShzb3VuZC5fb3JpZW50YXRpb25bMl0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQuX3Bhbm5lci5zZXRPcmllbnRhdGlvbihzb3VuZC5fb3JpZW50YXRpb25bMF0sIHNvdW5kLl9vcmllbnRhdGlvblsxXSwgc291bmQuX29yaWVudGF0aW9uWzJdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc291bmQuX3Bhbm5lciA9IEhvd2xlci5jdHguY3JlYXRlU3RlcmVvUGFubmVyKCk7XG4gICAgICBzb3VuZC5fcGFubmVyLnBhbi5zZXRWYWx1ZUF0VGltZShzb3VuZC5fc3RlcmVvLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICB9XG5cbiAgICBzb3VuZC5fcGFubmVyLmNvbm5lY3Qoc291bmQuX25vZGUpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBjb25uZWN0aW9ucy5cbiAgICBpZiAoIXNvdW5kLl9wYXVzZWQpIHtcbiAgICAgIHNvdW5kLl9wYXJlbnQucGF1c2Uoc291bmQuX2lkLCB0cnVlKS5wbGF5KHNvdW5kLl9pZCwgdHJ1ZSk7XG4gICAgfVxuICB9O1xufSkoKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTApKSlcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFt7XCJhdWRpb0ZpbGVcIjpcImJvbGxuYXNCdXMubXAzXCIsXCJzcGVjdHJ1bVwiOlt7XCJmcmVxXCI6MTcyLjI2NTYyNSxcIm1hZ25pdHVkZVwiOi0xNy4zOTk3NDZ9LHtcImZyZXFcIjo2NC41OTk2MDksXCJtYWduaXR1ZGVcIjotMjEuOTY4Mjl9LHtcImZyZXFcIjozNjYuMDY0NDUzLFwibWFnbml0dWRlXCI6LTMyLjUyODA0OX0se1wiZnJlcVwiOjUxNi43OTY4NzUsXCJtYWduaXR1ZGVcIjotMzguNTQyMzU4fSx7XCJmcmVxXCI6Njg5LjA2MjUsXCJtYWduaXR1ZGVcIjotMzkuMDM4NDQ1fSx7XCJmcmVxXCI6ODYxLjMyODEyNSxcIm1hZ25pdHVkZVwiOi0zOS42MzgzMTd9LHtcImZyZXFcIjo3NzUuMTk1MzEyLFwibWFnbml0dWRlXCI6LTM5LjY2NjU1fSx7XCJmcmVxXCI6OTkwLjUyNzM0NCxcIm1hZ25pdHVkZVwiOi00MC4wMTYyMDF9LHtcImZyZXFcIjo5MjUuOTI3NzM0LFwibWFnbml0dWRlXCI6LTQwLjUxNzg5NX0se1wiZnJlcVwiOjEwOTguMTkzMzU5LFwibWFnbml0dWRlXCI6LTQxLjA2MDU5M30se1wiZnJlcVwiOjEzNTYuNTkxNzk3LFwibWFnbml0dWRlXCI6LTQxLjI3NDg3Nn0se1wiZnJlcVwiOjEyNzAuNDU4OTg0LFwibWFnbml0dWRlXCI6LTQzLjcwMjI0NH0se1wiZnJlcVwiOjE4NzMuMzg4NjcyLFwibWFnbml0dWRlXCI6LTQ0LjE2OTQyNn0se1wiZnJlcVwiOjE1MjguODU3NDIyLFwibWFnbml0dWRlXCI6LTQ1LjEzNTI4MX0se1wiZnJlcVwiOjE2MzYuNTIzNDM4LFwibWFnbml0dWRlXCI6LTQ1LjY1MzczNn0se1wiZnJlcVwiOjE3NDQuMTg5NDUzLFwibWFnbml0dWRlXCI6LTQ1Ljc5MDA1OH1dfSx7XCJhdWRpb0ZpbGVcIjpcImNvb3AubXAzXCIsXCJzcGVjdHJ1bVwiOlt7XCJmcmVxXCI6ODYuMTMyODEyLFwibWFnbml0dWRlXCI6LTI4LjkzMjUzN30se1wiZnJlcVwiOjIzNi44NjUyMzQsXCJtYWduaXR1ZGVcIjotMzIuMzI3OTk1fSx7XCJmcmVxXCI6NDUyLjE5NzI2NixcIm1hZ25pdHVkZVwiOi0zNi4yODk0OX0se1wiZnJlcVwiOjM0NC41MzEyNSxcIm1hZ25pdHVkZVwiOi0zNi43ODkyNjF9LHtcImZyZXFcIjo1NTkuODYzMjgxLFwibWFnbml0dWRlXCI6LTM4LjYxNjg0fSx7XCJmcmVxXCI6NzMyLjEyODkwNixcIm1hZ25pdHVkZVwiOi0zOS40OTQ3Nzh9LHtcImZyZXFcIjo3OTYuNzI4NTE2LFwibWFnbml0dWRlXCI6LTM5LjUxMTk5M30se1wiZnJlcVwiOjEwNzYuNjYwMTU2LFwibWFnbml0dWRlXCI6LTQ4LjQyMzA4OH0se1wiZnJlcVwiOjExODQuMzI2MTcyLFwibWFnbml0dWRlXCI6LTUwLjQ4NDE4OH0se1wiZnJlcVwiOjEyNDguOTI1NzgxLFwibWFnbml0dWRlXCI6LTUwLjY2NDg0MX0se1wiZnJlcVwiOjE0NjQuMjU3ODEyLFwibWFnbml0dWRlXCI6LTUxLjA3NTczM30se1wiZnJlcVwiOjEzOTkuNjU4MjAzLFwibWFnbml0dWRlXCI6LTUxLjMyOTkwNn0se1wiZnJlcVwiOjE2NTguMDU2NjQxLFwibWFnbml0dWRlXCI6LTUxLjcyOTg5N30se1wiZnJlcVwiOjE4NTEuODU1NDY5LFwibWFnbml0dWRlXCI6LTUzLjAxNjY3OH0se1wiZnJlcVwiOjIxMTAuMjUzOTA2LFwibWFnbml0dWRlXCI6LTU1LjYyMTM2NX0se1wiZnJlcVwiOjIwMjQuMTIxMDk0LFwibWFnbml0dWRlXCI6LTU3LjU1MDU0OX1dfSx7XCJhdWRpb0ZpbGVcIjpcImNvdW50aW5nMS5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoxOTMuNzk4ODI4LFwibWFnbml0dWRlXCI6LTI2LjAxNzU2MX0se1wiZnJlcVwiOjQwOS4xMzA4NTksXCJtYWduaXR1ZGVcIjotMzUuNDc1NDAzfSx7XCJmcmVxXCI6NjAyLjkyOTY4OCxcIm1hZ25pdHVkZVwiOi00My4wMjE5Mjd9LHtcImZyZXFcIjo3OTYuNzI4NTE2LFwibWFnbml0dWRlXCI6LTQ2LjQ4MDU5OH0se1wiZnJlcVwiOjcxOTIuMDg5ODQ0LFwibWFnbml0dWRlXCI6LTUyLjMwODQ4M30se1wiZnJlcVwiOjcyMzUuMTU2MjUsXCJtYWduaXR1ZGVcIjotNTIuNjMzMzY5fSx7XCJmcmVxXCI6ODI5MC4yODMyMDMsXCJtYWduaXR1ZGVcIjotNTIuNjY5Njc4fSx7XCJmcmVxXCI6NzEwNS45NTcwMzEsXCJtYWduaXR1ZGVcIjotNTIuOTQ1MTIyfSx7XCJmcmVxXCI6NjU2Ny42MjY5NTMsXCJtYWduaXR1ZGVcIjotNTIuOTg4MDZ9LHtcImZyZXFcIjo2NTAzLjAyNzM0NCxcIm1hZ25pdHVkZVwiOi01My4xODQ5Njd9LHtcImZyZXFcIjo2NDE2Ljg5NDUzMSxcIm1hZ25pdHVkZVwiOi01My40NzM0NDZ9LHtcImZyZXFcIjo4MTgyLjYxNzE4OCxcIm1hZ25pdHVkZVwiOi01My41MzEzNTd9LHtcImZyZXFcIjo1Njg0Ljc2NTYyNSxcIm1hZ25pdHVkZVwiOi01My42MDI1MzF9LHtcImZyZXFcIjo4MTM5LjU1MDc4MSxcIm1hZ25pdHVkZVwiOi01NC4wNjI3Nzh9LHtcImZyZXFcIjo2NjUzLjc1OTc2NixcIm1hZ25pdHVkZVwiOi01NC4xNTczOTh9LHtcImZyZXFcIjo1NTc3LjA5OTYwOSxcIm1hZ25pdHVkZVwiOi01NC40NjkzODN9XX0se1wiYXVkaW9GaWxlXCI6XCJjb3VudGluZ1N2ZW5za2EubXAzXCIsXCJzcGVjdHJ1bVwiOlt7XCJmcmVxXCI6MjE1LjMzMjAzMSxcIm1hZ25pdHVkZVwiOi0xOC45NzY3Mjd9LHtcImZyZXFcIjo0MzAuNjY0MDYyLFwibWFnbml0dWRlXCI6LTIzLjgwNTE4M30se1wiZnJlcVwiOjQ3My43MzA0NjksXCJtYWduaXR1ZGVcIjotMjMuOTM3NDAzfSx7XCJmcmVxXCI6NjY3LjUyOTI5NyxcIm1hZ25pdHVkZVwiOi0zNi40NzczNTZ9LHtcImZyZXFcIjo5Nzc2LjA3NDIxOSxcIm1hZ25pdHVkZVwiOi00Ni43NzkzMTZ9LHtcImZyZXFcIjo5ODgzLjc0MDIzNCxcIm1hZ25pdHVkZVwiOi00Ni44NzI5OX0se1wiZnJlcVwiOjk5NDguMzM5ODQ0LFwibWFnbml0dWRlXCI6LTQ3Ljg0Mzc2MX0se1wiZnJlcVwiOjgxOC4yNjE3MTksXCJtYWduaXR1ZGVcIjotNDcuOTc1NTU5fSx7XCJmcmVxXCI6OTEwOC41NDQ5MjIsXCJtYWduaXR1ZGVcIjotNTAuMDY0MDE0fSx7XCJmcmVxXCI6ODY1Ni4zNDc2NTYsXCJtYWduaXR1ZGVcIjotNTAuMTQ5NjI0fSx7XCJmcmVxXCI6MjAwMi41ODc4OTEsXCJtYWduaXR1ZGVcIjotNTAuMzQzMTQ3fSx7XCJmcmVxXCI6OTcxMS40NzQ2MDksXCJtYWduaXR1ZGVcIjotNTAuNDgyMDAyfSx7XCJmcmVxXCI6NzM4NS44ODg2NzIsXCJtYWduaXR1ZGVcIjotNTAuNTU0OTA1fSx7XCJmcmVxXCI6OTE3My4xNDQ1MzEsXCJtYWduaXR1ZGVcIjotNTAuOTIxNzM0fSx7XCJmcmVxXCI6OTY0Ni44NzUsXCJtYWduaXR1ZGVcIjotNTEuMDcyMDAyfSx7XCJmcmVxXCI6MTc2NS43MjI2NTYsXCJtYWduaXR1ZGVcIjotNTEuMTAxNjAxfV19LHtcImF1ZGlvRmlsZVwiOlwiY3Jvc3N3YWxrLm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjI1Ny44MTI1LFwibWFnbml0dWRlXCI6LTM3LjY2NjcyOX0se1wiZnJlcVwiOjgyMC4zMTI1LFwibWFnbml0dWRlXCI6LTQxLjc3NzA4OH0se1wiZnJlcVwiOjc1MCxcIm1hZ25pdHVkZVwiOi00My42NDc5NzZ9LHtcImZyZXFcIjo1MzkuMDYyNSxcIm1hZ25pdHVkZVwiOi00Ny4wMzg0NDh9LHtcImZyZXFcIjoxMzgyLjgxMjUsXCJtYWduaXR1ZGVcIjotNDcuNzEzODcxfSx7XCJmcmVxXCI6OTYwLjkzNzUsXCJtYWduaXR1ZGVcIjotNDcuODE1MDg2fSx7XCJmcmVxXCI6MTQ1My4xMjUsXCJtYWduaXR1ZGVcIjotNDkuNTIxMDE1fSx7XCJmcmVxXCI6MTIxOC43NSxcIm1hZ25pdHVkZVwiOi00OS44ODYxODl9LHtcImZyZXFcIjoyOTA2LjI1LFwibWFnbml0dWRlXCI6LTUwLjI0MzcyNX0se1wiZnJlcVwiOjEyODkuMDYyNSxcIm1hZ25pdHVkZVwiOi01MC40NTU2OTJ9LHtcImZyZXFcIjoyNjI1LFwibWFnbml0dWRlXCI6LTUxLjgwMTA3NX0se1wiZnJlcVwiOjE1OTMuNzUsXCJtYWduaXR1ZGVcIjotNTEuODQ2MDk2fSx7XCJmcmVxXCI6MzAyMy40Mzc1LFwibWFnbml0dWRlXCI6LTUyLjEzNDU3MX0se1wiZnJlcVwiOjIwMzkuMDYyNSxcIm1hZ25pdHVkZVwiOi01Mi4xNDQ0ODJ9LHtcImZyZXFcIjoyMzIwLjMxMjUsXCJtYWduaXR1ZGVcIjotNTIuNjU3MDI0fSx7XCJmcmVxXCI6MTkyMS44NzUsXCJtYWduaXR1ZGVcIjotNTMuMzM4MjE5fV19LHtcImF1ZGlvRmlsZVwiOlwiZW1wdHlXb3Jkc05lYS5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoyMTUuMzMyMDMxLFwibWFnbml0dWRlXCI6LTE5LjUyMDE1OX0se1wiZnJlcVwiOjQzMC42NjQwNjIsXCJtYWduaXR1ZGVcIjotMjUuMjE5MDI1fSx7XCJmcmVxXCI6NjAyLjkyOTY4OCxcIm1hZ25pdHVkZVwiOi0zMS4xNzU1MjJ9LHtcImZyZXFcIjo2NC41OTk2MDksXCJtYWduaXR1ZGVcIjotMzUuMTkzMjc5fSx7XCJmcmVxXCI6Nzk2LjcyODUxNixcIm1hZ25pdHVkZVwiOi0zOS44NjgyNzl9LHtcImZyZXFcIjoxNzg3LjI1NTg1OSxcIm1hZ25pdHVkZVwiOi00MS4zOTExODJ9LHtcImZyZXFcIjo4ODIuODYxMzI4LFwibWFnbml0dWRlXCI6LTQyLjgyNzA0NX0se1wiZnJlcVwiOjEwNTUuMTI2OTUzLFwibWFnbml0dWRlXCI6LTQ1LjAwOTE3MX0se1wiZnJlcVwiOjE2NzkuNTg5ODQ0LFwibWFnbml0dWRlXCI6LTQ1LjAxOTQ0NH0se1wiZnJlcVwiOjExMTkuNzI2NTYyLFwibWFnbml0dWRlXCI6LTQ1LjM3NDk2Mn0se1wiZnJlcVwiOjE1NzEuOTIzODI4LFwibWFnbml0dWRlXCI6LTQ1LjM5MjM4N30se1wiZnJlcVwiOjE0MjEuMTkxNDA2LFwibWFnbml0dWRlXCI6LTQ2LjE1Njk4Mn0se1wiZnJlcVwiOjEyNzAuNDU4OTg0LFwibWFnbml0dWRlXCI6LTQ2LjM3NzIyOH0se1wiZnJlcVwiOjE4OTQuOTIxODc1LFwibWFnbml0dWRlXCI6LTQ2LjQ3MDI5NX0se1wiZnJlcVwiOjE0ODUuNzkxMDE2LFwibWFnbml0dWRlXCI6LTQ3LjI2NjM2OX0se1wiZnJlcVwiOjg2MTMuMjgxMjUsXCJtYWduaXR1ZGVcIjotNDcuNDg5NjU1fV19LHtcImF1ZGlvRmlsZVwiOlwiZmxpZ2h0TGFuZGluZy5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoxNTAuNzMyNDIyLFwibWFnbml0dWRlXCI6LTIzLjIyOTIxfSx7XCJmcmVxXCI6MzIyLjk5ODA0NyxcIm1hZ25pdHVkZVwiOi0yNy44MTc2MzN9LHtcImZyZXFcIjo4Ni4xMzI4MTIsXCJtYWduaXR1ZGVcIjotMjguNzU3ODMyfSx7XCJmcmVxXCI6ODgyLjg2MTMyOCxcIm1hZ25pdHVkZVwiOi0zNi4wNDU5MjV9LHtcImZyZXFcIjo0NTIuMTk3MjY2LFwibWFnbml0dWRlXCI6LTM2LjE2NTE0Nn0se1wiZnJlcVwiOjUxNi43OTY4NzUsXCJtYWduaXR1ZGVcIjotMzguMTkyOTA5fSx7XCJmcmVxXCI6NjQ1Ljk5NjA5NCxcIm1hZ25pdHVkZVwiOi0zOS40NzI1fSx7XCJmcmVxXCI6MTA1NS4xMjY5NTMsXCJtYWduaXR1ZGVcIjotNDAuOTE4NjEzfSx7XCJmcmVxXCI6OTkwLjUyNzM0NCxcIm1hZ25pdHVkZVwiOi00MC45NjgxODl9LHtcImZyZXFcIjo3MzIuMTI4OTA2LFwibWFnbml0dWRlXCI6LTQxLjM3OTI4fSx7XCJmcmVxXCI6Nzk2LjcyODUxNixcIm1hZ25pdHVkZVwiOi00MS41MTg5Njd9LHtcImZyZXFcIjoxNDg1Ljc5MTAxNixcIm1hZ25pdHVkZVwiOi00Mi40Mzg3ODJ9LHtcImZyZXFcIjoxMjQ4LjkyNTc4MSxcIm1hZ25pdHVkZVwiOi00NC4yODM2NjV9LHtcImZyZXFcIjoxNzY1LjcyMjY1NixcIm1hZ25pdHVkZVwiOi00NC44MzQ3NTF9LHtcImZyZXFcIjoxMTYyLjc5Mjk2OSxcIm1hZ25pdHVkZVwiOi00NS45NjE1MzZ9LHtcImZyZXFcIjoxMzU2LjU5MTc5NyxcIm1hZ25pdHVkZVwiOi00Ni41NDA1MzF9XX0se1wiYXVkaW9GaWxlXCI6XCJmcm9tQmVybGluLm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjEyOS4xOTkyMTksXCJtYWduaXR1ZGVcIjotMTkuMzM3MzI4fSx7XCJmcmVxXCI6MTcyLjI2NTYyNSxcIm1hZ25pdHVkZVwiOi0yMC4wNjExNTd9LHtcImZyZXFcIjoyMzYuODY1MjM0LFwibWFnbml0dWRlXCI6LTIxLjI0MzM4Mn0se1wiZnJlcVwiOjM2Ni4wNjQ0NTMsXCJtYWduaXR1ZGVcIjotMjUuMjQ5NjE3fSx7XCJmcmVxXCI6NDA5LjEzMDg1OSxcIm1hZ25pdHVkZVwiOi0yNS4yNTAyMDJ9LHtcImZyZXFcIjozMjIuOTk4MDQ3LFwibWFnbml0dWRlXCI6LTI1LjMyNDkzfSx7XCJmcmVxXCI6NDczLjczMDQ2OSxcIm1hZ25pdHVkZVwiOi0yNS40NzM4NjR9LHtcImZyZXFcIjo2NDUuOTk2MDk0LFwibWFnbml0dWRlXCI6LTI2LjI5MTIzN30se1wiZnJlcVwiOjYwMi45Mjk2ODgsXCJtYWduaXR1ZGVcIjotMjYuODIwNzk3fSx7XCJmcmVxXCI6OTY4Ljk5NDE0MSxcIm1hZ25pdHVkZVwiOi0yOC40MjMwNzV9LHtcImZyZXFcIjo3OTYuNzI4NTE2LFwibWFnbml0dWRlXCI6LTI4LjYxNjg2NX0se1wiZnJlcVwiOjkwNC4zOTQ1MzEsXCJtYWduaXR1ZGVcIjotMzAuMzI3MjkxfSx7XCJmcmVxXCI6MTQ2NC4yNTc4MTIsXCJtYWduaXR1ZGVcIjotMzIuNzE4NTF9LHtcImZyZXFcIjoxMTg0LjMyNjE3MixcIm1hZ25pdHVkZVwiOi0zMy41MzgzNzJ9LHtcImZyZXFcIjoxMTE5LjcyNjU2MixcIm1hZ25pdHVkZVwiOi0zMy42MzgyNjh9LHtcImZyZXFcIjoxMjcwLjQ1ODk4NCxcIm1hZ25pdHVkZVwiOi0zNC4yMDAxNzJ9XX0se1wiYXVkaW9GaWxlXCI6XCJraXRjaGVuMS5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoxMDcuNjY2MDE2LFwibWFnbml0dWRlXCI6LTIzLjAxODAzMn0se1wiZnJlcVwiOjE1MC43MzI0MjIsXCJtYWduaXR1ZGVcIjotMjMuMDYzMDkzfSx7XCJmcmVxXCI6MTA3LjY2NjAxNixcIm1hZ25pdHVkZVwiOi0yMy42ODM4MzJ9LHtcImZyZXFcIjoxNTAuNzMyNDIyLFwibWFnbml0dWRlXCI6LTIzLjg3MDY2OH0se1wiZnJlcVwiOjIzNi44NjUyMzQsXCJtYWduaXR1ZGVcIjotMjcuNTc4MDg3fSx7XCJmcmVxXCI6MjM2Ljg2NTIzNCxcIm1hZ25pdHVkZVwiOi0yOC40NTg0Mzl9LHtcImZyZXFcIjozMDEuNDY0ODQ0LFwibWFnbml0dWRlXCI6LTI4LjUyODc5NX0se1wiZnJlcVwiOjMwMS40NjQ4NDQsXCJtYWduaXR1ZGVcIjotMjkuMTQ2NDYxfSx7XCJmcmVxXCI6NDMwLjY2NDA2MixcIm1hZ25pdHVkZVwiOi0zMS4xMjI5MjV9LHtcImZyZXFcIjo0MzAuNjY0MDYyLFwibWFnbml0dWRlXCI6LTMxLjYyMDcyNn0se1wiZnJlcVwiOjUzOC4zMzAwNzgsXCJtYWduaXR1ZGVcIjotMzIuMjc5ODQ2fSx7XCJmcmVxXCI6NTM4LjMzMDA3OCxcIm1hZ25pdHVkZVwiOi0zMi43NjY3MzF9LHtcImZyZXFcIjo0OTUuMjYzNjcyLFwibWFnbml0dWRlXCI6LTMyLjc4MjEyNH0se1wiZnJlcVwiOjQ5NS4yNjM2NzIsXCJtYWduaXR1ZGVcIjotMzIuODMzODYyfSx7XCJmcmVxXCI6NjQ1Ljk5NjA5NCxcIm1hZ25pdHVkZVwiOi0zMy4xMjE2NDd9LHtcImZyZXFcIjo2NDUuOTk2MDk0LFwibWFnbml0dWRlXCI6LTMzLjIxODIzMX1dfSx7XCJhdWRpb0ZpbGVcIjpcInBlbmRlbFRhZy5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoyMzYuODY1MjM0LFwibWFnbml0dWRlXCI6LTE2LjIyMTU5Mn0se1wiZnJlcVwiOjY0LjU5OTYwOSxcIm1hZ25pdHVkZVwiOi0xOC42ODgwOTF9LHtcImZyZXFcIjo0MDkuMTMwODU5LFwibWFnbml0dWRlXCI6LTIwLjMzNjE3OH0se1wiZnJlcVwiOjU1OS44NjMyODEsXCJtYWduaXR1ZGVcIjotMjEuNjIwNTI3fSx7XCJmcmVxXCI6NjI0LjQ2Mjg5MSxcIm1hZ25pdHVkZVwiOi0yMy42ODU0Mjl9LHtcImZyZXFcIjo4NjEuMzI4MTI1LFwibWFnbml0dWRlXCI6LTI1LjA2NzYzNX0se1wiZnJlcVwiOjkyNS45Mjc3MzQsXCJtYWduaXR1ZGVcIjotMjUuODMyNjc4fSx7XCJmcmVxXCI6MTcyMi42NTYyNSxcIm1hZ25pdHVkZVwiOi0yNy4xMDk4MDJ9LHtcImZyZXFcIjoxODczLjM4ODY3MixcIm1hZ25pdHVkZVwiOi0yNy4xODk3MzV9LHtcImZyZXFcIjoxMDU1LjEyNjk1MyxcIm1hZ25pdHVkZVwiOi0yOS41MDc3Njd9LHtcImZyZXFcIjoxMjQ4LjkyNTc4MSxcIm1hZ25pdHVkZVwiOi0yOS44MDYyMTF9LHtcImZyZXFcIjoxMTQxLjI1OTc2NixcIm1hZ25pdHVkZVwiOi0zMC4wNjUxODd9LHtcImZyZXFcIjoxMzEzLjUyNTM5MSxcIm1hZ25pdHVkZVwiOi0zMC4yNTM3Njd9LHtcImZyZXFcIjoxOTE2LjQ1NTA3OCxcIm1hZ25pdHVkZVwiOi0zMC4zNjcxNjN9LHtcImZyZXFcIjoxNDIxLjE5MTQwNixcIm1hZ25pdHVkZVwiOi0zMS41Mzk3MTl9LHtcImZyZXFcIjoxNTI4Ljg1NzQyMixcIm1hZ25pdHVkZVwiOi0zMS43MjI1MDd9XX0se1wiYXVkaW9GaWxlXCI6XCJwZW5kZWxUYWcyLm1wM1wiLFwic3BlY3RydW1cIjpbe1wiZnJlcVwiOjMwMS40NjQ4NDQsXCJtYWduaXR1ZGVcIjotMjguNTg4MjU3fSx7XCJmcmVxXCI6MTUwLjczMjQyMixcIm1hZ25pdHVkZVwiOi0yOS4yOTM5OH0se1wiZnJlcVwiOjM2Ni4wNjQ0NTMsXCJtYWduaXR1ZGVcIjotMzEuNDI5OTQ3fSx7XCJmcmVxXCI6ODYuMTMyODEyLFwibWFnbml0dWRlXCI6LTMxLjk5NzM0OX0se1wiZnJlcVwiOjY4OS4wNjI1LFwibWFnbml0dWRlXCI6LTMyLjI2MjQ5N30se1wiZnJlcVwiOjc3NS4xOTUzMTIsXCJtYWduaXR1ZGVcIjotMzMuODU1NjE0fSx7XCJmcmVxXCI6NTU5Ljg2MzI4MSxcIm1hZ25pdHVkZVwiOi0zNC4xNjI1NTJ9LHtcImZyZXFcIjo5NDcuNDYwOTM4LFwibWFnbml0dWRlXCI6LTM1LjM3MDY2N30se1wiZnJlcVwiOjg2MS4zMjgxMjUsXCJtYWduaXR1ZGVcIjotMzYuNjQwNDc2fSx7XCJmcmVxXCI6MTA3Ni42NjAxNTYsXCJtYWduaXR1ZGVcIjotMzkuMDU1Mzc4fSx7XCJmcmVxXCI6MTI0OC45MjU3ODEsXCJtYWduaXR1ZGVcIjotNDAuNzQwNDk4fSx7XCJmcmVxXCI6MTMxMy41MjUzOTEsXCJtYWduaXR1ZGVcIjotNDEuMjQ4MTc3fSx7XCJmcmVxXCI6MTQ0Mi43MjQ2MDksXCJtYWduaXR1ZGVcIjotNDMuNDE1MjQ1fSx7XCJmcmVxXCI6MTU1MC4zOTA2MjUsXCJtYWduaXR1ZGVcIjotNDQuMTc0MDI2fSx7XCJmcmVxXCI6MTY1OC4wNTY2NDEsXCJtYWduaXR1ZGVcIjotNDQuNDI2MDI5fSx7XCJmcmVxXCI6MjAwMi41ODc4OTEsXCJtYWduaXR1ZGVcIjotNDUuMTM3NDA1fV19LHtcImF1ZGlvRmlsZVwiOlwic2lyZW5CaXJkcy5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjoyOTA2Ljk4MjQyMixcIm1hZ25pdHVkZVwiOi0yMy4xNTY2MjR9LHtcImZyZXFcIjo3MzIuMTI4OTA2LFwibWFnbml0dWRlXCI6LTI2LjY0NTczMX0se1wiZnJlcVwiOjMyMi45OTgwNDcsXCJtYWduaXR1ZGVcIjotMjcuNDIwOTA4fSx7XCJmcmVxXCI6OTY4Ljk5NDE0MSxcIm1hZ25pdHVkZVwiOi0yNy41MTU1MzV9LHtcImZyZXFcIjoxNzIuMjY1NjI1LFwibWFnbml0dWRlXCI6LTI3LjY4MDI2NX0se1wiZnJlcVwiOjEyOS4xOTkyMTksXCJtYWduaXR1ZGVcIjotMjcuNzU3ODUxfSx7XCJmcmVxXCI6MTkzNy45ODgyODEsXCJtYWduaXR1ZGVcIjotMjkuMDQ0ODR9LHtcImZyZXFcIjo4ODIuODYxMzI4LFwibWFnbml0dWRlXCI6LTI5LjU4MDV9LHtcImZyZXFcIjo2MDIuOTI5Njg4LFwibWFnbml0dWRlXCI6LTI5Ljg0NDYyNH0se1wiZnJlcVwiOjQ1Mi4xOTcyNjYsXCJtYWduaXR1ZGVcIjotMzAuMjM1NDd9LHtcImZyZXFcIjo1MzguMzMwMDc4LFwibWFnbml0dWRlXCI6LTMwLjcxMTMwNH0se1wiZnJlcVwiOjEwOTguMTkzMzU5LFwibWFnbml0dWRlXCI6LTMxLjA2NTI2OH0se1wiZnJlcVwiOjEzMTMuNTI1MzkxLFwibWFnbml0dWRlXCI6LTMzLjkyMzU1M30se1wiZnJlcVwiOjIxOTYuMzg2NzE5LFwibWFnbml0dWRlXCI6LTMzLjkyNzAzMn0se1wiZnJlcVwiOjIxMzEuNzg3MTA5LFwibWFnbml0dWRlXCI6LTM1LjE4ODE2fSx7XCJmcmVxXCI6MjMwNC4wNTI3MzQsXCJtYWduaXR1ZGVcIjotMzUuMjcwMzMyfV19LHtcImF1ZGlvRmlsZVwiOlwic25vdy5tcDNcIixcInNwZWN0cnVtXCI6W3tcImZyZXFcIjo2NC41OTk2MDksXCJtYWduaXR1ZGVcIjotMjkuNjc3MTY2fSx7XCJmcmVxXCI6MzQ0LjUzMTI1LFwibWFnbml0dWRlXCI6LTQwLjM0NzQ4NX0se1wiZnJlcVwiOjYwMi45Mjk2ODgsXCJtYWduaXR1ZGVcIjotNDQuMDQwNTU4fSx7XCJmcmVxXCI6Njg5LjA2MjUsXCJtYWduaXR1ZGVcIjotNDQuODk3OTE1fSx7XCJmcmVxXCI6OTI1LjkyNzczNCxcIm1hZ25pdHVkZVwiOi00OC44NzAxMDZ9LHtcImZyZXFcIjoxMjA1Ljg1OTM3NSxcIm1hZ25pdHVkZVwiOi00OS4wODYzMTl9LHtcImZyZXFcIjoxMDk4LjE5MzM1OSxcIm1hZ25pdHVkZVwiOi01MC45NzYwMTN9LHtcImZyZXFcIjoxMjkxLjk5MjE4OCxcIm1hZ25pdHVkZVwiOi01Mi4yMjQyMzZ9LHtcImZyZXFcIjoxNDIxLjE5MTQwNixcIm1hZ25pdHVkZVwiOi01My4zMzA1MjR9LHtcImZyZXFcIjoxNDg1Ljc5MTAxNixcIm1hZ25pdHVkZVwiOi01My40NzYyMTV9LHtcImZyZXFcIjoxMzc4LjEyNSxcIm1hZ25pdHVkZVwiOi01My42MTU4Mzd9LHtcImZyZXFcIjoxNjM2LjUyMzQzOCxcIm1hZ25pdHVkZVwiOi01NC41ODM5OTZ9LHtcImZyZXFcIjoxNzQ0LjE4OTQ1MyxcIm1hZ25pdHVkZVwiOi01NS4yNDEwMDV9LHtcImZyZXFcIjoxODA4Ljc4OTA2MixcIm1hZ25pdHVkZVwiOi01NS43MjYxMTZ9LHtcImZyZXFcIjoxOTM3Ljk4ODI4MSxcIm1hZ25pdHVkZVwiOi01Ny42NjUyNzZ9LHtcImZyZXFcIjoyMDI0LjEyMTA5NCxcIm1hZ25pdHVkZVwiOi01OS4yNTI4MTV9XX0se1wiYXVkaW9GaWxlXCI6XCJ3YWxraW5nSW5TdHJlZXQubXAzXCIsXCJzcGVjdHJ1bVwiOlt7XCJmcmVxXCI6MTI5LjE5OTIxOSxcIm1hZ25pdHVkZVwiOi0yNC44OTk0NzN9LHtcImZyZXFcIjoyNTguMzk4NDM4LFwibWFnbml0dWRlXCI6LTMwLjgwMDY2NX0se1wiZnJlcVwiOjIxNS4zMzIwMzEsXCJtYWduaXR1ZGVcIjotMzEuMDAzNTUzfSx7XCJmcmVxXCI6NjQuNTk5NjA5LFwibWFnbml0dWRlXCI6LTMyLjc0NjYzMn0se1wiZnJlcVwiOjkwNC4zOTQ1MzEsXCJtYWduaXR1ZGVcIjotMzUuNTQ1NTM2fSx7XCJmcmVxXCI6NjAyLjkyOTY4OCxcIm1hZ25pdHVkZVwiOi0zNS43NTU0OTd9LHtcImZyZXFcIjozNjYuMDY0NDUzLFwibWFnbml0dWRlXCI6LTM1LjkwNzEzMX0se1wiZnJlcVwiOjgzOS43OTQ5MjIsXCJtYWduaXR1ZGVcIjotMzYuMTQ2MDA0fSx7XCJmcmVxXCI6NDUyLjE5NzI2NixcIm1hZ25pdHVkZVwiOi0zNi4xNzQzNjZ9LHtcImZyZXFcIjo2ODkuMDYyNSxcIm1hZ25pdHVkZVwiOi0zNi43OTY1Mzl9LHtcImZyZXFcIjo5NjguOTk0MTQxLFwibWFnbml0dWRlXCI6LTM3LjM1MjM0NX0se1wiZnJlcVwiOjEwOTguMTkzMzU5LFwibWFnbml0dWRlXCI6LTM4LjEzMDE4NH0se1wiZnJlcVwiOjExODQuMzI2MTcyLFwibWFnbml0dWRlXCI6LTM4LjIyMjg3OH0se1wiZnJlcVwiOjExNDEuMjU5NzY2LFwibWFnbml0dWRlXCI6LTM4LjI4MzYyN30se1wiZnJlcVwiOjEzOTkuNjU4MjAzLFwibWFnbml0dWRlXCI6LTQxLjE3MDA5fSx7XCJmcmVxXCI6MTc4Ny4yNTU4NTksXCJtYWduaXR1ZGVcIjotNDMuNjUwNDg2fV19XVxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZkMlZpY0dGamF5OTFibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUlpd2lkMlZpY0dGamF6b3ZMeTkzWldKd1lXTnJMMkp2YjNSemRISmhjQ0EyWTJJeU5qQXlZemxpT0RSaU9ETXlNemd6WVNJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmRYUnBiSE11ZEhNaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzZHVjeTUwY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdlUyTmxibVV1ZEhNaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzQmhkSFJsY201ekxuUnpJaXdpZDJWaWNHRmphem92THk4dUwyNXZaR1ZmYlc5a2RXeGxjeTl0WVhKcmIzWnVMMkoxYVd4a0wybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OUhaVzVsZEdsakxuUnpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlUZVc1MGFDNTBjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12VG05cGMyVXVkSE1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDAxMWJIUnBVMkZ0Y0d4bGNpNTBjeUlzSW5kbFluQmhZMnM2THk4dkxpOXViMlJsWDIxdlpIVnNaWE12YUc5M2JHVnlMMlJwYzNRdmFHOTNiR1Z5TG1weklpd2lkMlZpY0dGamF6b3ZMeThvZDJWaWNHRmpheWt2WW5WcGJHUnBiaTluYkc5aVlXd3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNOd1pXTjBjbUZzUkdGMFlTNXFjMjl1SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJDeFBPMEZEVmtFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdGQlFVczdRVUZEVER0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEcxRFFVRXlRaXd3UWtGQk1FSXNSVUZCUlR0QlFVTjJSQ3g1UTBGQmFVTXNaVUZCWlR0QlFVTm9SRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3NFJFRkJjMFFzSzBSQlFTdEVPenRCUVVWeVNEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN096czdPenM3TzBGRE5VUkJMRTFCUVUwc1MwRkJTeXhIUVVGSE8wbEJRMW9zU1VGQlNTeEZRVUZGTEVOQlFVTXNTVUZCV1N4RlFVRlZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVYzdTVUZGTlVRc1NVRkJTU3hGUVVGRkxFTkJRVU1zU1VGQldTeEZRVUZWTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUXl4RlFVRkZPMGxCUlhSRUxFMUJRVTBzUlVGQlJTeERRVUZETEV0QlFXbENMRVZCUVU4c1JVRkJSVHRSUVVOcVF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzcEVMRU5CUVVNN1NVRkpSQ3h6UWtGQmMwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVlVzUlVGQlJUdFJRVU5xUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hIUVVGRExGRkJRVkVzUTBGQlF6dEpRVU4yUWl4RFFVRkRPMGxCUlVRc1owSkJRV2RDTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVU3VVVGRGFrTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRVZCUVVVN1dVRkRia01zVFVGQlRTeFpRVUZaTEVkQlFVY3NTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJRenRaUVVOeVF5eE5RVUZOTEdWQlFXVXNSMEZCUnl4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRE8xbEJSWHBETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRkxHVkJRV1VzUTBGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVVc1dVRkJXU3hEUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRMnBHTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5pTEVOQlFVTTdTVUZGUkN4blFrRkJaMElzUlVGQlJTeERRVUZETEZWQlFWVXNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeEZRVUZGTzFGQlEyeEVMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRkxFTkJRVU03U1VGRE5VWXNRMEZCUXp0SlFVVkVMRmRCUVZjc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNSVUZCUlR0UlFVTXpRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM3BFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUlN4RFFVRkRPMUZCUTJ4RkxFMUJRVTBzVVVGQlVTeEhRVUZITEVOQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlJTeERRVUZETzFGQlJYcEVMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkZMRU5CUVVNc1EwRkJSU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUnl4WFFVRlhMRU5CUVVVc1IwRkJSeXhUUVVGVExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnlTU3hEUVVGRE8wbEJSVVFzWjBaQlFXZEdPMGxCUTJoR0xGRkJRVkVzUlVGQlJTeERRVUZETEZkQlFWY3NSMEZCUXl4SFFVRkhMRVZCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrN1NVRkZjRVlzV1VGQldTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRlpMRVZCUVVVN1VVRkRhRU1zUlVGQlJTeEZRVUZETEU5QlFVOHNTMEZCU3l4TFFVRkxMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGREwwSXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVObUxFTkJRVU03VVVGRFJDeEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTktMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEY2tJc1EwRkJRenRKUVVOSUxFTkJRVU03UTBGRlJpeERRVUZETzNsRVFVVmhMRXRCUVVzc1JVRkJRenRCUVVWa0xFMUJRVTBzVFVGQlRTeEhRVUZITEVOQlFVTXNUMEZCYzBJc1JVRkJWU3hGUVVGRk8wbEJRM1pFTEVsQlFVa3NXVUZCV1N4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVVVzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGYUVVc1NVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRmxCUVZrc1EwRkJRenRKUVVNelF5eEpRVUZKTEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkZiRUlzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03VVVGRGVFTXNVMEZCVXl4SlFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40UWl4VFFVRlRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUld4RExFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNTVUZCU1N4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM3BDTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRXQ3hEUVVGRE8wbEJRMGdzUTBGQlF6dEJRVU5JTEVOQlFVTXNRMEZCUXp0QlFVRkJPMEZCUVVFN1FVRkZTeXhOUVVGTkxGTkJRVk1zUjBGQlJ5eERRVUZETEVsQlFXTXNSVUZCV1N4RlFVRkZPMGxCUTNCRUxFbEJRVWtzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVFTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU51Uml4RFFVRkRMRU5CUVVNN1FVRkJRVHRCUVVGQk8wRkJSVXNzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGWExFVkJRVVU3U1VGRE5VTXNhME5CUVd0RE8wbEJRMnhETEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNelF5eEpRVUZKTEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZNME1zZDBOQlFYZERPMGxCUTNoRExEWkNRVUUyUWp0SlFVTTNRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyNURMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRFppeERRVUZETzBsQlJVUXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdVVUZEZGtNc1NVRkJTU3hSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhwQ0xEUkRRVUUwUXp0UlFVTTFReXcyUWtGQk5rSTdVVUZETjBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYUVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU5tTEVOQlFVTTdTVUZEU0N4RFFVRkRPMGxCUlVRc2EwTkJRV3RETzBsQlEyeERMRFJDUVVFMFFqdEpRVU0xUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMlFzUTBGQlF5eERRVUZETzBGQlFVRTdRVUZCUVR0QlFVVkxMRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVGQk8wRkJRVUU3UVVGRk9VUXNUVUZCVFN4M1FrRkJkMElzUjBGQlJ5eERRVUZGTEZOQlFXbENMRVZCUVVVc1RVRkJZeXhGUVVGWExFVkJRVVU3U1VGRGRFWXNUVUZCVFN4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVVVzUTBGQlF5eEpRVUZKTEVWQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTTdTVUZGY2tjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRka01zUTBGQlF5eERRVUZETzBGQlFVRTdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3UVVNeFJ6UkRPMEZCUTJ4Q08wRkJRMGs3UVVGRFZUdEJRVVZrTzBGQlEzVkNPMEZCUlVvN1FVRkpPVU1zUTBGQlF6dEJRVVZHTEUxQlFVMHNZVUZCWVN4SFFVRmxPMGxCUTJoRExGVkJRVlVzUlVGQlJTeFZRVUZWTzBOQlEzWkNMRU5CUVVNN1FVRkZSaXhOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFXMUNMRVZCUVVVc1JVRkJSVHRKUVVOc1F5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc2JVSkJRVXNzWVVGQllTeEZRVUZMTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJSV2hGTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVkVzTUVSQlFWa3NRMEZCUXp0SlFVVTFReXhSUVVGUk8wbEJRMUlzVFVGQlRTeGpRVUZqTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUXpGQ0xFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NXVUZCV1N4RlFVRkZMRU5CUVVNN1NVRkZia01zVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZET1VRc1NVRkJTU3gxUkVGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVTnVRaXhEUVVGRE8wbEJSVVlzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSenRSUVVOMlFpeFBRVUZQTEVWQlFVVTdXVUZEVUN3MFJFRkJORVE3V1VGRE5VUXNORVJCUVRSRU8xbEJRelZFTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFhRVUZYTEVOQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRk8xbEJRM3BFTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFhRVUZYTEVOQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRk8xbEJRM3BFTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVVc1RVRkJUU3hEUVVGRExGVkJRVlVzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdXVUZET1VRc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4SFFVRkhMR2RDUVVGblFpeERRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSVHRUUVVNdlJEdExRVU5HTEVOQlFVTTdTVUZEUml4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExIVkVRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzT0VSQlFWa3NRMEZCUlN4UFFVRlBMRVZCUVVVc1owSkJRV2RDTEVOQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3gxUkVGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla29zVFVGQlRTeGhRVUZoTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3c0UkVGQldTeERRVUZETEU5QlFVOHNSVUZCUlR0UlFVTnVSaXhQUVVGUExFVkJRVVU3V1VGRFVDeEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkZMRTFCUVUwc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVU3VTBGRGFrVTdTMEZEUml4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOS0xFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NPRVJCUVZrc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGREwwTXNUMEZCVHl4RlFVRkZPMWxCUTFBc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4SFFVRkhMR05CUVdNc1EwRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVTdVMEZETTBRN1MwRkRSaXhEUVVGRExFTkJRVU03U1VGRlNDeE5RVUZOTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJSU3hIUVVGSExFVkJRVVVzUTBGRGRrTXNTVUZCU1N4eFJFRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVU51UWl4RFFVRkRPMGxCUlVZc1RVRkJUU3hUUVVGVExFZEJRVWNzUjBGQlJ5eEZRVUZGTzFGQlEzSkNMRTFCUVUwc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU53UWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUTNwQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTTNReXhOUVVGTkxFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVNelFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVOU0xFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRE8yZENRVU5vUWl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEZOQlFWTTdaMEpCUXpGQ0xFZEJRVWNzUlVGQlJTeEhRVUZITzJkQ1FVTlNMRWxCUVVrc1JVRkJSU3hSUVVGUk8yRkJRMllzUTBGQlF5eERRVUZETzFGQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hWUVVGVkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNORVZCUVRSRk8wbEJRMmhKTEVOQlFVTXNRMEZCUXp0SlFVVkdMRTFCUVUwc1UwRkJVeXhIUVVGSExFZEJRVWNzUlVGQlJUdFJRVU55UWl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEZWtJc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xRkJRMmhETEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhwUWtGQmFVSXNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc05rWkJRVFpHTzFGQlF6TktMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFZEJRVWNzU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVNc1EwRkJReXhEUVVGRE8wbEJRemxFTEVOQlFVTXNRMEZCUXp0SlFVVkdMRWxCUVVrc1YwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVVZ3UWl4SlFVRkpMRzFDUVVGdFFpeEhRVUZITEV0QlFVc3NRMEZCUXp0SlFVTm9ReXhKUVVGSkxHbENRVUZwUWl4SFFVRkhMRXRCUVVzc1EwRkJRenRKUVVNNVFpeE5RVUZOTEZsQlFWa3NSMEZCUnl4SFFVRkhMRVZCUVVVN1VVRkRlRUlzTmtWQlFUWkZPMUZCUXpkRkxFMUJRVTBzWVVGQllTeEhRVUZITEhWRVFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6TkRMRTFCUVUwc1dVRkJXU3hIUVVGSExIVkVRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJSVEZETEVWQlFVVXNSVUZCUXl4aFFVRmhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla01zYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRek5DTEZOQlFWTXNSVUZCUlN4RFFVRkRPMWxCUTFvc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdG5Ra0ZGV2l4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRkxGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRVVVzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRkxFTkJRVU03WjBKQlEzWkdMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVVc1EwRkJRenRaUVVOeVJDeERRVUZETEVWQlEwUXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkRWaXhEUVVGRE8xbEJSVVlzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTm1MRU5CUVVNN1VVRkZSQ3hGUVVGRkxFVkJRVU1zV1VGQldTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzUkRMRk5CUVZNc1JVRkJSU3hEUVVGRE8xRkJRMlFzUTBGQlF6dFJRVVZFTEcxQ1FVRnRRaXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU0xUWl4WFFVRlhMRWRCUVVjc1owWkJRWGRDTEVOQlFVTXNWMEZCVnl4RlFVRkZMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRkxDdEpRVUVyU1R0UlFVTXZTU3hOUVVGTkxHZENRVUZuUWl4SFFVRkhMR2xDUVVGcFFpeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMUZCUTNoRUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZEZUVNc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZGTEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVVXNRMEZCUXp0UlFVVTFSaXd3UlVGQk1FVTdVVUZETVVVc1RVRkJUU3hOUVVGTkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1VVRkJVVHRoUVVOeVF5eE5RVUZOTEVOQlFVVXNRMEZCUXl4TFFVRnBRaXhGUVVGRkxFZEJRV0VzUlVGQlJTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUjBGQlJ5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRkxFZEJRVWNzUTBGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRExFTkJRVU1zUTBGQlF6dGhRVU5xU1N4SFFVRkhMRU5CUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRPMkZCUTNKQ0xFZEJRVWNzUTBGQlJTeERRVUZGTEdGQlFYRkNMRVZCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlJTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVOc1J5eE5RVUZOTEZGQlFWRXNSMEZCUnl4aFFVRmhMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZGtNc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzcENMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNRMEZCUXp0blFrRkRiRVFzVFVGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNN1dVRkROVUlzUTBGQlF6dFpRVU5FTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVOS0xFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZEYkVJc1EwRkJRenRSUVVOSUxFTkJRVU1zUTBGQlF5eERRVU5FTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZVQ3hOUVVGTkxGZEJRVmNzUjBGQmFVSTdXVUZEYUVNc2FVSkJRV2xDTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVU4wUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlEyUXNTMEZCU3l4RFFVRkRMRVZCUVVVN1owSkJRMDRzVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkRha1lzUTBGQlF5eERRVU5HTEVOQlEwWTdXVUZEUkN4alFVRmpMRVZCUVVVc1JVRkJSVHRaUVVOc1FpeGpRVUZqTEVWQlFVVXNRMEZCUXp0WlFVTnFRaXhOUVVGTk8xbEJRMDRzYVVKQlFXbENMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJUdFpRVU5zUkN4blFrRkJaMElzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4MVJFRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVNM1F5eHBRa0ZCYVVJN1dVRkRha0lzWjBKQlFXZENPMWxCUTJoQ0xGRkJRVkVzUlVGQlJTeFpRVUZaTzFOQlEzWkNPMUZCUlVRc1lVRkJZU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlRORkxHdENRVUZyUWp0UlFVTnNRaXhKUVVGSkxIRkVRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRGFFTXNRMEZCUXl4RFFVRkRPMGxCUlVZc2FVSkJRV2xDTzBsQlEycENMRk5CUVZNc1JVRkJSU3hEUVVGRE8wRkJSV1FzUTBGQlF5eERRVUZET3l0RVFVVmhMRWRCUVVjc1JVRkJRenRCUVVOS096czdPenM3T3pzN08wRkRhRXRuUXp0QlFVbHFRanRCUVVOR08wRkJiVUowUWp0SlFVMUtMRmxCUVcxQ0xFMUJRVzlDTzFGQlEzSkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlJYSkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc2RVUkJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMUZCUTJ4R0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzZFVSQlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xRkJRMmhHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc2JVVkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4SFFVRkhMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU03VVVGRGJrUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVVXpRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRE8wbEJRM3BETEVOQlFVTTdTVUZGVFN4SlFVRkpPMUZCUTFRc1RVRkJUU3hQUVVGUExFZEJRV0VzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGJFUXNUVUZCVFN4UlFVRlJMRWRCUVdFc1QwRkJUeXhEUVVGRE8xRkJSVzVETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOV0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU4wUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTzFsQlEzWkRMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6VkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkRMRU5CUVVNc1EwRkJRenRaUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzFsQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRkRWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVVZzUkN4MVJVRkJkVVU3VVVGRGRrVXNSVUZCUlN4RlFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eEhRVUZETEVOQlFVTXNRMEZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1JDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1JVRkJSVHRuUWtGRGNrSXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTTdaMEpCUTNwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTmtMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOb1JpeERRVUZETzFGQlEwUXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkRTaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenRaUVVONlFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1VVRkRjRUlzUTBGQlF6dFJRVVZFTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVThzVlVGQlZTeERRVUZGTEV0QlFVc3NSVUZCUlN4VlFVRlZPMUZCUTI1RExFMUJRVTBzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTm9RaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZGZGtJc1owWkJRV2RHTzFGQlEyaEdMRTFCUVUwc1YwRkJWeXhIUVVGSExIVkVRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkRia1lzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlRORkxFMUJRVTBzV1VGQldTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTjRRaXhIUVVGSExFVkJRVU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RlFVRkZMRTFCUVUwc1NVRkJTU3hEUVVGRExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTTVReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZGTEZkQlFWY3NRMEZCUXl3eVJFRkJSeXhEUVVGRExHbENRVUZwUWl4SFFVRkRMRTFCUVUwc1JVRkJSU3hYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKR0xFTkJRVU03VVVGRlJDeE5RVUZOTEZsQlFWa3NSMEZCUnl4clJVRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJTeExRVUZMTEVWQlFVVXNXVUZCV1N4RFFVRkZMRU5CUVVNN1VVRkZhRVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFZc1RVRkJUU3haUVVGWkxFZEJRVWNzUTBGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlR0WlFVTnNReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGFFWXNUVUZCVFN4UlFVRlJMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXp0WlFVVXpReXhuU1VGQlowazdXVUZEYUVrc1JVRkJSU3hGUVVGRExGRkJRVkVzUzBGQlN5eFRRVUZUTEVsQlFVa3NkVVJCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOdVJDeDNRMEZCZDBNN1owSkJRM2hETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTXpSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEhRVUZETEUxQlFVMDdiMEpCUTNKQ0xFbEJRVWtzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTTNRaXhIUVVGSExFVkJRVVVzUTBGQlF6dHZRa0ZEVGl4SFFVRkhMRVZCUVVVc1NVRkJTVHRwUWtGRFZpeERRVUZETEVOQlFVTTdXVUZEVEN4RFFVRkRPMWxCUTBRc1EwRkJReXhGUVVGRkxFTkJRVU03V1VGRlNpeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1JVRkJSVHRuUWtGRGNrSXNSVUZCUlN4RlFVRkRMRlZCUVZVc1MwRkJTeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWxCUVVrc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRha2NzV1VGQldTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMmRDUVVNelFpeERRVUZETzFsQlEwZ3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZWtNc1EwRkJRenRSUVVWRUxGbEJRVmtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVVXpRaXhEUVVGRE8wbEJSVThzVlVGQlZUdFJRVU5vUWl4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRE8xRkJSVGxETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4RFFVRkZMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRE8xRkJSVE5FTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkROVU1zUTBGQlF6dERRVU5HTzBGQlFVRTdRVUZCUVRzN096czdPenM3UVVONlNFUTdRVUZCUVRzN1IwRkZSenRCUVVWSUxFMUJRVTBzVFVGQlRTeEhRVUZITEcxQ1FVRlBMRU5CUVVNc1EwRkJVeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETzBGQlEwNDdRVUZITjBJc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRVUU3UVVGQlFUdEJRVVV4UkN4TlFVRk5MRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeE5RVUZyUWl4RlFVRkZMRmRCUVcxQ08wbEJRM2hGTEVsQlFVa3NTMEZCU3l4SFFVRlhMRU5CUVVNc1EwRkJRenRKUVVOMFFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4SFFVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJSWGhFTEVWQlFVVXNSVUZCUXl4WFFVRlhMRWxCUVVrc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU0xUWl4UFFVRk5MRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMWdzVFVGQlRTeE5RVUZOTEVWQlFVVXNRMEZCUXp0UlFVTnFRaXhEUVVGRE8wbEJRMGdzUTBGQlF6dEpRVU5FTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTBvc1IwRkJSeXhGUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZEYUVNc1RVRkJUU3hOUVVGTkxFVkJRVVVzUTBGQlF6dFJRVU5xUWl4RFFVRkRPMGxCUTBnc1EwRkJRenRCUVVOSUxFTkJRVU1zUTBGQlF6dEJRVUZCTzBGQlFVRTdRVUZGU3l4TlFVRk5MRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zVDBGQlR5eE5RVUZyUWl4RlFVRkZMRmRCUVcxQ08wbEJSVEZGTEVsQlFVa3NUVUZCVFN4SFFVRkhMRWRCUVZFc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVVeFJTeEZRVUZGTEVWQlFVTXNWMEZCVnl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNUMEZCVFN4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOWUxFMUJRVTBzVFVGQlRTeEZRVUZGTEVOQlFVTTdVVUZEYWtJc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRFJDeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTktMRWRCUVVjc1JVRkJReXhKUVVGSkxFTkJRVU1zUjBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEyaERMRTFCUVUwc1RVRkJUU3hGUVVGRkxFTkJRVU03VVVGRGFrSXNRMEZCUXp0SlFVTklMRU5CUVVNN1FVRkRTQ3hEUVVGRExFTkJRVU03UVVGQlFUdEJRVUZCTzBGQlJVc3NUVUZCVFN4UFFVRlBMRWRCUVVjc2FVSkJRV2xDTEVsQlFWY3NSVUZCUlN4TFFVRmhMRVZCUVVVc1dVRkJiVUk3U1VGRGNrWXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUlRWRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRemRETEVOQlFVTXNRMEZCUXp0QlFVRkJPMEZCUVVFN1FVRkZTeXhOUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNWVUZCVlN4bFFVRXlRaXhGUVVGRkxFbEJRV003U1VGRGNFWXNTVUZCU1N4UFFVRlBMRWRCUVZrc1NVRkJTU3g1UkVGQlR5eERRVUZETEdWQlFXVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVVeFJDeEpRVUZKTEZOQlFWTXNSMEZCWVN4SlFVRkpMRU5CUVVNN1NVRkZMMElzVDBGQlRTeEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTllMRWxCUVVrc1UwRkJVeXhIUVVGUkxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkZja1FzVTBGQlV5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkZka1FzVFVGQlRTeFRRVUZUTEVOQlFVTTdTVUZEYkVJc1EwRkJRenRCUVVOSUxFTkJRVU1zUTBGQlF6dEJRVUZCTzBGQlFVRTdPenM3T3pzN1FVTTFSRVlzWlVGQlpTeHBTa0ZCTmt3c0swTkJRU3RETEcxQ1FVRnRRaXhUUVVGVExHTkJRV01zTkVKQlFUUkNMRmxCUVZrc2NVSkJRWEZDTERKRVFVRXlSQ3gxUTBGQmRVTXNjVU5CUVhGRExHOUNRVUZ2UWl4RlFVRkZMR2xDUVVGcFFpdzBSa0ZCTkVZc1pVRkJaU3gzUTBGQmQwTXNVMEZCVXl4RlFVRkZMRzFDUVVGdFFpdzRRa0ZCT0VJc2NVUkJRWEZFTERCQ1FVRXdRaXcyUTBGQk5rTXNjMEpCUVhOQ0xEWkVRVUUyUkN4WlFVRlpMR1ZCUVdVc1UwRkJVeXhwUWtGQmFVSXNhVU5CUVdsRExHbENRVUZwUWl4WlFVRlpMRlZCUVZVc2MwSkJRWE5DTEcxQ1FVRnRRaXhwUkVGQmFVUXNhVUpCUVdsQ0xHdENRVUZyUWl4aFFVRmhMRTlCUVU4c1dVRkJXU3hwUkVGQmFVUXNXVUZCV1N4WFFVRlhMRFpEUVVFMlF5eFBRVUZQTERKQ1FVRXlRaXh6UTBGQmMwTXNWMEZCVnl4dlJVRkJiMFVzSzBKQlFTdENMRmxCUVZrc1YwRkJWeXhMUVVGTExGZEJRVmNzZDBKQlFYZENMRk5CUVZNc2IwSkJRVzlDTEhGRFFVRnhReXhUUVVGVExEWkNRVUUyUWl4VFFVRlRMRVZCUVVVc2EwTkJRV3RETEZkQlFWY3NXVUZCV1N4TFFVRkxMQ3RDUVVFclFpeHRRa0ZCYlVJc1pVRkJaU3hsUVVGbExEaENRVUU0UWl4UlFVRlJMR2xDUVVGcFFpd3dSRUZCTUVRc1dVRkJXU3hKUVVGSkxEaENRVUU0UWl4MVJFRkJkVVFzTkVKQlFUUkNMR2RGUVVGblJTeFRRVUZUTEZsQlFWa3NNa0pCUVRKQ0xFdEJRVXNzVTBGQlV5eFpRVUZaTEhsQ1FVRjVRaXhqUVVGakxGVkJRVlVzV1VGQldTeFhRVUZYTEV0QlFVc3NVMEZCVXl4WlFVRlpMRXRCUVVzc0swSkJRU3RDTERoR1FVRTRSaXhWUVVGVkxHdENRVUZyUWl4blFrRkJaMElzTmtWQlFUWkZMREJDUVVFd1FpeGpRVUZqTEhOQ1FVRnpRaXhGUVVGRkxIZERRVUYzUXl3MlEwRkJOa01zV1VGQldTeEhRVUZITEVVN096czdPenM3T3p0QlEwTndjRVk3UVVGSE5VSTdTVUZOUlN4WlFVRlpMR1ZCUVRKQ0xFVkJRVVVzU1VGQll6dFJRVU55UkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExHVkJRV1VzUTBGQlF6dFJRVU5zUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEycENMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1IwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZGTEVOQlFVTTdTVUZETjBZc1EwRkJRenRKUVVkRUxEQkVRVUV3UkR0SlFVTXhSQ3h4UWtGQmNVSXNRMEZCUXl4VlFVRnZRaXhGUVVGRkxFbEJRV003VVVGRGVFUXNTVUZCU1N4TFFVRkxMRWRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zYTBKQlFXdENPMUZCUTNwRExFbEJRVWtzYjBKQlFXOUNMRWRCUVVjc1ZVRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFWY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlJTeERRVUZETzFGQlJYQkhMRWRCUVVjc1JVRkJReXhKUVVGSkxFTkJRVU1zUjBGQlF5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFZEJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU55UkN4TFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNNVJDeERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVObUxFTkJRVU03U1VGRlJDeGhRVUZoTzBsQlEySXNiVVpCUVcxR08wbEJRMjVHTEc5Q1FVRnZRaXhEUVVGRExFMUJRV2RDTEVWQlFVVXNWVUZCYzBJN1VVRkZNMFFzU1VGQlNTeHRRa0ZCYlVJc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRk5VSXNSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTnlReXhGUVVGRkxFVkJRVU1zVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE0wTXNiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eERRVUZETzFsQlF6RkNMRU5CUVVNN1dVRkZSQ3d5UkVGQk1rUTdXVUZETTBRc1JVRkJSU3hGUVVGRExFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhMUVVGTExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRemRETEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dG5Ra0ZGTDBJc2JVSkJRVzFDTEVkQlFVY3NRMEZCUXl4UlFVRlJMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYmtVc1EwRkJRenRSUVVOSUxFTkJRVU03VVVGRlJDeEpRVUZKTEhWQ1FVRjFRaXhIUVVGWExFTkJRVU1zUTBGQlF6dFJRVU40UXl4TlFVRk5MR3RDUVVGclFpeEhRVUZYTEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzFGQlJ5OUVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NkVVJCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZGTDBNc1JVRkJSU3hGUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOeVFpeDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZEVVc1EwRkJRenRSUVVORUxFbEJRVWtzUTBGQlF5eERRVUZETzFsQlEwb3NSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0blFrRkRja01zZFVSQlFYVkVPMmRDUVVOMlJDeEZRVUZGTEVWQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRmNFTXNSVUZCUlN4RlFVRkRMRTFCUVUwc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUXk5RExIVkNRVUYxUWl4SFFVRkhMRU5CUVVNc1EwRkJRenR2UWtGRE9VSXNRMEZCUXp0dlFrRkZSQ3d5UkVGQk1rUTdiMEpCUXpORUxFVkJRVVVzUlVGQlF5eE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUzBGQlN5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU5xUkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdkMEpCUlM5Q0xIVkNRVUYxUWl4SFFVRkhMRU5CUVVNc1VVRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNelJTeERRVUZETzJkQ1FVTklMRU5CUVVNN1dVRkRTQ3hEUVVGRE8xRkJRMGdzUTBGQlF6dFJRVVZFTEUxQlFVMHNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RlFVRkZMRlZCUVZVc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkZMRU5CUVVNN1NVRkRha1lzUTBGQlF6dEpRVVZFTERCRFFVRXdRenRKUVVNeFF5eDVSMEZCZVVjN1NVRkRla2NzWlVGQlpTeERRVUZETEU5QlFXMUNPMUZCUldwRExFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNeFJTeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRmFFWXNiVU5CUVcxRE8xRkJRMjVETEUxQlFVMHNRMEZCUXl4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRExFTkJRVU03U1VGRGFrUXNRMEZCUXp0SlFVVkVMR2RGUVVGblJUdEpRVU5vUlN4elFrRkJjMElzUTBGQlF5eFRRVUZ0UWl4RlFVRkZMRk5CUVcxQ08xRkJRemRFTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVWd1JDeEhRVUZITEVWQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVNc2JVSkJRVzFDTEVOQlFVTXNUVUZCVFN4SFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1dVRkRiRVFzYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnlSU3hEUVVGRE8xRkJSVVFzVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRE8wbEJRemRDTEVOQlFVTTdTVUZGUkN4dFFrRkJiVUlzUTBGQlF5eFRRVUZ0UWl4RlFVRkZMRk5CUVcxQ08xRkJRekZFTEUxQlFVMHNVVUZCVVN4SFFVRlhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzSkVMRTFCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU5vUml4TlFVRk5MRlZCUVZVc1IwRkJWeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRk5VUXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUjBGQlF5eERRVUZETEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1VVRkZNMGdzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8wbEJRekZDTEVOQlFVTTdTVUZGUkN3eVJFRkJNa1E3U1VGRE0wUXNWMEZCVnl4RFFVRkRMRXRCUVdFc1JVRkJSU3hKUVVGWk8xRkJRM0pETEVsQlFVa3NUVUZCVFN4SFFVRlhMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRmJFTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOb1FpeERRVUZETzBsQlRVUXNPRVJCUVRoRU8wbEJRemxFTEcxQ1FVRnRRaXhEUVVGRExGVkJRWE5DTEVWQlFVVXNTVUZCWXp0UlFVTjRSQ3hKUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVTVReXhIUVVGSExFVkJRVU1zU1VGQlNTeERRVUZETEVkQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU16UXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVNNVJDeERRVUZETzFGQlJVUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOb1FpeERRVUZETzBsQlJVUXNhVUpCUVdsQ0xFTkJRVU1zVlVGQmMwSXNSVUZCUlN4SlFVRmpPMUZCUTNSRUxFMUJRVTBzWjBKQlFXZENMRWRCUVZrc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU0zUlN4TlFVRk5MR2xDUVVGcFFpeEhRVUZqTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU0zUml4TlFVRk5MR05CUVdNc1IwRkJZeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VVVGRk1VVXNSMEZCUnl4RlFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1dVRkRhRVFzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEUxQlFVMHNSMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkdMRU5CUVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFZEJRVWNzWTBGQll5eERRVUZETEVOQlFVTTdVVUZETVVRc2MwUkJRWE5FTzFGQlEzUkVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZkRWNzVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wbEJRek5DTEVOQlFVTTdTVUZGUkN4WlFVRlpMRU5CUVVNc1MwRkJaVHRSUVVNeFFpdzJRMEZCTmtNN1VVRkZOME1zVFVGQlRTeFRRVUZUTEVkQlFXRXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlJTOUZMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVkVMRk5CUVZNN1VVRkRVQ3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZGYkVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEZsQlFYTkNPMWxCUXk5RExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRPMWxCUlRsQ0xFOUJRVTBzU1VGQlNTeEZRVUZGTEVOQlFVTTdaMEpCUTFnc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03WjBKQlEzQkVMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETzJkQ1FVVXpRaXhOUVVGTkxGTkJRVk1zUTBGQlF6dFpRVU5zUWl4RFFVRkRPMUZCUTBnc1EwRkJReXhEUVVGRE8wbEJRMG9zUTBGQlF6dERRVVZHTzBGQlFVRXNRMEZCUXp0QlFVVnBRanM3T3pzN096czdRVU01UzI1Q08wRkJRVUVzYlVaQlFXMUdPMEZCUTI1R0xFMUJRVTBzYlVKQlFXMUNMRWRCUVVjc1RVRkJUU3hEUVVGRExFVkJRVVU3U1VGRGJrTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1QwRkJUeXhOUVVGTkxFdEJRVXNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGRE9VTXNVMEZCVXl4SFFVRkhMRXRCUVVzc1JVRkRha0lzUzBGQlN5eEhRVUZITEVsQlFVa3NXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVOdVF5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFVkJRMjVDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUTB3c1EwRkJReXhEUVVGRE8wbEJRMG9zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUnl4RFFVRkRMRWRCUVVjc1UwRkJVeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZITEVOQlFVTTdVVUZETlVJc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNeFFpeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1NVRkRkRVVzUTBGQlF6dEpRVU5FTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRaaXhEUVVGRExFTkJRVU03UVVGSk1FSTdRVUZOTlVJN1NVRlJSU3haUVVGWkxFOUJRVThzUlVGQlJTeE5RVUZ6UWp0UlFVTjZReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0UlFVVjJRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdTVUZEY2tNc1EwRkJRenRKUVVWUExFbEJRVWs3VVVGRFZpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJRenRSUVVOc1JDeG5Sa0ZCWjBZN1VVRkZhRVlzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzFGQlF6RkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUlVGQlJTeERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUlVGQlJTeERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVVnNReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRGRrTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU55UXl4blJFRkJaMFE3VVVGRGFFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRSUVVWc1JDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMSFZFUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzFGQlEzQklMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRMMElzUTBGQlF6dEpRVVZOTEVsQlFVa3NRMEZCUXl4SFFVRnBRanRSUVVNelFpeE5RVUZOTEVWQlFVTXNTVUZCU1N4SFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFZEJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NSMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGRExFTkJRVU1zUlVGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTTNReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZGV2l4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGFFSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVVjJReXhIUVVGSExFTkJRVU1zVlVGQlZTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZGTEVOQlFVTTdVVUZEYWtZc01rTkJRVEpETzFGQlF6TkRMRVZCUVVVc1JVRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzFsQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1IwRkJReXhKUVVGSkxFTkJRVU03VVVGRGFFTXNSVUZCUlN4RlFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03V1VGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4SFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOcVF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlF6VkNMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVWQlFVVXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJSU3hEUVVGRE8xRkJSM3BJTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOb1FpeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM3BDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzUjBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJSV2hETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVTBzU1VGQlNTeERRVUZETEVsQlFVazdVVUZEWkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NSMEZCUXl4SFFVRkhMRU5CUVVVc1EwRkJRenRSUVVNelJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSMEZCUnl4RFFVRkZMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVVVzUTBGQlF5eERRVUZETzFGQlJUbEVMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRFpDeERRVUZETzBOQlJVWTdRVUZGUkN4NVJFRkJaU3hMUVVGTExFVkJRVU03T3pzN096czdPMEZETVVaeVFqdEJRVUZCTEcxR1FVRnRSanRCUVVOdVJpeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExFMUJRVTBzUTBGQlF5eEZRVUZGTzBsQlEyNURMRWxCUVVrc1EwRkJReXhIUVVGSExFOUJRVThzVFVGQlRTeExRVUZMTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlF6bERMRk5CUVZNc1IwRkJSeXhMUVVGTExFVkJRMnBDTEV0QlFVc3NSMEZCUnl4SlFVRkpMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGRGJrTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUjBGQlJ5eEZRVU51UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVOTUxFTkJRVU1zUTBGQlF6dEpRVU5LTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVjc1EwRkJReXhIUVVGSExGTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUnl4RFFVRkRPMUZCUXpWQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRE1VSXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSU3hEUVVGRE8wbEJRM1JGTEVOQlFVTTdTVUZEUkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRMllzUTBGQlF5eERRVUZETzBGQlZVWXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM2hDTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzV1VGQldTeERRVUZETEVWQlFVVTdTVUZEY0VNc1NVRkJTU3hQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETzBsQlEyeENMRWxCUVVrc1NVRkJTU3hIUVVGSExGbEJRVmtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJoRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NWVUZCVXl4RFFVRkRPMUZCUXpWQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6bERMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZEYkVNc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGJFTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzFsQlF6bERMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VJc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMR2REUVVGblF6dFJRVU4wUkN4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVORUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEYUVJc1EwRkJReXhEUVVGRE8wRkJSVVk3U1VGVlJTeFpRVUZaTEU5QlFVOHNSVUZCUlN4TlFVRnpRanRSUVVONlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVWMlFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVVZQTEVsQlFVazdVVUZEVml4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU5xUkN4blJrRkJaMFk3VVVGRmFFWXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMUZCUXpGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJRenRSUVVNM1FpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRSUVVOcVJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhWUVVGVkxFTkJRVU03VVVGRkwwSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU03VVVGRGJFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzFGQlJXeERMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVONlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEY2tNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRMnhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTnNReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRGJrTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRSUVVWb1JDeHpTRUZCYzBnN1VVRkRkRWdzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU12UWl4RFFVRkRPMGxCUlUwc1NVRkJTU3hEUVVGRExFZEJRV2xDTzFGQlF6TkNMRTFCUVUwc1JVRkJReXhKUVVGSkxFZEJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVkQlFVTXNRMEZCUXl4RlFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRemRETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVWYUxFbEJRVWtzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTm1MSGxEUVVGNVF6dFJRVU42UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGRE4wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVVTFRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM0JETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZET1VJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVVM1FpeEhRVUZITEVOQlFVTXNWVUZCVlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkZMRU5CUVVNN1VVRkRha1lzTWtOQlFUSkRPMUZCUXpORExFVkJRVVVzUlVGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMWxCUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUjBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEYUVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVNMVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEycERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZITjBZc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeEhRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJSV3hFTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVTBzU1VGQlNUdFJRVU5VTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZGTEVOQlFVTTdVVUZEZGtVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dEpRVU5rTEVOQlFVTTdRMEZGUmp0QlFVVm5RanM3T3pzN096czdPenM3UVVOdVNHMUNPMEZCUTFJN1FVRlJOVUk3U1VGTlJTeFpRVUZaTEU5QlFVOHNSVUZCUlN4SFFVRXlRanRSUVVNNVF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOMlFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZGTEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTERSRFFVRkpMRU5CUVVNc1JVRkJReXhIUVVGSExFVkJRVVVzV1VGQldTeERRVUZETEV0QlFVc3NSVUZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1NVRkRha2tzUTBGQlF6dEpRVVZOTEVsQlFVa3NRMEZCUXl4SFFVRnBRanRSUVVNelFpeE5RVUZOTEVWQlFVTXNTVUZCU1N4SFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFZEJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NSMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGRExFTkJRVU1zUlVGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVVTNReXhKUVVGSkxFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEWWl4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVVc1NVRkJTU3hEUVVGRkxFTkJRVU03VVVGRE1VUXNUVUZCVFN4M1FrRkJkMElzUjBGQlJ5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRelZFTEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxFdEJRVXNzUlVGQlJTeDNRa0ZCZDBJc1EwRkJSU3hEUVVGRE8xRkJRelZFTEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRkxIVkVRVUZMTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVVVzU1VGQlNTeEZRVUZGTEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVVc1JVRkJSU3gzUWtGQmQwSXNRMEZCUlN4RFFVRkRPMUZCUTJ4SUxESkRRVUV5UXp0UlFVTXpReXhGUVVGRkxFVkJRVU1zU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXp0WlFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFZEJRVU1zUjBGQlJ5eERRVUZETzFGQlF5OUNMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZGTEVOQlFVTXNSVUZCUlN4SlFVRkpMRWRCUVVjc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeDNRa0ZCZDBJc1EwRkJSU3hEUVVGRE8xRkJRM3BGTEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRkxFZEJRVWNzUlVGQlJTeDNRa0ZCZDBJc1EwRkJSU3hEUVVGRE8xRkJSelZFTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkRhRUlzV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVVc1NVRkJTU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMSGRDUVVGM1FpeERRVUZGTEVOQlFVTTdXVUZEZWtVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNXVUZCV1N4RlFVRkZMSGRDUVVGM1FpeERRVUZGTEVOQlFVTTdVVUZETTBRc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkZMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRFpEUVVFMlF6dFJRVVZ1Uml4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRMlFzUTBGQlF6dEpRVVZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1dVRkJXU3hGUVVGRkxIZENRVUYzUWp0UlFVTjBSQ3hOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETzFsQlEyaENMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZETjBJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExEWkRRVUUyUXp0UlFVVnFSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEyUXNRMEZCUXp0SlFVVlBMSFZDUVVGMVFpeERRVUZGTEVsQlFWYzdVVUZETVVNc2RVaEJRWFZJTzFGQlEzWklMRTFCUVUwc2MwSkJRWE5DTEVkQlFVY3NkVVJCUVVzc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVVXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVVXNRMEZCUXp0UlFVTXpSeXhOUVVGTkxFTkJRVU1zZFVSQlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeExRVUZMTEhOQ1FVRnpRaXhEUVVGRkxFTkJRVU03U1VGRE4wWXNRMEZCUXp0RFFVTkdPMEZCUlVRc2VVUkJRV1VzV1VGQldTeEZRVUZET3pzN096czdPemhEUTNwRU5VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RaXhOUVVGTk8wRkJRM1JDTEdkQ1FVRm5RaXhoUVVGaE8wRkJRemRDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4eFFrRkJjVUlzYzBKQlFYTkNPMEZCUXpORE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMSGxDUVVGNVFpeGpRVUZqTzBGQlEzWkRPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRkZCUVZFN1FVRkRlRUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNiVUpCUVcxQ0xITkNRVUZ6UWp0QlFVTjZRenRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVFrRkJkVUlzWTBGQll6dEJRVU55UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJPenRCUVVWQkxITkRRVUZ6UXl4TlFVRk5PMEZCUXpWRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRmRCUVZjN1FVRkRXRHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPenRCUVVWUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4MVJFRkJkVVE3TzBGQlJYWkVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTERaRlFVRTJSVHRCUVVNM1JUdEJRVU5CTEdsRVFVRnBSRHRCUVVOcVJDeG5SRUZCWjBRN1FVRkRhRVFzWjBSQlFXZEVPMEZCUTJoRUxHZEVRVUZuUkR0QlFVTm9SQ3huUkVGQlowUTdRVUZEYUVRc2EwUkJRV3RFTzBGQlEyeEVMRzFFUVVGdFJDeDFRMEZCZFVNc2RVTkJRWFZETzBGQlEycEpMRzFFUVVGdFJDeDFRMEZCZFVNc2RVTkJRWFZETzBGQlEycEpMR3RFUVVGclJEdEJRVU5zUkN4clJFRkJhMFE3UVVGRGJFUXNhMFJCUVd0RU8wRkJRMnhFTEhGRVFVRnhSQ3gzUTBGQmQwTTdRVUZETjBZN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHMUNRVUZ0UWl4elFrRkJjMEk3UVVGRGVrTTdRVUZEUVN4MVFrRkJkVUlzYVVOQlFXbERPMEZCUTNoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkN4UFFVRlBPenRCUVVWUU8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gxUWtGQmRVSXNjMEpCUVhOQ08wRkJRemRETzBGQlEwRTdRVUZEUVN4VFFVRlRPenRCUVVWVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1lVRkJZU3hQUVVGUE8wRkJRM0JDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5Ra0ZCWjBJc1QwRkJUenRCUVVOMlFpeG5Ra0ZCWjBJN1FVRkRhRUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzWjBOQlFXZERMRmxCUVZrN1FVRkROVU1zYTBOQlFXdERMR0ZCUVdFN1FVRkRMME1zYTBOQlFXdERMR0ZCUVdFN1FVRkRMME1zTkVOQlFUUkRMR3RDUVVGclFqdEJRVU01UkN3MFEwRkJORU1zYTBKQlFXdENPMEZCUXpsRUxHOURRVUZ2UXl4alFVRmpPMEZCUTJ4RUxHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExITkRRVUZ6UXl4bFFVRmxPMEZCUTNKRUxHdERRVUZyUXl4aFFVRmhPMEZCUXk5RExHdERRVUZyUXl4aFFVRmhPMEZCUXk5RE96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJMR2RDUVVGblFqdEJRVU5vUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2JVSkJRVzFDTEc5Q1FVRnZRanRCUVVOMlF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYTBOQlFXdERMRXRCUVVzN1FVRkRka003UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEdOQlFXTTdRVUZET1VJc1owSkJRV2RDTEZGQlFWRTdRVUZEZUVJc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhGQ1FVRnhRaXgxUWtGQmRVSTdRVUZETlVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXpzN1FVRkZWRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGZEJRVmM3UVVGRFdEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHRkJRV0U3UVVGRFlqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZkQlFWYzdRVUZEV0R0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN08wRkJSVlE3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGxRVUZsTzBGQlEyWTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWVVGQllUdEJRVU5pTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVVVGQlVUdEJRVU40UWl4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenM3UVVGRlZEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzYlVKQlFXMUNMR05CUVdNN1FVRkRha003UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWp0QlFVTnFRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRkZCUVZFN1FVRkRlRUlzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdPMEZCUlZRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3h0UWtGQmJVSXNZMEZCWXp0QlFVTnFRenRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRmRCUVZjN1FVRkRXRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRmxCUVZrN1FVRkROVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnpzN1FVRkZXRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHhRa0ZCY1VJc1lVRkJZVHRCUVVOc1F6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHRkJRV0U3UVVGRFlqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenM3UVVGRlZEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXhqUVVGak8wRkJRMnBETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRkZCUVZFN1FVRkRlRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xHRkJRV0U3UVVGRE4wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h0UWtGQmJVSXNZMEZCWXp0QlFVTnFRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlowSXNXVUZCV1R0QlFVTTFRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYT3p0QlFVVllPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxIRkNRVUZ4UWl4aFFVRmhPMEZCUTJ4RE8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRmxCUVZrN1FVRkROVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE96dEJRVVZVTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaVHRCUVVObU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4WFFVRlhPMEZCUTFnN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFTeG5Ra0ZCWjBJc1QwRkJUenRCUVVOMlFpeG5Ra0ZCWjBJc1VVRkJVVHRCUVVONFFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeDFRa0ZCZFVJN1FVRkRNVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVDBGQlR6dEJRVU4yUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeHBRa0ZCYVVJN1FVRkRjRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0RVFVRnJSRHRCUVVOc1JEczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGxRVUZsTEhkQ1FVRjNRanRCUVVOMlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xGTkJRVk03UVVGRGVrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ0xFOUJRVTg3UVVGRGRrSXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzTkVKQlFUUkNMREpDUVVFeVFpeEpRVUZKTEdWQlFXVTdRVUZETVVVN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3huUWtGQlowSXNUMEZCVHp0QlFVTjJRaXhuUWtGQlowSXNVMEZCVXp0QlFVTjZRaXhuUWtGQlowSXNUMEZCVHp0QlFVTjJRaXhuUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUlzYVVKQlFXbENPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUlzWlVGQlpUdEJRVU5vUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENMRk5CUVZNN1FVRkRla0lzWjBKQlFXZENMRTlCUVU4N1FVRkRka0lzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTEU5QlFVODdRVUZEZGtJc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNhVU5CUVdsRExFMUJRVTA3UVVGRGRrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hYUVVGWE96dEJRVVZZTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2RDUVVGblFqdEJRVU5vUWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3huUWtGQlowSXNUVUZCVFR0QlFVTjBRaXhuUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3huUWtGQlowSXNUMEZCVHp0QlFVTjJRaXhuUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ0xHZENRVUZuUWl4UFFVRlBPMEZCUTNaQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeDFRa0ZCZFVJN1FVRkRNVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzVFVGQlRUdEJRVU4wUWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4dFFrRkJiVUlzZFVKQlFYVkNPMEZCUXpGRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeGxRVUZsTEhWQ1FVRjFRanRCUVVOMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxIRkRRVUZ4UXl4TlFVRk5PMEZCUXpORE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzVDBGQlR6dEJRVU4yUWl4blFrRkJaMElzVFVGQlRUdEJRVU4wUWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhGQ1FVRnhRaXgxUWtGQmRVSTdRVUZETlVNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xFMUJRVTA3UVVGRGRFSXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFTeG5Ra0ZCWjBJc1QwRkJUenRCUVVOMlFpeG5Ra0ZCWjBJN1FVRkRhRUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHRkJRV0VzYTBSQlFXdEVMRVZCUVVVN1FVRkRha1U3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1lVRkJZU3hQUVVGUE8wRkJRM0JDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5Ra0ZCWjBJN1FVRkRhRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEVzWjBKQlFXZENPMEZCUTJoQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNNRUpCUVRCQ08wRkJRekZDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWTBGQll5eExRVUZMTzBGQlEyNUNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc2EwSkJRV3RDTEVkQlFVYzdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMR1ZCUVdVN1FVRkRiRU03UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRTlCUVU4N1FVRkRja0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRmxCUVZrN1FVRkRNVUlzWTBGQll5eExRVUZMTzBGQlEyNUNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRU3hMUVVGTE8wRkJRMHc3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR05CUVdNc1MwRkJTenRCUVVOdVFpeGpRVUZqTEU5QlFVODdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h6UWtGQmMwSTdRVUZEZEVJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVUZCTzBGQlEwdzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITERCRFFVRXdRenRCUVVNM1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenM3TzBGQlIwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hqUVVGakxFOUJRVTg3UVVGRGNrSXNZMEZCWXl4alFVRmpPMEZCUXpWQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEc5RFFVRnZReXhOUVVGTk8wRkJRekZETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRmpMRTlCUVU4N1FVRkRja0lzWTBGQll5eFBRVUZQTzBGQlEzSkNMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEdGQlFXRTdRVUZETTBJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNUMEZCVHp0QlFVTnlRaXhqUVVGakxFOUJRVTg3UVVGRGNrSXNZMEZCWXl4UFFVRlBPMEZCUTNKQ0xHTkJRV01zWVVGQllUdEJRVU16UWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGpRVUZqTEZOQlFWTTdRVUZEZGtJc1kwRkJZenRCUVVOa08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4elEwRkJjME1zWlVGQlpUdEJRVU55UkN4blEwRkJaME1zV1VGQldUdEJRVU0xUXl4blJFRkJaMFFzYjBKQlFXOUNPenRCUVVWd1JUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPenRCUVVWSU8wRkJRMEU3UVVGRFFTeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNXVUZCV1R0QlFVTXhRanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE96dEJRVVZRTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSXNZMEZCWXp0QlFVTXZRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaVHRCUVVObU8wRkJRMEU3UVVGRFFTeGhRVUZoTzBGQlEySTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR05CUVdNc1QwRkJUenRCUVVOeVFpeGpRVUZqTEU5QlFVODdRVUZEY2tJc1kwRkJZeXhQUVVGUE8wRkJRM0pDTEdOQlFXTXNUMEZCVHp0QlFVTnlRaXhqUVVGakxGZEJRVmM3UVVGRGVrSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHpzN1FVRkZVRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xHTkJRV003UVVGREwwSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdOQlFXTXNUMEZCVHp0QlFVTnlRaXhqUVVGakxFOUJRVTg3UVVGRGNrSXNZMEZCWXl4UFFVRlBPMEZCUTNKQ0xHTkJRV01zVDBGQlR6dEJRVU55UWl4alFVRmpMRmRCUVZjN1FVRkRla0k3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6czdRVUZGVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENMR05CUVdNN1FVRkRMMEk3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1kwRkJZeXhaUVVGWk8wRkJRekZDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUlzWTBGQll6dEJRVU12UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRk5CUVZNN1FVRkRka0lzWTBGQll6dEJRVU5rTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZIT3p0QlFVVklPMEZCUTBFN1FVRkRRU3hqUVVGakxGTkJRVk03UVVGRGRrSXNZMEZCWXp0QlFVTmtPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRmpMRTFCUVUwN1FVRkRjRUlzWVVGQllTeFBRVUZQTzBGQlEzQkNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdPenM3T3pzN08wRkRkRFJHUkRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZET3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzTkVOQlFUUkRPenRCUVVVMVF6czdPenM3T3p0QlEzQkNRU3h0UWtGQmJVSXNNRU5CUVRCRExIbERRVUY1UXl4RlFVRkZMSFZEUVVGMVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSFZEUVVGMVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMRVZCUVVVc2IwTkJRVzlETEhkRFFVRjNReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxFVkJRVVVzZVVOQlFYbERMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTEVWQlFVVXNLME5CUVN0RExIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMRVZCUVVVc2VVTkJRWGxETEhWRFFVRjFReXhGUVVGRkxIVkRRVUYxUXl4RlFVRkZMR3REUVVGclF5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSFZEUVVGMVF5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxITkRRVUZ6UXl4RlFVRkZMSE5EUVVGelF5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxHMURRVUZ0UXl4RlFVRkZMSE5EUVVGelF5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxFVkJRVVVzTmtOQlFUWkRMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEVWQlFVVXNOa05CUVRaRExIZERRVUYzUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIVkRRVUYxUXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMRVZCUVVVc01FTkJRVEJETEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxFVkJRVVVzZDBOQlFYZERMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEVWQlFVVXNlVU5CUVhsRExIbERRVUY1UXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMRVZCUVVVc01FTkJRVEJETEhsRFFVRjVReXhGUVVGRkxIZERRVUYzUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxIVkRRVUYxUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxFVkJRVVVzTUVOQlFUQkRMREJEUVVFd1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTEVWQlFVVXNiME5CUVc5RExIZERRVUYzUXl4RlFVRkZMSGREUVVGM1F5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIVkRRVUYxUXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMSFZEUVVGMVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMRVZCUVVVc0swTkJRU3RETEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhkRFFVRjNReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhsRFFVRjVReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTEhWRFFVRjFReXhGUVVGRkxIbERRVUY1UXl4RlFVRkZMREJEUVVFd1F5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxEQkRRVUV3UXl4RlFVRkZMSGxEUVVGNVF5eEZRVUZGTERCRFFVRXdReXhGUVVGRkxFTWlMQ0ptYVd4bElqb2lkMjV6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJSGRsWW5CaFkydFZibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUtISnZiM1FzSUdaaFkzUnZjbmtwSUh0Y2JseDBhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNsY2JseDBYSFJrWldacGJtVW9YQ0pYVGxOY0lpd2dXMTBzSUdaaFkzUnZjbmtwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5bGNibHgwWEhSbGVIQnZjblJ6VzF3aVYwNVRYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJbGRPVTF3aVhTQTlJR1poWTNSdmNua29LVHRjYm4wcEtIUjVjR1Z2WmlCelpXeG1JQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JSE5sYkdZZ09pQjBhR2x6TENCbWRXNWpkR2x2YmlncElIdGNibkpsZEhWeWJpQmNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpSUZ4MEx5OGdWR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwZG1GeUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNZ1BTQjdmVHRjYmx4dUlGeDBMeThnVkdobElISmxjWFZwY21VZ1puVnVZM1JwYjI1Y2JpQmNkR1oxYm1OMGFXOXVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvYlc5a2RXeGxTV1FwSUh0Y2JseHVJRngwWEhRdkx5QkRhR1ZqYXlCcFppQnRiMlIxYkdVZ2FYTWdhVzRnWTJGamFHVmNiaUJjZEZ4MGFXWW9hVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHBJSHRjYmlCY2RGeDBYSFJ5WlhSMWNtNGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHVaWGh3YjNKMGN6dGNiaUJjZEZ4MGZWeHVJRngwWEhRdkx5QkRjbVZoZEdVZ1lTQnVaWGNnYlc5a2RXeGxJQ2hoYm1RZ2NIVjBJR2wwSUdsdWRHOGdkR2hsSUdOaFkyaGxLVnh1SUZ4MFhIUjJZWElnYlc5a2RXeGxJRDBnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBnUFNCN1hHNGdYSFJjZEZ4MGFUb2diVzlrZFd4bFNXUXNYRzRnWEhSY2RGeDBiRG9nWm1Gc2MyVXNYRzRnWEhSY2RGeDBaWGh3YjNKMGN6b2dlMzFjYmlCY2RGeDBmVHRjYmx4dUlGeDBYSFF2THlCRmVHVmpkWFJsSUhSb1pTQnRiMlIxYkdVZ1puVnVZM1JwYjI1Y2JpQmNkRngwYlc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1WTJGc2JDaHRiMlIxYkdVdVpYaHdiM0owY3l3Z2JXOWtkV3hsTENCdGIyUjFiR1V1Wlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrN1hHNWNiaUJjZEZ4MEx5OGdSbXhoWnlCMGFHVWdiVzlrZFd4bElHRnpJR3h2WVdSbFpGeHVJRngwWEhSdGIyUjFiR1V1YkNBOUlIUnlkV1U3WEc1Y2JpQmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmlCY2RGeDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dUlGeDBmVnh1WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsY3lCdlltcGxZM1FnS0Y5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4cFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG0wZ1BTQnRiMlIxYkdWek8xeHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JseHVJRngwTHk4Z1pHVm1hVzVsSUdkbGRIUmxjaUJtZFc1amRHbHZiaUJtYjNJZ2FHRnliVzl1ZVNCbGVIQnZjblJ6WEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFnUFNCbWRXNWpkR2x2YmlobGVIQnZjblJ6TENCdVlXMWxMQ0JuWlhSMFpYSXBJSHRjYmlCY2RGeDBhV1lvSVY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJ5aGxlSEJ2Y25SekxDQnVZVzFsS1NrZ2UxeHVJRngwWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0J1WVcxbExDQjdYRzRnWEhSY2RGeDBYSFJqYjI1bWFXZDFjbUZpYkdVNklHWmhiSE5sTEZ4dUlGeDBYSFJjZEZ4MFpXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQmNkRngwWEhSY2RHZGxkRG9nWjJWMGRHVnlYRzRnWEhSY2RGeDBmU2s3WEc0Z1hIUmNkSDFjYmlCY2RIMDdYRzVjYmlCY2RDOHZJR2RsZEVSbFptRjFiSFJGZUhCdmNuUWdablZ1WTNScGIyNGdabTl5SUdOdmJYQmhkR2xpYVd4cGRIa2dkMmwwYUNCdWIyNHRhR0Z5Ylc5dWVTQnRiMlIxYkdWelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG00Z1BTQm1kVzVqZEdsdmJpaHRiMlIxYkdVcElIdGNiaUJjZEZ4MGRtRnlJR2RsZEhSbGNpQTlJRzF2WkhWc1pTQW1KaUJ0YjJSMWJHVXVYMTlsYzAxdlpIVnNaU0EvWEc0Z1hIUmNkRngwWm5WdVkzUnBiMjRnWjJWMFJHVm1ZWFZzZENncElIc2djbVYwZFhKdUlHMXZaSFZzWlZzblpHVm1ZWFZzZENkZE95QjlJRHBjYmlCY2RGeDBYSFJtZFc1amRHbHZiaUJuWlhSTmIyUjFiR1ZGZUhCdmNuUnpLQ2tnZXlCeVpYUjFjbTRnYlc5a2RXeGxPeUI5TzF4dUlGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1Rb1oyVjBkR1Z5TENBbllTY3NJR2RsZEhSbGNpazdYRzRnWEhSY2RISmxkSFZ5YmlCblpYUjBaWEk3WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3hjYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwSUhzZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltcGxZM1FzSUhCeWIzQmxjblI1S1RzZ2ZUdGNibHh1SUZ4MEx5OGdYMTkzWldKd1lXTnJYM0IxWW14cFkxOXdZWFJvWDE5Y2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y0NBOUlGd2lYQ0k3WEc1Y2JpQmNkQzh2SUV4dllXUWdaVzUwY25rZ2JXOWtkV3hsSUdGdVpDQnlaWFIxY200Z1pYaHdiM0owYzF4dUlGeDBjbVYwZFhKdUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9YMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV6SUQwZ01TazdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2QyVmljR0ZqYXk5aWIyOTBjM1J5WVhBZ05tTmlNall3TW1NNVlqZzBZamd6TWpNNE0yRWlMQ0pjYm1OdmJuTjBJSFYwYVd4eklEMGdlMXh1SUNCdGRHOW1PaUFvYm05MFpUb2diblZ0WW1WeUtUb2diblZ0WW1WeUlEMCtJRTFoZEdndWNHOTNLRElzSUNodWIzUmxLUzh4TWlrZ0tpQTBOREFzWEc1Y2JpQWdablJ2YlRvZ0tHNXZkR1U2SUc1MWJXSmxjaWs2SUc1MWJXSmxjaUE5UGlCTllYUm9Mbk54Y25Rb2JtOTBaUzgwTkRBcEx6RXlMRnh1WEc0Z0lHTm9iMjl6WlRvZ0tHRnljbUY1T2lCQmNuSmhlVHhoYm5rK0tUb2dZVzU1SUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYbGJUV0YwYUM1bWJHOXZjaWhOWVhSb0xuSmhibVJ2YlNncElDb2dZWEp5WVhrdWJHVnVaM1JvS1YwN1hHNGdJSDBzWEc1Y2JseHVYRzRnSUdkbGRGSmhkR1ZHY205dFJuSmxjWFZsYm1OcFpYTTZJQ2htY21WeExDQmlZWE5sUm5KbGNTazZJRzUxYldKbGNpQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHWnlaWEV2WW1GelpVWnlaWEU3WEc0Z0lIMHNYRzVjYmlBZ1oyVjBRMnh2YzJWemRFMWxiV0psY2pvZ0tITjFZbXBsWTNRc0lITmxkQ2tnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJ6WlhRdWNtVmtkV05sS0NBb1lXTmpkVzBzSUcxbGJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRrUnBjM1JoYm1ObElEMGdZV05qZFcwZ0xTQnpkV0pxWldOME8xeHVJQ0FnSUNBZ1kyOXVjM1FnWTNWeWNtVnVkRVJwYzNSaGJtTmxJRDBnYldWdFltVnlJQzBnYzNWaWFtVmpkRHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRTFoZEdndVlXSnpLQ0JqZFhKeVpXNTBSR2x6ZEdGdVkyVWdLU0E4SUUxaGRHZ3VZV0p6S0NCd2NtVjJSR2x6ZEdGdVkyVWdLU0EvSUcxbGJXSmxjaUE2SUdGalkzVnRPMXh1SUNBZ0lIMHNJSE5sZEZzd1hTazdYRzRnSUgwc1hHNWNiaUFnWm1sdVpFbHVRMjlzYkdWamRHbHZiam9nS0dOdmJHeGxZM1JwYjI0c0lIQnlaV1JwWTJGMFpVWjFibU4wYVc5dUtTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiR3hsWTNScGIyNHVjbVZrZFdObEtDQW9ZV05qZFcwc0lHMWxiV0psY2lrZ1BUNGdjSEpsWkdsallYUmxSblZ1WTNScGIyNG9iV1Z0WW1WeUtTQS9JRzFsYldKbGNpQTZJR0ZqWTNWdElDazdYRzRnSUgwc1hHNWNiaUFnYldGd1ZHOUViMjFoYVc0NklDaHpaWFFzSUdSdmJXRnBiaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSE5sZEU5bVpuTmxkQ0E5SUUxaGRHZ3ViV2x1S0M0dUxtUnZiV0ZwYmlrZ0xTQk5ZWFJvTG0xcGJpZ3VMaTV6WlhRcE8xeHVJQ0FnSUdOdmJuTjBJR1J2YldGcGJsSmhibWRsSUQwZ0tDQk5ZWFJvTG0xaGVDZ3VMaTVrYjIxaGFXNHBJQzBnVFdGMGFDNXRhVzRvTGk0dVpHOXRZV2x1S1NBcE8xeHVJQ0FnSUdOdmJuTjBJSE5sZEZKaGJtZGxJRDBnS0NCTllYUm9MbTFoZUNndUxpNXpaWFFwSUMwZ1RXRjBhQzV0YVc0b0xpNHVjMlYwS1NBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhObGRDNXRZWEFvSUcxbGJXSmxjaUE5UGlCMWRHbHNjeTVuWlhSRGJHOXpaWE4wVFdWdFltVnlLQ0FvS0NBb2JXVnRZbVZ5SUMwZ1RXRjBhQzV0YVc0b0xpNHVjMlYwS1NrZ0x5QnpaWFJTWVc1blpTa2dLaUJrYjIxaGFXNVNZVzVuWlNBcElDc2djMlYwVDJabWMyVjBMQ0JrYjIxaGFXNHBLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QlVUMFJQT2lCSklHUnBaQ0IwYUdVZ2RISjFaUzltWVd4elpTQmlZV05yZDJGeVpITWdiMjRnZEdocGN5QmlkWFFnWlhabGNubDBhR2x1WnlCMWMyVnpJR2wwSUhSb2FYTWdkMkY1TGx4dUlDQm1iR2x3UTI5cGJqb2dLSEJ5YjJKaFltbHNhWFI1UFRBdU5TazZJR0p2YjJ4bFlXNGdQVDRnS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dQQ0J3Y205aVlXSnBiR2wwZVNrZ1B5Qm1ZV3h6WlNBNklIUnlkV1VzWEc1Y2JpQWdiV0ZyWlVaMWJtTjBhVzl1T2lBb2RtRnNkV1VwT2lCR2RXNWpkR2x2YmlBOVBpQjdYRzRnSUNBZ2FXWW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tDa2dQVDRnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSFYwYVd4ek8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2QybHVaR1Y0SUQwZ0tIZGxhV2RvZEhNNklFRnljbUY1UEc1MWJXSmxjajRwT2lCdWRXMWlaWElnUFQ0Z2UxeHVJQ0JzWlhRZ2MzVnRUMlpYWldsbmFIUnpJRDBnZDJWcFoyaDBjeTV5WldSMVkyVW9JQ2h3Y21WMkxDQmpkWEp5S1NBOVBpQndjbVYySUNzZ1kzVnljaWs3WEc1Y2JpQWdiR1YwSUhKaGJtUk9kVzBnUFNCTllYUm9MbkpoYm1SdmJTZ3BJQ29nYzNWdFQyWlhaV2xuYUhSek8xeHVJQ0JzWlhRZ2QyVnBaMmgwVTNWdElEMGdNRHRjYmx4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSGRsYVdkb2RITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0IzWldsbmFIUlRkVzBnS3owZ2QyVnBaMmgwYzF0cFhUdGNiaUFnSUNCM1pXbG5hSFJUZFcwZ1BTQXJkMlZwWjJoMFUzVnRMblJ2Um1sNFpXUW9NaWs3WEc1Y2JpQWdJQ0JwWmlBb2NtRnVaRTUxYlNBOFBTQjNaV2xuYUhSVGRXMHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHNXZjbTFoYkdsNlpTQTlJQ2hqYjJ4c09pQnVkVzFpWlhKYlhTazZJRzUxYldKbGNsdGRJRDArSUh0Y2JpQWdiR1YwSUdOdmJHeFRkVzBnUFNCamIyeHNMbkpsWkhWalpTZ29ZU3hpS1NBOVBpQmhLMklwTzF4dUlDQnlaWFIxY200Z1kyOXNiRk4xYlNBK0lEQWdQeUJqYjJ4c0xtMWhjQ2dnS0hkbGFXZG9kQ2tnUFQ0Z2QyVnBaMmgwSUM4Z1kyOXNiRk4xYlNrZ09pQmpiMnhzTG0xaGNDZ29LU0E5UGlBd0tUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYzBWeGRXbDJZV3hsYm5RZ1BTQW9ZU3dnWWlrNklHSnZiMnhsWVc0Z1BUNGdlMXh1SUNBdkx5QkRjbVZoZEdVZ1lYSnlZWGx6SUc5bUlIQnliM0JsY25SNUlHNWhiV1Z6WEc0Z0lIWmhjaUJoVUhKdmNITWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhoS1R0Y2JpQWdkbUZ5SUdKUWNtOXdjeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0dJcE8xeHVYRzRnSUM4dklFbG1JRzUxYldKbGNpQnZaaUJ3Y205d1pYSjBhV1Z6SUdseklHUnBabVpsY21WdWRDeGNiaUFnTHk4Z2IySnFaV04wY3lCaGNtVWdibTkwSUdWeGRXbDJZV3hsYm5SY2JpQWdhV1lnS0dGUWNtOXdjeTVzWlc1bmRHZ2dJVDBnWWxCeWIzQnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lWQnliM0J6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJSEJ5YjNCT1lXMWxJRDBnWVZCeWIzQnpXMmxkTzF4dVhHNGdJQ0FnTHk4Z1NXWWdkbUZzZFdWeklHOW1JSE5oYldVZ2NISnZjR1Z5ZEhrZ1lYSmxJRzV2ZENCbGNYVmhiQ3hjYmlBZ0lDQXZMeUJ2WW1wbFkzUnpJR0Z5WlNCdWIzUWdaWEYxYVhaaGJHVnVkRnh1SUNBZ0lHbG1JQ2hoVzNCeWIzQk9ZVzFsWFNBaFBUMGdZbHR3Y205d1RtRnRaVjBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJKWmlCM1pTQnRZV1JsSUdsMElIUm9hWE1nWm1GeUxDQnZZbXBsWTNSelhHNGdJQzh2SUdGeVpTQmpiMjV6YVdSbGNtVmtJR1Z4ZFdsMllXeGxiblJjYmlBZ2NtVjBkWEp1SUhSeWRXVTdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYlc5a0lEMGdLRzUxYlN3Z2JXOWtkV3h2S1NBOVBpQW9iblZ0SUNVZ2JXOWtkV3h2SUNzZ2JXOWtkV3h2S1NBbElHMXZaSFZzYnp0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdkbGRGTmxjWFZsYm5ScFlXeFNZVzVrYjIxSmJtUmxlQ0E5SUNnZ2JHRnpkRWx1WkdWNE9pQnVkVzFpWlhJc0lHeGxibWQwYURvZ2JuVnRZbVZ5SUNrNklHNTFiV0psY2lBOVBpQjdYRzRnSUdOdmJuTjBJSEJ2YzNOcFlteGxTVzVrWlhobGN5QTlJRUZ5Y21GNUtHeGxibWQwYUNrdVptbHNiQ2d3S1M1dFlYQW9JQ2hwZEdWdExHa3BJRDArSUdrcExtWnBiSFJsY2locGRHVnRJRDArSUdsMFpXMGdJVDA5SUd4aGMzUkpibVJsZUNrN1hHNWNiaUFnY21WMGRYSnVJSFYwYVd4ekxtTm9iMjl6WlNod2IzTnphV0pzWlVsdVpHVjRaWE1wTzF4dWZUdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwzTnlZeTkxZEdsc2N5NTBjeUlzSW1sdGNHOXlkQ0I3SUZOalpXNWxMQ0JKVTJObGJtVkRiMjVtYVdjZ2ZTQm1jbTl0SUNjdUwxTmpaVzVsSnp0Y2JtbHRjRzl5ZENCVGVXNTBhQ0JtY205dElDY3VMMU41Ym5Sb0p6dGNibWx0Y0c5eWRDQjdJRTV2YVhObElIMGdabkp2YlNBbkxpOU9iMmx6WlNjN1hHNXBiWEJ2Y25RZ1RYVnNkR2xUWVcxd2JHVnlJR1p5YjIwZ0p5NHZUWFZzZEdsVFlXMXdiR1Z5Snp0Y2JtbHRjRzl5ZENCN1NVWnlaWEZDYVc1OUlHWnliMjBnSnk0dUwzUnZiMnh6TDNOd1pXTjBjblZ0VUdWaGExQmhjbk5sY2ljN1hHNXBiWEJ2Y25RZ2RYUnBiSE1nWm5KdmJTQW5MaTkxZEdsc2N5YzdYRzVwYlhCdmNuUWdleUJuWlhSVFpYRjFaVzUwYVdGc1VtRnVaRzl0U1c1a1pYZ2dmU0JtY205dElDY3VMM1YwYVd4ekp6dGNibHh1YVcxd2IzSjBJSE53WldOMGNtRnNSR0YwWVNCbWNtOXRJQ2N1TDNOd1pXTjBjbUZzUkdGMFlTNXFjMjl1Snp0Y2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkpWMDVUUTI5dVptbG5JSHRjYmlBZ2MyRnRjR3hsVUdGMGFEb2djM1J5YVc1blhHNTlPMXh1WEc1amIyNXpkQ0JrWldaaGRXeDBRMjl1Wm1sbk9pQkpWMDVUUTI5dVptbG5JRDBnZTF4dUlDQnpZVzF3YkdWUVlYUm9PaUJjSW5OaGJYQnNaWE12WENJc1hHNTlPMXh1WEc1amIyNXpkQ0JYVGxNZ1BTQW9ZMjl1Wm1sblB6b2dTVmRPVTBOdmJtWnBaeWtnUFQ0Z2UxeHVJQ0JqYjI1bWFXY2dQU0JqYjI1bWFXY2dQeUI3TGk0dVpHVm1ZWFZzZEVOdmJtWnBaeXdnTGk0dVkyOXVabWxuZlNBNklHUmxabUYxYkhSRGIyNW1hV2M3WEc1Y2JpQWdZMjl1YzNRZ1ltRmphMmR5YjNWdVpGTmhiWEJzWlhNZ1BTQThZVzU1UG5Od1pXTjBjbUZzUkdGMFlUdGNibHh1SUNBdkx5QlRaWFIxY0Z4dUlDQmpiMjV6ZENCd2IzQjFiR0YwYVc5dVUybDZaU0E5SURFMk8xeHVJQ0JqYjI1emRDQmpiMjUwWlhoMElEMGdibVYzSUVGMVpHbHZRMjl1ZEdWNGRDZ3BPMXh1WEc0Z0lHTnZibk4wSUdOb2IzSmtUM05qYVd4c1lYUnZjbk1nUFNCQmNuSmhlU2h3YjNCMWJHRjBhVzl1VTJsNlpTa3VabWxzYkNnd0tTNXRZWEFvS0NrZ1BUNWNiaUFnSUNCdVpYY2dVM2x1ZEdnb1kyOXVkR1Y0ZENsY2JpQWdLVHRjYmx4dUlDQmpiMjV6ZENCdGRXeDBhVk5oYlhCc1pYSlBjSFJ6SUQwZ2UxeHVJQ0FnSUhOaGJYQnNaWE02SUZ0Y2JpQWdJQ0FnSUM4dmV5Qm1hV3hsY3pvZ1d5QmpiMjVtYVdjdWMyRnRjR3hsVUdGMGFDQXJJRndpY0dsd1pVY3ViWEF6WENJZ1hTd2dabkpsY1RvZ01UazVJSDBzWEc0Z0lDQWdJQ0F2TDNzZ1ptbHNaWE02SUZzZ1kyOXVabWxuTG5OaGJYQnNaVkJoZEdnZ0t5QmNJbkJwY0dWRUxtMXdNMXdpSUYwc0lHWnlaWEU2SURNd05pQjlMRnh1SUNBZ0lDQWdleUJtYVd4bGN6b2dXeUJqYjI1bWFXY3VjMkZ0Y0d4bFVHRjBhQ0FySUZ3aWNHbHdaVUV1YlhBelhDSWdYU3dnWm5KbGNUb2dORFExSUgwc1hHNGdJQ0FnSUNCN0lHWnBiR1Z6T2lCYklHTnZibVpwWnk1ellXMXdiR1ZRWVhSb0lDc2dYQ0p3YVhCbFJTNXRjRE5jSWlCZExDQm1jbVZ4T2lBMk5qWWdmU3hjYmlBZ0lDQWdJSHNnWm1sc1pYTTZJRnNnWTI5dVptbG5Mbk5oYlhCc1pWQmhkR2dnS3lCY0luQnBZVzV2TWkwek1qUXViWEF6WENJZ1hTd2dabkpsY1RvZ016STBJSDBzWEc0Z0lDQWdJQ0I3SUdacGJHVnpPaUJiSUdOdmJtWnBaeTV6WVcxd2JHVlFZWFJvSUNzZ1hDSndhV0Z1YnpNdE9ERTBMbTF3TTF3aUlGMHNJR1p5WlhFNklEZ3hOQ0I5TEZ4dUlDQWdJRjBzWEc0Z0lIMDdYRzRnSUdOdmJuTjBJRzFsYkc5a2VVOXpZMmxzYkdGMGIzSnpJRDBnUVhKeVlYa29jRzl3ZFd4aGRHbHZibE5wZW1VcExtWnBiR3dvTUNrdWJXRndLQ2dwSUQwK0lIVjBhV3h6TG1ac2FYQkRiMmx1S0NrZ1B5QnVaWGNnVFhWc2RHbFRZVzF3YkdWeUtDQmpiMjUwWlhoMExDQnRkV3gwYVZOaGJYQnNaWEpQY0hSeklDa2dPaUJ1WlhjZ1UzbHVkR2dvWTI5dWRHVjRkQ2twTzF4dUlDQmpiMjV6ZENCemIzVnlZMlZUWVcxd2JHVnpJRDBnWW1GamEyZHliM1Z1WkZOaGJYQnNaWE11YldGd0tDQnpZVzF3YkdWRVlYUmhJRDArSUc1bGR5Qk5kV3gwYVZOaGJYQnNaWElvWTI5dWRHVjRkQ3dnZTF4dUlDQWdJSE5oYlhCc1pYTTZJRnRjYmlBZ0lDQWdJSHNnWm1sc1pYTTZJRnNnWTI5dVptbG5Mbk5oYlhCc1pWQmhkR2dnS3lCellXMXdiR1ZFWVhSaExtRjFaR2x2Um1sc1pTQmRMQ0JtY21WeE9pQXhJSDBzWEc0Z0lDQWdYU3hjYmlBZ2ZTa3BPMXh1SUNCamIyNXpkQ0JzYjNkRWNtOXVaVkJzWVhsbGNpQTlJRzVsZHlCTmRXeDBhVk5oYlhCc1pYSW9ZMjl1ZEdWNGRDd2dlMXh1SUNBZ0lITmhiWEJzWlhNNklGdGNiaUFnSUNBZ0lIc2dabWxzWlhNNklGc2dZMjl1Wm1sbkxuTmhiWEJzWlZCaGRHZ2dLeUJjSW14dmQwUnliMjVsTG0xd00xd2lJRjBzSUdaeVpYRTZJREVnZlN4Y2JpQWdJQ0JkTEZ4dUlDQjlLVHRjYmx4dUlDQmpiMjV6ZENCaVpXeHNjeUE5SUVGeWNtRjVLRElwTG1acGJHd29NQ2t1YldGd0tDQW9LU0E5UGx4dUlDQWdJRzVsZHlCT2IybHpaU2hqYjI1MFpYaDBLVnh1SUNBcE8xeHVYRzRnSUdOdmJuTjBJSEJzWVhsQ1pXeHNjeUE5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCa2RYSmhkR2x2YmlBOUlEUTFPMXh1SUNBZ0lHSmxiR3h6TG1admNrVmhZMmdvSUNoaVpXeHNMQ0JwS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCeVlXNWtiMjFOZFd3Z1BTQW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlEQXVNalVwSUNzZ01UdGNiaUFnSUNBZ0lHTnZibk4wSUdaeVpYRnpJRDBnV3pJd09UQXNJREl6T1ROZE8xeHVJQ0FnSUNBZ1ltVnNiQzV3YkdGNUtIdGNiaUFnSUNBZ0lDQWdjR0Z1T2lBb2FTQXFJRElwSUMwZ01TeGNiaUFnSUNBZ0lDQWdabkpsY1RvZ1puSmxjWE5iYVYwZ0tpQnlZVzVrYjIxTmRXd3NYRzRnSUNBZ0lDQWdJSFp2YkRvZ055NDRMRnh1SUNBZ0lDQWdJQ0IwYVcxbE9pQmtkWEpoZEdsdmJpeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjMlYwVkdsdFpXOTFkQ2h3YkdGNVRtVjNVMk5sYm1Vc0lDaGtkWEpoZEdsdmJpQXJJREV5S1NBcUlERXdNREFwT3lBdkx5QlVhVzFwYm1jZ2FYTWdkMlZwY21RZ2FXNGdkR2hsSUhCc1lYbGxjaTRnVkdocGN5QnlaWE4xYkhSeklHbHVJR0VnWjJGd0lIZG9hV05vSUdseklIZG9ZWFFnU1NCM1lXNTBYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdjR3hoZVVSeWIyNWxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHeHZkMFJ5YjI1bFNYTlFiR0Y1YVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNHeGhlV2x1WnlCa2NtOXVaUzR1TGljcE8xeHVJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZXlCc2IzZEVjbTl1WlVselVHeGhlV2x1WnlBOUlHWmhiSE5sT3lCOUxDQXpNekFnS2lBeE1EQXdLVHNnTHk4Z1RHOTNJRVJ5YjI1bElHeGhjM1FnTXpBd0tqRXdNREFnYldsc2JHbHpaV052Ym1SekxDQmhaR1FnWVc0Z1pYaDBjbUVnTXpBZ2MyVmpiMjVrY3lCaFpuUmxjaUIwYnlCa1pXTnlaV0Z6WlNCeVpYQmxkR2wwYVc5dVhHNGdJQ0FnYkc5M1JISnZibVZRYkdGNVpYSXVjR3hoZVNoN1puSmxjVG9nTVN3Z2RHbHRaVG9nTXpBd0lDb2dNVEF3TUN3Z2RtOXNPaUF3TGpjd2ZTazdYRzRnSUgwN1hHNWNiaUFnYkdWMElITmhiWEJzWlVsdVpHVjRJRDBnTUR0Y2JseHVJQ0JzWlhRZ2FXNTBaWEpzZFdSbFNuVnpkRkJzWVhsbFpDQTlJR1poYkhObE8xeHVJQ0JzWlhRZ2JHOTNSSEp2Ym1WSmMxQnNZWGxwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdZMjl1YzNRZ2NHeGhlVTVsZDFOalpXNWxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDOHZJRTlqWTJGemFXOXVZV3hzZVNCM1pTQjNZVzUwSUhSdklIQmhkWE5sSUdadmNpQmhJRzF2YldWdWRDQjBieUJ3YkdGNUlHRnVJR2x1ZEdWeWJIVmtaU0JwYmlCemFXeGxibU5sWEc0Z0lDQWdZMjl1YzNRZ2NHeGhlVWx1ZEdWeWJIVmtaU0E5SUhWMGFXeHpMbVpzYVhCRGIybHVLREF1T0RBcE8xeHVJQ0FnSUdOdmJuTjBJSEJzWVhsTWIzZEVjbTl1WlNBOUlIVjBhV3h6TG1ac2FYQkRiMmx1S0RBdU9EVXBPMXh1WEc0Z0lDQWdhV1lvY0d4aGVVbHVkR1Z5YkhWa1pTQW1KaUFoYVc1MFpYSnNkV1JsU25WemRGQnNZWGxsWkNrZ2UxeHVJQ0FnSUNBZ2FXNTBaWEpzZFdSbFNuVnpkRkJzWVhsbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCd2JHRjVRbVZzYkhNb0tUdGNiaUFnSUNBZ0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJSE52ZFhKalpWTmhiWEJzWlhNdVptOXlSV0ZqYUNnZ2MyRnRjR3hsVUd4aGVXVnlJRDArSUhOaGJYQnNaVkJzWVhsbGNpNXpkRzl3S0RBc0lITmhiWEJzWlZCc1lYbGxjaTV3YkdGNVpYSnpXekJkS1NBcE8xeHVJQ0FnSUNBZ0lDQWdJR05vYjNKa1QzTmphV3hzWVhSdmNuTXVabTl5UldGamFDZ2djM2x1ZEdnZ1BUNGdjM2x1ZEdndWMzUnZjQ2d3S1NBcE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0F4TlNBcUlERXdNREJjYmlBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppaHdiR0Y1VEc5M1JISnZibVVnSmlZZ0lXeHZkMFJ5YjI1bFNYTlFiR0Y1YVc1bktTQjdYRzRnSUNBZ0lDQndiR0Y1UkhKdmJtVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBiblJsY214MVpHVktkWE4wVUd4aGVXVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2MyRnRjR3hsU1c1a1pYZ2dQU0JuWlhSVFpYRjFaVzUwYVdGc1VtRnVaRzl0U1c1a1pYZ29jMkZ0Y0d4bFNXNWtaWGdzSUdKaFkydG5jbTkxYm1SVFlXMXdiR1Z6TG14bGJtZDBhQ2s3WEc0Z0lDQWdMeTlqYjI1emRDQjBZWEpuWlhRZ1BTQmJNVGt6TENBME1qTXNJREUyTmpnc0lESXpNek1zSURJMk5qVXNJRE13Tnpnc0lEUXdNemdzSURZek1Ua3NJREU1TXlzeExDQTBNak1yTVN3Z01UWTJPQ3N4TENBeU16TXpLekVzSURJMk5qVXJNU3dnTXpBM09Dc3hMQ0EwTURNNEt6RXNJRFl6TVRrck1TQmRPeUF2THlCcGJpQm1jbVZ4ZFdWdVkzbGNiaUFnSUNCamIyNXpkQ0JpWVdOclozSnZkVzVrVTJGdGNHeGxJRDBnWW1GamEyZHliM1Z1WkZOaGJYQnNaWE5iYzJGdGNHeGxTVzVrWlhoZE8xeHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHSmhZMnRuY205MWJtUlRZVzF3YkdVdVlYVmthVzlHYVd4bEtUdGNiaUFnSUNCamIyNXpkQ0JwYm1sMGFXRnNVRzl3ZFd4aGRHbHZiaUE5SUVGeWNtRjVLRGd3S1M1bWFXeHNLQ0JpWVdOclozSnZkVzVrVTJGdGNHeGxMbk53WldOMGNuVnRMbTFoY0NnZ1ltbHVJRDArSUdKcGJpNW1jbVZ4S1NBcE8xeHVYRzRnSUNBZ0x5OGdWR0Z5WjJWMElHbHpJSFJvWlNCdmRtVnlkRzl1WlhNZ2IyWWdkR2hsSUcxdmMzUWdjSEp2YldsdVpXNTBJR1p5WlhGMVpXNWplU0JwYmlCMGFHVWdjM0JsWTNSeWRXMWNiaUFnSUNCamIyNXpkQ0IwWVhKblpYUWdQU0JpWVdOclozSnZkVzVrVTJGdGNHeGxMbk53WldOMGNuVnRYRzRnSUNBZ0lDQXVjbVZrZFdObEtDQW9ZV05qZFcwNklFbEdjbVZ4UW1sdVcxMHNJR0pwYmpvZ1NVWnlaWEZDYVc0cElEMCtJR0ZqWTNWdFd6QmRMbTFoWjI1cGRIVmtaU0E4SUdKcGJpNXRZV2R1YVhSMVpHVWdQeUJiSUdKcGJpQmRJRG9nWVdOamRXMHNJRnQ3Wm5KbGNUb2dNQ3dnYldGbmJtbDBkV1JsT2lBdE1UQXdmVjBwWEc0Z0lDQWdJQ0F1YldGd0tDQmlhVzRnUFQ0Z1ltbHVMbVp5WlhFcFhHNGdJQ0FnSUNBdWJXRndLQ0FvSUhOMGNtOXVaMlZ6ZEVaeVpYRTZJRzUxYldKbGNpQXBJRDArSUVGeWNtRjVLR0poWTJ0bmNtOTFibVJUWVcxd2JHVXVjM0JsWTNSeWRXMHViR1Z1WjNSb0tTNW1hV3hzS0RBcExtMWhjQ2dnS0dsMFpXMHNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHRnliVzl1YVdNZ1BTQnpkSEp2Ym1kbGMzUkdjbVZ4SUNvZ0tHa3JNU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2hwWjJobGMzUkdjbVZ4SUQwZ056QXdNRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhjbTF2Ym1saklENGdhR2xuYUdWemRFWnlaWEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYWnBjMjl5SUQwZ1RXRjBhQzVqWldsc0tHaGhjbTF2Ym1saklDOGdhR2xuYUdWemRFWnlaWEVwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lYSnRiMjVwWXlBdklHUnBkbWx6YjNJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHaGhjbTF2Ym1sak8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdLVnN3WFR0Y2JseHVJQ0FnSUdOdmJuTjBJSE5qWlc1bFEyOXVabWxuT2lCSlUyTmxibVZEYjI1bWFXY2dQU0I3WEc0Z0lDQWdJQ0JwYm1sMGFXRnNVRzl3ZFd4aGRHbHZiam9nYVc1cGRHbGhiRkJ2Y0hWc1lYUnBiMjR1YldGd0tGeHVJQ0FnSUNBZ0lDQnBkR1Z0SUQwK0lHbDBaVzB1YldGd0tGeHVJQ0FnSUNBZ0lDQWdJR2wwWlcweUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNoMFlYSm5aWFJiZEdGeVoyVjBMbXhsYm1kMGFDMHhYU0F0SUhSaGNtZGxkRnN3WFNrcElDc2dLSFJoY21kbGRGc3dYUzB5TUNsY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0J3YjNCMWJHRjBhVzl1VTJsNlpUb2dNVFlzWEc0Z0lDQWdJQ0J0WVhoSFpXNWxjbUYwYVc5dWN6b2dNaXhjYmlBZ0lDQWdJSFJoY21kbGRDd2dMeThnYVc0Z1puSmxjWFZsYm1ONVhHNGdJQ0FnSUNCMGFXMWxRbVYwZDJWbGJrVjJaVzUwY3pvZ0tDa2dQVDRnS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TlNrZ0t5QXhNQ3hjYmlBZ0lDQWdJR2RoY0VKbGRIZGxaVzVGZG1WdWRITTZJQ2dwSUQwK0lIVjBhV3h6TG1Ob2IyOXpaU2hiTWpVc01UQmRLU3hjYmlBZ0lDQWdJRzFsYkc5a2VVOXpZMmxzYkdGMGIzSnpMRnh1SUNBZ0lDQWdZMmh2Y21SUGMyTnBiR3hoZEc5eWN5eGNiaUFnSUNBZ0lHOXVSbWx1YVhOb09pQndiR0Y1VG1WM1UyTmxibVZjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpiM1Z5WTJWVFlXMXdiR1Z6VzNOaGJYQnNaVWx1WkdWNFhTNXdiR0Y1S0h0bWNtVnhPaUF4TENCMGFXMWxPaUEyTUNBcUlETWdLaUF4TURBd0xDQjJiMnc2SURBdU1qTjlLVHRjYmx4dUlDQWdJQzh2SUZOMFlYSjBJSFJvWlNCelkyVnVaVnh1SUNBZ0lHNWxkeUJUWTJWdVpTaHpZMlZ1WlVOdmJtWnBaeWt1Y0d4aGVTZ3BPMXh1SUNCOU8xeHVYRzRnSUM4dmNHeGhlVTVsZDFOalpXNWxLQ2s3WEc0Z0lIQnNZWGxDWld4c2N5Z3BPMXh1WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlhUbE03WEc1bGVIQnZjblFnZXlCWFRsTWdmVHRjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5M2JuTXVkSE1pTENKY2JtbHRjRzl5ZENCN0lGQnRZWEpyYjNZc0lGQm5aVzVsZEdsaklIMGdabkp2YlNBbkxpOXdZWFIwWlhKdWN5YzdYRzVwYlhCdmNuUWdVM2x1ZEdnZ1puSnZiU0FuTGk5VGVXNTBhQ2M3WEc1cGJYQnZjblFnZTBsVGIzVnVaRkJzWVhsbGNuMGdabkp2YlNBbkxpOVRiM1Z1WkZCc1lYbGxjaWM3WEc1cGJYQnZjblFnZTBsR2NtVnhRbWx1ZlNCbWNtOXRJQ2N1TGk5MGIyOXNjeTl6Y0dWamRISjFiVkJsWVd0UVlYSnpaWEluTzF4dWFXMXdiM0owSUhzZ2JXOWtJSDBnWm5KdmJTQW5MaTkxZEdsc2N5YzdYRzVwYlhCdmNuUWdkWFJwYkhNZ1puSnZiU0FuTGk5MWRHbHNjeWM3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1NWTndaV04wY25WdFEyOXVabWxuSUh0Y2JpQWdZWFZrYVc5R2FXeGxPaUJ6ZEhKcGJtY3NYRzRnSUhOd1pXTjBjblZ0T2lCSlJuSmxjVUpwYmx0ZExGeHVmVnh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUVsVFkyVnVaVU52Ym1acFp5QjdYRzRnSUhCdmNIVnNZWFJwYjI1VGFYcGxPaUJ1ZFcxaVpYSXNYRzRnSUdsdWFYUnBZV3hRYjNCMWJHRjBhVzl1T2lCaGJubGJYVnRkTEZ4dUlDQjBZWEpuWlhRNklHRnVlVnRkTENBdkx5QkpiaUJHY21WeGRXVnVZM2xjYmlBZ2JXRjRSMlZ1WlhKaGRHbHZibk02SUc1MWJXSmxjanRjYmlBZ2RHbHRaVUpsZEhkbFpXNUZkbVZ1ZEhNNklHRnVlU0I4Ym5WdFltVnlJSHdnUm5WdVkzUnBiMjRzWEc0Z0lHZGhjRUpsZEhkbFpXNUZkbVZ1ZEhNNklHRnVlU0I4SUc1MWJXSmxjaUI4SUVaMWJtTjBhVzl1TEZ4dUlDQnRaV3h2WkhsUGMyTnBiR3hoZEc5eWN6b2dTVk52ZFc1a1VHeGhlV1Z5VzEwc1hHNGdJR05vYjNKa1QzTmphV3hzWVhSdmNuTTZJRWxUYjNWdVpGQnNZWGxsY2x0ZExGeHVJQ0J2YmtacGJtbHphRG9nUm5WdVkzUnBiMjRzWEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFkyVnVaU0I3WEc0Z0lHNXZkR1Z6T2lCSmRHVnlZV0pzWlVsMFpYSmhkRzl5UEdGdWVUNDdYRzRnSUdOMWNuSmxiblJIWlc1bGNtRjBhVzl1T2lCdWRXMWlaWEk3WEc0Z0lHTnZibVpwWnpvZ1NWTmpaVzVsUTI5dVptbG5PMXh1SUNCdmJrWnBibWx6YURvZ1JuVnVZM1JwYjI0N1hHNWNiaUFnY0hWaWJHbGpJR052Ym5OMGNuVmpkRzl5S0dOdmJtWnBaem9nU1ZOalpXNWxRMjl1Wm1sbktTQjdYRzRnSUNBZ2RHaHBjeTVqYjI1bWFXY2dQU0JqYjI1bWFXYzdYRzVjYmlBZ0lDQjBhR2x6TG1OdmJtWnBaeTUwYVcxbFFtVjBkMlZsYmtWMlpXNTBjeUE5SUhWMGFXeHpMbTFoYTJWR2RXNWpkR2x2YmloMGFHbHpMbU52Ym1acFp5NTBhVzFsUW1WMGQyVmxia1YyWlc1MGN5azdYRzRnSUNBZ2RHaHBjeTVqYjI1bWFXY3VaMkZ3UW1WMGQyVmxia1YyWlc1MGN5QTlJSFYwYVd4ekxtMWhhMlZHZFc1amRHbHZiaWgwYUdsekxtTnZibVpwWnk1bllYQkNaWFIzWldWdVJYWmxiblJ6S1R0Y2JpQWdJQ0IwYUdsekxtNXZkR1Z6SUQwZ1VHZGxibVYwYVdNb1kyOXVabWxuTG1sdWFYUnBZV3hRYjNCMWJHRjBhVzl1TENCamIyNW1hV2N1ZEdGeVoyVjBLVHRjYmlBZ0lDQjBhR2x6TG1OdmJtWnBaeTV0WVhoSFpXNWxjbUYwYVc5dWN5QTlJR052Ym1acFp5NXRZWGhIWlc1bGNtRjBhVzl1Y3p0Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5SSFpXNWxjbUYwYVc5dUlEMGdNRHRjYmx4dUlDQWdJSFJvYVhNdVkyOXVabWxuTG05dVJtbHVhWE5vSUQwZ1kyOXVabWxuTG05dVJtbHVhWE5vTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhCc1lYa29LVG9nVTJObGJtVWdlMXh1SUNBZ0lHTnZibk4wSUc1bGVIUkhaVzQ2SUc1MWJXSmxjbHRkSUQwZ2RHaHBjeTV1YjNSbGN5NXVaWGgwS0NrdWRtRnNkV1U3WEc0Z0lDQWdZMjl1YzNRZ2JtVjNUbTkwWlhNNklHNTFiV0psY2x0ZElEMGdibVY0ZEVkbGJqdGNibHh1SUNBZ0lHeGxkQ0JwSUQwZ01EdGNiaUFnSUNCc1pYUWdheUE5SUNoTllYUm9MbkpoYm1SdmJTZ3BJRDRnTUM0MUtTQS9JREFnT2lBeE8xeHVJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtTm9iM0prVDNOamFXeHNZWFJ2Y25NdWJXRndLQ2h2YzJNcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHOWpkR0YyWlNBOUlFMWhkR2d1WTJWcGJDaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05TazdYRzRnSUNBZ0lDQnZjMk11Y0d4aGVTaDdabkpsY1RvZ2JtVjNUbTkwWlhOYmFWMHZiMk4wWVhabExDQjBhVzFsT2lCMGFHbHpMbU52Ym1acFp5NTBhVzFsUW1WMGQyVmxia1YyWlc1MGN5Z3BMQ0J3WVc0NklDZ29heVV5S1NveUtTQXRJREVzSUhadmJEb2dNQzR5ZlNrN0lHa3JLenNnYXlzck8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2RHaHBjeTV3YkdGNVRXVnNiMlI1S0c1bGQwNXZkR1Z6TENCMGFHbHpMbU4xY25KbGJuUkhaVzVsY21GMGFXOXVLVHRjYmx4dUlDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0owZEZUa1ZVU1VNZ1IwVk9SVkpCVkVsUFRqb2dKeXdnZEdocGN5NWpkWEp5Wlc1MFIyVnVaWEpoZEdsdmJpd2dibVY0ZEVkbGJpazdYRzRnSUNBZ2FXWW9kR2hwY3k1amRYSnlaVzUwUjJWdVpYSmhkR2x2YmlBOFBTQW9kR2hwY3k1amIyNW1hV2N1YldGNFIyVnVaWEpoZEdsdmJuTXRNU2tnS1NCN1hHNGdJQ0FnSUNCM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFZGxibVZ5WVhScGIyNHJLenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1S0NrN1hHNGdJQ0FnSUNCOUxDQW9kR2hwY3k1amIyNW1hV2N1ZEdsdFpVSmxkSGRsWlc1RmRtVnVkSE1vS1NBcklIUm9hWE11WTI5dVptbG5MbWRoY0VKbGRIZGxaVzVGZG1WdWRITW9LU2tnS2lBeE1EQXdLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxtTjFjbkpsYm5SSFpXNWxjbUYwYVc5dUt5czdYRzRnSUNBZ0lDQjBhR2x6TG1WdVpFOW1VMk5sYm1Vb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdjR3hoZVUxbGJHOWtlU2dnYm05MFpYTXNJR2RsYm1WeVlYUnBiMjRnS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ2IzSmtaWElnUFNBek8xeHVJQ0FnSUdOdmJuTjBJRzVsZDA1dmRHVnpJRDBnYm05MFpYTTdYRzVjYmlBZ0lDQXZMeUJVWVd0bGJpQm1jbTl0SUhSb1pTQnpaWEYxWlc1alpTQnZaaUJ3YVhSamFHVnpJR2x1SUZ3aVJtOXlaWFpsY2lCcGJpQkNiSFZsSUVwbFlXNXpYQ0lnWW5rZ1RtVnBiQ0JFYVdGdGIyNWtYRzRnSUNBZ1kyOXVjM1FnYVdSbFlXeE5aV3h2WkhrZ1BTQjFkR2xzY3k1dFlYQlViMFJ2YldGcGJpaGJNQ3cwTERJc01DdzNMRFFzTWl3M0xEY3NOQ3d5TERJc05DdzBMRElzTUYwc0lHNWxkMDV2ZEdWektUdGNiaUFnSUNCamIyNXpkQ0J5WVc1a2IyMVRhR2xtZEVGdGIzVnVkQ0E5SUUxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNocFpHVmhiRTFsYkc5a2VTNXNaVzVuZEdncEtUdGNibHh1SUNBZ0lHTnZibk4wSUdsdWFYUnBZV3hUZEdGMFpTQTlJRnRkTzF4dUlDQWdJR1p2Y2loc1pYUWdiMlptYzJWMElEMGdiM0prWlhJN0lHOW1abk5sZENBK1BTQXdPeUJ2Wm1aelpYUXRMU2tnZTF4dUlDQWdJQ0FnYVc1cGRHbGhiRk4wWVhSbExuQjFjMmdvSUdsa1pXRnNUV1ZzYjJSNVcyMXZaQ2h5WVc1a2IyMVRhR2xtZEVGdGIzVnVkQzF2Wm1aelpYUXNJR2xrWldGc1RXVnNiMlI1TG14bGJtZDBhQ2xkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnRZWEpyYjNaTlpXeHZaSGtnUFNCUWJXRnlhMjkyS0dsa1pXRnNUV1ZzYjJSNUxDQnZjbVJsY2l3Z2FXNXBkR2xoYkZOMFlYUmxJQ2s3WEc1Y2JpQWdJQ0JzWlhRZ2FTQTlJREE3WEc0Z0lDQWdZMjl1YzNRZ2NHeGhlVTVsZUhST2IzUmxJRDBnS0dkbGJtVnlZWFJwYjI0cElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHOWpkR0YyWlNBOUlFMWhkR2d1WTJWcGJDaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ015a2dLeUJOWVhSb0xtTmxhV3dvVFdGMGFDNXlZVzVrYjIwb0tTQXFJRE1nS1NBcklESTdYRzRnSUNBZ0lDQmpiMjV6ZENCdVpYaDBUbTkwWlNBOUlHMWhjbXR2ZGsxbGJHOWtlUzV1WlhoMEtDa3VkbUZzZFdVN1hHNWNiaUFnSUNBZ0lDOHZhV1lvYm1WNGRFNXZkR1VnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIxZEdsc2N5NW1iR2x3UTI5cGJpZ3dMamMxS1NBcElIc2dMeThnVTI5dFpYUnBiV1Z6SUhCeWIySmhZbXhwZEdsbGN5QmhjbVVnZW1WeWJ5d2djMjhnZDJVbmJHd2daMlYwSUdGdUlIVnVaR1ZtYVc1bFpDQnVaWGgwSUhOMFlYUmxYRzRnSUNBZ0lDQnBaaWh1WlhoMFRtOTBaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFYwYVd4ekxtWnNhWEJEYjJsdUtEQXVOVFVwSUNrZ2V5QXZMeUJUYjIxbGRHbHRaWE1nY0hKdlltRmliR2wwYVdWeklHRnlaU0I2WlhKdkxDQnpieUIzWlNkc2JDQm5aWFFnWVc0Z2RXNWtaV1pwYm1Wa0lHNWxlSFFnYzNSaGRHVmNiaUFnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmNHeGhlV2x1WnlCdWIzUmxKeXdnYm1WNGRFNXZkR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXRaV3h2WkhsUGMyTnBiR3hoZEc5eWMxdHBJQ1VnZEdocGN5NWpiMjVtYVdjdWJXVnNiMlI1VDNOamFXeHNZWFJ2Y25NdWJHVnVaM1JvWFM1d2JHRjVLSHRjYmlBZ0lDQWdJQ0FnSUNCbWNtVnhPaUJ1WlhoMFRtOTBaUzl2WTNSaGRtVXNYRzRnSUNBZ0lDQWdJQ0FnZEdsdFpUb2dNU0FySUNoTllYUm9MbkpoYm1SdmJTZ3BJQ29nTmlrc1hHNGdJQ0FnSUNBZ0lDQWdjR0Z1T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJSFp2YkRvZ01DNHhOVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdrckt6dGNibHh1SUNBZ0lDQWdkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaWhuWlc1bGNtRjBhVzl1SUQwOVBTQjBhR2x6TG1OMWNuSmxiblJIWlc1bGNtRjBhVzl1SUNZbUlIUm9hWE11WTNWeWNtVnVkRWRsYm1WeVlYUnBiMjRnUEQwZ2RHaHBjeTVqYjI1bWFXY3ViV0Y0UjJWdVpYSmhkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0J3YkdGNVRtVjRkRTV2ZEdVb1oyVnVaWEpoZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzSUNnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURJcElDc2dNQzQxS1NBcUlERXdNREFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEJzWVhsT1pYaDBUbTkwWlNoblpXNWxjbUYwYVc5dUtUdGNibHh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JsYm1SUFpsTmpaVzVsS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJRzl1Um1sdWFYTm9RMkZzYkdKaFkyc2dQU0IwYUdsekxtTnZibVpwWnk1dmJrWnBibWx6YUR0Y2JseHVJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtTm9iM0prVDNOamFXeHNZWFJ2Y25NdWJXRndLQ0J6ZVc1MGFDQTlQaUJ6ZVc1MGFDNXpkRzl3S0RFcElDazdYRzVjYmlBZ0lDQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDaHZia1pwYm1semFFTmhiR3hpWVdOckxDQXhNREF3S1R0Y2JpQWdmVnh1ZlZ4dVhHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5emNtTXZVMk5sYm1VdWRITWlMQ0l2S2x4dUlDb2dRbUZ6YVdNZ1VHRjBkR1Z5Ym5NZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBcUwxeHVYRzVqYjI1emRDQk5ZWEpyYjNZZ1BTQnlaWEYxYVhKbEtGd2liV0Z5YTI5MmJsd2lLUzVrWldaaGRXeDBPMXh1YVcxd2IzSjBJSHNnUjJWdVpYUnBZeUI5SUdaeWIyMGdYQ0l1TDBkbGJtVjBhV05jSWp0Y2JseHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1VHRjBkR1Z5YmlBOUlDaHdZWFIwWlhKdUtTQTlQaUJiS0NrZ1BUNGdjR0YwZEdWeWJpNXVaWGgwS0NrdWRtRnNkV1ZkTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVUhObGNTQTlJR1oxYm1OMGFXOXVLaUJRYzJWeEtIWmhiSFZsY3pvZ1FYSnlZWGs4WVc1NVBpd2djbVZ3WlhScGRHbHZibk02SUc1MWJXSmxjaWw3WEc0Z0lIWmhjaUJwYm1SbGVEb2diblZ0WW1WeUlEMGdNRHRjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJQ2dwT2lCaGJua2dQVDRnZG1Gc2RXVnpXMmx1WkdWNEt5c2dKU0IyWVd4MVpYTXViR1Z1WjNSb1hUdGNibHh1SUNCcFppaHlaWEJsZEdsMGFXOXVjeUE5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCM2FHbHNaU2gwY25WbEtTQjdYRzRnSUNBZ0lDQjVhV1ZzWkNCeVpYTjFiSFFvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWld4elpTQjdYRzRnSUNBZ1ptOXlLSFpoY2lCcFBUQTdJR2s4Y21Wd1pYUnBkR2x2Ym5NN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZVdsbGJHUWdjbVZ6ZFd4MEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1VISmhibVFnUFNCbWRXNWpkR2x2YmlvZ1VISmhibVFvZG1Gc2RXVnpPaUJCY25KaGVUeGhibmsrTENCeVpYQmxkR2wwYVc5dWN6b2diblZ0WW1WeUtYdGNibHh1SUNCMllYSWdjbVZ6ZFd4MElEMGdLQ2s2SUdGdWVTQTlQaUIyWVd4MVpYTmJUV0YwYUM1bWJHOXZjaWhOWVhSb0xuSmhibVJ2YlNncElDb2dkbUZzZFdWekxteGxibWQwYUNsZE8xeHVYRzRnSUdsbUtISmxjR1YwYVhScGIyNXpJRDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhkb2FXeGxLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lIbHBaV3hrSUhKbGMzVnNkQ2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCbWIzSW9kbUZ5SUdrOU1Ec2dhVHh5WlhCbGRHbDBhVzl1Y3pzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0I1YVdWc1pDQnlaWE4xYkhRb0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCUWJXRnlhMjkySUQwZ1puVnVZM1JwYjI0Z1VHMWhjbXR2ZGloelpXVmtPaUJoYm5sYlhTd2diM0prWlhJNklHNTFiV0psY2l3Z2FXNXBkR2xoYkZOMFlYUmxPaUJoYm5sYlhTa2dlMXh1SUNCamIyNXpkQ0J0WVhKcmIzWkRhR0ZwYmlBOUlHNWxkeUJOWVhKcmIzWW9jMlZsWkN3Z2IzSmtaWElwTzF4dVhHNGdJSEpsZEhWeWJpQnRZWEpyYjNaRGFHRnBiaTVoYzFCaGRIUmxjbTRvYVc1cGRHbGhiRk4wWVhSbEtUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JRWjJWdVpYUnBZeUE5SUdaMWJtTjBhVzl1S2lCUVoyVnVaWFJwWXlocGJuQjFkRkJ2Y0hWc1lYUnBiMjQ2SUc1MWJXSmxjbHRkVzEwc0lHZHZZV3c2SUc1MWJXSmxjbHRkS1NCN1hHNGdJR3hsZENCblpXNWxkR2xqT2lCSFpXNWxkR2xqSUQwZ2JtVjNJRWRsYm1WMGFXTW9hVzV3ZFhSUWIzQjFiR0YwYVc5dUxDQm5iMkZzS1R0Y2JseHVJQ0JzWlhRZ2JHRnpkRk4wWVhSbE9pQnVkVzFpWlhKYlhTQTlJR2R2WVd3N1hHNWNiaUFnZDJocGJHVW9kSEoxWlNrZ2UxeHVJQ0FnSUd4bGRDQnVaWGgwVTNSaGRHVTZJR0Z1ZVNBOUlHZGxibVYwYVdNdVoyVjBUbVY0ZEZOMFlYUmxLR3hoYzNSVGRHRjBaU2s3WEc1Y2JpQWdJQ0JzWVhOMFUzUmhkR1VnUFNCYmJHRnpkRk4wWVhSbFcyeGhjM1JUZEdGMFpTNXNaVzVuZEdndE1WMHNJRzVsZUhSVGRHRjBaVjA3WEc1Y2JpQWdJQ0I1YVdWc1pDQnVaWGgwVTNSaGRHVTdYRzRnSUgxY2JuMDdYRzVjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5d1lYUjBaWEp1Y3k1MGN5SXNJaUZtZFc1amRHbHZiaWgwTEdVcGUxd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmxlSEJ2Y25SekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdiVzlrZFd4bFAyMXZaSFZzWlM1bGVIQnZjblJ6UFdVb0tUcGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJrWldacGJtVW1KbVJsWm1sdVpTNWhiV1EvWkdWbWFXNWxLRndpVFdGeWEyOTJUbHdpTEZ0ZExHVXBPbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsZUhCdmNuUnpQMlY0Y0c5eWRITXVUV0Z5YTI5MlRqMWxLQ2s2ZEM1TllYSnJiM1pPUFdVb0tYMG9YQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhObGJHWS9jMlZzWmpwMGFHbHpMR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSFFwZTNaaGNpQmxQWHQ5TzJaMWJtTjBhVzl1SUc0b2NpbDdhV1lvWlZ0eVhTbHlaWFIxY200Z1pWdHlYUzVsZUhCdmNuUnpPM1poY2lCdlBXVmJjbDA5ZTJrNmNpeHNPaUV4TEdWNGNHOXlkSE02ZTMxOU8zSmxkSFZ5YmlCMFczSmRMbU5oYkd3b2J5NWxlSEJ2Y25SekxHOHNieTVsZUhCdmNuUnpMRzRwTEc4dWJEMGhNQ3h2TG1WNGNHOXlkSE45Y21WMGRYSnVJRzR1YlQxMExHNHVZejFsTEc0dVpEMW1kVzVqZEdsdmJpaDBMR1VzY2lsN2JpNXZLSFFzWlNsOGZFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEdVc2UyVnVkVzFsY21GaWJHVTZJVEFzWjJWME9uSjlLWDBzYmk1eVBXWjFibU4wYVc5dUtIUXBlMXdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCVGVXMWliMndtSmxONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnlZbVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFFzVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuTEh0MllXeDFaVHBjSWsxdlpIVnNaVndpZlNrc1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFFzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2w5TEc0dWREMW1kVzVqZEdsdmJpaDBMR1VwZTJsbUtERW1aU1ltS0hROWJpaDBLU2tzT0NabEtYSmxkSFZ5YmlCME8ybG1LRFFtWlNZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIUW1KblFtSm5RdVgxOWxjMDF2WkhWc1pTbHlaWFIxY200Z2REdDJZWElnY2oxUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8ybG1LRzR1Y2loeUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvY2l4Y0ltUmxabUYxYkhSY0lpeDdaVzUxYldWeVlXSnNaVG9oTUN4MllXeDFaVHAwZlNrc01pWmxKaVpjSW5OMGNtbHVaMXdpSVQxMGVYQmxiMllnZENsbWIzSW9kbUZ5SUc4Z2FXNGdkQ2x1TG1Rb2NpeHZMR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUIwVzJWZGZTNWlhVzVrS0c1MWJHd3NieWtwTzNKbGRIVnliaUJ5ZlN4dUxtNDlablZ1WTNScGIyNG9kQ2w3ZG1GeUlHVTlkQ1ltZEM1ZlgyVnpUVzlrZFd4bFAyWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUXVaR1ZtWVhWc2RIMDZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkSDA3Y21WMGRYSnVJRzR1WkNobExGd2lZVndpTEdVcExHVjlMRzR1YnoxbWRXNWpkR2x2YmloMExHVXBlM0psZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29kQ3hsS1gwc2JpNXdQVndpWENJc2JpaHVMbk05TUNsOUtGdG1kVzVqZEdsdmJpaDBMR1VzYmlsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Ymk1eUtHVXBPMk52Ym5OMElISTlkRDArZTJ4bGRDQmxQWFF1Y21Wa2RXTmxLQ2gwTEdVcFBUNTBLMlVwTEc0OVRXRjBhQzV5WVc1a2IyMG9LU3BsTEhJOU1EdG1iM0lvYkdWMElHVTlNRHRsUEhRdWJHVnVaM1JvTzJVckt5bHBaaWh1UEQwb2NqMHJLSElyUFhSYlpWMHBMblJ2Um1sNFpXUW9NaWtwS1hKbGRIVnliaUJsZlN4dlBYUTlQbnRzWlhRZ1pUMTBMbkpsWkhWalpTZ29kQ3hsS1QwK2RDdGxLVHR5WlhSMWNtNGdaVDR3UDNRdWJXRndLSFE5UG5RdlpTazZkQzV0WVhBb0tDazlQakFwZlN4cFBTaDBMR1VwUFQ1N2RtRnlJRzQ5VDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vZENrc2NqMVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aGxLVHRwWmlodUxteGxibWQwYUNFOWNpNXNaVzVuZEdncGNtVjBkWEp1SVRFN1ptOXlLSFpoY2lCdlBUQTdienh1TG14bGJtZDBhRHR2S3lzcGUzWmhjaUJwUFc1YmIxMDdhV1lvZEZ0cFhTRTlQV1ZiYVYwcGNtVjBkWEp1SVRGOWNtVjBkWEp1SVRCOUxITTlLSFFzWlNrOVBpaDBKV1VyWlNrbFpUdHVMbVFvWlN4Y0ltZGxkRUZzYkZSeVlXNXphWFJwYjI1elhDSXNablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdZWDBwTEc0dVpDaGxMRndpVFdGeWEyOTJUbHdpTEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUd4OUtUdGpiMjV6ZENCaFBTaDBMR1VwUFQ1MExuSmxaSFZqWlNnb2JpeHlMRzhwUFQ1N1kyOXVjM1FnYVQxYlhUdG1iM0lvYkdWMElHNDlaVHR1UGowd08yNHRMU2xwTG5CMWMyZ29kRnR6S0c4dGJpeDBMbXhsYm1kMGFDbGRLVHR5WlhSMWNtNGdiaTV3ZFhOb0tHa3BMRzU5TEZ0ZEtTeDFQU2gwTEdVcFBUNTdZMjl1YzNRZ2JqMWJMaTR1ZEYwN2NtVjBkWEp1SUc0dWMyaHBablFvS1N4dUxuQjFjMmdvWlNrc2JuMDdZMnhoYzNNZ2JIdGpiMjV6ZEhKMVkzUnZjaWgwTEdVcGUzUm9hWE11WkdsamRHbHZibUZ5ZVQxYlhTeDBhR2x6TG1OdmJXSnBibUYwYVc5dWN6MWJYU3gwYUdsekxteGhjM1JUZEdGMFpUMWJYVHRtYjNJb2JHVjBJRzQ5TUR0dVBHVTdiaXNyS1hSb2FYTXViR0Z6ZEZOMFlYUmxMbkIxYzJnb2RGdHVYU2s3ZEdocGN5NTBjbUZ1YzJsMGFXOXVUV0YwY21sNFBYUm9hWE11WTNKbFlYUmxWSEpoYm5OcGRHbHZiazFoZEhKcGVDaDBMR1VwZldOeVpXRjBaVlJ5WVc1emFYUnBiMjVOWVhSeWFYZ29kQ3hsS1h0MGFHbHpMbVJwWTNScGIyNWhjbms5UVhKeVlYa3Vabkp2YlNodVpYY2dVMlYwS0hRcEtTeDBhR2x6TG1OdmJXSnBibUYwYVc5dWN6MWhLSFFzWlNrN2JHVjBJRzQ5VzEwN1ptOXlLR3hsZENCMFBUQTdkRHgwYUdsekxtTnZiV0pwYm1GMGFXOXVjeTVzWlc1bmRHZzdkQ3NyS1h0c1pYUWdkRDFiWFR0bWIzSW9iR1YwSUdVOU1EdGxQSFJvYVhNdVpHbGpkR2x2Ym1GeWVTNXNaVzVuZEdnN1pTc3JLWFF1Y0hWemFDZ3dLVHR1TG5CMWMyZ29kQ2w5Wm05eUtHeGxkQ0J5UFRBN2NqeDBMbXhsYm1kMGFEdHlLeXNwZTJ4bGRDQnZQVnRkTzJadmNpaHNaWFFnYmoxbE8yNCtQVEE3YmkwdEtXOHVjSFZ6YUNoMFczTW9jaTF1TEhRdWJHVnVaM1JvS1YwcE8yeGxkQ0JoUFhSb2FYTXVZMjl0WW1sdVlYUnBiMjV6TG1acGJtUkpibVJsZUNoMFBUNXBLRzhzZENrcExIVTlkRnNvY2lzeEtTVjBMbXhsYm1kMGFGMHNiRDEwYUdsekxtUnBZM1JwYjI1aGNua3VhVzVrWlhoUFppaDFLVHR1VzJGZFcyeGRLeXQ5Y21WMGRYSnVJRzQ5Ymk1dFlYQW9ieWw5WjJWMFRtVjRkRk4wWVhSbEtIUXBlMk52Ym5OMElHVTlkR2hwY3k1MGNtRnVjMmwwYVc5dVRXRjBjbWw0VzNSb2FYTXVZMjl0WW1sdVlYUnBiMjV6TG1acGJtUkpibVJsZUNobFBUNXBLSFFzWlNrcFhTeHVQWElvWlNrN2NtVjBkWEp1SUhSb2FYTXVaR2xqZEdsdmJtRnllVnR1WFgwcVlYTlFZWFIwWlhKdUtIUXBlMlp2Y2loMGFHbHpMbXhoYzNSVGRHRjBaVDEwT3pzcGUyeGxkQ0IwUFhSb2FYTXVaMlYwVG1WNGRGTjBZWFJsS0hSb2FYTXViR0Z6ZEZOMFlYUmxLVHQwYUdsekxteGhjM1JUZEdGMFpUMTFLSFJvYVhNdWJHRnpkRk4wWVhSbExIUXBMSGxwWld4a0lIUjlmWDFsTG1SbFptRjFiSFE5YkgxZEtYMHBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmJtOWtaVjl0YjJSMWJHVnpMMjFoY210dmRtNHZZblZwYkdRdmFXNWtaWGd1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJaXdpWEc1cGJYQnZjblFnZFhScGJITWdabkp2YlNCY0lpNHZkWFJwYkhOY0lqdGNibHh1WEc1amJHRnpjeUJIWlc1bGRHbGpJSHRjYmlBZ2NIVmliR2xqSUhCdmNIVnNZWFJwYjI0NklHNTFiV0psY2x0ZFcxMDdYRzRnSUhCeWFYWmhkR1VnWjI5aGJEb2diblZ0WW1WeVcxMDdYRzRnSUhCeWFYWmhkR1VnYzJOdmNtVnpPaUJ1ZFcxaVpYSmJYVHRjYmlBZ2NISnBkbUYwWlNCc1lYTjBVM1JoZEdVNklHNTFiV0psY2x0ZE8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVjSFYwVUc5d2RXeGhkR2x2YmpvZ2JuVnRZbVZ5VzExYlhTd2daMjloYkRvZ2JuVnRZbVZ5VzEwcElIdGNiaUFnSUNCMGFHbHpMbkJ2Y0hWc1lYUnBiMjRnUFNCcGJuQjFkRkJ2Y0hWc1lYUnBiMjQ3WEc0Z0lDQWdkR2hwY3k1elkyOXlaWE1nUFNCQmNuSmhlU2hwYm5CMWRGQnZjSFZzWVhScGIyNHViR1Z1WjNSb0tTNW1hV3hzS0RBcE8xeHVJQ0FnSUhSb2FYTXVaMjloYkNBOUlHZHZZV3c3WEc0Z0lDQWdkR2hwY3k1c1lYTjBVM1JoZEdVZ1BTQnBibkIxZEZCdmNIVnNZWFJwYjI1YlRXRjBhQzVtYkc5dmNpZ2dUV0YwYUM1eVlXNWtiMjBvS1NBcUlDaHBibkIxZEZCdmNIVnNZWFJwYjI0dWJHVnVaM1JvTFRFcEtTQmRPMXh1SUNCOVhHNWNibHh1SUNBdkx5QkJZMk4xYlhWc1lYUmxJR0Z1WkNCeVpYUjFjbTRnZEdobElITmpiM0psSUdadmNpQmhJSE5wYm1kc1pTQmpiMnhzWldOMGFXOXVYRzRnSUdkbGRGUnZkR0ZzUm1sMGJtVnpjMUpoZEdsdVp5aGpiMnhzWldOMGFXOXVPaUJ1ZFcxaVpYSmJYU3dnWjI5aGJEb2diblZ0WW1WeVcxMHBJSHRjYmlBZ0lDQnNaWFFnYzJOdmNtVTZJRzUxYldKbGNpQTlJREE3SUM4dklHeHZkMlZ5SUdseklHSmxkSFJsY2x4dUlDQWdJR3hsZENCdWIzSnRZV3hwZW1Wa1EyOXNiR1ZqZEdsdmJpQTlJR052Ykd4bFkzUnBiMjR1YldGd0tDaHVkVzA2SUc1MWJXSmxjaWtnUFQ0Z2JuVnRJQzBnVFdGMGFDNXRhVzR1WVhCd2JIa29iblZzYkN3Z1kyOXNiR1ZqZEdsdmJpa2dLVHRjYmx4dUlDQWdJR1p2Y2loc1pYUWdhVDF1YjNKdFlXeHBlbVZrUTI5c2JHVmpkR2x2Ymk1c1pXNW5kR2d0TVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJSE5qYjNKbElDczlJSFJvYVhNdVoyVjBSR2x6ZEdGdVkyVW9ibTl5YldGc2FYcGxaRU52Ykd4bFkzUnBiMjViYVYwc0lHZHZZV3hiYVYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6WTI5eVpUdGNiaUFnZlZ4dVhHNGdJQzh2SUZSUFJFODZJSFJsYzNSY2JpQWdMeThnVlhOcGJtY2dkR2hsSUdkcGRtVnVJSE5qYjNKbGN5d2daMlYwSUhSb1pTQnRiM04wSUZ3aVptbDBYQ0lnZEhkdklHZGxibVZ5WVhScGIyNXpJRzkxZENCdlppQjBhR1VnY0c5d2RXeGhkR2x2Ymx4dUlDQm5aWFJVYjNCVWQyOUhaVzVsY21GMGFXOXVjeWh6WTI5eVpYTTZJRzUxYldKbGNsdGRMQ0J3YjNCMWJHRjBhVzl1T2lCdWRXMWlaWEpiWFZ0ZEtUb2diblZ0WW1WeVcxMWJYU0I3WEc1Y2JpQWdJQ0JzWlhRZ2FXNWtaWGhQWmtocFoyaGxjM1JUWTI5eVpTQTlJREE3WEc1Y2JpQWdJQ0JtYjNJb2JHVjBJR2s5YzJOdmNtVnpMbXhsYm1kMGFDMHhPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUdsbUtITmpiM0psYzF0cGJtUmxlRTltU0dsbmFHVnpkRk5qYjNKbFhTQThJSE5qYjNKbGMxdHBYU2tnZTF4dUlDQWdJQ0FnSUNCcGJtUmxlRTltU0dsbmFHVnpkRk5qYjNKbElEMGdhVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsY21VZ1lYSmxJSFIzYnlCdlppQjBhR1VnYzJGdFpTQnpZMjl5WlhNc0lHTm9iMjl6WlNCdmJtVWdjbUZ1Wkc5dGJIbGNiaUFnSUNBZ0lHbG1LSE5qYjNKbGMxdHBibVJsZUU5bVNHbG5hR1Z6ZEZOamIzSmxYU0E5UFQwZ2MyTnZjbVZ6VzJsZEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZhVzVHYkdsd0lEMGdUV0YwYUM1eVlXNWtiMjBvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBibVJsZUU5bVNHbG5hR1Z6ZEZOamIzSmxJRDBnS0dOdmFXNUdiR2x3SUQ0Z01DNDFLU0EvSUdsdVpHVjRUMlpJYVdkb1pYTjBVMk52Y21VZ09pQnBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JwYm1SbGVFOW1UbVY0ZEVocFoyaGxjM1JUWTI5eVpUb2diblZ0WW1WeUlEMGdNRHRjYmlBZ0lDQmpiMjV6ZENCMGIzQkhaVzVsY21GMGFXOXVVMk52Y21VNklHNTFiV0psY2lBOUlITmpiM0psYzF0cGJtUmxlRTltU0dsbmFHVnpkRk5qYjNKbFhUdGNibHh1WEc0Z0lDQWdZMjl1YzNRZ1kyOXBia1pzYVhCR2IzSk5kWFJoZEdVZ1BTQjFkR2xzY3k1bWJHbHdRMjlwYmlnd0xqSTFLVHRjYmx4dUlDQWdJR2xtS0dOdmFXNUdiR2x3Um05eVRYVjBZWFJsS1NCN1hHNGdJQ0FnSUNCcGJtUmxlRTltVG1WNGRFaHBaMmhsYzNSVFkyOXlaU0E5SUUxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUhOamIzSmxjeTVzWlc1bmRHZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJR1p2Y2loc1pYUWdhVDF6WTI5eVpYTXViR1Z1WjNSb0xURTdJR2srUFRBN0lHa3RMU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaMjV2Y21VZ1lXNTVJSE5qYjNKbGN5QjBhR0YwSUdGeVpTQmhiSEpsWVdSNUlIUm9aU0JvYVdkb1pYTjBJSE5qYjNKbFhHNGdJQ0FnSUNBZ0lHbG1LSE5qYjNKbGMxdHBYU0FoUFQwZ2RHOXdSMlZ1WlhKaGRHbHZibE5qYjNKbEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppaHpZMjl5WlhOYmFXNWtaWGhQWms1bGVIUklhV2RvWlhOMFUyTnZjbVZkSUR3Z2MyTnZjbVZ6VzJsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRTltVG1WNGRFaHBaMmhsYzNSVFkyOXlaU0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobGNtVWdZWEpsSUhSM2J5QnZaaUIwYUdVZ2MyRnRaU0J6WTI5eVpYTXNJR05vYjI5elpTQnZibVVnY21GdVpHOXRiSGxjYmlBZ0lDQWdJQ0FnSUNCcFppaHpZMjl5WlhOYmFXNWtaWGhQWms1bGVIUklhV2RvWlhOMFUyTnZjbVZkSUQwOVBTQnpZMjl5WlhOYmFWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdmFXNUdiR2x3SUQwZ1RXRjBhQzV5WVc1a2IyMG9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhoUFprNWxlSFJJYVdkb1pYTjBVMk52Y21VZ1BTQW9ZMjlwYmtac2FYQWdQaUF3TGpVcElEOGdhVzVrWlhoUFprNWxlSFJJYVdkb1pYTjBVMk52Y21VZ09pQnBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJiY0c5d2RXeGhkR2x2Ymx0cGJtUmxlRTltU0dsbmFHVnpkRk5qYjNKbFhTd2djRzl3ZFd4aGRHbHZibHRwYm1SbGVFOW1UbVY0ZEVocFoyaGxjM1JUWTI5eVpWMGdYVHRjYmlBZ2ZWeHVYRzRnSUM4dklGUlBSRTg2SUUxaGEyVWdiVzl5WlNCMGFHRnVJRzl1WlNCMGVYQmxJRzltSUcxaGRHbHVaMXh1SUNBdkx5QlVZV3RsSUdsdUlIUjNieUJoY25KaGVYTWdLSEJoY21WdWRITXBJR0Z1WkNCdFlYUmxJSFJvWlcwZ2FXNGdZU0J1ZFcxaVpYSWdiMllnWkdsbVptVnlaVzUwSUhkaGVYTWdkRzhnY0hKdlpIVmpaU0J0ZFd4MGFYQnNaU0J2Wm1aemNISnBibWRjYmlBZ2JXRjBaVWRsYm1WeVlYUnBiMjV6S0hCaGNtVnVkSE02SUc1MWJXSmxjbHRkVzEwcE9pQnVkVzFpWlhKYlhWdGRJSHRjYmx4dUlDQWdJR052Ym5OMElITndiR2xqWldSUFptWnpjSEpwYm1jZ1BTQjBhR2x6TG1kbGRGTndiR2xqWldSUFptWnpjSEpwYm1jb2NHRnlaVzUwYzFzd1hTd2djR0Z5Wlc1MGMxc3hYU2s3WEc0Z0lDQWdZMjl1YzNRZ2FXNTBaWEpzWVdObFpFOW1abk53Y21sdVp5QTlJSFJvYVhNdVoyVjBTVzUwWlhKc1lXTmxaRTltWm5Od2NtbHVaeWh3WVhKbGJuUnpXekJkTENCd1lYSmxiblJ6V3pGZEtUdGNibHh1SUNBZ0lDOHZJRWRsYm1WeVlYUmxJRzF2Y21VZ2RHaGhiaUJ2Ym1VZ2IyWm1jM0J5YVc1blhHNGdJQ0FnY21WMGRYSnVJRnR6Y0d4cFkyVmtUMlptYzNCeWFXNW5MQ0JwYm5SbGNteGhZMlZrVDJabWMzQnlhVzVuWFR0Y2JpQWdmVnh1WEc0Z0lDOHZJRk53YkdsalpTQjBkMjhnWlhGMVlXd3RiR1Z1WjNSb0lHRnljbUY1Y3lCMGIyZGxkR2hsY2lCaGJtUWdjbVYwZFhKdUlIUm9aU0J5WlhOMWJIUmNiaUFnWjJWMFNXNTBaWEpzWVdObFpFOW1abk53Y21sdVp5aHdZWEpsYm5SUGJtVTZJRzUxYldKbGNsdGRMQ0J3WVhKbGJuUlVkMjg2SUc1MWJXSmxjbHRkS1RvZ2JuVnRZbVZ5VzEwZ2UxeHVJQ0FnSUdOdmJuTjBJR2x1ZEdWeWJHRmpaV1JQWm1aemNISnBibWNnUFNCQmNuSmhlU2h3WVhKbGJuUlBibVV1YkdWdVozUm9LVHRjYmx4dUlDQWdJR1p2Y2loc1pYUWdhVDFwYm5SbGNteGhZMlZrVDJabWMzQnlhVzVuTG14bGJtZDBhQzB4T3lCcFBqMHdPeUJwTFMwcElIdGNiaUFnSUNBZ0lHbHVkR1Z5YkdGalpXUlBabVp6Y0hKcGJtZGJhVjBnUFNBb2FTVXlLU0E5UFQwZ01DQS9JSEJoY21WdWRFOXVaVnRwWFNBNklIQmhjbVZ1ZEZSM2IxdHBYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2FXNTBaWEpzWVdObFpFOW1abk53Y21sdVp6dGNiaUFnZlZ4dVhHNGdJR2RsZEZOd2JHbGpaV1JQWm1aemNISnBibWNvY0dGeVpXNTBUMjVsT2lCdWRXMWlaWEpiWFN3Z2NHRnlaVzUwVkhkdk9pQnVkVzFpWlhKYlhTazZJRzUxYldKbGNsdGRJSHRjYmlBZ0lDQmpiMjV6ZENCamIybHVSbXhwY0RvZ2JuVnRZbVZ5SUQwZ1RXRjBhQzV5WVc1a2IyMG9LU0ErSURBdU5TQS9JREVnT2lBd08xeHVJQ0FnSUdOdmJuTjBJSEJoY21WdWRITWdQU0JqYjJsdVJteHBjQ0E5UFNBd0lEOGdXM0JoY21WdWRFOXVaU3dnY0dGeVpXNTBWSGR2WFNBNklGdHdZWEpsYm5SVWQyOHNJSEJoY21WdWRFOXVaVjA3WEc0Z0lDQWdZMjl1YzNRZ2MzQnNhWFJRYjJsdWREb2diblZ0WW1WeUlEMGdUV0YwYUM1bWJHOXZjaWh3WVhKbGJuUlBibVV1YkdWdVozUm9JQzhnTWlrN1hHNWNiaUFnSUNCamIyNXpkQ0J6Y0d4cFkyVmtUMlptYzNCeWFXNW5JRDBnV3k0dUxpaHdZWEpsYm5Seld6QmRMbk5zYVdObEtEQXNJSE53YkdsMFVHOXBiblFwS1N3Z0xpNHVLSEJoY21WdWRITmJNVjB1YzJ4cFkyVW9jM0JzYVhSUWIybHVkQzB4TENCd1lYSmxiblJ6V3pGZExteGxibWQwYUMweEtTa2dYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnpjR3hwWTJWa1QyWm1jM0J5YVc1bk8xeHVJQ0I5WEc1Y2JpQWdMeThnVW1WMGRYSnVjeUJoSUc1MWJXVnlhV05oYkNCa2FYTjBZVzVqWlNCaVpYUjNaV1Z1SUdGdUlHbHVjSFYwSUdGdVpDQmhJR2R2WVd4Y2JpQWdaMlYwUkdsemRHRnVZMlVvYVc1d2RYUTZJRzUxYldKbGNpd2daMjloYkRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnYkdWMElISmhkR2x1WnpvZ2JuVnRZbVZ5SUQwZ1oyOWhiQ0F0SUdsdWNIVjBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmhkR2x1Wnp0Y2JpQWdmVnh1WEc1Y2JseHVYRzVjYmlBZ0x5OGdRMkZzWTNWc1lYUmxJR0Z1WkNCeVpYUjFjbTRnZEdobElITmpiM0psY3lCbWIzSWdZV3hzSUdOMWNuSmxiblFnWTI5c2JHVmpkR2x2Ym5OY2JpQWdaMlYwVUc5d2RXeGhkR2x2YmxOamIzSmxjeWh3YjNCMWJHRjBhVzl1T2lCdWRXMWlaWEpiWFZ0ZExDQm5iMkZzT2lCdWRXMWlaWEpiWFNrNklHNTFiV0psY2x0ZElIdGNiaUFnSUNCc1pYUWdjMk52Y21WeklEMGdRWEp5WVhrb2NHOXdkV3hoZEdsdmJpNXNaVzVuZEdncExtWnBiR3dvTUNrN1hHNWNiaUFnSUNCbWIzSW9iR1YwSUdrOUtIQnZjSFZzWVhScGIyNHViR1Z1WjNSb0xURXBPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUhOamIzSmxjMXRwWFNBOUlIUm9hWE11WjJWMFZHOTBZV3hHYVhSdVpYTnpVbUYwYVc1bktIQnZjSFZzWVhScGIyNWJhVjBzSUdkdllXd3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCelkyOXlaWE03WEc0Z0lIMWNibHh1SUNCblpYUk9aWGgwUjJWdVpYSmhkR2x2Ymlod2IzQjFiR0YwYVc5dU9pQnVkVzFpWlhKYlhWdGRMQ0JuYjJGc09pQnVkVzFpWlhKYlhTa2dlMXh1SUNBZ0lHTnZibk4wSUhCdmNIVnNZWFJwYjI1VFkyOXlaWE02Ym5WdFltVnlXMTBnUFNCMGFHbHpMbWRsZEZCdmNIVnNZWFJwYjI1VFkyOXlaWE1vY0c5d2RXeGhkR2x2Yml3Z1oyOWhiQ2s3WEc0Z0lDQWdZMjl1YzNRZ2RHOXdWSGR2UjJWdVpYSmhkR2x2Ym5NNmJuVnRZbVZ5VzExYlhTQTlJSFJvYVhNdVoyVjBWRzl3VkhkdlIyVnVaWEpoZEdsdmJuTW9jRzl3ZFd4aGRHbHZibE5qYjNKbGN5d2djRzl3ZFd4aGRHbHZiaWs3WEc0Z0lDQWdZMjl1YzNRZ2JtVjNSMlZ1WlhKaGRHbHZibk02Ym5WdFltVnlXMTFiWFNBOUlIUm9hWE11YldGMFpVZGxibVZ5WVhScGIyNXpLSFJ2Y0ZSM2IwZGxibVZ5WVhScGIyNXpLVHRjYmx4dUlDQWdJR1p2Y2loc1pYUWdhVDB3T3lCcElEd2dLRzVsZDBkbGJtVnlZWFJwYjI1ekxteGxibWQwYUMweEtUc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ2Y0hWc1lYUnBiMjR1YzNCc2FXTmxLRTFoZEdndVpteHZiM0lvVFdGMGFDNXlZVzVrYjIwb0tTQXFJQ2gwYUdsekxuQnZjSFZzWVhScGIyNHViR1Z1WjNSb0xURXBLU3dnTVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWNHOXdkV3hoZEdsdmJpQTlJRnN1TGk1MGFHbHpMbkJ2Y0hWc1lYUnBiMjRzSUM0dUxtNWxkMGRsYm1WeVlYUnBiMjV6WFR0Y2JpQWdJQ0F2THlCR2IzSWdibTkzSUhKaGJtUnZiV3g1SUhObGJHVmpkQ0J2Ym1VZ2IyWWdkR2hsSUdKbGMzUWdaMlZ1WlhKaGRHbHZibk5jYmlBZ0lDQmpiMjV6ZENCaVpYTjBSbWwwUjJWdVpYSmhkR2x2YmlBOUlHNWxkMGRsYm1WeVlYUnBiMjV6VzAxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNodVpYZEhaVzVsY21GMGFXOXVjeTVzWlc1bmRHZ2dLaUF3TGprNU9Ta3BYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmlaWE4wUm1sMFIyVnVaWEpoZEdsdmJqdGNiaUFnZlZ4dVhHNGdJR2RsZEU1bGVIUlRkR0YwWlNoemRHRjBaVG9nYm5WdFltVnlXMTBwSUh0Y2JpQWdJQ0F2THlCVVQwUlBPaUJWYzJVZ2MzUmhkR1VnZEc4Z1lXUmtJR2x1ZEc4Z2RHaGxJSEJ2Y0hWc1lYUnBiMjVjYmx4dUlDQWdJR052Ym5OMElHNWxlSFJUZEdGMFpUb2diblZ0WW1WeVcxMGdQU0IwYUdsekxtZGxkRTVsZUhSSFpXNWxjbUYwYVc5dUtIUm9hWE11Y0c5d2RXeGhkR2x2Yml3Z2RHaHBjeTVuYjJGc0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBVM1JoZEdVN1hHNGdJSDFjYmx4dUlDQmhjMUJoZEhSbGNtNG9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0cUlHRnpVR0YwZEdWeWJpaHBibWwwYVdGc1UzUmhkR1U2SUc1MWJXSmxjbHRkS1NCN1hHNGdJQ0FnSUNCelpXeG1MbXhoYzNSVGRHRjBaU0E5SUdsdWFYUnBZV3hUZEdGMFpUdGNibHh1SUNBZ0lDQWdkMmhwYkdVb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1WlhoMFUzUmhkR1VnUFNCelpXeG1MbWRsZEU1bGVIUlRkR0YwWlNoelpXeG1MbXhoYzNSVGRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUhObGJHWXViR0Z6ZEZOMFlYUmxJRDBnYm1WNGRGTjBZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lIbHBaV3hrSUc1bGVIUlRkR0YwWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYm4wN1hHNWNibVY0Y0c5eWRDQjdJRWRsYm1WMGFXTWdmVHRjYmx4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwwZGxibVYwYVdNdWRITWlMQ0l2THlCQ1lYTnBZeUJqZFhKMlpTQm1jbTl0SUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG0xdmVtbHNiR0V1YjNKbkwyVnVMVlZUTDJSdlkzTXZWMlZpTDBGUVNTOVhZWFpsVTJoaGNHVnlUbTlrWlZ4dVkyOXVjM1FnYldGclpVUnBjM1J2Y25ScGIyNURkWEoyWlNBOUlHRnRiM1Z1ZENBOVBpQjdYRzRnSUhaaGNpQnJJRDBnZEhsd1pXOW1JR0Z0YjNWdWRDQTlQVDBnSjI1MWJXSmxjaWNnUHlCaGJXOTFiblFnT2lBMU1DeGNiaUFnSUNCdVgzTmhiWEJzWlhNZ1BTQTBOREV3TUN4Y2JpQWdJQ0JqZFhKMlpTQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29ibDl6WVcxd2JHVnpLU3hjYmlBZ0lDQmtaV2NnUFNCTllYUm9MbEJKSUM4Z01UZ3dMRnh1SUNBZ0lHa2dQU0F3TEZ4dUlDQWdJSGc3WEc0Z0lHWnZjaUFvSURzZ2FTQThJRzVmYzJGdGNHeGxjenNnS3l0cElDa2dlMXh1SUNBZ0lIZ2dQU0JwSUNvZ01pQXZJRzVmYzJGdGNHeGxjeUF0SURFN1hHNGdJQ0FnWTNWeWRtVmJhVjBnUFNBb0lETWdLeUJySUNrZ0tpQjRJQ29nTWpBZ0tpQmtaV2NnTHlBb0lFMWhkR2d1VUVrZ0t5QnJJQ29nVFdGMGFDNWhZbk1vZUNrZ0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1kzVnlkbVU3WEc1OU8xeHVYRzVjYm1sdGNHOXlkQ0I3U1ZOdmRXNWtVR3hoZVdWeUxDQkpVR3hoZVU5d2RHbHZibk45SUdaeWIyMGdKeTR2VTI5MWJtUlFiR0Y1WlhJbk8xeHVhVzF3YjNKMElIVjBhV3h6SUdaeWIyMGdKeTR2ZFhScGJITW5PMXh1WEc1cGJuUmxjbVpoWTJVZ1NWTjViblJvVDNCMGFXOXVjeUI3WEc0Z0lIZGhkbVZtYjNKdFZIbHdaVDg2SUhOMGNtbHVaeXhjYm4xY2JseHVZMnhoYzNNZ1UzbHVkR2dnYVcxd2JHVnRaVzUwY3lCSlUyOTFibVJRYkdGNVpYSWdlMXh1SUNCdmMyTnBiR3hoZEc5eU9pQmhibms3WEc0Z0lHTnZiblJsZUhRNklFRjFaR2x2UTI5dWRHVjRkRHRjYmlBZ1oyRnBiazV2WkdVN1hHNGdJSGRoZG1WVGFHRndaWEk3WEc0Z0lIQmhibTVsY2pvZ1UzUmxjbVZ2VUdGdWJtVnlUbTlrWlR0Y2JpQWdZMjl1Wm1sbk9pQkpVM2x1ZEdoUGNIUnBiMjV6TzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dOdmJuUmxlSFFzSUdOdmJtWnBaejg2SUVsVGVXNTBhRTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQjBhR2x6TG1OdmJuUmxlSFFnUFNCamIyNTBaWGgwTzF4dVhHNGdJQ0FnZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjZ1B5QmpiMjVtYVdjZ09pQjdmVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnYVc1cGRDZ3BJSHRjYmlBZ0lDQjBhR2x6TG05elkybHNiR0YwYjNJZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNKbFlYUmxUM05qYVd4c1lYUnZjaWdwTzF4dUlDQWdJQzh2ZEdocGN5NWpiMjVtYVdjdWQyRjJaV1p2Y20xVWVYQmxJQ1ltSUNoMGFHbHpMbTl6WTJsc2JHRjBiM0l1ZEhsd1pTQTlJSFJvYVhNdVkyOXVabWxuTG5kaGRtVm1iM0p0Vkhsd1pTazdYRzVjYmlBZ0lDQjBhR2x6TG1kaGFXNU9iMlJsSUQwZ2RHaHBjeTVqYjI1MFpYaDBMbU55WldGMFpVZGhhVzRvS1R0Y2JpQWdJQ0IwYUdsekxuQmhibTVsY2lBOUlIUm9hWE11WTI5dWRHVjRkQzVqY21WaGRHVlRkR1Z5Wlc5UVlXNXVaWElvS1R0Y2JpQWdJQ0IwYUdsekxuZGhkbVZUYUdGd1pYSWdQU0IwYUdsekxtTnZiblJsZUhRdVkzSmxZWFJsVjJGMlpWTm9ZWEJsY2lncE8xeHVJQ0FnSUhSb2FYTXVkMkYyWlZOb1lYQmxjaTVqZFhKMlpTQTlJRzFoYTJWRWFYTjBiM0owYVc5dVEzVnlkbVVvT0RBd0tUdGNiaUFnSUNCMGFHbHpMbmRoZG1WVGFHRndaWEl1YjNabGNuTmhiWEJzWlNBOUlDYzBlQ2M3WEc1Y2JpQWdJQ0IwYUdsekxtOXpZMmxzYkdGMGIzSXVZMjl1Ym1WamRDaDBhR2x6TG1kaGFXNU9iMlJsS1R0Y2JpQWdJQ0IwYUdsekxtZGhhVzVPYjJSbExtTnZibTVsWTNRb2RHaHBjeTV3WVc1dVpYSXBPMXh1SUNBZ0lIUm9hWE11Y0dGdWJtVnlMbU52Ym01bFkzUW9kR2hwY3k1M1lYWmxVMmhoY0dWeUtUdGNiaUFnSUNBdkwzUm9hWE11Y0dGdWJtVnlMbU52Ym01bFkzUW9kR2hwY3k1amIyNTBaWGgwTG1SbGMzUnBibUYwYVc5dUtUdGNiaUFnSUNCMGFHbHpMbmRoZG1WVGFHRndaWEl1WTI5dWJtVmpkQ2gwYUdsekxtTnZiblJsZUhRdVpHVnpkR2x1WVhScGIyNHBPMXh1WEc0Z0lDQWdkR2hwY3k1dmMyTnBiR3hoZEc5eUxuUjVjR1VnUFNCMGFHbHpMbU52Ym1acFp5NTNZWFpsWm05eWJWUjVjR1VnUHlCMGFHbHpMbU52Ym1acFp5NTNZWFpsWm05eWJWUjVjR1VnT2lCMWRHbHNjeTVtYkdsd1EyOXBiaWdwSUQ4Z0ozUnlhV0Z1WjJ4bEp5QTZJQ2R6YVc1bEp6dGNiaUFnSUNCMGFHbHpMbWRoYVc1T2IyUmxMbWRoYVc0dWRtRnNkV1VnUFNBd08xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklIQnNZWGtvYjNCME9pQkpVR3hoZVU5d2RHbHZibk1wSUh0Y2JpQWdJQ0JqYjI1emRDQjdabkpsY1QweU1qQXNJSFJwYldVOU1Td2djR0Z1UFRBc0lIWnZiRDB4ZlNBOUlHOXdkRHRjYmlBZ0lDQjBhR2x6TG1sdWFYUW9LVHRjYmx4dUlDQWdJR3hsZENCbllXbHVJRDBnTUM0d01UdGNiaUFnSUNCMGFHbHpMbTl6WTJsc2JHRjBiM0l1Wm5KbGNYVmxibU41TG5aaGJIVmxJRDBnWm5KbGNUdGNibHh1SUNBZ0lHOXdkQzVrYVhOMGIzSjBhVzl1SUNZbUlDaDBhR2x6TG5kaGRtVlRhR0Z3WlhJdVkzVnlkbVVnUFNCdFlXdGxSR2x6ZEc5eWRHbHZia04xY25abEtHOXdkQzVrYVhOMGIzSjBhVzl1S1NBcE8xeHVJQ0FnSUM4dklITnZiV1VnYzNSMWNHbGtJR0poYzJsaklIQnplV05vYjJGamIzVnpkR2xqSUhOb1lYQnBibWRjYmlBZ0lDQnBaaWhtY21WeElENGdNakF3S1NCbllXbHVJRDBnWjJGcGJpb3dMakV5TzF4dUlDQWdJR2xtS0daeVpYRWdQaUEyTURBd0tTQm5ZV2x1SUQwZ1oyRnBiaW93TGpBNE8xeHVJQ0FnSUhSb2FYTXVjR0Z1Ym1WeUxuQmhiaTUyWVd4MVpTQTlJSEJoYmp0Y2JpQWdJQ0IwYUdsekxtOXpZMmxzYkdGMGIzSXVjM1JoY25Rb01DazdYRzRnSUNBZ2RHaHBjeTVuWVdsdVRtOWtaUzVuWVdsdUxuTmxkRlJoY21kbGRFRjBWR2x0WlNoMmIyd2dLaUJuWVdsdUlDb2dLREF1TlRVZ0xTQW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlEQXVNREVwS1N3Z2RHaHBjeTVqYjI1MFpYaDBMbU4xY25KbGJuUlVhVzFsTENCMGFXMWxJQ29nTUM0NE5TQXBPMXh1WEc1Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ2QybHVaRzkzTG5ObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnpaV3htTG5OMGIzQW9kR2x0WlNBcUlEQXVNalVwTzF4dUlDQWdJSDBzSUNoMGFXMWxJQzBnS0hScGJXVXFNQzR5TlNrcElDb2dNVEF3TUNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJSEIxWW14cFl5QnpkRzl3S0hScGJXVXBJSHRjYmlBZ0lDQjBhR2x6TG1kaGFXNU9iMlJsTG1kaGFXNHVjMlYwVkdGeVoyVjBRWFJVYVcxbEtEQXNJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTd2dkR2x0WlNvd0xqa2dLVHRjYmlBZ0lDQjBhR2x6TG05elkybHNiR0YwYjNJdWMzUnZjQ2gwYUdsekxtTnZiblJsZUhRdVkzVnljbVZ1ZEZScGJXVWdLeUFvSUhScGJXVWdLaUEwSUNrcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUZVc1MGFEdGNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwzTnlZeTlUZVc1MGFDNTBjeUlzSWk4dklFSmhjMmxqSUdOMWNuWmxJR1p5YjIwZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlFWQkpMMWRoZG1WVGFHRndaWEpPYjJSbFhHNWpiMjV6ZENCdFlXdGxSR2x6ZEc5eWRHbHZia04xY25abElEMGdZVzF2ZFc1MElEMCtJSHRjYmlBZ2RtRnlJR3NnUFNCMGVYQmxiMllnWVcxdmRXNTBJRDA5UFNBbmJuVnRZbVZ5SnlBL0lHRnRiM1Z1ZENBNklEVXdMRnh1SUNBZ0lHNWZjMkZ0Y0d4bGN5QTlJRFEwTVRBd0xGeHVJQ0FnSUdOMWNuWmxJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2h1WDNOaGJYQnNaWE1wTEZ4dUlDQWdJR1JsWnlBOUlFMWhkR2d1VUVrZ0x5QXhPREFzWEc0Z0lDQWdhU0E5SURBc1hHNGdJQ0FnZUR0Y2JpQWdabTl5SUNnZ095QnBJRHdnYmw5ellXMXdiR1Z6T3lBcksya2dLU0I3WEc0Z0lDQWdlQ0E5SUdrZ0tpQXlJQzhnYmw5ellXMXdiR1Z6SUMwZ01UdGNiaUFnSUNCamRYSjJaVnRwWFNBOUlDZ2dNeUFySUdzZ0tTQXFJSGdnS2lBeU1DQXFJR1JsWnlBdklDZ2dUV0YwYUM1UVNTQXJJR3NnS2lCTllYUm9MbUZpY3loNEtTQXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmpkWEoyWlR0Y2JuMDdYRzVjYmx4dWFXMXdiM0owSUh0SlUyOTFibVJRYkdGNVpYSXNJRWxRYkdGNVQzQjBhVzl1YzMwZ1puSnZiU0FuTGk5VGIzVnVaRkJzWVhsbGNpYzdYRzVwYlhCdmNuUWdkWFJwYkhNZ1puSnZiU0FuTGk5MWRHbHNjeWM3WEc1Y2JtbHVkR1Z5Wm1GalpTQkpVM2x1ZEdoUGNIUnBiMjV6SUh0Y2JpQWdkMkYyWldadmNtMVVlWEJsUHpvZ2MzUnlhVzVuTEZ4dWZWeHVYRzVqYjI1emRDQmlkV1ptWlhKVGFYcGxJRDBnTkRBNU5qdGNibU52Ym5OMElHTnlaV0YwWlVKeWIzZHVUbTlwYzJVZ1BTQmhkV1JwYjBOdmJuUmxlSFFnUFQ0Z2UxeHVJQ0FnSUhaaGNpQnNZWE4wVDNWMElEMGdNQzR3TzF4dUlDQWdJSFpoY2lCdWIyUmxJRDBnWVhWa2FXOURiMjUwWlhoMExtTnlaV0YwWlZOamNtbHdkRkJ5YjJObGMzTnZjaWhpZFdabVpYSlRhWHBsTENBeExDQXhLVHRjYmlBZ0lDQnViMlJsTG05dVlYVmthVzl3Y205alpYTnpJRDBnWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYjNWMGNIVjBJRDBnWlM1dmRYUndkWFJDZFdabVpYSXVaMlYwUTJoaGJtNWxiRVJoZEdFb01DazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWW5WbVptVnlVMmw2WlRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZDJocGRHVWdQU0JOWVhSb0xuSmhibVJ2YlNncElDb2dNaUF0SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUmJhVjBnUFNBb2JHRnpkRTkxZENBcklDZ3dMakF5SUNvZ2QyaHBkR1VwS1NBdklERXVNREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWE4wVDNWMElEMGdiM1YwY0hWMFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVzJsZElDbzlJRE11TlRzZ0x5OGdLSEp2ZFdkb2JIa3BJR052YlhCbGJuTmhkR1VnWm05eUlHZGhhVzVjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JtOWtaVHRjYm4wN1hHNWNibU5zWVhOeklFNXZhWE5sSUdsdGNHeGxiV1Z1ZEhNZ1NWTnZkVzVrVUd4aGVXVnlJSHRjYmlBZ2IzTmphV3hzWVhSdmNqb2dZVzU1TzF4dUlDQmpiMjUwWlhoME9pQkJkV1JwYjBOdmJuUmxlSFE3WEc0Z0lHZGhhVzVPYjJSbE8xeHVJQ0IzWVhabFUyaGhjR1Z5TzF4dUlDQndZVzV1WlhJNklGTjBaWEpsYjFCaGJtNWxjazV2WkdVN1hHNGdJR1pwYkhSbGNqdGNiaUFnWm1sc2RHVnlNanRjYmlBZ1kyOXVabWxuT2lCSlUzbHVkR2hQY0hScGIyNXpPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR052Ym5SbGVIUXNJR052Ym1acFp6ODZJRWxUZVc1MGFFOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMbU52Ym5SbGVIUWdQU0JqYjI1MFpYaDBPMXh1WEc0Z0lDQWdkR2hwY3k1amIyNW1hV2NnUFNCamIyNW1hV2NnUHlCamIyNW1hV2NnT2lCN2ZUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdhVzVwZENncElIdGNiaUFnSUNCMGFHbHpMbTl6WTJsc2JHRjBiM0lnUFNCamNtVmhkR1ZDY205M2JrNXZhWE5sS0hSb2FYTXVZMjl1ZEdWNGRDazdYRzRnSUNBZ0x5OTBhR2x6TG1OdmJtWnBaeTUzWVhabFptOXliVlI1Y0dVZ0ppWWdLSFJvYVhNdWIzTmphV3hzWVhSdmNpNTBlWEJsSUQwZ2RHaHBjeTVqYjI1bWFXY3VkMkYyWldadmNtMVVlWEJsS1R0Y2JseHVJQ0FnSUhSb2FYTXVaMkZwYms1dlpHVWdQU0IwYUdsekxtTnZiblJsZUhRdVkzSmxZWFJsUjJGcGJpZ3BPMXh1SUNBZ0lIUm9hWE11Y0dGdWJtVnlJRDBnZEdocGN5NWpiMjUwWlhoMExtTnlaV0YwWlZOMFpYSmxiMUJoYm01bGNpZ3BPMXh1SUNBZ0lIUm9hWE11Wm1sc2RHVnlJRDBnZEdocGN5NWpiMjUwWlhoMExtTnlaV0YwWlVKcGNYVmhaRVpwYkhSbGNpZ3BPMXh1SUNBZ0lIUm9hWE11Wm1sc2RHVnlMblI1Y0dVZ1BTQW5jR1ZoYTJsdVp5YzdYRzRnSUNBZ2RHaHBjeTVtYVd4MFpYSXlJRDBnZEdocGN5NWpiMjUwWlhoMExtTnlaV0YwWlVKcGNYVmhaRVpwYkhSbGNpZ3BPMXh1SUNBZ0lIUm9hWE11Wm1sc2RHVnlNaTUwZVhCbElEMGdKMkpoYm1Sd1lYTnpKenRjYmx4dUlDQWdJSFJvYVhNdWQyRjJaVk5vWVhCbGNpQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1amNtVmhkR1ZYWVhabFUyaGhjR1Z5S0NrN1hHNGdJQ0FnZEdocGN5NTNZWFpsVTJoaGNHVnlMbU4xY25abElEMGdiV0ZyWlVScGMzUnZjblJwYjI1RGRYSjJaU2c0TUNrN1hHNGdJQ0FnZEdocGN5NTNZWFpsVTJoaGNHVnlMbTkyWlhKellXMXdiR1VnUFNBbk5IZ25PMXh1WEc0Z0lDQWdkR2hwY3k1dmMyTnBiR3hoZEc5eUxtTnZibTVsWTNRb2RHaHBjeTUzWVhabFUyaGhjR1Z5S1R0Y2JpQWdJQ0IwYUdsekxuZGhkbVZUYUdGd1pYSXVZMjl1Ym1WamRDaDBhR2x6TG1acGJIUmxjaWs3WEc0Z0lDQWdkR2hwY3k1bWFXeDBaWEl1WTI5dWJtVmpkQ2gwYUdsekxtWnBiSFJsY2pJcE8xeHVJQ0FnSUhSb2FYTXVabWxzZEdWeU1pNWpiMjV1WldOMEtIUm9hWE11Y0dGdWJtVnlLVHRjYmlBZ0lDQjBhR2x6TG5CaGJtNWxjaTVqYjI1dVpXTjBLSFJvYVhNdVoyRnBiazV2WkdVcE8xeHVJQ0FnSUhSb2FYTXVaMkZwYms1dlpHVXVZMjl1Ym1WamRDaDBhR2x6TG1OdmJuUmxlSFF1WkdWemRHbHVZWFJwYjI0cE8xeHVYRzRnSUNBZ0x5OTBhR2x6TG05elkybHNiR0YwYjNJdWRIbHdaU0E5SUhSb2FYTXVZMjl1Wm1sbkxuZGhkbVZtYjNKdFZIbHdaU0EvSUhSb2FYTXVZMjl1Wm1sbkxuZGhkbVZtYjNKdFZIbHdaU0E2SUhWMGFXeHpMbVpzYVhCRGIybHVLQ2tnUHlBbmRISnBZVzVuYkdVbklEb2dKM05wYm1Vbk8xeHVJQ0FnSUhSb2FYTXVaMkZwYms1dlpHVXVaMkZwYmk1MllXeDFaU0E5SURBN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ2NHeGhlU2h2Y0hRNklFbFFiR0Y1VDNCMGFXOXVjeWtnZTF4dUlDQWdJR052Ym5OMElIdG1jbVZ4UFRJeU1Dd2dkR2x0WlQweExDQndZVzQ5TUN3Z2RtOXNQVEY5SUQwZ2IzQjBPMXh1SUNBZ0lIUm9hWE11YVc1cGRDZ3BPMXh1WEc0Z0lDQWdiR1YwSUdkaGFXNGdQU0F4TGpBN1hHNGdJQ0FnTHk5MGFHbHpMbTl6WTJsc2JHRjBiM0l1Wm5KbGNYVmxibU41TG5aaGJIVmxJRDBnWm5KbGNUdGNiaUFnSUNCMGFHbHpMbVpwYkhSbGNpNW1jbVZ4ZFdWdVkza3VkbUZzZFdVZ1BTQm1jbVZ4TzF4dUlDQWdJSFJvYVhNdVptbHNkR1Z5TGxFdWRtRnNkV1VnUFNBMU1DNDVNREU3WEc0Z0lDQWdkR2hwY3k1bWFXeDBaWEl1WjJGcGJpNTJZV3gxWlNBOUlESXdPMXh1WEc0Z0lDQWdkR2hwY3k1bWFXeDBaWEl5TG1aeVpYRjFaVzVqZVM1MllXeDFaU0E5SUdaeVpYRTdYRzRnSUNBZ2RHaHBjeTVtYVd4MFpYSXlMbEV1ZG1Gc2RXVWdQU0F4TlM0NU1ERTdYRzRnSUNBZ2RHaHBjeTVtYVd4MFpYSXlMbWRoYVc0dWRtRnNkV1VnUFNBMk1EdGNibHh1SUNBZ0lHOXdkQzVrYVhOMGIzSjBhVzl1SUNZbUlDaDBhR2x6TG5kaGRtVlRhR0Z3WlhJdVkzVnlkbVVnUFNCdFlXdGxSR2x6ZEc5eWRHbHZia04xY25abEtHOXdkQzVrYVhOMGIzSjBhVzl1S1NBcE8xeHVJQ0FnSUM4dklITnZiV1VnYzNSMWNHbGtJR0poYzJsaklIQjVjMk5vYjJGamIzVnpkR2xqSUhOb1lYQnBibWRjYmlBZ0lDQnBaaWhtY21WeElENGdNakF3S1NCbllXbHVJRDBnWjJGcGJpb3dMakV5TzF4dUlDQWdJSFJvYVhNdWNHRnVibVZ5TG5CaGJpNTJZV3gxWlNBOUlIQmhianRjYmlBZ0lDQjBhR2x6TG1kaGFXNU9iMlJsTG1kaGFXNHVkbUZzZFdVZ1BTQXdMakF3TVR0Y2JpQWdJQ0IwYUdsekxtZGhhVzVPYjJSbExtZGhhVzR1Wlhod2IyNWxiblJwWVd4U1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNoMmIyd2dLaUJuWVdsdUxDQjBhR2x6TG1OdmJuUmxlSFF1WTNWeWNtVnVkRlJwYldVZ0t5QjBhVzFsS1R0Y2JseHVYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDaDBhR2x6TG5OMGIzQXVZbWx1WkNoMGFHbHpLU3dnS0hScGJXVXJNU2tnS2lBeE1EQXdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhOMGIzQW9LU0I3WEc0Z0lDQWdkR2hwY3k1bllXbHVUbTlrWlM1bllXbHVMbk5sZEZSaGNtZGxkRUYwVkdsdFpTZ3dMQ0IwYUdsekxtTnZiblJsZUhRdVkzVnljbVZ1ZEZScGJXVXNJREF1TURFZ0tUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0I3SUU1dmFYTmxJSDA3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdlRtOXBjMlV1ZEhNaUxDSnBiWEJ2Y25RZ2UwaHZkMndzSUVodmQyeGxjbjBnWm5KdmJTQW5hRzkzYkdWeUp6dGNibWx0Y0c5eWRDQjFkR2xzY3lCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0I3U1ZOdmRXNWtVR3hoZVdWeUxDQkpVR3hoZVU5d2RHbHZibk1zSUVsVFlXMXdiR1Y5SUdaeWIyMGdKeTR2VTI5MWJtUlFiR0Y1WlhJbk8xeHVYRzVwYm5SbGNtWmhZMlVnU1ZCc1lYbGxjaUI3WEc0Z0lIQnNZWGxsY2pvZ1NHOTNiQ3hjYmlBZ1ltRnpaVVp5WlhFNklHNTFiV0psY2l4Y2JuMWNibHh1WTJ4aGMzTWdUWFZzZEdsVFlXMXdiR1Z5SUdsdGNHeGxiV1Z1ZEhNZ1NWTnZkVzVrVUd4aGVXVnlJSHRjYmlBZ2NHeGhlV1Z5Y3pvZ1NWQnNZWGxsY2x0ZE8xeHVJQ0JqYjI1MFpYaDBPaUJCZFdScGIwTnZiblJsZUhRN1hHNGdJR2RoYVc1T2IyUmxPMXh1SUNCd1lXNXVaWEk2SUZOMFpYSmxiMUJoYm01bGNrNXZaR1U3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWTI5dWRHVjRkQ3dnYjNCME9pQjdJSE5oYlhCc1pYTTZJRWxUWVcxd2JHVmJYU0I5SUNrZ2UxeHVJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDQTlJR052Ym5SbGVIUTdYRzRnSUNBZ2RHaHBjeTV3YkdGNVpYSnpJRDBnYjNCMExuTmhiWEJzWlhNdWJXRndLQ0J6WVcxd2JHVkRiMjVtYVdjZ1BUNGdLSHR3YkdGNVpYSTZJRzVsZHlCSWIzZHNLSHR6Y21NNklITmhiWEJzWlVOdmJtWnBaeTVtYVd4bGMzMHBMQ0JpWVhObFJuSmxjVG9nYzJGdGNHeGxRMjl1Wm1sbkxtWnlaWEY5S1NBcE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklIQnNZWGtvYjNCME9pQkpVR3hoZVU5d2RHbHZibk1wSUh0Y2JpQWdJQ0JqYjI1emRDQjdabkpsY1QweU1qQXNJSFJwYldVOU1Td2djR0Z1UFRBc0lIWnZiRDB4ZlNBOUlHOXdkRHRjYmx4dUlDQWdJR3hsZENCbllXbHVJRDBnTVR0Y2JpQWdJQ0JqYjI1emRDQnpZVzF3YkdWUWJHRjVaWElnUFNCMGFHbHpMbVpwYm1SRGJHOXpaWE4wVTJGdGNHeGxVR3hoZVdWeUtDQm1jbVZ4SUNrN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlEMGdjMkZ0Y0d4bFVHeGhlV1Z5TG5Cc1lYbGxjaTV3YkdGNUtDazdYRzRnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNXNiMjl3S0NCbVlXeHpaU3dnWTNWeWNtVnVkR3g1VUd4aGVXbHVaMU5oYlhCc1pVbEVJQ2s3WEc0Z0lDQWdjMkZ0Y0d4bFVHeGhlV1Z5TG5Cc1lYbGxjaTV5WVhSbEtDQjFkR2xzY3k1blpYUlNZWFJsUm5KdmJVWnlaWEYxWlc1amFXVnpLQ0JtY21WeExDQnpZVzF3YkdWUWJHRjVaWEl1WW1GelpVWnlaWEVnS1N3Z1kzVnljbVZ1ZEd4NVVHeGhlV2x1WjFOaGJYQnNaVWxFSUNrN1hHNGdJQ0FnTHk4Z2MyOXRaU0J6ZEhWd2FXUWdZbUZ6YVdNZ2NIbHpZMmh2WVdOdmRYTjBhV01nYzJoaGNHbHVaMXh1SUNBZ0lHbG1LR1p5WlhFZ1BpQXlNREFwSUdkaGFXNGdQU0JuWVdsdUtqQXVNanRjYmlBZ0lDQnpZVzF3YkdWUWJHRjVaWEl1Y0d4aGVXVnlMbVpoWkdVb0lEQXNJR2RoYVc0Z0tpQjJiMndzSURJd01Dd2dZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlDazdYRzRnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNXpkR1Z5Wlc4b0lIQmhiaXdnWTNWeWNtVnVkR3g1VUd4aGVXbHVaMU5oYlhCc1pVbEVJQ2s3WEc1Y2JseHVJQ0FnSUhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2MyRnRjR3hsVUd4aGVXVnlMbkJzWVhsbGNpNW1ZV1JsS0NCbllXbHVJQ29nZG05c0xDQXdMQ0F5TURBc0lHTjFjbkpsYm5Sc2VWQnNZWGxwYm1kVFlXMXdiR1ZKUkNBcE8xeHVJQ0FnSUNBZ2RHaHBjeTV6ZEc5d0tIUnBiV1VzSUhOaGJYQnNaVkJzWVhsbGNpd2dZM1Z5Y21WdWRHeDVVR3hoZVdsdVoxTmhiWEJzWlVsRUlDazdYRzRnSUNBZ2ZTNWlhVzVrS0hSb2FYTXBMQ0FvSUhScGJXVWdLaUF4TURBd0lDa2dLeUF5TURBcE95QXZMeUJoWkdScGJtY2dZU0F4TURBZ2JYTWdZblZtWm1WeUlIUnZJR0YyYjJsa0lHRnVlU0JwYzNOMVpYTmNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJSE4wYjNBb2RHbHRaU3dnYzJGdGNHeGxVR3hoZVdWeUxDQmpkWEp5Wlc1MGJIbFFiR0Y1YVc1blUyRnRjR3hsU1VRcElIdGNiaUFnSUNCM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lITmhiWEJzWlZCc1lYbGxjaTV3YkdGNVpYSXVjM1J2Y0NncE8xeHVJQ0FnSUgwdVltbHVaQ2gwYUdsektTd2dNekF3S1RzZ0x5OGdZV1JrYVc1bklHRWdNVEF3SUcxeklHSjFabVpsY2lCMGJ5QmhkbTlwWkNCaGJua2dhWE56ZFdWelhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdabWx1WkVOc2IzTmxjM1JUWVcxd2JHVlFiR0Y1WlhJb0lHWnlaWEU2Ym5WdFltVnlJQ2s2SUVsUWJHRjVaWElnZTF4dUlDQWdJQzh2SUVOaGJpQnZibXg1SUdkbGRDQjBhR1VnWTJ4dmMyVnpkQ0JtY21WeGRXVnVZM2tnYVc0Z2RHaGxJSE5sZENCdlppQlFiR0Y1WlhKekp5Qm1jbVZ4ZFdWdVkybGxjeUJ6YnlCblpYUWdkR2hoZENCbWNtVnhkV1Z1WTNrc0lIUm9aVzRnWm1sc2RHVnlJSFJvWlNCd2JHRjVaWEp6WEc0Z0lDQWdZMjl1YzNRZ1kyeHZjMlZ6ZEZCc1lYbGxja1p5WlhGMVpXNWplU0E5SUhWMGFXeHpMbWRsZEVOc2IzTmxjM1JOWlcxaVpYSW9abkpsY1N3Z2RHaHBjeTV3YkdGNVpYSnpMbTFoY0NnZ2NHeGhlV1Z5SUQwK0lIQnNZWGxsY2k1aVlYTmxSbkpsY1NrZ0tUdGNiaUFnSUNCeVpYUjFjbTRnZFhScGJITXVabWx1WkVsdVEyOXNiR1ZqZEdsdmJpZ2dkR2hwY3k1d2JHRjVaWEp6TENCdFpXMWlaWElnUFQ0Z2JXVnRZbVZ5SUQwOVBTQmpiRzl6WlhOMFVHeGhlV1Z5Um5KbGNYVmxibU41SUNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1RYVnNkR2xUWVcxd2JHVnlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDAxMWJIUnBVMkZ0Y0d4bGNpNTBjeUlzSWk4cUlWeHVJQ29nSUdodmQyeGxjaTVxY3lCMk1pNHdMakV5WEc0Z0tpQWdhRzkzYkdWeWFuTXVZMjl0WEc0Z0tseHVJQ29nSUNoaktTQXlNREV6TFRJd01UZ3NJRXBoYldWeklGTnBiWEJ6YjI0Z2IyWWdSMjlzWkVacGNtVWdVM1IxWkdsdmMxeHVJQ29nSUdkdmJHUm1hWEpsYzNSMVpHbHZjeTVqYjIxY2JpQXFYRzRnS2lBZ1RVbFVJRXhwWTJWdWMyVmNiaUFxTDF4dVhHNG9ablZ1WTNScGIyNG9LU0I3WEc1Y2JpQWdKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGdJQzhxS2lCSGJHOWlZV3dnVFdWMGFHOWtjeUFxS2k5Y2JpQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJSFJvWlNCbmJHOWlZV3dnWTI5dWRISnZiR3hsY2k0Z1FXeHNJR052Ym5SaGFXNWxaQ0J0WlhSb2IyUnpJR0Z1WkNCd2NtOXdaWEowYVdWeklHRndjR3g1WEc0Z0lDQXFJSFJ2SUdGc2JDQnpiM1Z1WkhNZ2RHaGhkQ0JoY21VZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jZ2IzSWdkMmxzYkNCaVpTQnBiaUIwYUdVZ1puVjBkWEpsTGx4dUlDQWdLaTljYmlBZ2RtRnlJRWh2ZDJ4bGNrZHNiMkpoYkNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11YVc1cGRDZ3BPMXh1SUNCOU8xeHVJQ0JJYjNkc1pYSkhiRzlpWVd3dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVVnZEdobElHZHNiMkpoYkNCSWIzZHNaWElnYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4bGNuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjeUI4ZkNCSWIzZHNaWEk3WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHZHNiMkpoYkNCSlJDQmpiM1Z1ZEdWeUxseHVJQ0FnSUNBZ2MyVnNaaTVmWTI5MWJuUmxjaUE5SURFd01EQTdYRzVjYmlBZ0lDQWdJQzh2SUVsdWRHVnlibUZzSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNCelpXeG1MbDlqYjJSbFkzTWdQU0I3ZlR0Y2JpQWdJQ0FnSUhObGJHWXVYMmh2ZDJ4eklEMGdXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXRkWFJsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzJWc1ppNWZkbTlzZFcxbElEMGdNVHRjYmlBZ0lDQWdJSE5sYkdZdVgyTmhibEJzWVhsRmRtVnVkQ0E5SUNkallXNXdiR0Y1ZEdoeWIzVm5hQ2M3WEc0Z0lDQWdJQ0J6Wld4bUxsOXVZWFpwWjJGMGIzSWdQU0FvZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkMmx1Wkc5M0xtNWhkbWxuWVhSdmNpa2dQeUIzYVc1a2IzY3VibUYyYVdkaGRHOXlJRG9nYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnVUhWaWJHbGpJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQWdJQ0J6Wld4bUxtMWhjM1JsY2tkaGFXNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2MyVnNaaTV1YjBGMVpHbHZJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpaV3htTG5WemFXNW5WMlZpUVhWa2FXOGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2MyVnNaaTVoZFhSdlUzVnpjR1Z1WkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J6Wld4bUxtTjBlQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQzh2SUZObGRDQjBieUJtWVd4elpTQjBieUJrYVhOaFlteGxJSFJvWlNCaGRYUnZJR2xQVXlCbGJtRmliR1Z5TGx4dUlDQWdJQ0FnYzJWc1ppNXRiMkpwYkdWQmRYUnZSVzVoWW14bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0x5OGdVMlYwZFhBZ2RHaGxJSFpoY21sdmRYTWdjM1JoZEdVZ2RtRnNkV1Z6SUdadmNpQm5iRzlpWVd3Z2RISmhZMnRwYm1jdVhHNGdJQ0FnSUNCelpXeG1MbDl6WlhSMWNDZ3BPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBMM05sZENCMGFHVWdaMnh2WW1Gc0lIWnZiSFZ0WlNCbWIzSWdZV3hzSUhOdmRXNWtjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRHYkc5aGRIMGdkbTlzSUZadmJIVnRaU0JtY205dElEQXVNQ0IwYnlBeExqQXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeUwwWnNiMkYwZlNBZ0lDQWdVbVYwZFhKdWN5QnpaV3htSUc5eUlHTjFjbkpsYm5RZ2RtOXNkVzFsTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSFp2YkhWdFpUb2dablZ1WTNScGIyNG9kbTlzS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dUlDQWdJQ0FnZG05c0lEMGdjR0Z5YzJWR2JHOWhkQ2gyYjJ3cE8xeHVYRzRnSUNBZ0lDQXZMeUJKWmlCM1pTQmtiMjRuZENCb1lYWmxJR0Z1SUVGMVpHbHZRMjl1ZEdWNGRDQmpjbVZoZEdWa0lIbGxkQ3dnY25WdUlIUm9aU0J6WlhSMWNDNWNiaUFnSUNBZ0lHbG1JQ2doYzJWc1ppNWpkSGdwSUh0Y2JpQWdJQ0FnSUNBZ2MyVjBkWEJCZFdScGIwTnZiblJsZUhRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyYjJ3Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIWnZiQ0ErUFNBd0lDWW1JSFp2YkNBOFBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM1p2YkhWdFpTQTlJSFp2YkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJFYjI0bmRDQjFjR1JoZEdVZ1lXNTVJRzltSUhSb1pTQnViMlJsY3lCcFppQjNaU0JoY21VZ2JYVjBaV1F1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5dGRYUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCMWMybHVaeUJYWldJZ1FYVmthVzhzSUhkbElHcDFjM1FnYm1WbFpDQjBieUJoWkdwMWMzUWdkR2hsSUcxaGMzUmxjaUJuWVdsdUxseHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNTFjMmx1WjFkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1dFlYTjBaWEpIWVdsdUxtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9kbTlzTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJtUWdZMmhoYm1kbElIWnZiSFZ0WlNCbWIzSWdZV3hzSUVoVVRVdzFJR0YxWkdsdklHNXZaR1Z6TGx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBUQTdJR2s4YzJWc1ppNWZhRzkzYkhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgyaHZkMnh6VzJsZExsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSMlYwSUdGc2JDQnZaaUIwYUdVZ2MyOTFibVJ6SUdsdUlIUm9hWE1nU0c5M2JDQm5jbTkxY0M1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW9iM2RzYzF0cFhTNWZaMlYwVTI5MWJtUkpaSE1vS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RHOXZjQ0IwYUhKdmRXZG9JR0ZzYkNCemIzVnVaSE1nWVc1a0lHTm9ZVzVuWlNCMGFHVWdkbTlzZFcxbGN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvOU1Ec2dhanhwWkhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZhRzkzYkhOYmFWMHVYM052ZFc1a1FubEpaQ2hwWkhOYmFsMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQ0FtSmlCemIzVnVaQzVmYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG5admJIVnRaU0E5SUhOdmRXNWtMbDkyYjJ4MWJXVWdLaUIyYjJ3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWXVYM1p2YkhWdFpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElHMTFkR2x1WnlCaGJtUWdkVzV0ZFhScGJtY2daMnh2WW1Gc2JIa3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdRbTl2YkdWaGJuMGdiWFYwWldRZ1NYTWdiWFYwWldRZ2IzSWdibTkwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRzExZEdVNklHWjFibU4wYVc5dUtHMTFkR1ZrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dVhHNGdJQ0FnSUNBdkx5QkpaaUIzWlNCa2IyNG5kQ0JvWVhabElHRnVJRUYxWkdsdlEyOXVkR1Y0ZENCamNtVmhkR1ZrSUhsbGRDd2djblZ1SUhSb1pTQnpaWFIxY0M1Y2JpQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1amRIZ3BJSHRjYmlBZ0lDQWdJQ0FnYzJWMGRYQkJkV1JwYjBOdmJuUmxlSFFvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2MyVnNaaTVmYlhWMFpXUWdQU0J0ZFhSbFpEdGNibHh1SUNBZ0lDQWdMeThnVjJsMGFDQlhaV0lnUVhWa2FXOHNJSGRsSUdwMWMzUWdibVZsWkNCMGJ5QnRkWFJsSUhSb1pTQnRZWE4wWlhJZ1oyRnBiaTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MblZ6YVc1blYyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1dFlYTjBaWEpIWVdsdUxtZGhhVzR1YzJWMFZtRnNkV1ZCZEZScGJXVW9iWFYwWldRZ1B5QXdJRG9nYzJWc1ppNWZkbTlzZFcxbExDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdURzl2Y0NCMGFISnZkV2RvSUdGdVpDQnRkWFJsSUdGc2JDQklWRTFNTlNCQmRXUnBieUJ1YjJSbGN5NWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4elpXeG1MbDlvYjNkc2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgyaHZkMnh6VzJsZExsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFZGxkQ0JoYkd3Z2IyWWdkR2hsSUhOdmRXNWtjeUJwYmlCMGFHbHpJRWh2ZDJ3Z1ozSnZkWEF1WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJodmQyeHpXMmxkTGw5blpYUlRiM1Z1WkVsa2N5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdURzl2Y0NCMGFISnZkV2RvSUdGc2JDQnpiM1Z1WkhNZ1lXNWtJRzFoY21zZ2RHaGxJR0YxWkdsdklHNXZaR1VnWVhNZ2JYVjBaV1F1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FqMHdPeUJxUEdsa2N5NXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZhRzkzYkhOYmFWMHVYM052ZFc1a1FubEpaQ2hwWkhOYmFsMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUWdKaVlnYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDI1dlpHVXViWFYwWldRZ1BTQW9iWFYwWldRcElEOGdkSEoxWlNBNklITnZkVzVrTGw5dGRYUmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Ykc5aFpDQmhibVFnWkdWemRISnZlU0JoYkd3Z1kzVnljbVZ1ZEd4NUlHeHZZV1JsWkNCSWIzZHNJRzlpYW1WamRITXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWJHOWhaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE1nZkh3Z1NHOTNiR1Z5TzF4dVhHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBYTmxiR1l1WDJodmQyeHpMbXhsYm1kMGFDMHhPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmYUc5M2JITmJhVjB1ZFc1c2IyRmtLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJCZFdScGIwTnZiblJsZUhRZ2RHOGdiV0ZyWlNCemRYSmxJR2wwSUdseklHWjFiR3g1SUhKbGMyVjBMbHh1SUNBZ0lDQWdhV1lnS0hObGJHWXVkWE5wYm1kWFpXSkJkV1JwYnlBbUppQnpaV3htTG1OMGVDQW1KaUIwZVhCbGIyWWdjMlZzWmk1amRIZ3VZMnh2YzJVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNExtTnNiM05sS0NrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2MyVjBkWEJCZFdScGIwTnZiblJsZUhRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOb1pXTnJJR1p2Y2lCamIyUmxZeUJ6ZFhCd2IzSjBJRzltSUhOd1pXTnBabWxqSUdWNGRHVnVjMmx2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUdWNGRDQkJkV1JwYnlCbWFXeGxJR1Y0ZEdWdWRHbHZiaTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZaR1ZqY3pvZ1puVnVZM1JwYjI0b1pYaDBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNZ2ZId2dTRzkzYkdWeUtTNWZZMjlrWldOelcyVjRkQzV5WlhCc1lXTmxLQzllZUMwdkxDQW5KeWxkTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUjFjQ0IyWVhKcGIzVnpJSE4wWVhSbElIWmhiSFZsY3lCbWIzSWdaMnh2WW1Gc0lIUnlZV05yYVc1bkxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMnhsY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYzJWMGRYQTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpJSHg4SUVodmQyeGxjanRjYmx4dUlDQWdJQ0FnTHk4Z1MyVmxjSE1nZEhKaFkyc2diMllnZEdobElITjFjM0JsYm1RdmNtVnpkVzFsSUhOMFlYUmxJRzltSUhSb1pTQkJkV1JwYjBOdmJuUmxlSFF1WEc0Z0lDQWdJQ0J6Wld4bUxuTjBZWFJsSUQwZ2MyVnNaaTVqZEhnZ1B5QnpaV3htTG1OMGVDNXpkR0YwWlNCOGZDQW5jblZ1Ym1sdVp5Y2dPaUFuY25WdWJtbHVaeWM3WEc1Y2JpQWdJQ0FnSUM4dklFRjFkRzl0WVhScFkyRnNiSGtnWW1WbmFXNGdkR2hsSURNd0xYTmxZMjl1WkNCemRYTndaVzVrSUhCeWIyTmxjM05jYmlBZ0lDQWdJSE5sYkdZdVgyRjFkRzlUZFhOd1pXNWtLQ2s3WEc1Y2JpQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlHRjFaR2x2SUdseklHRjJZV2xzWVdKc1pTNWNiaUFnSUNBZ0lHbG1JQ2doYzJWc1ppNTFjMmx1WjFkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRTV2SUdGMVpHbHZJR2x6SUdGMllXbHNZV0pzWlNCdmJpQjBhR2x6SUhONWMzUmxiU0JwWmlCdWIwRjFaR2x2SUdseklITmxkQ0IwYnlCMGNuVmxMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUVGMVpHbHZJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR1Z6ZENBOUlHNWxkeUJCZFdScGJ5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QnBaaUIwYUdVZ1kyRnVjR3hoZVhSb2NtOTFaMmdnWlhabGJuUWdhWE1nWVhaaGFXeGhZbXhsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwWlhOMExtOXVZMkZ1Y0d4aGVYUm9jbTkxWjJnZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5oYmxCc1lYbEZkbVZ1ZENBOUlDZGpZVzV3YkdGNUp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZHVnpkQ0IwYnlCdFlXdGxJSE4xY21VZ1lYVmthVzhnYVhOdUozUWdaR2x6WVdKc1pXUWdhVzRnU1c1MFpYSnVaWFFnUlhod2JHOXlaWEl1WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEdWemRDQTlJRzVsZHlCQmRXUnBieWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR1Z6ZEM1dGRYUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1Ym05QmRXUnBieUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0OVhHNWNiaUFnSUNBZ0lDOHZJRU5vWldOcklHWnZjaUJ6ZFhCd2IzSjBaV1FnWTI5a1pXTnpMbHh1SUNBZ0lDQWdhV1lnS0NGelpXeG1MbTV2UVhWa2FXOHBJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZjMlYwZFhCRGIyUmxZM01vS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5vWldOcklHWnZjaUJpY205M2MyVnlJSE4xY0hCdmNuUWdabTl5SUhaaGNtbHZkWE1nWTI5a1pXTnpJR0Z1WkNCallXTm9aU0IwYUdVZ2NtVnpkV3gwY3k1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM05sZEhWd1EyOWtaV056T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3lCOGZDQkliM2RzWlhJN1hHNGdJQ0FnSUNCMllYSWdZWFZrYVc5VVpYTjBJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnVFhWemRDQjNjbUZ3SUdsdUlHRWdkSEo1TDJOaGRHTm9JR0psWTJGMWMyVWdTVVV4TVNCcGJpQnpaWEoyWlhJZ2JXOWtaU0IwYUhKdmQzTWdZVzRnWlhKeWIzSXVYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCaGRXUnBiMVJsYzNRZ1BTQW9kSGx3Wlc5bUlFRjFaR2x2SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnUHlCdVpYY2dRWFZrYVc4b0tTQTZJRzUxYkd3N1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2doWVhWa2FXOVVaWE4wSUh4OElIUjVjR1Z2WmlCaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhaaGNpQnRjR1ZuVkdWemRDQTlJR0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2YlhCbFp6c25LUzV5WlhCc1lXTmxLQzllYm04a0x5d2dKeWNwTzF4dVhHNGdJQ0FnSUNBdkx5QlBjR1Z5WVNCMlpYSnphVzl1SUR3ek15Qm9ZWE1nYldsNFpXUWdUVkF6SUhOMWNIQnZjblFzSUhOdklIZGxJRzVsWldRZ2RHOGdZMmhsWTJzZ1ptOXlJR0Z1WkNCaWJHOWpheUJwZEM1Y2JpQWdJQ0FnSUhaaGNpQmphR1ZqYTA5d1pYSmhJRDBnYzJWc1ppNWZibUYyYVdkaGRHOXlJQ1ltSUhObGJHWXVYMjVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1YldGMFkyZ29MMDlRVWx4Y0x5aGJNQzAyWFM0cEwyY3BPMXh1SUNBZ0lDQWdkbUZ5SUdselQyeGtUM0JsY21FZ1BTQW9ZMmhsWTJ0UGNHVnlZU0FtSmlCd1lYSnpaVWx1ZENoamFHVmphMDl3WlhKaFd6QmRMbk53YkdsMEtDY3ZKeWxiTVYwc0lERXdLU0E4SURNektUdGNibHh1SUNBZ0lDQWdjMlZzWmk1ZlkyOWtaV056SUQwZ2UxeHVJQ0FnSUNBZ0lDQnRjRE02SUNFaEtDRnBjMDlzWkU5d1pYSmhJQ1ltSUNodGNHVm5WR1Z6ZENCOGZDQmhkV1JwYjFSbGMzUXVZMkZ1VUd4aGVWUjVjR1VvSjJGMVpHbHZMMjF3TXpzbktTNXlaWEJzWVdObEtDOWVibThrTHl3Z0p5Y3BLU2tzWEc0Z0lDQWdJQ0FnSUcxd1pXYzZJQ0VoYlhCbFoxUmxjM1FzWEc0Z0lDQWdJQ0FnSUc5d2RYTTZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dloyYzdJR052WkdWamN6MWNJbTl3ZFhOY0lpY3BMbkpsY0d4aFkyVW9MMTV1YnlRdkxDQW5KeWtzWEc0Z0lDQWdJQ0FnSUc5blp6b2dJU0ZoZFdScGIxUmxjM1F1WTJGdVVHeGhlVlI1Y0dVb0oyRjFaR2x2TDI5blp6c2dZMjlrWldOelBWd2lkbTl5WW1selhDSW5LUzV5WlhCc1lXTmxLQzllYm04a0x5d2dKeWNwTEZ4dUlDQWdJQ0FnSUNCdloyRTZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dloyYzdJR052WkdWamN6MWNJblp2Y21KcGMxd2lKeWt1Y21Wd2JHRmpaU2d2WG01dkpDOHNJQ2NuS1N4Y2JpQWdJQ0FnSUNBZ2QyRjJPaUFoSVdGMVpHbHZWR1Z6ZEM1allXNVFiR0Y1Vkhsd1pTZ25ZWFZrYVc4dmQyRjJPeUJqYjJSbFkzTTlYQ0l4WENJbktTNXlaWEJzWVdObEtDOWVibThrTHl3Z0p5Y3BMRnh1SUNBZ0lDQWdJQ0JoWVdNNklDRWhZWFZrYVc5VVpYTjBMbU5oYmxCc1lYbFVlWEJsS0NkaGRXUnBieTloWVdNN0p5a3VjbVZ3YkdGalpTZ3ZYbTV2SkM4c0lDY25LU3hjYmlBZ0lDQWdJQ0FnWTJGbU9pQWhJV0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2ZUMxallXWTdKeWt1Y21Wd2JHRmpaU2d2WG01dkpDOHNJQ2NuS1N4Y2JpQWdJQ0FnSUNBZ2JUUmhPaUFoSVNoaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwzZ3RiVFJoT3ljcElIeDhJR0YxWkdsdlZHVnpkQzVqWVc1UWJHRjVWSGx3WlNnbllYVmthVzh2YlRSaE95Y3BJSHg4SUdGMVpHbHZWR1Z6ZEM1allXNVFiR0Y1Vkhsd1pTZ25ZWFZrYVc4dllXRmpPeWNwS1M1eVpYQnNZV05sS0M5ZWJtOGtMeXdnSnljcExGeHVJQ0FnSUNBZ0lDQnRjRFE2SUNFaEtHRjFaR2x2VkdWemRDNWpZVzVRYkdGNVZIbHdaU2duWVhWa2FXOHZlQzF0Y0RRN0p5a2dmSHdnWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5dGNEUTdKeWtnZkh3Z1lYVmthVzlVWlhOMExtTmhibEJzWVhsVWVYQmxLQ2RoZFdScGJ5OWhZV003SnlrcExuSmxjR3hoWTJVb0wxNXVieVF2TENBbkp5a3NYRzRnSUNBZ0lDQWdJSGRsWW1FNklDRWhZWFZrYVc5VVpYTjBMbU5oYmxCc1lYbFVlWEJsS0NkaGRXUnBieTkzWldKdE95QmpiMlJsWTNNOVhDSjJiM0ppYVhOY0lpY3BMbkpsY0d4aFkyVW9MMTV1YnlRdkxDQW5KeWtzWEc0Z0lDQWdJQ0FnSUhkbFltMDZJQ0VoWVhWa2FXOVVaWE4wTG1OaGJsQnNZWGxVZVhCbEtDZGhkV1JwYnk5M1pXSnRPeUJqYjJSbFkzTTlYQ0oyYjNKaWFYTmNJaWNwTG5KbGNHeGhZMlVvTDE1dWJ5UXZMQ0FuSnlrc1hHNGdJQ0FnSUNBZ0lHUnZiR0o1T2lBaElXRjFaR2x2VkdWemRDNWpZVzVRYkdGNVZIbHdaU2duWVhWa2FXOHZiWEEwT3lCamIyUmxZM005WENKbFl5MHpYQ0luS1M1eVpYQnNZV05sS0M5ZWJtOGtMeXdnSnljcExGeHVJQ0FnSUNBZ0lDQm1iR0ZqT2lBaElTaGhkV1JwYjFSbGMzUXVZMkZ1VUd4aGVWUjVjR1VvSjJGMVpHbHZMM2d0Wm14aFl6c25LU0I4ZkNCaGRXUnBiMVJsYzNRdVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwyWnNZV003SnlrcExuSmxjR3hoWTJVb0wxNXVieVF2TENBbkp5bGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTmIySnBiR1VnWW5KdmQzTmxjbk1nZDJsc2JDQnZibXg1SUdGc2JHOTNJR0YxWkdsdklIUnZJR0psSUhCc1lYbGxaQ0JoWm5SbGNpQmhJSFZ6WlhJZ2FXNTBaWEpoWTNScGIyNHVYRzRnSUNBZ0lDb2dRWFIwWlcxd2RDQjBieUJoZFhSdmJXRjBhV05oYkd4NUlIVnViRzlqYXlCaGRXUnBieUJ2YmlCMGFHVWdabWx5YzNRZ2RYTmxjaUJwYm5SbGNtRmpkR2x2Ymk1Y2JpQWdJQ0FnS2lCRGIyNWpaWEIwSUdaeWIyMDZJR2gwZEhBNkx5OXdZWFZzWW1GcllYVnpMbU52YlM5MGRYUnZjbWxoYkhNdmFIUnRiRFV2ZDJWaUxXRjFaR2x2TFc5dUxXbHZjeTljYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc1pYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyVnVZV0pzWlUxdlltbHNaVUYxWkdsdk9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN5QjhmQ0JJYjNkc1pYSTdYRzVjYmlBZ0lDQWdJQzh2SUU5dWJIa2djblZ1SUhSb2FYTWdiMjRnYlc5aWFXeGxJR1JsZG1salpYTWdhV1lnWVhWa2FXOGdhWE51SjNRZ1lXeHlaV0ZrZVNCbFlXNWliR1ZrTGx4dUlDQWdJQ0FnZG1GeUlHbHpUVzlpYVd4bElEMGdMMmxRYUc5dVpYeHBVR0ZrZkdsUWIyUjhRVzVrY205cFpIeENiR0ZqYTBKbGNuSjVmRUpDTVRCOFUybHNhM3hOYjJKcEwya3VkR1Z6ZENoelpXeG1MbDl1WVhacFoyRjBiM0lnSmlZZ2MyVnNaaTVmYm1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZENrN1hHNGdJQ0FnSUNCMllYSWdhWE5VYjNWamFDQTlJQ0VoS0NnbmIyNTBiM1ZqYUdWdVpDY2dhVzRnZDJsdVpHOTNLU0I4ZkNBb2MyVnNaaTVmYm1GMmFXZGhkRzl5SUNZbUlITmxiR1l1WDI1aGRtbG5ZWFJ2Y2k1dFlYaFViM1ZqYUZCdmFXNTBjeUErSURBcElIeDhJQ2h6Wld4bUxsOXVZWFpwWjJGMGIzSWdKaVlnYzJWc1ppNWZibUYyYVdkaGRHOXlMbTF6VFdGNFZHOTFZMmhRYjJsdWRITWdQaUF3S1NrN1hHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmJXOWlhV3hsUlc1aFlteGxaQ0I4ZkNBaGMyVnNaaTVqZEhnZ2ZId2dLQ0ZwYzAxdlltbHNaU0FtSmlBaGFYTlViM1ZqYUNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnpaV3htTGw5dGIySnBiR1ZGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQzh2SUZOdmJXVWdiVzlpYVd4bElHUmxkbWxqWlhNdmNHeGhkR1p2Y20xeklHaGhkbVVnWkdsemRHOXlkR2x2YmlCcGMzTjFaWE1nZDJobGJpQnZjR1Z1YVc1bkwyTnNiM05wYm1jZ2RHRmljeUJoYm1RdmIzSWdkMlZpSUhacFpYZHpMbHh1SUNBZ0lDQWdMeThnUW5WbmN5QnBiaUIwYUdVZ1luSnZkM05sY2lBb1pYTndaV05wWVd4c2VTQk5iMkpwYkdVZ1UyRm1ZWEpwS1NCallXNGdZMkYxYzJVZ2RHaGxJSE5oYlhCc1pWSmhkR1VnZEc4Z1kyaGhibWRsSUdaeWIyMGdORFF4TURBZ2RHOGdORGd3TURBdVhHNGdJQ0FnSUNBdkx5QkNlU0JqWVd4c2FXNW5JRWh2ZDJ4bGNpNTFibXh2WVdRb0tTd2dkMlVnWTNKbFlYUmxJR0VnYm1WM0lFRjFaR2x2UTI5dWRHVjRkQ0IzYVhSb0lIUm9aU0JqYjNKeVpXTjBJSE5oYlhCc1pWSmhkR1V1WEc0Z0lDQWdJQ0JwWmlBb0lYTmxiR1l1WDIxdlltbHNaVlZ1Ykc5aFpHVmtJQ1ltSUhObGJHWXVZM1I0TG5OaGJYQnNaVkpoZEdVZ0lUMDlJRFEwTVRBd0tTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyMXZZbWxzWlZWdWJHOWhaR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNTFibXh2WVdRb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVTJOeVlYUmphQ0JpZFdabVpYSWdabTl5SUdWdVlXSnNhVzVuSUdsUFV5QjBieUJrYVhOd2IzTmxJRzltSUhkbFlpQmhkV1JwYnlCaWRXWm1aWEp6SUdOdmNuSmxZM1JzZVN3Z1lYTWdjR1Z5T2x4dUlDQWdJQ0FnTHk4Z2FIUjBjRG92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4eU5ERXhPVFk0TkZ4dUlDQWdJQ0FnYzJWc1ppNWZjMk55WVhSamFFSjFabVpsY2lBOUlITmxiR1l1WTNSNExtTnlaV0YwWlVKMVptWmxjaWd4TENBeExDQXlNakExTUNrN1hHNWNiaUFnSUNBZ0lDOHZJRU5oYkd3Z2RHaHBjeUJ0WlhSb2IyUWdiMjRnZEc5MVkyZ2djM1JoY25RZ2RHOGdZM0psWVhSbElHRnVaQ0J3YkdGNUlHRWdZblZtWm1WeUxGeHVJQ0FnSUNBZ0x5OGdkR2hsYmlCamFHVmpheUJwWmlCMGFHVWdZWFZrYVc4Z1lXTjBkV0ZzYkhrZ2NHeGhlV1ZrSUhSdklHUmxkR1Z5YldsdVpTQnBabHh1SUNBZ0lDQWdMeThnWVhWa2FXOGdhR0Z6SUc1dmR5QmlaV1Z1SUhWdWJHOWphMlZrSUc5dUlHbFBVeXdnUVc1a2NtOXBaQ3dnWlhSakxseHVJQ0FnSUNBZ2RtRnlJSFZ1Ykc5amF5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkdhWGdnUVc1a2NtOXBaQ0JqWVc0Z2JtOTBJSEJzWVhrZ2FXNGdjM1Z6Y0dWdVpDQnpkR0YwWlM1Y2JpQWdJQ0FnSUNBZ1NHOTNiR1Z5TGw5aGRYUnZVbVZ6ZFcxbEtDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdGdUlHVnRjSFI1SUdKMVptWmxjaTVjYmlBZ0lDQWdJQ0FnZG1GeUlITnZkWEpqWlNBOUlITmxiR1l1WTNSNExtTnlaV0YwWlVKMVptWmxjbE52ZFhKalpTZ3BPMXh1SUNBZ0lDQWdJQ0J6YjNWeVkyVXVZblZtWm1WeUlEMGdjMlZzWmk1ZmMyTnlZWFJqYUVKMVptWmxjanRjYmlBZ0lDQWdJQ0FnYzI5MWNtTmxMbU52Ym01bFkzUW9jMlZzWmk1amRIZ3VaR1Z6ZEdsdVlYUnBiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRkJzWVhrZ2RHaGxJR1Z0Y0hSNUlHSjFabVpsY2k1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpiM1Z5WTJVdWMzUmhjblFnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTG01dmRHVlBiaWd3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJVdWMzUmhjblFvTUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCRFlXeHNhVzVuSUhKbGMzVnRaU2dwSUc5dUlHRWdjM1JoWTJzZ2FXNXBkR2xoZEdWa0lHSjVJSFZ6WlhJZ1oyVnpkSFZ5WlNCcGN5QjNhR0YwSUdGamRIVmhiR3g1SUhWdWJHOWphM01nZEdobElHRjFaR2x2SUc5dUlFRnVaSEp2YVdRZ1EyaHliMjFsSUQ0OUlEVTFMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGJHWXVZM1I0TG5KbGMzVnRaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVZM1I0TG5KbGMzVnRaU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVTJWMGRYQWdZU0IwYVcxbGIzVjBJSFJ2SUdOb1pXTnJJSFJvWVhRZ2QyVWdZWEpsSUhWdWJHOWphMlZrSUc5dUlIUm9aU0J1WlhoMElHVjJaVzUwSUd4dmIzQXVYRzRnSUNBZ0lDQWdJSE52ZFhKalpTNXZibVZ1WkdWa0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTG1ScGMyTnZibTVsWTNRb01DazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSFZ1Ykc5amEyVmtJSE4wWVhSbElHRnVaQ0J3Y21WMlpXNTBJSFJvYVhNZ1kyaGxZMnNnWm5KdmJTQm9ZWEJ3Wlc1cGJtY2dZV2RoYVc0dVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJXOWlhV3hsUlc1aFlteGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNXRiMkpwYkdWQmRYUnZSVzVoWW14bElEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCU1pXMXZkbVVnZEdobElIUnZkV05vSUhOMFlYSjBJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYzNSaGNuUW5MQ0IxYm14dlkyc3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9aVzVrSnl3Z2RXNXNiMk5yTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDOHZJRk5sZEhWd0lHRWdkRzkxWTJnZ2MzUmhjblFnYkdsemRHVnVaWElnZEc4Z1lYUjBaVzF3ZENCaGJpQjFibXh2WTJzZ2FXNHVYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUhOMFlYSjBKeXdnZFc1c2IyTnJMQ0IwY25WbEtUdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2dkVzVzYjJOckxDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUYxZEc5dFlYUnBZMkZzYkhrZ2MzVnpjR1Z1WkNCMGFHVWdWMlZpSUVGMVpHbHZJRUYxWkdsdlEyOXVkR1Y0ZENCaFpuUmxjaUJ1YnlCemIzVnVaQ0JvWVhNZ2NHeGhlV1ZrSUdadmNpQXpNQ0J6WldOdmJtUnpMbHh1SUNBZ0lDQXFJRlJvYVhNZ2MyRjJaWE1nY0hKdlkyVnpjMmx1Wnk5bGJtVnlaM2tnWVc1a0lHWnBlR1Z6SUhaaGNtbHZkWE1nWW5KdmQzTmxjaTF6Y0dWamFXWnBZeUJpZFdkeklIZHBkR2dnWVhWa2FXOGdaMlYwZEdsdVp5QnpkSFZqYXk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMkYxZEc5VGRYTndaVzVrT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0Z6Wld4bUxtRjFkRzlUZFhOd1pXNWtJSHg4SUNGelpXeG1MbU4wZUNCOGZDQjBlWEJsYjJZZ2MyVnNaaTVqZEhndWMzVnpjR1Z1WkNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnZkh3Z0lVaHZkMnhsY2k1MWMybHVaMWRsWWtGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ1lXNTVJSE52ZFc1a2N5QmhjbVVnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHpaV3htTGw5b2IzZHNjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZhRzkzYkhOYmFWMHVYM2RsWWtGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FqMHdPeUJxUEhObGJHWXVYMmh2ZDJ4elcybGRMbDl6YjNWdVpITXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaaTVmYUc5M2JITmJhVjB1WDNOdmRXNWtjMXRxWFM1ZmNHRjFjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtTQjdYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJKWmlCdWJ5QnpiM1Z1WkNCb1lYTWdjR3hoZVdWa0lHRm1kR1Z5SURNd0lITmxZMjl1WkhNc0lITjFjM0JsYm1RZ2RHaGxJR052Ym5SbGVIUXVYRzRnSUNBZ0lDQnpaV3htTGw5emRYTndaVzVrVkdsdFpYSWdQU0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhObGJHWXVZWFYwYjFOMWMzQmxibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXpkWE53Wlc1a1ZHbHRaWElnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxuTjBZWFJsSUQwZ0ozTjFjM0JsYm1ScGJtY25PMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtTjBlQzV6ZFhOd1pXNWtLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1Mbk4wWVhSbElEMGdKM04xYzNCbGJtUmxaQ2M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZjbVZ6ZFcxbFFXWjBaWEpUZFhOd1pXNWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2MyVnNaaTVmY21WemRXMWxRV1owWlhKVGRYTndaVzVrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZllYVjBiMUpsYzNWdFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlMQ0F6TURBd01DazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmRYUnZiV0YwYVdOaGJHeDVJSEpsYzNWdFpTQjBhR1VnVjJWaUlFRjFaR2x2SUVGMVpHbHZRMjl1ZEdWNGRDQjNhR1Z1SUdFZ2JtVjNJSE52ZFc1a0lHbHpJSEJzWVhsbFpDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEliM2RzWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJGMWRHOVNaWE4xYldVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVZM1I0SUh4OElIUjVjR1Z2WmlCelpXeG1MbU4wZUM1eVpYTjFiV1VnUFQwOUlDZDFibVJsWm1sdVpXUW5JSHg4SUNGSWIzZHNaWEl1ZFhOcGJtZFhaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1Mbk4wWVhSbElEMDlQU0FuY25WdWJtbHVaeWNnSmlZZ2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtTQjdYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTGw5emRYTndaVzVrVkdsdFpYSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpaV3htTG5OMFlYUmxJRDA5UFNBbmMzVnpjR1Z1WkdWa0p5a2dlMXh1SUNBZ0lDQWdJQ0J6Wld4bUxtTjBlQzV5WlhOMWJXVW9LUzUwYUdWdUtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVjM1JoZEdVZ1BTQW5jblZ1Ym1sdVp5YzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZiV2wwSUhSdklHRnNiQ0JJYjNkc2N5QjBhR0YwSUhSb1pTQmhkV1JwYnlCb1lYTWdjbVZ6ZFcxbFpDNWNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwUFRBN0lHazhjMlZzWmk1ZmFHOTNiSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMmh2ZDJ4elcybGRMbDlsYldsMEtDZHlaWE4xYldVbktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZFhOd1pXNWtWR2x0WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2MyVnNaaTVmYzNWemNHVnVaRlJwYldWeUtUdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxsOXpkWE53Wlc1a1ZHbHRaWElnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGJHWXVjM1JoZEdVZ1BUMDlJQ2R6ZFhOd1pXNWthVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eVpYTjFiV1ZCWm5SbGNsTjFjM0JsYm1RZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeThnVTJWMGRYQWdkR2hsSUdkc2IySmhiQ0JoZFdScGJ5QmpiMjUwY205c2JHVnlMbHh1SUNCMllYSWdTRzkzYkdWeUlEMGdibVYzSUVodmQyeGxja2RzYjJKaGJDZ3BPMXh1WEc0Z0lDOHFLaUJIY205MWNDQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNGdZWFZrYVc4Z1ozSnZkWEFnWTI5dWRISnZiR3hsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzhnVUdGemMyVmtJR2x1SUhCeWIzQmxjblJwWlhNZ1ptOXlJSFJvYVhNZ1ozSnZkWEF1WEc0Z0lDQXFMMXh1SUNCMllYSWdTRzkzYkNBOUlHWjFibU4wYVc5dUtHOHBJSHRjYmlBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBdkx5QlVhSEp2ZHlCaGJpQmxjbkp2Y2lCcFppQnVieUJ6YjNWeVkyVWdhWE1nY0hKdmRtbGtaV1F1WEc0Z0lDQWdhV1lnS0NGdkxuTnlZeUI4ZkNCdkxuTnlZeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjBGdUlHRnljbUY1SUc5bUlITnZkWEpqWlNCbWFXeGxjeUJ0ZFhOMElHSmxJSEJoYzNObFpDQjNhWFJvSUdGdWVTQnVaWGNnU0c5M2JDNG5LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCelpXeG1MbWx1YVhRb2J5azdYRzRnSUgwN1hHNGdJRWh2ZDJ3dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVVnWVNCdVpYY2dTRzkzYkNCbmNtOTFjQ0J2WW1wbFkzUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUMkpxWldOMGZTQnZJRkJoYzNObFpDQnBiaUJ3Y205d1pYSjBhV1Z6SUdadmNpQjBhR2x6SUdkeWIzVndMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYVc1cGREb2dablZ1WTNScGIyNG9ieWtnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0F2THlCSlppQjNaU0JrYjI0bmRDQm9ZWFpsSUdGdUlFRjFaR2x2UTI5dWRHVjRkQ0JqY21WaGRHVmtJSGxsZEN3Z2NuVnVJSFJvWlNCelpYUjFjQzVjYmlBZ0lDQWdJR2xtSUNnaFNHOTNiR1Z5TG1OMGVDa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSMWNFRjFaR2x2UTI5dWRHVjRkQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlRaWFIxY0NCMWMyVnlMV1JsWm1sdVpXUWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZllYVjBiM0JzWVhrZ1BTQnZMbUYxZEc5d2JHRjVJSHg4SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZlptOXliV0YwSUQwZ0tIUjVjR1Z2WmlCdkxtWnZjbTFoZENBaFBUMGdKM04wY21sdVp5Y3BJRDhnYnk1bWIzSnRZWFFnT2lCYmJ5NW1iM0p0WVhSZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmYUhSdGJEVWdQU0J2TG1oMGJXdzFJSHg4SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZmJYVjBaV1FnUFNCdkxtMTFkR1VnZkh3Z1ptRnNjMlU3WEc0Z0lDQWdJQ0J6Wld4bUxsOXNiMjl3SUQwZ2J5NXNiMjl3SUh4OElHWmhiSE5sTzF4dUlDQWdJQ0FnYzJWc1ppNWZjRzl2YkNBOUlHOHVjRzl2YkNCOGZDQTFPMXh1SUNBZ0lDQWdjMlZzWmk1ZmNISmxiRzloWkNBOUlDaDBlWEJsYjJZZ2J5NXdjbVZzYjJGa0lEMDlQU0FuWW05dmJHVmhiaWNwSUQ4Z2J5NXdjbVZzYjJGa0lEb2dkSEoxWlR0Y2JpQWdJQ0FnSUhObGJHWXVYM0poZEdVZ1BTQnZMbkpoZEdVZ2ZId2dNVHRjYmlBZ0lDQWdJSE5sYkdZdVgzTndjbWwwWlNBOUlHOHVjM0J5YVhSbElIeDhJSHQ5TzF4dUlDQWdJQ0FnYzJWc1ppNWZjM0pqSUQwZ0tIUjVjR1Z2WmlCdkxuTnlZeUFoUFQwZ0ozTjBjbWx1WnljcElEOGdieTV6Y21NZ09pQmJieTV6Y21OZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmZG05c2RXMWxJRDBnYnk1MmIyeDFiV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQS9JRzh1ZG05c2RXMWxJRG9nTVR0Y2JpQWdJQ0FnSUhObGJHWXVYM2hvY2xkcGRHaERjbVZrWlc1MGFXRnNjeUE5SUc4dWVHaHlWMmwwYUVOeVpXUmxiblJwWVd4eklIeDhJR1poYkhObE8xeHVYRzRnSUNBZ0lDQXZMeUJUWlhSMWNDQmhiR3dnYjNSb1pYSWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZlpIVnlZWFJwYjI0Z1BTQXdPMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzUmhkR1VnUFNBbmRXNXNiMkZrWldRbk8xeHVJQ0FnSUNBZ2MyVnNaaTVmYzI5MWJtUnpJRDBnVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDlsYm1SVWFXMWxjbk1nUFNCN2ZUdGNiaUFnSUNBZ0lITmxiR1l1WDNGMVpYVmxJRDBnVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl3YkdGNVRHOWpheUE5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0F2THlCVFpYUjFjQ0JsZG1WdWRDQnNhWE4wWlc1bGNuTXVYRzRnSUNBZ0lDQnpaV3htTGw5dmJtVnVaQ0E5SUc4dWIyNWxibVFnUHlCYmUyWnVPaUJ2TG05dVpXNWtmVjBnT2lCYlhUdGNiaUFnSUNBZ0lITmxiR1l1WDI5dVptRmtaU0E5SUc4dWIyNW1ZV1JsSUQ4Z1czdG1iam9nYnk1dmJtWmhaR1Y5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXNiMkZrSUQwZ2J5NXZibXh2WVdRZ1B5QmJlMlp1T2lCdkxtOXViRzloWkgxZElEb2dXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZibXh2WVdSbGNuSnZjaUE5SUc4dWIyNXNiMkZrWlhKeWIzSWdQeUJiZTJadU9pQnZMbTl1Ykc5aFpHVnljbTl5ZlYwZ09pQmJYVHRjYmlBZ0lDQWdJSE5sYkdZdVgyOXVjR3hoZVdWeWNtOXlJRDBnYnk1dmJuQnNZWGxsY25KdmNpQS9JRnQ3Wm00NklHOHViMjV3YkdGNVpYSnliM0o5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXdZWFZ6WlNBOUlHOHViMjV3WVhWelpTQS9JRnQ3Wm00NklHOHViMjV3WVhWelpYMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5Cc1lYa2dQU0J2TG05dWNHeGhlU0EvSUZ0N1ptNDZJRzh1YjI1d2JHRjVmVjBnT2lCYlhUdGNiaUFnSUNBZ0lITmxiR1l1WDI5dWMzUnZjQ0E5SUc4dWIyNXpkRzl3SUQ4Z1czdG1iam9nYnk1dmJuTjBiM0I5WFNBNklGdGRPMXh1SUNBZ0lDQWdjMlZzWmk1ZmIyNXRkWFJsSUQwZ2J5NXZibTExZEdVZ1B5QmJlMlp1T2lCdkxtOXViWFYwWlgxZElEb2dXMTA3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZiblp2YkhWdFpTQTlJRzh1YjI1MmIyeDFiV1VnUHlCYmUyWnVPaUJ2TG05dWRtOXNkVzFsZlYwZ09pQmJYVHRjYmlBZ0lDQWdJSE5sYkdZdVgyOXVjbUYwWlNBOUlHOHViMjV5WVhSbElEOGdXM3RtYmpvZ2J5NXZibkpoZEdWOVhTQTZJRnRkTzF4dUlDQWdJQ0FnYzJWc1ppNWZiMjV6WldWcklEMGdieTV2Ym5ObFpXc2dQeUJiZTJadU9pQnZMbTl1YzJWbGEzMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5KbGMzVnRaU0E5SUZ0ZE8xeHVYRzRnSUNBZ0lDQXZMeUJYWldJZ1FYVmthVzhnYjNJZ1NGUk5URFVnUVhWa2FXOC9YRzRnSUNBZ0lDQnpaV3htTGw5M1pXSkJkV1JwYnlBOUlFaHZkMnhsY2k1MWMybHVaMWRsWWtGMVpHbHZJQ1ltSUNGelpXeG1MbDlvZEcxc05UdGNibHh1SUNBZ0lDQWdMeThnUVhWMGIyMWhkR2xqWVd4c2VTQjBjbmtnZEc4Z1pXNWhZbXhsSUdGMVpHbHZJRzl1SUdsUFV5NWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdTRzkzYkdWeUxtTjBlQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnU0c5M2JHVnlMbU4wZUNBbUppQkliM2RzWlhJdWJXOWlhV3hsUVhWMGIwVnVZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQkliM2RzWlhJdVgyVnVZV0pzWlUxdlltbHNaVUYxWkdsdktDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUV0bFpYQWdkSEpoWTJzZ2IyWWdkR2hwY3lCSWIzZHNJR2R5YjNWd0lHbHVJSFJvWlNCbmJHOWlZV3dnWTI5dWRISnZiR3hsY2k1Y2JpQWdJQ0FnSUVodmQyeGxjaTVmYUc5M2JITXVjSFZ6YUNoelpXeG1LVHRjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsZVNCelpXeGxZM1JsWkNCaGRYUnZjR3hoZVN3Z1lXUmtJR0VnY0d4aGVTQmxkbVZ1ZENCMGJ5QjBhR1VnYkc5aFpDQnhkV1YxWlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5aGRYUnZjR3hoZVNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWREb2dKM0JzWVhrbkxGeHVJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3htTG5Cc1lYa29LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCTWIyRmtJSFJvWlNCemIzVnlZMlVnWm1sc1pTQjFibXhsYzNNZ2IzUm9aWEozYVhObElITndaV05wWm1sbFpDNWNiaUFnSUNBZ0lHbG1JQ2h6Wld4bUxsOXdjbVZzYjJGa0tTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdWJHOWhaQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dURzloWkNCMGFHVWdZWFZrYVc4Z1ptbHNaUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc1pYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ2RYSnNJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2JtOGdZWFZrYVc4Z2FYTWdZWFpoYVd4aFlteGxMQ0J4ZFdsMElHbHRiV1ZrYVdGMFpXeDVMbHh1SUNBZ0lDQWdhV1lnS0VodmQyeGxjaTV1YjBGMVpHbHZLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyeHZZV1JsY25KdmNpY3NJRzUxYkd3c0lDZE9ieUJoZFdScGJ5QnpkWEJ3YjNKMExpY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCdmRYSWdjMjkxY21ObElHbHpJR2x1SUdGdUlHRnljbUY1TGx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXeG1MbDl6Y21NZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM055WXlBOUlGdHpaV3htTGw5emNtTmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCTWIyOXdJSFJvY205MVoyZ2dkR2hsSUhOdmRYSmpaWE1nWVc1a0lIQnBZMnNnZEdobElHWnBjbk4wSUc5dVpTQjBhR0YwSUdseklHTnZiWEJoZEdsaWJHVXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQVEE3SUdrOGMyVnNaaTVmYzNKakxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxlSFFzSUhOMGNqdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmWm05eWJXRjBJQ1ltSUhObGJHWXVYMlp2Y20xaGRGdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWxtSUdGdUlHVjRkR1Z1YzJsdmJpQjNZWE1nYzNCbFkybG1hV1ZrTENCMWMyVWdkR2hoZENCcGJuTjBaV0ZrTGx4dUlDQWdJQ0FnSUNBZ0lHVjRkQ0E5SUhObGJHWXVYMlp2Y20xaGRGdHBYVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUhOdmRYSmpaU0JwY3lCaElITjBjbWx1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQnpkSElnUFNCelpXeG1MbDl6Y21OYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCemRISWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxiV2wwS0Nkc2IyRmtaWEp5YjNJbkxDQnVkV3hzTENBblRtOXVMWE4wY21sdVp5Qm1iM1Z1WkNCcGJpQnpaV3hsWTNSbFpDQmhkV1JwYnlCemIzVnlZMlZ6SUMwZ2FXZHViM0pwYm1jdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZlSFJ5WVdOMElIUm9aU0JtYVd4bElHVjRkR1Z1YzJsdmJpQm1jbTl0SUhSb1pTQlZVa3dnYjNJZ1ltRnpaVFkwSUdSaGRHRWdWVkpKTGx4dUlDQWdJQ0FnSUNBZ0lHVjRkQ0E5SUM5ZVpHRjBZVHBoZFdScGIxeGNMeWhiWGpzc1hTc3BPeTlwTG1WNFpXTW9jM1J5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaDBJRDBnTDF4Y0xpaGJYaTVkS3lra0x5NWxlR1ZqS0hOMGNpNXpjR3hwZENnblB5Y3NJREVwV3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVIUWdQU0JsZUhSYk1WMHVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5Qk1iMmNnWVNCM1lYSnVhVzVuSUdsbUlHNXZJR1Y0ZEdWdWMybHZiaUIzWVhNZ1ptOTFibVF1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWGgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkT2J5Qm1hV3hsSUdWNGRHVnVjMmx2YmlCM1lYTWdabTkxYm1RdUlFTnZibk5wWkdWeUlIVnphVzVuSUhSb1pTQmNJbVp2Y20xaGRGd2lJSEJ5YjNCbGNuUjVJRzl5SUhOd1pXTnBabmtnWVc0Z1pYaDBaVzV6YVc5dUxpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2FXWWdkR2hwY3lCbGVIUmxibk5wYjI0Z2FYTWdZWFpoYVd4aFlteGxMbHh1SUNBZ0lDQWdJQ0JwWmlBb1pYaDBJQ1ltSUVodmQyeGxjaTVqYjJSbFkzTW9aWGgwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFZ5YkNBOUlITmxiR1l1WDNOeVkxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9JWFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2RzYjJGa1pYSnliM0luTENCdWRXeHNMQ0FuVG04Z1kyOWtaV01nYzNWd2NHOXlkQ0JtYjNJZ2MyVnNaV04wWldRZ1lYVmthVzhnYzI5MWNtTmxjeTRuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCelpXeG1MbDl6Y21NZ1BTQjFjbXc3WEc0Z0lDQWdJQ0J6Wld4bUxsOXpkR0YwWlNBOUlDZHNiMkZrYVc1bkp6dGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJR2h2YzNScGJtY2djR0ZuWlNCcGN5QklWRlJRVXlCaGJtUWdkR2hsSUhOdmRYSmpaU0JwYzI0bmRDeGNiaUFnSUNBZ0lDOHZJR1J5YjNBZ1pHOTNiaUIwYnlCSVZFMU1OU0JCZFdScGJ5QjBieUJoZG05cFpDQk5hWGhsWkNCRGIyNTBaVzUwSUdWeWNtOXljeTVjYmlBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1Ykc5allYUnBiMjR1Y0hKdmRHOWpiMndnUFQwOUlDZG9kSFJ3Y3pvbklDWW1JSFZ5YkM1emJHbGpaU2d3TENBMUtTQTlQVDBnSjJoMGRIQTZKeWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbDlvZEcxc05TQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDNkbFlrRjFaR2x2SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJ6YjNWdVpDQnZZbXBsWTNRZ1lXNWtJR0ZrWkNCcGRDQjBieUIwYUdVZ2NHOXZiQzVjYmlBZ0lDQWdJRzVsZHlCVGIzVnVaQ2h6Wld4bUtUdGNibHh1SUNBZ0lDQWdMeThnVEc5aFpDQmhibVFnWkdWamIyUmxJSFJvWlNCaGRXUnBieUJrWVhSaElHWnZjaUJ3YkdGNVltRmpheTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnSUNCc2IyRmtRblZtWm1WeUtITmxiR1lwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR3hoZVNCaElITnZkVzVrSUc5eUlISmxjM1Z0WlNCd2NtVjJhVzkxY3lCd2JHRjVZbUZqYXk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnSUh0VGRISnBibWN2VG5WdFltVnlmU0J6Y0hKcGRHVWdJQ0JUY0hKcGRHVWdibUZ0WlNCbWIzSWdjM0J5YVhSbElIQnNZWGxpWVdOcklHOXlJSE52ZFc1a0lHbGtJSFJ2SUdOdmJuUnBiblZsSUhCeVpYWnBiM1Z6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTBKdmIyeGxZVzU5SUdsdWRHVnlibUZzSUVsdWRHVnlibUZzSUZWelpUb2dkSEoxWlNCd2NtVjJaVzUwY3lCbGRtVnVkQ0JtYVhKcGJtY3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZTQWdJQ0FnSUNBZ0lDQlRiM1Z1WkNCSlJDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2JHRjVPaUJtZFc1amRHbHZiaWh6Y0hKcGRHVXNJR2x1ZEdWeWJtRnNLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnYVdRZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBdkx5QkVaWFJsY20xcGJtVWdhV1lnWVNCemNISnBkR1VzSUhOdmRXNWtJR2xrSUc5eUlHNXZkR2hwYm1jZ2QyRnpJSEJoYzNObFpGeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpjSEpwZEdVZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjM0J5YVhSbE8xeHVJQ0FnSUNBZ0lDQnpjSEpwZEdVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzNCeWFYUmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQnpaV3htTGw5emRHRjBaU0E5UFQwZ0oyeHZZV1JsWkNjZ0ppWWdJWE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQndZWE56WldRZ2MzQnlhWFJsSUdSdlpYTnVKM1FnWlhocGMzUXNJR1J2SUc1dmRHaHBibWN1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2MzQnlhWFJsSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QlZjMlVnZEdobElHUmxabUYxYkhRZ2MyOTFibVFnYzNCeWFYUmxJQ2h3YkdGNWN5QjBhR1VnWm5Wc2JDQmhkV1JwYnlCc1pXNW5kR2dwTGx4dUlDQWdJQ0FnSUNCemNISnBkR1VnUFNBblgxOWtaV1poZFd4MEp6dGNibHh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCMGFHVnlaU0JwY3lCaElITnBibWRzWlNCd1lYVnpaV1FnYzI5MWJtUWdkR2hoZENCcGMyNG5kQ0JsYm1SbFpDNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxjbVVnYVhNc0lIQnNZWGtnZEdoaGRDQnpiM1Z1WkM0Z1NXWWdibTkwTENCamIyNTBhVzUxWlNCaGN5QjFjM1ZoYkM1Y2JpQWdJQ0FnSUNBZ2RtRnlJRzUxYlNBOUlEQTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHpaV3htTGw5emIzVnVaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmYzI5MWJtUnpXMmxkTGw5d1lYVnpaV1FnSmlZZ0lYTmxiR1l1WDNOdmRXNWtjMXRwWFM1ZlpXNWtaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzUxYlNzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRZ1BTQnpaV3htTGw5emIzVnVaSE5iYVYwdVgybGtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNodWRXMGdQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Y0hKcGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xrSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QkhaWFFnZEdobElITmxiR1ZqZEdWa0lHNXZaR1VzSUc5eUlHZGxkQ0J2Ym1VZ1puSnZiU0IwYUdVZ2NHOXZiQzVjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUdsa0lEOGdjMlZzWmk1ZmMyOTFibVJDZVVsa0tHbGtLU0E2SUhObGJHWXVYMmx1WVdOMGFYWmxVMjkxYm1Rb0tUdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHUnZaWE51SjNRZ1pYaHBjM1FzSUdSdklHNXZkR2hwYm1jdVhHNGdJQ0FnSUNCcFppQW9JWE52ZFc1a0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlRaV3hsWTNRZ2RHaGxJSE53Y21sMFpTQmtaV1pwYm1sMGFXOXVMbHh1SUNBZ0lDQWdhV1lnS0dsa0lDWW1JQ0Z6Y0hKcGRHVXBJSHRjYmlBZ0lDQWdJQ0FnYzNCeWFYUmxJRDBnYzI5MWJtUXVYM053Y21sMFpTQjhmQ0FuWDE5a1pXWmhkV3gwSnp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdTV1lnZEdobElITnZkVzVrSUdoaGMyNG5kQ0JzYjJGa1pXUXNJSGRsSUcxMWMzUWdkMkZwZENCMGJ5Qm5aWFFnZEdobElHRjFaR2x2SjNNZ1pIVnlZWFJwYjI0dVhHNGdJQ0FnSUNBdkx5QlhaU0JoYkhOdklHNWxaV1FnZEc4Z2QyRnBkQ0IwYnlCdFlXdGxJSE4xY21VZ2QyVWdaRzl1SjNRZ2NuVnVJR2x1ZEc4Z2NtRmpaU0JqYjI1a2FYUnBiMjV6SUhkcGRHaGNiaUFnSUNBZ0lDOHZJSFJvWlNCdmNtUmxjaUJ2WmlCbWRXNWpkR2x2YmlCallXeHNjeTVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQnpjSEpwZEdVZ2RtRnNkV1VnYjI0Z2RHaHBjeUJ6YjNWdVpDNWNiaUFnSUNBZ0lDQWdjMjkxYm1RdVgzTndjbWwwWlNBOUlITndjbWwwWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJOWVd0eUlIUm9hWE1nYzI5MWJtUmxaQ0JoY3lCdWIzUWdaVzVrWldRZ2FXNGdZMkZ6WlNCaGJtOTBhR1Z5SUhOdmRXNWtJR2x6SUhCc1lYbGxaQ0JpWldadmNtVWdkR2hwY3lCdmJtVWdiRzloWkhNdVhHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5bGJtUmxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0IwYUdVZ2MyOTFibVFnZEc4Z2RHaGxJSEYxWlhWbElIUnZJR0psSUhCc1lYbGxaQ0J2YmlCc2IyRmtMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MyOTFibVJKWkNBOUlITnZkVzVrTGw5cFpEdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmNYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R3YkdGNUp5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d2JHRjVLSE52ZFc1a1NXUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE52ZFc1a1NXUTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVSdmJpZDBJSEJzWVhrZ2RHaGxJSE52ZFc1a0lHbG1JR0Z1SUdsa0lIZGhjeUJ3WVhOelpXUWdZVzVrSUdsMElHbHpJR0ZzY21WaFpIa2djR3hoZVdsdVp5NWNiaUFnSUNBZ0lHbG1JQ2hwWkNBbUppQWhjMjkxYm1RdVgzQmhkWE5sWkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVY21sbloyVnlJSFJvWlNCd2JHRjVJR1YyWlc1MExDQnBiaUJ2Y21SbGNpQjBieUJyWldWd0lHbDBaWEpoZEdsdVp5QjBhSEp2ZFdkb0lIRjFaWFZsTGx4dUlDQWdJQ0FnSUNCcFppQW9JV2x1ZEdWeWJtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmYkc5aFpGRjFaWFZsS0Nkd2JHRjVKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDJsa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElFRjFaR2x2UTI5dWRHVjRkQ0JwYzI0bmRDQnpkWE53Wlc1a1pXUXNJR0Z1WkNCeVpYTjFiV1VnYVhRZ2FXWWdhWFFnYVhNdVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdTRzkzYkdWeUxsOWhkWFJ2VW1WemRXMWxLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQm9iM2NnYkc5dVp5QjBieUJ3YkdGNUlHWnZjaUJoYm1RZ2QyaGxjbVVnZEc4Z2MzUmhjblFnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJSFpoY2lCelpXVnJJRDBnVFdGMGFDNXRZWGdvTUN3Z2MyOTFibVF1WDNObFpXc2dQaUF3SUQ4Z2MyOTFibVF1WDNObFpXc2dPaUJ6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXZJREV3TURBcE8xeHVJQ0FnSUNBZ2RtRnlJR1IxY21GMGFXOXVJRDBnVFdGMGFDNXRZWGdvTUN3Z0tDaHpaV3htTGw5emNISnBkR1ZiYzNCeWFYUmxYVnN3WFNBcklITmxiR1l1WDNOd2NtbDBaVnR6Y0hKcGRHVmRXekZkS1NBdklERXdNREFwSUMwZ2MyVmxheWs3WEc0Z0lDQWdJQ0IyWVhJZ2RHbHRaVzkxZENBOUlDaGtkWEpoZEdsdmJpQXFJREV3TURBcElDOGdUV0YwYUM1aFluTW9jMjkxYm1RdVgzSmhkR1VwTzF4dVhHNGdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSEJoY21GdFpYUmxjbk1nYjJZZ2RHaGxJSE52ZFc1a1hHNGdJQ0FnSUNCemIzVnVaQzVmY0dGMWMyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZlpXNWtaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSE52ZFc1a0xsOXpjSEpwZEdVZ1BTQnpjSEpwZEdVN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzJWbGF5QTlJSE5sWldzN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzNSaGNuUWdQU0J6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXZJREV3TURBN1hHNGdJQ0FnSUNCemIzVnVaQzVmYzNSdmNDQTlJQ2h6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzd1hTQXJJSE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkV3pGZEtTQXZJREV3TURBN1hHNGdJQ0FnSUNCemIzVnVaQzVmYkc5dmNDQTlJQ0VoS0hOdmRXNWtMbDlzYjI5d0lIeDhJSE5sYkdZdVgzTndjbWwwWlZ0emNISnBkR1ZkV3pKZEtUdGNibHh1SUNBZ0lDQWdMeThnUW1WbmFXNGdkR2hsSUdGamRIVmhiQ0J3YkdGNVltRmpheTVjYmlBZ0lDQWdJSFpoY2lCdWIyUmxJRDBnYzI5MWJtUXVYMjV2WkdVN1hHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdMeThnUm1seVpTQjBhR2x6SUhkb1pXNGdkR2hsSUhOdmRXNWtJR2x6SUhKbFlXUjVJSFJ2SUhCc1lYa2dkRzhnWW1WbmFXNGdWMlZpSUVGMVpHbHZJSEJzWVhsaVlXTnJMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHeGhlVmRsWWtGMVpHbHZJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmNtVm1jbVZ6YUVKMVptWmxjaWh6YjNWdVpDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRaWFIxY0NCMGFHVWdjR3hoZVdKaFkyc2djR0Z5WVcxekxseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCMmIyd2dQU0FvYzI5MWJtUXVYMjExZEdWa0lIeDhJSE5sYkdZdVgyMTFkR1ZrS1NBL0lEQWdPaUJ6YjNWdVpDNWZkbTlzZFcxbE8xeHVJQ0FnSUNBZ0lDQWdJRzV2WkdVdVoyRnBiaTV6WlhSV1lXeDFaVUYwVkdsdFpTaDJiMndzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YkdGNVUzUmhjblFnUFNCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVR3hoZVNCMGFHVWdjMjkxYm1RZ2RYTnBibWNnZEdobElITjFjSEJ2Y25SbFpDQnRaWFJvYjJRdVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ1YjJSbExtSjFabVpsY2xOdmRYSmpaUzV6ZEdGeWRDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDlzYjI5d0lEOGdibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVibTkwWlVkeVlXbHVUMjRvTUN3Z2MyVmxheXdnT0RZME1EQXBJRG9nYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ym05MFpVZHlZV2x1VDI0b01Dd2djMlZsYXl3Z1pIVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYkc5dmNDQS9JRzV2WkdVdVluVm1abVZ5VTI5MWNtTmxMbk4wWVhKMEtEQXNJSE5sWldzc0lEZzJOREF3S1NBNklHNXZaR1V1WW5WbVptVnlVMjkxY21ObExuTjBZWEowS0RBc0lITmxaV3NzSUdSMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRkR0Z5ZENCaElHNWxkeUIwYVcxbGNpQnBaaUJ1YjI1bElHbHpJSEJ5WlhObGJuUXVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1Z2ZFhRZ0lUMDlJRWx1Wm1sdWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJtUlVhVzFsY25OYmMyOTFibVF1WDJsa1hTQTlJSE5sZEZScGJXVnZkWFFvYzJWc1ppNWZaVzVrWldRdVltbHVaQ2h6Wld4bUxDQnpiM1Z1WkNrc0lIUnBiV1Z2ZFhRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYVc1MFpYSnVZV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoSWIzZHNaWEl1YzNSaGRHVWdQVDA5SUNkeWRXNXVhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEJzWVhsWFpXSkJkV1JwYnlncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWIyNWpaU2duY21WemRXMWxKeXdnY0d4aGVWZGxZa0YxWkdsdktUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFTmhibU5sYkNCMGFHVWdaVzVrSUhScGJXVnlMbHh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGeVZHbHRaWElvYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx5WlNCMGFHbHpJSGRvWlc0Z2RHaGxJSE52ZFc1a0lHbHpJSEpsWVdSNUlIUnZJSEJzWVhrZ2RHOGdZbVZuYVc0Z1NGUk5URFVnUVhWa2FXOGdjR3hoZVdKaFkyc3VYRzRnSUNBZ0lDQWdJSFpoY2lCd2JHRjVTSFJ0YkRVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCdWIyUmxMbU4xY25KbGJuUlVhVzFsSUQwZ2MyVmxhenRjYmlBZ0lDQWdJQ0FnSUNCdWIyUmxMbTExZEdWa0lEMGdjMjkxYm1RdVgyMTFkR1ZrSUh4OElITmxiR1l1WDIxMWRHVmtJSHg4SUVodmQyeGxjaTVmYlhWMFpXUWdmSHdnYm05a1pTNXRkWFJsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnViMlJsTG5admJIVnRaU0E5SUhOdmRXNWtMbDkyYjJ4MWJXVWdLaUJJYjNkc1pYSXVkbTlzZFcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnYm05a1pTNXdiR0Y1WW1GamExSmhkR1VnUFNCemIzVnVaQzVmY21GMFpUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFMXZZbWxzWlNCaWNtOTNjMlZ5Y3lCM2FXeHNJSFJvY205M0lHRnVJR1Z5Y205eUlHbG1JSFJvYVhNZ2FYTWdZMkZzYkdWa0lIZHBkR2h2ZFhRZ2RYTmxjaUJwYm5SbGNtRmpkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCc1lYa2dQU0J1YjJSbExuQnNZWGtvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UzVndjRzl5ZENCdmJHUmxjaUJpY205M2MyVnljeUIwYUdGMElHUnZiaWQwSUhOMWNIQnZjblFnY0hKdmJXbHpaWE1zSUdGdVpDQjBhSFZ6SUdSdmJpZDBJR2hoZG1VZ2RHaHBjeUJwYzNOMVpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1VISnZiV2x6WlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2NHeGhlU0JwYm5OMFlXNWpaVzltSUZCeWIyMXBjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXMXdiR1Z0Wlc1MGN5QmhJR3h2WTJzZ2RHOGdjSEpsZG1WdWRDQkVUMDFGZUdObGNIUnBiMjQ2SUZSb1pTQndiR0Y1S0NrZ2NtVnhkV1Z6ZENCM1lYTWdhVzUwWlhKeWRYQjBaV1FnWW5rZ1lTQmpZV3hzSUhSdklIQmhkWE5sS0NrdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0JzWVhsTWIyTnJJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWld4bFlYTmxjeUIwYUdVZ2JHOWpheUJoYm1RZ1pYaGxZM1YwWlhNZ2NYVmxkV1ZrSUdGamRHbHZibk11WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWRXNU1iMkZrVVhWbGRXVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDl3YkdGNVRHOWpheUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFXNTBaWEp1WVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjNCc1lYa25MQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0d4aGVTNTBhR1Z1S0hKMWJreHZZV1JSZFdWMVpTd2djblZ1VEc5aFpGRjFaWFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvSVdsdWRHVnlibUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjBhVzVuSUhKaGRHVWdZbVZtYjNKbElIQnNZWGxwYm1jZ2QyOXVKM1FnZDI5eWF5QnBiaUJKUlN3Z2MyOGdkMlVnYzJWMElHbDBJR0ZuWVdsdUlHaGxjbVV1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5Cc1lYbGlZV05yVW1GMFpTQTlJSE52ZFc1a0xsOXlZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnYm05a1pTQnBjeUJ6ZEdsc2JDQndZWFZ6WldRc0lIUm9aVzRnZDJVZ1kyRnVJR0Z6YzNWdFpTQjBhR1Z5WlNCM1lYTWdZU0J3YkdGNVltRmpheUJwYzNOMVpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHViMlJsTG5CaGRYTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxiV2wwS0Nkd2JHRjVaWEp5YjNJbkxDQnpiM1Z1WkM1ZmFXUXNJQ2RRYkdGNVltRmpheUIzWVhNZ2RXNWhZbXhsSUhSdklITjBZWEowTGlCVWFHbHpJR2x6SUcxdmMzUWdZMjl0Ylc5dWJIa2dZVzRnYVhOemRXVWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjI5dUlHMXZZbWxzWlNCa1pYWnBZMlZ6SUhkb1pYSmxJSEJzWVhsaVlXTnJJSGRoY3lCdWIzUWdkMmwwYUdsdUlHRWdkWE5sY2lCcGJuUmxjbUZqZEdsdmJpNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjFjQ0IwYUdVZ1pXNWtJSFJwYldWeUlHOXVJSE53Y21sMFpYTWdiM0lnYkdsemRHVnVJR1p2Y2lCMGFHVWdaVzVrWldRZ1pYWmxiblF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNCeWFYUmxJQ0U5UFNBblgxOWtaV1poZFd4MEp5QjhmQ0J6YjNWdVpDNWZiRzl2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDlsYm1SVWFXMWxjbk5iYzI5MWJtUXVYMmxrWFNBOUlITmxkRlJwYldWdmRYUW9jMlZzWmk1ZlpXNWtaV1F1WW1sdVpDaHpaV3htTENCemIzVnVaQ2tzSUhScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTVmWlc1a1ZHbHRaWEp6VzNOdmRXNWtMbDlwWkYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCR2FYSmxJR1Z1WkdWa0lHOXVJSFJvYVhNZ1lYVmthVzhnYm05a1pTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJtUmxaQ2h6YjNWdVpDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdseklHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblpXNWtaV1FuTENCelpXeG1MbDlsYm1SVWFXMWxjbk5iYzI5MWJtUXVYMmxrWFN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyVnVaR1ZrSnl3Z2MyVnNaaTVmWlc1a1ZHbHRaWEp6VzNOdmRXNWtMbDlwWkYwc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM0JzWVhsbGNuSnZjaWNzSUhOdmRXNWtMbDlwWkN3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VHeGhlU0JwYlcxbFpHbGhkR1ZzZVNCcFppQnlaV0ZrZVN3Z2IzSWdkMkZwZENCbWIzSWdkR2hsSUNkallXNXdiR0Y1ZEdoeWIzVm5hQ2RsSUhabGJuUXVYRzRnSUNBZ0lDQWdJSFpoY2lCc2IyRmtaV1JPYjFKbFlXUjVVM1JoZEdVZ1BTQW9kMmx1Wkc5M0lDWW1JSGRwYm1SdmR5NWxhbVZqZEdFcElIeDhJQ2doYm05a1pTNXlaV0ZrZVZOMFlYUmxJQ1ltSUVodmQyeGxjaTVmYm1GMmFXZGhkRzl5TG1selEyOWpiMjl1U2xNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTNXlaV0ZrZVZOMFlYUmxJRDQ5SURNZ2ZId2diRzloWkdWa1RtOVNaV0ZrZVZOMFlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NHeGhlVWgwYld3MUtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHeHBjM1JsYm1WeUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJDWldkcGJpQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lYbElkRzFzTlNncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRiR1ZoY2lCMGFHbHpJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0VodmQyeGxjaTVmWTJGdVVHeGhlVVYyWlc1MExDQnNhWE4wWlc1bGNpd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRWh2ZDJ4bGNpNWZZMkZ1VUd4aGVVVjJaVzUwTENCc2FYTjBaVzVsY2l3Z1ptRnNjMlVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnUTJGdVkyVnNJSFJvWlNCbGJtUWdkR2x0WlhJdVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZlkyeGxZWEpVYVcxbGNpaHpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6YjNWdVpDNWZhV1E3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCaGRYTmxJSEJzWVhsaVlXTnJJR0Z1WkNCellYWmxJR04xY25KbGJuUWdjRzl6YVhScGIyNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQnBaQ0JVYUdVZ2MyOTFibVFnU1VRZ0tHVnRjSFI1SUhSdklIQmhkWE5sSUdGc2JDQnBiaUJuY205MWNDa3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVhWelpUb2dablZ1WTNScGIyNG9hV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhOdmRXNWtJR2hoYzI0bmRDQnNiMkZrWldRZ2IzSWdZU0J3YkdGNUtDa2djSEp2YldselpTQnBjeUJ3Wlc1a2FXNW5MQ0JoWkdRZ2FYUWdkRzhnZEdobElHeHZZV1FnY1hWbGRXVWdkRzhnY0dGMWMyVWdkMmhsYmlCallYQmhZbXhsTGx4dUlDQWdJQ0FnYVdZZ0tITmxiR1l1WDNOMFlYUmxJQ0U5UFNBbmJHOWhaR1ZrSnlCOGZDQnpaV3htTGw5d2JHRjVURzlqYXlrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWREb2dKM0JoZFhObEp5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d1lYVnpaU2hwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdibThnYVdRZ2FYTWdjR0Z6YzJWa0xDQm5aWFFnWVd4c0lFbEVKM01nZEc4Z1ltVWdjR0YxYzJWa0xseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmx4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdVZ1pXNWtJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhjbFJwYldWeUtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkVzVrSUNZbUlDRnpiM1Z1WkM1ZmNHRjFjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVW1WelpYUWdkR2hsSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM05sWldzZ1BTQnpaV3htTG5ObFpXc29hV1J6VzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVM1J2Y0NCamRYSnlaVzUwYkhrZ2NuVnVibWx1WnlCbVlXUmxjeTVjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDl6ZEc5d1JtRmtaU2hwWkhOYmFWMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE52ZFc1a0xsOXViMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmZDJWaVFYVmthVzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0J6YjNWdVpDQm9ZWE1nWW1WbGJpQmpjbVZoZEdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjM1J2Y0NBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ym05MFpVOW1aaWd3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjM1J2Y0Nnd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5zWldGdUlIVndJSFJvWlNCaWRXWm1aWElnYzI5MWNtTmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhia0oxWm1abGNpaHpiM1Z1WkM1ZmJtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZwYzA1aFRpaHpiM1Z1WkM1ZmJtOWtaUzVrZFhKaGRHbHZiaWtnZkh3Z2MyOTFibVF1WDI1dlpHVXVaSFZ5WVhScGIyNGdQVDA5SUVsdVptbHVhWFI1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExuQmhkWE5sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtbHlaU0IwYUdVZ2NHRjFjMlVnWlhabGJuUXNJSFZ1YkdWemN5QmdkSEoxWldBZ2FYTWdjR0Z6YzJWa0lHRnpJSFJvWlNBeWJtUWdZWEpuZFcxbGJuUXVYRzRnSUNBZ0lDQWdJR2xtSUNnaFlYSm5kVzFsYm5Seld6RmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmWlcxcGRDZ25jR0YxYzJVbkxDQnpiM1Z1WkNBL0lITnZkVzVrTGw5cFpDQTZJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVGRHOXdJSEJzWVhsaVlXTnJJR0Z1WkNCeVpYTmxkQ0IwYnlCemRHRnlkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUZSb1pTQnpiM1Z1WkNCSlJDQW9aVzF3ZEhrZ2RHOGdjM1J2Y0NCaGJHd2dhVzRnWjNKdmRYQXBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMEp2YjJ4bFlXNTlJR2x1ZEdWeWJtRnNJRWx1ZEdWeWJtRnNJRlZ6WlRvZ2RISjFaU0J3Y21WMlpXNTBjeUJsZG1WdWRDQm1hWEpwYm1jdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NHOTNiSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkRzl3T2lCbWRXNWpkR2x2YmlocFpDd2dhVzUwWlhKdVlXd3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHaGhjMjRuZENCc2IyRmtaV1FzSUdGa1pDQnBkQ0IwYnlCMGFHVWdiRzloWkNCeGRXVjFaU0IwYnlCemRHOXdJSGRvWlc0Z1kyRndZV0pzWlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5emRHRjBaU0FoUFQwZ0oyeHZZV1JsWkNjcElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmNYVmxkV1V1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R6ZEc5d0p5eGNiaUFnSUNBZ0lDQWdJQ0JoWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1emRHOXdLR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCSlppQnVieUJwWkNCcGN5QndZWE56WldRc0lHZGxkQ0JoYkd3Z1NVUW5jeUIwYnlCaVpTQnpkRzl3Y0dWa0xseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmx4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGJHVmhjaUIwYUdVZ1pXNWtJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQnpaV3htTGw5amJHVmhjbFJwYldWeUtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkVzVrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVW1WelpYUWdkR2hsSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM05sWldzZ1BTQnpiM1Z1WkM1ZmMzUmhjblFnZkh3Z01EdGNiaUFnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDlsYm1SbFpDQTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCVGRHOXdJR04xY25KbGJuUnNlU0J5ZFc1dWFXNW5JR1poWkdWekxseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTjBiM0JHWVdSbEtHbGtjMXRwWFNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyOTFibVF1WDI1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElITnZkVzVrSjNNZ1FYVmthVzlDZFdabVpYSlRiM1Z5WTJWT2IyUmxJR2hoY3lCaVpXVnVJR055WldGMFpXUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaUzV6ZEc5d0lEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WW5WbVptVnlVMjkxY21ObExtNXZkR1ZQWm1Zb01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTNXpkRzl3S0RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOc1pXRnVJSFZ3SUhSb1pTQmlkV1ptWlhJZ2MyOTFjbU5sTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGdVFuVm1abVZ5S0hOdmRXNWtMbDl1YjJSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaGFYTk9ZVTRvYzI5MWJtUXVYMjV2WkdVdVpIVnlZWFJwYjI0cElIeDhJSE52ZFc1a0xsOXViMlJsTG1SMWNtRjBhVzl1SUQwOVBTQkpibVpwYm1sMGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVqZFhKeVpXNTBWR2x0WlNBOUlITnZkVzVrTGw5emRHRnlkQ0I4ZkNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNXdZWFZ6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhVzUwWlhKdVlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM04wYjNBbkxDQnpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVFhWMFpTOTFibTExZEdVZ1lTQnphVzVuYkdVZ2MyOTFibVFnYjNJZ1lXeHNJSE52ZFc1a2N5QnBiaUIwYUdseklFaHZkMndnWjNKdmRYQXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdRbTl2YkdWaGJuMGdiWFYwWldRZ1UyVjBJSFJ2SUhSeWRXVWdkRzhnYlhWMFpTQmhibVFnWm1Gc2MyVWdkRzhnZFc1dGRYUmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdhV1FnSUNBZ1ZHaGxJSE52ZFc1a0lFbEVJSFJ2SUhWd1pHRjBaU0FvYjIxcGRDQjBieUJ0ZFhSbEwzVnViWFYwWlNCaGJHd3BMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYlhWMFpUb2dablZ1WTNScGIyNG9iWFYwWldRc0lHbGtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQzh2SUVsbUlIUm9aU0J6YjNWdVpDQm9ZWE51SjNRZ2JHOWhaR1ZrTENCaFpHUWdhWFFnZEc4Z2RHaGxJR3h2WVdRZ2NYVmxkV1VnZEc4Z2JYVjBaU0IzYUdWdUlHTmhjR0ZpYkdVdVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmMzUmhkR1VnSVQwOUlDZHNiMkZrWldRbktTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgzRjFaWFZsTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUdWMlpXNTBPaUFuYlhWMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdWJYVjBaU2h0ZFhSbFpDd2dhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHRndjR3g1YVc1bklHMTFkR1V2ZFc1dGRYUmxJSFJ2SUdGc2JDQnpiM1Z1WkhNc0lIVndaR0YwWlNCMGFHVWdaM0p2ZFhBbmN5QjJZV3gxWlM1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYlhWMFpXUWdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyMTFkR1ZrSUQwZ2JYVjBaV1E3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWXVYMjExZEdWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHNXZJR2xrSUdseklIQmhjM05sWkN3Z1oyVjBJR0ZzYkNCSlJDZHpJSFJ2SUdKbElHMTFkR1ZrTGx4dUlDQWdJQ0FnZG1GeUlHbGtjeUE5SUhObGJHWXVYMmRsZEZOdmRXNWtTV1J6S0dsa0tUdGNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBHbGtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJIWlhRZ2RHaGxJSE52ZFc1a0xseHVJQ0FnSUNBZ0lDQjJZWElnYzI5MWJtUWdQU0J6Wld4bUxsOXpiM1Z1WkVKNVNXUW9hV1J6VzJsZEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MyOTFibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJYVjBaV1FnUFNCdGRYUmxaRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRU5oYm1ObGJDQmhZM1JwZG1VZ1ptRmtaU0JoYm1RZ2MyVjBJSFJvWlNCMmIyeDFiV1VnZEc4Z2RHaGxJR1Z1WkNCMllXeDFaUzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxYm1RdVgybHVkR1Z5ZG1Gc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDl6ZEc5d1JtRmtaU2h6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5M1pXSkJkV1JwYnlBbUppQnpiM1Z1WkM1ZmJtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNodGRYUmxaQ0EvSURBZ09pQnpiM1Z1WkM1ZmRtOXNkVzFsTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITnZkVzVrTGw5dWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzV0ZFhSbFpDQTlJRWh2ZDJ4bGNpNWZiWFYwWldRZ1B5QjBjblZsSURvZ2JYVjBaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmJYVjBaU2NzSUhOdmRXNWtMbDlwWkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRDOXpaWFFnZEdobElIWnZiSFZ0WlNCdlppQjBhR2x6SUhOdmRXNWtJRzl5SUc5bUlIUm9aU0JJYjNkc0lHZHliM1Z3TGlCVWFHbHpJRzFsZEdodlpDQmpZVzRnYjNCMGFXOXVZV3hzZVNCMFlXdGxJREFzSURFZ2IzSWdNaUJoY21kMWJXVnVkSE11WEc0Z0lDQWdJQ29nSUNCMmIyeDFiV1VvS1NBdFBpQlNaWFIxY201eklIUm9aU0JuY205MWNDZHpJSFp2YkhWdFpTQjJZV3gxWlM1Y2JpQWdJQ0FnS2lBZ0lIWnZiSFZ0WlNocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QmpkWEp5Wlc1MElIWnZiSFZ0WlM1Y2JpQWdJQ0FnS2lBZ0lIWnZiSFZ0WlNoMmIyd3BJQzArSUZObGRITWdkR2hsSUhadmJIVnRaU0J2WmlCaGJHd2djMjkxYm1SeklHbHVJSFJvYVhNZ1NHOTNiQ0JuY205MWNDNWNiaUFnSUNBZ0tpQWdJSFp2YkhWdFpTaDJiMndzSUdsa0tTQXRQaUJUWlhSeklIUm9aU0IyYjJ4MWJXVWdiMllnY0dGemMyVmtJSE52ZFc1a0lHbGtMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ3dlRuVnRZbVZ5ZlNCU1pYUjFjbTV6SUhObGJHWWdiM0lnWTNWeWNtVnVkQ0IyYjJ4MWJXVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtOXNkVzFsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUhaaGNpQmhjbWR6SUQwZ1lYSm5kVzFsYm5Sek8xeHVJQ0FnSUNBZ2RtRnlJSFp2YkN3Z2FXUTdYRzVjYmlBZ0lDQWdJQzh2SUVSbGRHVnliV2x1WlNCMGFHVWdkbUZzZFdWeklHSmhjMlZrSUc5dUlHRnlaM1Z0Wlc1MGN5NWNiaUFnSUNBZ0lHbG1JQ2hoY21kekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFIxY200Z2RHaGxJSFpoYkhWbElHOW1JSFJvWlNCbmNtOTFjSE1uSUhadmJIVnRaUzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzWnZiSFZ0WlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYSm5jeTVzWlc1bmRHZ2dQVDA5SURFZ2ZId2dZWEpuY3k1c1pXNW5kR2dnUFQwOUlESWdKaVlnZEhsd1pXOW1JR0Z5WjNOYk1WMGdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQzh2SUVacGNuTjBJR05vWldOcklHbG1JSFJvYVhNZ2FYTWdZVzRnU1VRc0lHRnVaQ0JwWmlCdWIzUXNJR0Z6YzNWdFpTQnBkQ0JwY3lCaElHNWxkeUIyYjJ4MWJXVXVYRzRnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWdwTzF4dUlDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQnBaSE11YVc1a1pYaFBaaWhoY21keld6QmRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVaR1Y0SUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFpDQTlJSEJoY25ObFNXNTBLR0Z5WjNOYk1GMHNJREV3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJiMndnUFNCd1lYSnpaVVpzYjJGMEtHRnlaM05iTUYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR0Z5WjNNdWJHVnVaM1JvSUQ0OUlESXBJSHRjYmlBZ0lDQWdJQ0FnZG05c0lEMGdjR0Z5YzJWR2JHOWhkQ2hoY21keld6QmRLVHRjYmlBZ0lDQWdJQ0FnYVdRZ1BTQndZWEp6WlVsdWRDaGhjbWR6V3pGZExDQXhNQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGVndaR0YwWlNCMGFHVWdkbTlzZFcxbElHOXlJSEpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0IyYjJ4MWJXVXVYRzRnSUNBZ0lDQjJZWElnYzI5MWJtUTdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFp2YkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RtOXNJRDQ5SURBZ0ppWWdkbTlzSUR3OUlERXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhOdmRXNWtJR2hoYzI0bmRDQnNiMkZrWldRc0lHRmtaQ0JwZENCMGJ5QjBhR1VnYkc5aFpDQnhkV1YxWlNCMGJ5QmphR0Z1WjJVZ2RtOXNkVzFsSUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNGMVpYVmxMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2QyYjJ4MWJXVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTUyYjJ4MWJXVXVZWEJ3Ykhrb2MyVnNaaXdnWVhKbmN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCMGFHVWdaM0p2ZFhBZ2RtOXNkVzFsTGx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM1p2YkhWdFpTQTlJSFp2YkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0J2Ym1VZ2IzSWdZV3hzSUhadmJIVnRaWE11WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjMlZzWmk1ZloyVjBVMjkxYm1SSlpITW9hV1FwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBUQTdJR2s4YVdRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnZEdobElITnZkVzVrTGx4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrSUQwZ2MyVnNaaTVmYzI5MWJtUkNlVWxrS0dsa1cybGRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNadmJIVnRaU0E5SUhadmJEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVM1J2Y0NCamRYSnlaVzUwYkhrZ2NuVnVibWx1WnlCbVlXUmxjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWVhKbmMxc3lYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOXpkRzl3Um1Ga1pTaHBaRnRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCemIzVnVaQzVmYm05a1pTQW1KaUFoYzI5MWJtUXVYMjExZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbWRoYVc0dWMyVjBWbUZzZFdWQmRGUnBiV1VvZG05c0xDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzI5MWJtUXVYMjV2WkdVZ0ppWWdJWE52ZFc1a0xsOXRkWFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNTJiMngxYldVZ1BTQjJiMndnS2lCSWIzZHNaWEl1ZG05c2RXMWxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KM1p2YkhWdFpTY3NJSE52ZFc1a0xsOXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkNBOUlHbGtJRDhnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrS1NBNklITmxiR1l1WDNOdmRXNWtjMXN3WFR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOdmRXNWtJRDhnYzI5MWJtUXVYM1p2YkhWdFpTQTZJREE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdZV1JsSUdFZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jZ2MyOTFibVFnWW1WMGQyVmxiaUIwZDI4Z2RtOXNkVzFsY3lBb2FXWWdibThnYVdRZ2FYTWdjR0Z6YzNObFpDd2dZV3hzSUhOdmRXNWtjeUIzYVd4c0lHWmhaR1VwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTA1MWJXSmxjbjBnWm5KdmJTQlVhR1VnZG1Gc2RXVWdkRzhnWm1Ga1pTQm1jbTl0SUNnd0xqQWdkRzhnTVM0d0tTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIUnZJQ0FnVkdobElIWnZiSFZ0WlNCMGJ5Qm1ZV1JsSUhSdklDZ3dMakFnZEc4Z01TNHdLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR3hsYmlBZ1ZHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdkRzhnWm1Ga1pTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJQ0FnVkdobElITnZkVzVrSUdsa0lDaHZiV2wwSUhSdklHWmhaR1VnWVd4c0lITnZkVzVrY3lrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1NHOTNiSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQm1ZV1JsT2lCbWRXNWpkR2x2YmlobWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR1poWkdVZ2QyaGxiaUJqWVhCaFlteGxMbHh1SUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbDl4ZFdWMVpTNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ0oyWmhaR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lHRmpkR2x2YmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbVpoWkdVb1puSnZiU3dnZEc4c0lHeGxiaXdnYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGTmxkQ0IwYUdVZ2RtOXNkVzFsSUhSdklIUm9aU0J6ZEdGeWRDQndiM05wZEdsdmJpNWNiaUFnSUNBZ0lITmxiR1l1ZG05c2RXMWxLR1p5YjIwc0lHbGtLVHRjYmx4dUlDQWdJQ0FnTHk4Z1JtRmtaU0IwYUdVZ2RtOXNkVzFsSUc5bUlHOXVaU0J2Y2lCaGJHd2djMjkxYm1SekxseHVJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektHbGtLVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FUeHBaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdFZ2JHbHVaV0Z5SUdaaFpHVWdiM0lnWm1Gc2JDQmlZV05ySUhSdklIUnBiV1Z2ZFhSeklIZHBkR2dnU0ZSTlREVWdRWFZrYVc4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6YjNWdVpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGTjBiM0FnZEdobElIQnlaWFpwYjNWeklHWmhaR1VnYVdZZ2JtOGdjM0J5YVhSbElHbHpJR0psYVc1bklIVnpaV1FnS0c5MGFHVnlkMmx6WlN3Z2RtOXNkVzFsSUdoaGJtUnNaWE1nZEdocGN5a3VYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmMzUnZjRVpoWkdVb2FXUnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCaGNtVWdkWE5wYm1jZ1YyVmlJRUYxWkdsdkxDQnNaWFFnZEdobElHNWhkR2wyWlNCdFpYUm9iMlJ6SUdSdklIUm9aU0JoWTNSMVlXd2dabUZrWlM1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZkMlZpUVhWa2FXOGdKaVlnSVhOdmRXNWtMbDl0ZFhSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR04xY25KbGJuUlVhVzFsSUQwZ1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsYm1RZ1BTQmpkWEp5Wlc1MFZHbHRaU0FySUNoc1pXNGdMeUF4TURBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDkyYjJ4MWJXVWdQU0JtY205dE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYMjV2WkdVdVoyRnBiaTV6WlhSV1lXeDFaVUYwVkdsdFpTaG1jbTl0TENCamRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNW5ZV2x1TG14cGJtVmhjbEpoYlhCVWIxWmhiSFZsUVhSVWFXMWxLSFJ2TENCbGJtUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTjBZWEowUm1Ga1pVbHVkR1Z5ZG1Gc0tITnZkVzVrTENCbWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkhOYmFWMHNJSFI1Y0dWdlppQnBaQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRkR0Z5ZEhNZ2RHaGxJR2x1ZEdWeWJtRnNJR2x1ZEdWeWRtRnNJSFJ2SUdaaFpHVWdZU0J6YjNWdVpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlITnZkVzVrSUZKbFptVnlaVzVqWlNCMGJ5QnpiM1Z1WkNCMGJ5Qm1ZV1JsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTA1MWJXSmxjbjBnWm5KdmJTQlVhR1VnZG1Gc2RXVWdkRzhnWm1Ga1pTQm1jbTl0SUNnd0xqQWdkRzhnTVM0d0tTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIUnZJQ0FnVkdobElIWnZiSFZ0WlNCMGJ5Qm1ZV1JsSUhSdklDZ3dMakFnZEc4Z01TNHdLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR3hsYmlBZ1ZHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdkRzhnWm1Ga1pTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJQ0FnVkdobElITnZkVzVrSUdsa0lIUnZJR1poWkdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUNCN1FtOXZiR1ZoYm4wZ2FYTkhjbTkxY0NBZ0lFbG1JSFJ5ZFdVc0lITmxkQ0IwYUdVZ2RtOXNkVzFsSUc5dUlIUm9aU0JuY205MWNDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmMzUmhjblJHWVdSbFNXNTBaWEoyWVd3NklHWjFibU4wYVc5dUtITnZkVzVrTENCbWNtOXRMQ0IwYnl3Z2JHVnVMQ0JwWkN3Z2FYTkhjbTkxY0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnZG1GeUlIWnZiQ0E5SUdaeWIyMDdYRzRnSUNBZ0lDQjJZWElnWkdsbVppQTlJSFJ2SUMwZ1puSnZiVHRjYmlBZ0lDQWdJSFpoY2lCemRHVndjeUE5SUUxaGRHZ3VZV0p6S0dScFptWWdMeUF3TGpBeEtUdGNiaUFnSUNBZ0lIWmhjaUJ6ZEdWd1RHVnVJRDBnVFdGMGFDNXRZWGdvTkN3Z0tITjBaWEJ6SUQ0Z01Da2dQeUJzWlc0Z0x5QnpkR1Z3Y3lBNklHeGxiaWs3WEc0Z0lDQWdJQ0IyWVhJZ2JHRnpkRlJwWTJzZ1BTQkVZWFJsTG01dmR5Z3BPMXh1WEc0Z0lDQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2RtRnNkV1VnWW1WcGJtY2dabUZrWldRZ2RHOHVYRzRnSUNBZ0lDQnpiM1Z1WkM1ZlptRmtaVlJ2SUQwZ2RHODdYRzVjYmlBZ0lDQWdJQzh2SUZWd1pHRjBaU0IwYUdVZ2RtOXNkVzFsSUhaaGJIVmxJRzl1SUdWaFkyZ2dhVzUwWlhKMllXd2dkR2xqYXk1Y2JpQWdJQ0FnSUhOdmRXNWtMbDlwYm5SbGNuWmhiQ0E5SUhObGRFbHVkR1Z5ZG1Gc0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCVmNHUmhkR1VnZEdobElIWnZiSFZ0WlNCaVlYTmxaQ0J2YmlCMGFHVWdkR2x0WlNCemFXNWpaU0IwYUdVZ2JHRnpkQ0IwYVdOckxseHVJQ0FnSUNBZ0lDQjJZWElnZEdsamF5QTlJQ2hFWVhSbExtNXZkeWdwSUMwZ2JHRnpkRlJwWTJzcElDOGdiR1Z1TzF4dUlDQWdJQ0FnSUNCc1lYTjBWR2xqYXlBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFp2YkNBclBTQmthV1ptSUNvZ2RHbGphenRjYmx4dUlDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUhadmJIVnRaU0JwY3lCcGJpQjBhR1VnY21sbmFIUWdZbTkxYm1SekxseHVJQ0FnSUNBZ0lDQjJiMndnUFNCTllYUm9MbTFoZUNnd0xDQjJiMndwTzF4dUlDQWdJQ0FnSUNCMmIyd2dQU0JOWVhSb0xtMXBiaWd4TENCMmIyd3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGSnZkVzVrSUhSdklIZHBkR2hwYmlBeUlHUmxZMmx0WVd3Z2NHOXBiblJ6TGx4dUlDQWdJQ0FnSUNCMmIyd2dQU0JOWVhSb0xuSnZkVzVrS0hadmJDQXFJREV3TUNrZ0x5QXhNREE3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0IyYjJ4MWJXVXVYRzRnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5MmIyeDFiV1VnUFNCMmIydzdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNTJiMngxYldVb2RtOXNMQ0J6YjNWdVpDNWZhV1FzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQm5jbTkxY0NkeklIWnZiSFZ0WlM1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UjNKdmRYQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDkyYjJ4MWJXVWdQU0IyYjJ3N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCWGFHVnVJSFJvWlNCbVlXUmxJR2x6SUdOdmJYQnNaWFJsTENCemRHOXdJR2wwSUdGdVpDQm1hWEpsSUdWMlpXNTBMbHh1SUNBZ0lDQWdJQ0JwWmlBb0tIUnZJRHdnWm5KdmJTQW1KaUIyYjJ3Z1BEMGdkRzhwSUh4OElDaDBieUErSUdaeWIyMGdKaVlnZG05c0lENDlJSFJ2S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2MyOTFibVF1WDJsdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmFXNTBaWEoyWVd3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5bVlXUmxWRzhnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVkbTlzZFcxbEtIUnZMQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KMlpoWkdVbkxDQnpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TENCemRHVndUR1Z1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNTBaWEp1WVd3Z2JXVjBhRzlrSUhSb1lYUWdjM1J2Y0hNZ2RHaGxJR04xY25KbGJuUnNlU0J3YkdGNWFXNW5JR1poWkdVZ2QyaGxibHh1SUNBZ0lDQXFJR0VnYm1WM0lHWmhaR1VnYzNSaGNuUnpMQ0IyYjJ4MWJXVWdhWE1nWTJoaGJtZGxaQ0J2Y2lCMGFHVWdjMjkxYm1RZ2FYTWdjM1J2Y0hCbFpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJRlJvWlNCemIzVnVaQ0JwWkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXpkRzl3Um1Ga1pUb2dablZ1WTNScGIyNG9hV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2hwWkNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6YjNWdVpDQW1KaUJ6YjNWdVpDNWZhVzUwWlhKMllXd3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WjJGcGJpNWpZVzVqWld4VFkyaGxaSFZzWldSV1lXeDFaWE1vU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamJHVmhja2x1ZEdWeWRtRnNLSE52ZFc1a0xsOXBiblJsY25aaGJDazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXBiblJsY25aaGJDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lITmxiR1l1ZG05c2RXMWxLSE52ZFc1a0xsOW1ZV1JsVkc4c0lHbGtLVHRjYmlBZ0lDQWdJQ0FnYzI5MWJtUXVYMlpoWkdWVWJ5QTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDJWdGFYUW9KMlpoWkdVbkxDQnBaQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFF2YzJWMElIUm9aU0JzYjI5d0lIQmhjbUZ0WlhSbGNpQnZiaUJoSUhOdmRXNWtMaUJVYUdseklHMWxkR2h2WkNCallXNGdiM0IwYVc5dVlXeHNlU0IwWVd0bElEQXNJREVnYjNJZ01pQmhjbWQxYldWdWRITXVYRzRnSUNBZ0lDb2dJQ0JzYjI5d0tDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ1ozSnZkWEFuY3lCc2IyOXdJSFpoYkhWbExseHVJQ0FnSUNBcUlDQWdiRzl2Y0NocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QnNiMjl3SUhaaGJIVmxMbHh1SUNBZ0lDQXFJQ0FnYkc5dmNDaHNiMjl3S1NBdFBpQlRaWFJ6SUhSb1pTQnNiMjl3SUhaaGJIVmxJR1p2Y2lCaGJHd2djMjkxYm1SeklHbHVJSFJvYVhNZ1NHOTNiQ0JuY205MWNDNWNiaUFnSUNBZ0tpQWdJR3h2YjNBb2JHOXZjQ3dnYVdRcElDMCtJRk5sZEhNZ2RHaGxJR3h2YjNBZ2RtRnNkV1VnYjJZZ2NHRnpjMlZrSUhOdmRXNWtJR2xrTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyd3ZRbTl2YkdWaGJuMGdVbVYwZFhKdWN5QnpaV3htSUc5eUlHTjFjbkpsYm5RZ2JHOXZjQ0IyWVd4MVpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCc2IyOXdPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnZG1GeUlHeHZiM0FzSUdsa0xDQnpiM1Z1WkR0Y2JseHVJQ0FnSUNBZ0x5OGdSR1YwWlhKdGFXNWxJSFJvWlNCMllXeDFaWE1nWm05eUlHeHZiM0FnWVc1a0lHbGtMbHh1SUNBZ0lDQWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRkpsZEhWeWJpQjBhR1VnWjNKdmRTZHpJR3h2YjNBZ2RtRnNkV1V1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bUxsOXNiMjl3TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaGNtZHpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR0Z5WjNOYk1GMGdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3h2YjNBZ1BTQmhjbWR6V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyeHZiM0FnUFNCc2IyOXdPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGSmxkSFZ5YmlCMGFHbHpJSE52ZFc1a0ozTWdiRzl2Y0NCMllXeDFaUzVjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2h3WVhKelpVbHVkQ2hoY21keld6QmRMQ0F4TUNrcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpiM1Z1WkNBL0lITnZkVzVrTGw5c2IyOXdJRG9nWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVhKbmN5NXNaVzVuZEdnZ1BUMDlJRElwSUh0Y2JpQWdJQ0FnSUNBZ2JHOXZjQ0E5SUdGeVozTmJNRjA3WEc0Z0lDQWdJQ0FnSUdsa0lEMGdjR0Z5YzJWSmJuUW9ZWEpuYzFzeFhTd2dNVEFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QkpaaUJ1YnlCcFpDQnBjeUJ3WVhOelpXUXNJR2RsZENCaGJHd2dTVVFuY3lCMGJ5QmlaU0JzYjI5d1pXUXVYRzRnSUNBZ0lDQjJZWElnYVdSeklEMGdjMlZzWmk1ZloyVjBVMjkxYm1SSlpITW9hV1FwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDQTlJSE5sYkdZdVgzTnZkVzVrUW5sSlpDaHBaSE5iYVYwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5c2IyOXdJRDBnYkc5dmNEdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTVmZDJWaVFYVmthVzhnSmlZZ2MyOTFibVF1WDI1dlpHVWdKaVlnYzI5MWJtUXVYMjV2WkdVdVluVm1abVZ5VTI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWJHOXZjQ0E5SUd4dmIzQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iRzl2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNWlkV1ptWlhKVGIzVnlZMlV1Ykc5dmNGTjBZWEowSUQwZ2MyOTFibVF1WDNOMFlYSjBJSHg4SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaUzVzYjI5d1JXNWtJRDBnYzI5MWJtUXVYM04wYjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUXZjMlYwSUhSb1pTQndiR0Y1WW1GamF5QnlZWFJsSUc5bUlHRWdjMjkxYm1RdUlGUm9hWE1nYldWMGFHOWtJR05oYmlCdmNIUnBiMjVoYkd4NUlIUmhhMlVnTUN3Z01TQnZjaUF5SUdGeVozVnRaVzUwY3k1Y2JpQWdJQ0FnS2lBZ0lISmhkR1VvS1NBdFBpQlNaWFIxY201eklIUm9aU0JtYVhKemRDQnpiM1Z1WkNCdWIyUmxKM01nWTNWeWNtVnVkQ0J3YkdGNVltRmpheUJ5WVhSbExseHVJQ0FnSUNBcUlDQWdjbUYwWlNocFpDa2dMVDRnVW1WMGRYSnVjeUIwYUdVZ2MyOTFibVFnYVdRbmN5QmpkWEp5Wlc1MElIQnNZWGxpWVdOcklISmhkR1V1WEc0Z0lDQWdJQ29nSUNCeVlYUmxLSEpoZEdVcElDMCtJRk5sZEhNZ2RHaGxJSEJzWVhsaVlXTnJJSEpoZEdVZ2IyWWdZV3hzSUhOdmRXNWtjeUJwYmlCMGFHbHpJRWh2ZDJ3Z1ozSnZkWEF1WEc0Z0lDQWdJQ29nSUNCeVlYUmxLSEpoZEdVc0lHbGtLU0F0UGlCVFpYUnpJSFJvWlNCd2JHRjVZbUZqYXlCeVlYUmxJRzltSUhCaGMzTmxaQ0J6YjNWdVpDQnBaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc0wwNTFiV0psY24wZ1VtVjBkWEp1Y3lCelpXeG1JRzl5SUhSb1pTQmpkWEp5Wlc1MElIQnNZWGxpWVdOcklISmhkR1V1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjbUYwWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdZWEpuY3lBOUlHRnlaM1Z0Wlc1MGN6dGNiaUFnSUNBZ0lIWmhjaUJ5WVhSbExDQnBaRHRjYmx4dUlDQWdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0IyWVd4MVpYTWdZbUZ6WldRZ2IyNGdZWEpuZFcxbGJuUnpMbHh1SUNBZ0lDQWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRmRsSUhkcGJHd2djMmx0Y0d4NUlISmxkSFZ5YmlCMGFHVWdZM1Z5Y21WdWRDQnlZWFJsSUc5bUlIUm9aU0JtYVhKemRDQnViMlJsTGx4dUlDQWdJQ0FnSUNCcFpDQTlJSE5sYkdZdVgzTnZkVzVrYzFzd1hTNWZhV1E3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVpwY25OMElHTm9aV05ySUdsbUlIUm9hWE1nYVhNZ1lXNGdTVVFzSUdGdVpDQnBaaUJ1YjNRc0lHRnpjM1Z0WlNCcGRDQnBjeUJoSUc1bGR5QnlZWFJsSUhaaGJIVmxMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FXUnpJRDBnYzJWc1ppNWZaMlYwVTI5MWJtUkpaSE1vS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x1WkdWNElEMGdhV1J6TG1sdVpHVjRUMllvWVhKbmMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibVJsZUNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXUWdQU0J3WVhKelpVbHVkQ2hoY21keld6QmRMQ0F4TUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbUYwWlNBOUlIQmhjbk5sUm14dllYUW9ZWEpuYzFzd1hTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVhKbmN5NXNaVzVuZEdnZ1BUMDlJRElwSUh0Y2JpQWdJQ0FnSUNBZ2NtRjBaU0E5SUhCaGNuTmxSbXh2WVhRb1lYSm5jMXN3WFNrN1hHNGdJQ0FnSUNBZ0lHbGtJRDBnY0dGeWMyVkpiblFvWVhKbmMxc3hYU3dnTVRBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhCc1lYbGlZV05ySUhKaGRHVWdiM0lnY21WMGRYSnVJSFJvWlNCamRYSnlaVzUwSUhaaGJIVmxMbHh1SUNBZ0lDQWdkbUZ5SUhOdmRXNWtPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ5WVhSbElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR05vWVc1blpTQndiR0Y1WW1GamF5QnlZWFJsSUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNBZ0lDQWdhV1lnS0hObGJHWXVYM04wWVhSbElDRTlQU0FuYkc5aFpHVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNGMVpYVmxMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R5WVhSbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdGamRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVjbUYwWlM1aGNIQnNlU2h6Wld4bUxDQmhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCbmNtOTFjQ0J5WVhSbExseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2xrSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WDNKaGRHVWdQU0J5WVhSbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUc5dVpTQnZjaUJoYkd3Z2RtOXNkVzFsY3k1Y2JpQWdJQ0FnSUNBZ2FXUWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWhwWkNrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4cFpDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWRsZENCMGFHVWdjMjkxYm1RdVhHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RZ1BTQnpaV3htTGw5emIzVnVaRUo1U1dRb2FXUmJhVjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOdmRXNWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJMWldWd0lIUnlZV05ySUc5bUlHOTFjaUJ3YjNOcGRHbHZiaUIzYUdWdUlIUm9aU0J5WVhSbElHTm9ZVzVuWldRZ1lXNWtJSFZ3WkdGMFpTQjBhR1VnY0d4aGVXSmhZMnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE4wWVhKMElIQnZjMmwwYVc5dUlITnZJSGRsSUdOaGJpQndjbTl3WlhKc2VTQmhaR3AxYzNRZ2RHaGxJSE5sWldzZ2NHOXphWFJwYjI0Z1ptOXlJSFJwYldVZ1pXeGhjSE5sWkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXlZWFJsVTJWbGF5QTlJSE5sYkdZdWMyVmxheWhwWkZ0cFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0d4aGVWTjBZWEowSUQwZ2MyVnNaaTVmZDJWaVFYVmthVzhnUHlCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxJRG9nYzI5MWJtUXVYM0JzWVhsVGRHRnlkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5eVlYUmxJRDBnY21GMFpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0J3YkdGNVltRmpheUJ5WVhSbExseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2SUNZbUlITnZkVzVrTGw5dWIyUmxJQ1ltSUhOdmRXNWtMbDl1YjJSbExtSjFabVpsY2xOdmRYSmpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVjR3hoZVdKaFkydFNZWFJsTG5ObGRGWmhiSFZsUVhSVWFXMWxLSEpoZEdVc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6YjNWdVpDNWZibTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmYm05a1pTNXdiR0Y1WW1GamExSmhkR1VnUFNCeVlYUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaWE5sZENCMGFHVWdkR2x0WlhKekxseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxaV3NnUFNCelpXeG1Mbk5sWldzb2FXUmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ0tDaHpaV3htTGw5emNISnBkR1ZiYzI5MWJtUXVYM053Y21sMFpWMWJNRjBnS3lCelpXeG1MbDl6Y0hKcGRHVmJjMjkxYm1RdVgzTndjbWwwWlYxYk1WMHBJQzhnTVRBd01Da2dMU0J6WldWck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnBiV1Z2ZFhRZ1BTQW9aSFZ5WVhScGIyNGdLaUF4TURBd0tTQXZJRTFoZEdndVlXSnpLSE52ZFc1a0xsOXlZWFJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UzUmhjblFnWVNCdVpYY2daVzVrSUhScGJXVnlJR2xtSUhOdmRXNWtJR2x6SUdGc2NtVmhaSGtnY0d4aGVXbHVaeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOWxibVJVYVcxbGNuTmJhV1JiYVYxZElIeDhJQ0Z6YjNWdVpDNWZjR0YxYzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJOc1pXRnlWR2x0WlhJb2FXUmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWxibVJVYVcxbGNuTmJhV1JiYVYxZElEMGdjMlYwVkdsdFpXOTFkQ2h6Wld4bUxsOWxibVJsWkM1aWFXNWtLSE5sYkdZc0lITnZkVzVrS1N3Z2RHbHRaVzkxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjNKaGRHVW5MQ0J6YjNWdVpDNWZhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjMjkxYm1RZ1BTQnpaV3htTGw5emIzVnVaRUo1U1dRb2FXUXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RZ1B5QnpiM1Z1WkM1ZmNtRjBaU0E2SUhObGJHWXVYM0poZEdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRdmMyVjBJSFJvWlNCelpXVnJJSEJ2YzJsMGFXOXVJRzltSUdFZ2MyOTFibVF1SUZSb2FYTWdiV1YwYUc5a0lHTmhiaUJ2Y0hScGIyNWhiR3g1SUhSaGEyVWdNQ3dnTVNCdmNpQXlJR0Z5WjNWdFpXNTBjeTVjYmlBZ0lDQWdLaUFnSUhObFpXc29LU0F0UGlCU1pYUjFjbTV6SUhSb1pTQm1hWEp6ZENCemIzVnVaQ0J1YjJSbEozTWdZM1Z5Y21WdWRDQnpaV1ZySUhCdmMybDBhVzl1TGx4dUlDQWdJQ0FxSUNBZ2MyVmxheWhwWkNrZ0xUNGdVbVYwZFhKdWN5QjBhR1VnYzI5MWJtUWdhV1FuY3lCamRYSnlaVzUwSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDb2dJQ0J6WldWcktITmxaV3NwSUMwK0lGTmxkSE1nZEdobElITmxaV3NnY0c5emFYUnBiMjRnYjJZZ2RHaGxJR1pwY25OMElITnZkVzVrSUc1dlpHVXVYRzRnSUNBZ0lDb2dJQ0J6WldWcktITmxaV3NzSUdsa0tTQXRQaUJUWlhSeklIUm9aU0J6WldWcklIQnZjMmwwYVc5dUlHOW1JSEJoYzNObFpDQnpiM1Z1WkNCcFpDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEliM2RzTDA1MWJXSmxjbjBnVW1WMGRYSnVjeUJ6Wld4bUlHOXlJSFJvWlNCamRYSnlaVzUwSUhObFpXc2djRzl6YVhScGIyNHVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVmxhem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0FnSUhaaGNpQnpaV1ZyTENCcFpEdGNibHh1SUNBZ0lDQWdMeThnUkdWMFpYSnRhVzVsSUhSb1pTQjJZV3gxWlhNZ1ltRnpaV1FnYjI0Z1lYSm5kVzFsYm5SekxseHVJQ0FnSUNBZ2FXWWdLR0Z5WjNNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZGxJSGRwYkd3Z2MybHRjR3g1SUhKbGRIVnliaUIwYUdVZ1kzVnljbVZ1ZENCd2IzTnBkR2x2YmlCdlppQjBhR1VnWm1seWMzUWdibTlrWlM1Y2JpQWdJQ0FnSUNBZ2FXUWdQU0J6Wld4bUxsOXpiM1Z1WkhOYk1GMHVYMmxrTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaGNtZHpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJHYVhKemRDQmphR1ZqYXlCcFppQjBhR2x6SUdseklHRnVJRWxFTENCaGJtUWdhV1lnYm05MExDQmhjM04xYldVZ2FYUWdhWE1nWVNCdVpYY2djMlZsYXlCd2IzTnBkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ2RtRnlJR2xrY3lBOUlITmxiR1l1WDJkbGRGTnZkVzVrU1dSektDazdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUdsa2N5NXBibVJsZUU5bUtHRnlaM05iTUYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xrSUQwZ2NHRnljMlZKYm5Rb1lYSm5jMXN3WFN3Z01UQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0JwWkNBOUlITmxiR1l1WDNOdmRXNWtjMXN3WFM1ZmFXUTdYRzRnSUNBZ0lDQWdJQ0FnYzJWbGF5QTlJSEJoY25ObFJteHZZWFFvWVhKbmMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lYSm5jeTVzWlc1bmRHZ2dQVDA5SURJcElIdGNiaUFnSUNBZ0lDQWdjMlZsYXlBOUlIQmhjbk5sUm14dllYUW9ZWEpuYzFzd1hTazdYRzRnSUNBZ0lDQWdJR2xrSUQwZ2NHRnljMlZKYm5Rb1lYSm5jMXN4WFN3Z01UQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCSlppQjBhR1Z5WlNCcGN5QnVieUJKUkN3Z1ltRnBiQ0J2ZFhRdVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdTV1lnZEdobElITnZkVzVrSUdoaGMyNG5kQ0JzYjJGa1pXUXNJR0ZrWkNCcGRDQjBieUIwYUdVZ2JHOWhaQ0J4ZFdWMVpTQjBieUJ6WldWcklIZG9aVzRnWTJGd1lXSnNaUzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmY1hWbGRXVXVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5RNklDZHpaV1ZySnl4Y2JpQWdJQ0FnSUNBZ0lDQmhZM1JwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV6WldWckxtRndjR3g1S0hObGJHWXNJR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFZGxkQ0IwYUdVZ2MyOTFibVF1WEc0Z0lDQWdJQ0IyWVhJZ2MyOTFibVFnUFNCelpXeG1MbDl6YjNWdVpFSjVTV1FvYVdRcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXVnJJRDA5UFNBbmJuVnRZbVZ5SnlBbUppQnpaV1ZySUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlFZWFZ6WlNCMGFHVWdjMjkxYm1RZ1lXNWtJSFZ3WkdGMFpTQndiM05wZEdsdmJpQm1iM0lnY21WemRHRnlkR2x1WnlCd2JHRjVZbUZqYXk1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnY0d4aGVXbHVaeUE5SUhObGJHWXVjR3hoZVdsdVp5aHBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJzWVhscGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1Y0dGMWMyVW9hV1FzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUUxdmRtVWdkR2hsSUhCdmMybDBhVzl1SUc5bUlIUm9aU0IwY21GamF5QmhibVFnWTJGdVkyVnNJSFJwYldWeUxseHVJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXpaV1ZySUQwZ2MyVmxhenRjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmWlc1a1pXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxsOWpiR1ZoY2xScGJXVnlLR2xrS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUZKbGMzUmhjblFnZEdobElIQnNZWGxpWVdOcklHbG1JSFJvWlNCemIzVnVaQ0IzWVhNZ2NHeGhlV2x1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0d4aGVXbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d2JHRjVLR2xrTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCVmNHUmhkR1VnZEdobElITmxaV3NnY0c5emFYUnBiMjRnWm05eUlFaFVUVXcxSUVGMVpHbHZMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1ZmQyVmlRWFZrYVc4Z0ppWWdjMjkxYm1RdVgyNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1OMWNuSmxiblJVYVcxbElEMGdjMlZsYXp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhZV2wwSUdadmNpQjBhR1VnY0d4aGVTQnNiMk5ySUhSdklHSmxJSFZ1YzJWMElHSmxabTl5WlNCbGJXbDBkR2x1WnlBb1NGUk5URFVnUVhWa2FXOHBMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdiR0Y1YVc1bklDWW1JQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z0YVhSVFpXVnJJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1ZmNHeGhlVXh2WTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2R6WldWckp5d2dhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWlcxcGRGTmxaV3NzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2hsYldsMFUyVmxheXdnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozTmxaV3NuTENCcFpDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsWVd4VWFXMWxJRDBnYzJWc1ppNXdiR0Y1YVc1bktHbGtLU0EvSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVWdMU0J6YjNWdVpDNWZjR3hoZVZOMFlYSjBJRG9nTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVlYUmxVMlZsYXlBOUlITnZkVzVrTGw5eVlYUmxVMlZsYXlBL0lITnZkVzVrTGw5eVlYUmxVMlZsYXlBdElITnZkVzVrTGw5elpXVnJJRG9nTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpiM1Z1WkM1ZmMyVmxheUFySUNoeVlYUmxVMlZsYXlBcklISmxZV3hVYVcxbElDb2dUV0YwYUM1aFluTW9jMjkxYm1RdVgzSmhkR1VwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE52ZFc1a0xsOXViMlJsTG1OMWNuSmxiblJVYVcxbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMmhsWTJzZ2FXWWdZU0J6Y0dWamFXWnBZeUJ6YjNWdVpDQnBjeUJqZFhKeVpXNTBiSGtnY0d4aGVXbHVaeUJ2Y2lCdWIzUWdLR2xtSUdsa0lHbHpJSEJ5YjNacFpHVmtLU3dnYjNJZ1kyaGxZMnNnYVdZZ1lYUWdiR1ZoYzNRZ2IyNWxJRzltSUhSb1pTQnpiM1Z1WkhNZ2FXNGdkR2hsSUdkeWIzVndJR2x6SUhCc1lYbHBibWNnYjNJZ2JtOTBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJR2xrSUZSb1pTQnpiM1Z1WkNCcFpDQjBieUJqYUdWamF5NGdTV1lnYm05dVpTQnBjeUJ3WVhOelpXUXNJSFJvWlNCM2FHOXNaU0J6YjNWdVpDQm5jbTkxY0NCcGN5QmphR1ZqYTJWa0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2NHeGhlV2x1WnlCaGJtUWdabUZzYzJVZ2FXWWdibTkwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEJzWVhscGJtYzZJR1oxYm1OMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUM4dklFTm9aV05ySUhSb1pTQndZWE56WldRZ2MyOTFibVFnU1VRZ0tHbG1JR0Z1ZVNrdVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbGtJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzI5MWJtUWdQU0J6Wld4bUxsOXpiM1Z1WkVKNVNXUW9hV1FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzI5MWJtUWdQeUFoYzI5MWJtUXVYM0JoZFhObFpDQTZJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJQZEdobGNuZHBjMlVzSUd4dmIzQWdkR2h5YjNWbmFDQmhiR3dnYzI5MWJtUnpJR0Z1WkNCamFHVmpheUJwWmlCaGJua2dZWEpsSUhCc1lYbHBibWN1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwUFRBN0lHazhjMlZzWmk1ZmMyOTFibVJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaaTVmYzI5MWJtUnpXMmxkTGw5d1lYVnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZENCMGFHVWdaSFZ5WVhScGIyNGdiMllnZEdocGN5QnpiM1Z1WkM0Z1VHRnpjMmx1WnlCaElITnZkVzVrSUdsa0lIZHBiR3dnY21WMGRYSnVJSFJvWlNCemNISnBkR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0JwWkNCVWFHVWdjMjkxYm1RZ2FXUWdkRzhnWTJobFkyc3VJRWxtSUc1dmJtVWdhWE1nY0dGemMyVmtMQ0J5WlhSMWNtNGdablZzYkNCemIzVnlZMlVnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0JCZFdScGJ5QmtkWEpoZEdsdmJpQnBiaUJ6WldOdmJtUnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHUjFjbUYwYVc5dU9pQm1kVzVqZEdsdmJpaHBaQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ2MyVnNaaTVmWkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUM4dklFbG1JSGRsSUhCaGMzTWdZVzRnU1VRc0lHZGxkQ0IwYUdVZ2MyOTFibVFnWVc1a0lISmxkSFZ5YmlCMGFHVWdjM0J5YVhSbElHeGxibWQwYUM1Y2JpQWdJQ0FnSUhaaGNpQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNocFpDazdYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnWkhWeVlYUnBiMjRnUFNCelpXeG1MbDl6Y0hKcGRHVmJjMjkxYm1RdVgzTndjbWwwWlYxYk1WMGdMeUF4TURBd08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1pIVnlZWFJwYjI0N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR04xY25KbGJuUWdiRzloWkdWa0lITjBZWFJsSUc5bUlIUm9hWE1nU0c5M2JDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlDZDFibXh2WVdSbFpDY3NJQ2RzYjJGa2FXNW5KeXdnSjJ4dllXUmxaQ2RjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzNSaGRHVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Ykc5aFpDQmhibVFnWkdWemRISnZlU0IwYUdVZ1kzVnljbVZ1ZENCSWIzZHNJRzlpYW1WamRDNWNiaUFnSUNBZ0tpQlVhR2x6SUhkcGJHd2dhVzF0WldScFlYUmxiSGtnYzNSdmNDQmhiR3dnYzI5MWJtUWdhVzV6ZEdGdVkyVnpJR0YwZEdGamFHVmtJSFJ2SUhSb2FYTWdaM0p2ZFhBdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZFc1c2IyRmtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnTHk4Z1UzUnZjQ0J3YkdGNWFXNW5JR0Z1ZVNCaFkzUnBkbVVnYzI5MWJtUnpMbHh1SUNBZ0lDQWdkbUZ5SUhOdmRXNWtjeUE5SUhObGJHWXVYM052ZFc1a2N6dGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4emIzVnVaSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdMeThnVTNSdmNDQjBhR1VnYzI5MWJtUWdhV1lnYVhRZ2FYTWdZM1Z5Y21WdWRHeDVJSEJzWVhscGJtY3VYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyOTFibVJ6VzJsZExsOXdZWFZ6WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxuTjBiM0FvYzI5MWJtUnpXMmxkTGw5cFpDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2RHaGxJSE52ZFhKalpTQnZjaUJrYVhOamIyNXVaV04wTGx4dUlDQWdJQ0FnSUNCcFppQW9JWE5sYkdZdVgzZGxZa0YxWkdsdktTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCemIzVnlZMlVnZEc4Z01DMXpaV052Ym1RZ2MybHNaVzVqWlNCMGJ5QnpkRzl3SUdGdWVTQmtiM2R1Ykc5aFpHbHVaeUFvWlhoalpYQjBJR2x1SUVsRktTNWNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1kyaGxZMnRKUlNBOUlDOU5VMGxGSUh4VWNtbGtaVzUwWEZ3dkx5NTBaWE4wS0VodmQyeGxjaTVmYm1GMmFXZGhkRzl5SUNZbUlFaHZkMnhsY2k1ZmJtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmphR1ZqYTBsRktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaSE5iYVYwdVgyNXZaR1V1YzNKaklEMGdKMlJoZEdFNllYVmthVzh2ZDJGMk8ySmhjMlUyTkN4VmEyeEhVbWxuUVVGQlFsaFJWbHBHV20weE1FbENTVUZCUVVGQ1FVRkZRVkpMZDBGQlNXaFpRVkZCUTBGQ1FVRkJRVUpyV1ZoU2FFRm5RVUZCUVVWQkp6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdZVzU1SUdWMlpXNTBJR3hwYzNSbGJtVnljeTVjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaSE5iYVYwdVgyNXZaR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblpYSnliM0luTENCemIzVnVaSE5iYVYwdVgyVnljbTl5Um00c0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z1WkhOYmFWMHVYMjV2WkdVdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaEliM2RzWlhJdVgyTmhibEJzWVhsRmRtVnVkQ3dnYzI5MWJtUnpXMmxkTGw5c2IyRmtSbTRzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRVZ0Y0hSNUlHOTFkQ0JoYkd3Z2IyWWdkR2hsSUc1dlpHVnpMbHh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdjMjkxYm1SelcybGRMbDl1YjJSbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCaGJHd2dkR2x0WlhKeklHRnlaU0JqYkdWaGNtVmtJRzkxZEM1Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmWTJ4bFlYSlVhVzFsY2loemIzVnVaSE5iYVYwdVgybGtLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2RHaGxJSEpsWm1WeVpXNWpaWE1nYVc0Z2RHaGxJR2RzYjJKaGJDQkliM2RzWlhJZ2IySnFaV04wTGx4dUlDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQkliM2RzWlhJdVgyaHZkMnh6TG1sdVpHVjRUMllvYzJWc1ppazdYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnU0c5M2JHVnlMbDlvYjNkc2N5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVSbGJHVjBaU0IwYUdseklITnZkVzVrSUdaeWIyMGdkR2hsSUdOaFkyaGxJQ2hwWmlCdWJ5QnZkR2hsY2lCSWIzZHNJR2x6SUhWemFXNW5JR2wwS1M1Y2JpQWdJQ0FnSUhaaGNpQnlaVzFEWVdOb1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCbWIzSWdLR2s5TURzZ2FUeEliM2RzWlhJdVgyaHZkMnh6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoSWIzZHNaWEl1WDJodmQyeHpXMmxkTGw5emNtTWdQVDA5SUhObGJHWXVYM055WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYlVOaFkyaGxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHTmhZMmhsSUNZbUlISmxiVU5oWTJobEtTQjdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmpZV05vWlZ0elpXeG1MbDl6Y21OZE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJEYkdWaGNpQm5iRzlpWVd3Z1pYSnliM0p6TGx4dUlDQWdJQ0FnU0c5M2JHVnlMbTV2UVhWa2FXOGdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdMeThnUTJ4bFlYSWdiM1YwSUdCelpXeG1ZQzVjYmlBZ0lDQWdJSE5sYkdZdVgzTjBZWFJsSUQwZ0ozVnViRzloWkdWa0p6dGNiaUFnSUNBZ0lITmxiR1l1WDNOdmRXNWtjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ2MyVnNaaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTWFYTjBaVzRnZEc4Z1lTQmpkWE4wYjIwZ1pYWmxiblF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUdWMlpXNTBJRVYyWlc1MElHNWhiV1V1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3Um5WdVkzUnBiMjU5SUdadUlDQWdJRXhwYzNSbGJtVnlJSFJ2SUdOaGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQWdJR2xrSUNBZ0lDaHZjSFJwYjI1aGJDa2dUMjVzZVNCc2FYTjBaVzRnZEc4Z1pYWmxiblJ6SUdadmNpQjBhR2x6SUhOdmRXNWtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJQ0J2Ym1ObElDQW9TVTVVUlZKT1FVd3BJRTFoY210eklHVjJaVzUwSUhSdklHWnBjbVVnYjI1c2VTQnZibU5sTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyeDlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNDZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQm1iaXdnYVdRc0lHOXVZMlVwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCbGRtVnVkSE1nUFNCelpXeG1XeWRmYjI0bklDc2daWFpsYm5SZE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1p1SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBjeTV3ZFhOb0tHOXVZMlVnUHlCN2FXUTZJR2xrTENCbWJqb2dabTRzSUc5dVkyVTZJRzl1WTJWOUlEb2dlMmxrT2lCcFpDd2dabTQ2SUdadWZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXMXZkbVVnWVNCamRYTjBiMjBnWlhabGJuUXVJRU5oYkd3Z2QybDBhRzkxZENCd1lYSmhiV1YwWlhKeklIUnZJSEpsYlc5MlpTQmhiR3dnWlhabGJuUnpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0JsZG1WdWRDQkZkbVZ1ZENCdVlXMWxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMFoxYm1OMGFXOXVmU0JtYmlBZ0lDQk1hWE4wWlc1bGNpQjBieUJ5WlcxdmRtVXVJRXhsWVhabElHVnRjSFI1SUhSdklISmxiVzkyWlNCaGJHd3VYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQWdJR2xrSUNBZ0lDaHZjSFJwYjI1aGJDa2dUMjVzZVNCeVpXMXZkbVVnWlhabGJuUnpJR1p2Y2lCMGFHbHpJSE52ZFc1a0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMng5WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMlptT2lCbWRXNWpkR2x2YmlobGRtVnVkQ3dnWm00c0lHbGtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnWlhabGJuUnpJRDBnYzJWc1psc25YMjl1SnlBcklHVjJaVzUwWFR0Y2JpQWdJQ0FnSUhaaGNpQnBJRDBnTUR0Y2JseHVJQ0FnSUNBZ0x5OGdRV3hzYjNjZ2NHRnpjMmx1WnlCcWRYTjBJR0Z1SUdWMlpXNTBJR0Z1WkNCSlJDNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdabTRnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ0lDQWdJR2xrSUQwZ1ptNDdYRzRnSUNBZ0lDQWdJR1p1SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHWnVJSHg4SUdsa0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUV4dmIzQWdkR2h5YjNWbmFDQmxkbVZ1ZENCemRHOXlaU0JoYm1RZ2NtVnRiM1psSUhSb1pTQndZWE56WldRZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYVQwd095QnBQR1YyWlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJwYzBsa0lEMGdLR2xrSUQwOVBTQmxkbVZ1ZEhOYmFWMHVhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2htYmlBOVBUMGdaWFpsYm5SelcybGRMbVp1SUNZbUlHbHpTV1FnZkh3Z0lXWnVJQ1ltSUdselNXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwY3k1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdMeThnUTJ4bFlYSWdiM1YwSUdGc2JDQmxkbVZ1ZEhNZ2IyWWdkR2hwY3lCMGVYQmxMbHh1SUNBZ0lDQWdJQ0J6Wld4bVd5ZGZiMjRuSUNzZ1pYWmxiblJkSUQwZ1cxMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJEYkdWaGNpQnZkWFFnWVd4c0lHVjJaVzUwY3lCdlppQmxkbVZ5ZVNCMGVYQmxMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektITmxiR1lwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR2s5TURzZ2FUeHJaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHJaWGx6VzJsZExtbHVaR1Y0VDJZb0oxOXZiaWNwSUQwOVBTQXdLU0FtSmlCQmNuSmhlUzVwYzBGeWNtRjVLSE5sYkdaYmEyVjVjMXRwWFYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1XMnRsZVhOYmFWMWRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk1hWE4wWlc0Z2RHOGdZU0JqZFhOMGIyMGdaWFpsYm5RZ1lXNWtJSEpsYlc5MlpTQnBkQ0J2Ym1ObElHWnBjbVZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUNCbGRtVnVkQ0JGZG1WdWRDQnVZVzFsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTBaMWJtTjBhVzl1ZlNCbWJpQWdJQ0JNYVhOMFpXNWxjaUIwYnlCallXeHNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdJQ0JwWkNBZ0lDQW9iM0IwYVc5dVlXd3BJRTl1YkhrZ2JHbHpkR1Z1SUhSdklHVjJaVzUwY3lCbWIzSWdkR2hwY3lCemIzVnVaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRJYjNkc2ZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVkyVTZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQm1iaXdnYVdRcElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0x5OGdVMlYwZFhBZ2RHaGxJR1YyWlc1MElHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ2MyVnNaaTV2YmlobGRtVnVkQ3dnWm00c0lHbGtMQ0F4S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ0YVhRZ1lXeHNJR1YyWlc1MGN5QnZaaUJoSUhOd1pXTnBabWxqSUhSNWNHVWdZVzVrSUhCaGMzTWdkR2hsSUhOdmRXNWtJR2xrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnWlhabGJuUWdSWFpsYm5RZ2JtRnRaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUNBZ0lGTnZkVzVrSUVsRUxseHVJQ0FnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2JYTm5JQ0FnVFdWemMyRm5aU0IwYnlCbmJ5QjNhWFJvSUdWMlpXNTBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJWdGFYUTZJR1oxYm1OMGFXOXVLR1YyWlc1MExDQnBaQ3dnYlhObktTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdaWFpsYm5SeklEMGdjMlZzWmxzblgyOXVKeUFySUdWMlpXNTBYVHRjYmx4dUlDQWdJQ0FnTHk4Z1RHOXZjQ0IwYUhKdmRXZG9JR1YyWlc1MElITjBiM0psSUdGdVpDQm1hWEpsSUdGc2JDQm1kVzVqZEdsdmJuTXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQV1YyWlc1MGN5NXNaVzVuZEdndE1Uc2dhVDQ5TURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFOXViSGtnWm1seVpTQjBhR1VnYkdsemRHVnVaWElnYVdZZ2RHaGxJR052Y25KbFkzUWdTVVFnYVhNZ2RYTmxaQzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEhOYmFWMHVhV1FnZkh3Z1pYWmxiblJ6VzJsZExtbGtJRDA5UFNCcFpDQjhmQ0JsZG1WdWRDQTlQVDBnSjJ4dllXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpaG1iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTR1WTJGc2JDaDBhR2x6TENCcFpDd2diWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlMbUpwYm1Rb2MyVnNaaXdnWlhabGJuUnpXMmxkTG1adUtTd2dNQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHbHpJR1YyWlc1MElIZGhjeUJ6WlhSMWNDQjNhWFJvSUdCdmJtTmxZQ3dnY21WdGIzWmxJR2wwTGx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRITmJhVjB1YjI1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV2Wm1Zb1pYWmxiblFzSUdWMlpXNTBjMXRwWFM1bWJpd2daWFpsYm5SelcybGRMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1VHRnpjeUIwYUdVZ1pYWmxiblFnZEhsd1pTQnBiblJ2SUd4dllXUWdjWFZsZFdVZ2MyOGdkR2hoZENCcGRDQmpZVzRnWTI5dWRHbHVkV1VnYzNSbGNIQnBibWN1WEc0Z0lDQWdJQ0J6Wld4bUxsOXNiMkZrVVhWbGRXVW9aWFpsYm5RcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVVhWbGRXVWdiMllnWVdOMGFXOXVjeUJwYm1sMGFXRjBaV1FnWW1WbWIzSmxJSFJvWlNCemIzVnVaQ0JvWVhNZ2JHOWhaR1ZrTGx4dUlDQWdJQ0FxSUZSb1pYTmxJSGRwYkd3Z1ltVWdZMkZzYkdWa0lHbHVJSE5sY1hWbGJtTmxMQ0IzYVhSb0lIUm9aU0J1WlhoMElHOXViSGtnWm1seWFXNW5YRzRnSUNBZ0lDb2dZV1owWlhJZ2RHaGxJSEJ5WlhacGIzVnpJR2hoY3lCbWFXNXBjMmhsWkNCbGVHVmpkWFJwYm1jZ0tHVjJaVzRnYVdZZ1lYTjVibU1nYkdsclpTQndiR0Y1S1M1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXNiMkZrVVhWbGRXVTZJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6Wld4bUxsOXhkV1YxWlM1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMFlYTnJJRDBnYzJWc1ppNWZjWFZsZFdWYk1GMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUhSb2FYTWdkR0Z6YXlCcFppQmhJRzFoZEdOb2FXNW5JR1YyWlc1MElIZGhjeUJ3WVhOelpXUXVYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYTnJMbVYyWlc1MElEMDlQU0JsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0YxWlhWbExuTm9hV1owS0NrN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJHOWhaRkYxWlhWbEtDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlNkVzRnZEdobElIUmhjMnNnYVdZZ2JtOGdaWFpsYm5RZ2RIbHdaU0JwY3lCd1lYTnpaV1F1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0IwWVhOckxtRmpkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2FYSmxaQ0IzYUdWdUlIQnNZWGxpWVdOcklHVnVaSE1nWVhRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VTI5MWJtUjlJSE52ZFc1a0lGUm9aU0J6YjNWdVpDQnZZbXBsWTNRZ2RHOGdkMjl5YXlCM2FYUm9MbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJWdVpHVmtPaUJtZFc1amRHbHZiaWh6YjNWdVpDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ2RtRnlJSE53Y21sMFpTQTlJSE52ZFc1a0xsOXpjSEpwZEdVN1hHNWNiaUFnSUNBZ0lDOHZJRWxtSUhkbElHRnlaU0IxYzJsdVp5QkpSU0JoYm1RZ2RHaGxjbVVnZDJGeklHNWxkSGR2Y21zZ2JHRjBaVzVqZVNCM1pTQnRZWGtnWW1VZ1kyeHBjSEJwYm1kY2JpQWdJQ0FnSUM4dklHRjFaR2x2SUdKbFptOXlaU0JwZENCamIyMXdiR1YwWlhNZ2NHeGhlV2x1Wnk0Z1RHVjBjeUJqYUdWamF5QjBhR1VnYm05a1pTQjBieUJ0WVd0bElITjFjbVVnYVhSY2JpQWdJQ0FnSUM4dklHSmxiR2xsZG1WeklHbDBJR2hoY3lCamIyMXdiR1YwWldRc0lHSmxabTl5WlNCbGJtUnBibWNnZEdobElIQnNZWGxpWVdOckxseHVJQ0FnSUNBZ2FXWWdLQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5QW1KaUJ6YjNWdVpDNWZibTlrWlNBbUppQWhjMjkxYm1RdVgyNXZaR1V1Y0dGMWMyVmtJQ1ltSUNGemIzVnVaQzVmYm05a1pTNWxibVJsWkNBbUppQnpiM1Z1WkM1ZmJtOWtaUzVqZFhKeVpXNTBWR2x0WlNBOElITnZkVzVrTGw5emRHOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb2MyVnNaaTVmWlc1a1pXUXVZbWx1WkNoelpXeG1MQ0J6YjNWdVpDa3NJREV3TUNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCVGFHOTFiR1FnZEdocGN5QnpiM1Z1WkNCc2IyOXdQMXh1SUNBZ0lDQWdkbUZ5SUd4dmIzQWdQU0FoSVNoemIzVnVaQzVmYkc5dmNDQjhmQ0J6Wld4bUxsOXpjSEpwZEdWYmMzQnlhWFJsWFZzeVhTazdYRzVjYmlBZ0lDQWdJQzh2SUVacGNtVWdkR2hsSUdWdVpHVmtJR1YyWlc1MExseHVJQ0FnSUNBZ2MyVnNaaTVmWlcxcGRDZ25aVzVrSnl3Z2MyOTFibVF1WDJsa0tUdGNibHh1SUNBZ0lDQWdMeThnVW1WemRHRnlkQ0IwYUdVZ2NHeGhlV0poWTJzZ1ptOXlJRWhVVFV3MUlFRjFaR2x2SUd4dmIzQXVYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVYM2RsWWtGMVpHbHZJQ1ltSUd4dmIzQXBJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNXpkRzl3S0hOdmRXNWtMbDlwWkN3Z2RISjFaU2t1Y0d4aGVTaHpiM1Z1WkM1ZmFXUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCU1pYTjBZWEowSUhSb2FYTWdkR2x0WlhJZ2FXWWdiMjRnWVNCWFpXSWdRWFZrYVc4Z2JHOXZjQzVjYmlBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCc2IyOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0ozQnNZWGtuTENCemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmMyVmxheUE5SUhOdmRXNWtMbDl6ZEdGeWRDQjhmQ0F3TzF4dUlDQWdJQ0FnSUNCemIzVnVaQzVmY21GMFpWTmxaV3NnUFNBd08xeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHeGhlVk4wWVhKMElEMGdTRzkzYkdWeUxtTjBlQzVqZFhKeVpXNTBWR2x0WlR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUNnb2MyOTFibVF1WDNOMGIzQWdMU0J6YjNWdVpDNWZjM1JoY25RcElDb2dNVEF3TUNrZ0x5Qk5ZWFJvTG1GaWN5aHpiM1Z1WkM1ZmNtRjBaU2s3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMlZ1WkZScGJXVnljMXR6YjNWdVpDNWZhV1JkSUQwZ2MyVjBWR2x0Wlc5MWRDaHpaV3htTGw5bGJtUmxaQzVpYVc1a0tITmxiR1lzSUhOdmRXNWtLU3dnZEdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFMWhjbXNnZEdobElHNXZaR1VnWVhNZ2NHRjFjMlZrTGx4dUlDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2SUNZbUlDRnNiMjl3S1NCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZaVzVrWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCemIzVnVaQzVmYzJWbGF5QTlJSE52ZFc1a0xsOXpkR0Z5ZENCOGZDQXdPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZjbUYwWlZObFpXc2dQU0F3TzF4dUlDQWdJQ0FnSUNCelpXeG1MbDlqYkdWaGNsUnBiV1Z5S0hOdmRXNWtMbDlwWkNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUTJ4bFlXNGdkWEFnZEdobElHSjFabVpsY2lCemIzVnlZMlV1WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMk5zWldGdVFuVm1abVZ5S0hOdmRXNWtMbDl1YjJSbEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCQmRIUmxiWEIwSUhSdklHRjFkRzh0YzNWemNHVnVaQ0JCZFdScGIwTnZiblJsZUhRZ2FXWWdibThnYzI5MWJtUnpJR0Z5WlNCemRHbHNiQ0J3YkdGNWFXNW5MbHh1SUNBZ0lDQWdJQ0JJYjNkc1pYSXVYMkYxZEc5VGRYTndaVzVrS0NrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRmRvWlc0Z2RYTnBibWNnWVNCemNISnBkR1VzSUdWdVpDQjBhR1VnZEhKaFkyc3VYRzRnSUNBZ0lDQnBaaUFvSVhObGJHWXVYM2RsWWtGMVpHbHZJQ1ltSUNGc2IyOXdLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVjM1J2Y0NoemIzVnVaQzVmYVdRcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJ4bFlYSWdkR2hsSUdWdVpDQjBhVzFsY2lCbWIzSWdZU0J6YjNWdVpDQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlHbGtJRlJvWlNCemIzVnVaQ0JKUkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0SWIzZHNmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWpiR1ZoY2xScGJXVnlPaUJtZFc1amRHbHZiaWhwWkNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZlpXNWtWR2x0WlhKelcybGtYU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkRiR1ZoY2lCMGFHVWdkR2x0Wlc5MWRDQnZjaUJ5WlcxdmRtVWdkR2hsSUdWdVpHVmtJR3hwYzNSbGJtVnlMbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGJHWXVYMlZ1WkZScGJXVnljMXRwWkYwZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvYzJWc1ppNWZaVzVrVkdsdFpYSnpXMmxrWFNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUWdKaVlnYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl1YjJSbExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMlZ1WkdWa0p5d2djMlZzWmk1ZlpXNWtWR2x0WlhKelcybGtYU3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQnpaV3htTGw5bGJtUlVhVzFsY25OYmFXUmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1SUhSb1pTQnpiM1Z1WkNCcFpHVnVkR2xtYVdWa0lHSjVJSFJvYVhNZ1NVUXNJRzl5SUhKbGRIVnliaUJ1ZFd4c0xseHVJQ0FnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2FXUWdVMjkxYm1RZ1NVUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOUlDQWdJRk52ZFc1a0lHOWlhbVZqZENCdmNpQnVkV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjl6YjNWdVpFSjVTV1E2SUdaMWJtTjBhVzl1S0dsa0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJHd2djMjkxYm1SeklHRnVaQ0JtYVc1a0lIUm9aU0J2Ym1VZ2QybDBhQ0IwYUdseklFbEVMbHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBITmxiR1l1WDNOdmRXNWtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVdRZ1BUMDlJSE5sYkdZdVgzTnZkVzVrYzF0cFhTNWZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVnNaaTVmYzI5MWJtUnpXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNGdZVzRnYVc1aFkzUnBkbVVnYzI5MWJtUWdabkp2YlNCMGFHVWdjRzl2YkNCdmNpQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bExseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlNCVGIzVnVaQ0J3YkdGNVltRmpheUJ2WW1wbFkzUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gybHVZV04wYVhabFUyOTFibVE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNCelpXeG1MbDlrY21GcGJpZ3BPMXh1WEc0Z0lDQWdJQ0F2THlCR2FXNWtJSFJvWlNCbWFYSnpkQ0JwYm1GamRHbDJaU0J1YjJSbElIUnZJSEpsWTNsamJHVXVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBQVEE3SUdrOGMyVnNaaTVmYzI5MWJtUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxsOXpiM1Z1WkhOYmFWMHVYMlZ1WkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzTnZkVzVrYzF0cFhTNXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUVsbUlHNXZJR2x1WVdOMGFYWmxJRzV2WkdVZ2QyRnpJR1p2ZFc1a0xDQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bExseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlRiM1Z1WkNoelpXeG1LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkhKaGFXNGdaWGhqWlhOeklHbHVZV04wYVhabElITnZkVzVrY3lCbWNtOXRJSFJvWlNCd2IyOXNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWtjbUZwYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdiR2x0YVhRZ1BTQnpaV3htTGw5d2IyOXNPMXh1SUNBZ0lDQWdkbUZ5SUdOdWRDQTlJREE3WEc0Z0lDQWdJQ0IyWVhJZ2FTQTlJREE3WEc1Y2JpQWdJQ0FnSUM4dklFbG1JSFJvWlhKbElHRnlaU0JzWlhOeklITnZkVzVrY3lCMGFHRnVJSFJvWlNCdFlYZ2djRzl2YkNCemFYcGxMQ0IzWlNCaGNtVWdaRzl1WlM1Y2JpQWdJQ0FnSUdsbUlDaHpaV3htTGw5emIzVnVaSE11YkdWdVozUm9JRHdnYkdsdGFYUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCRGIzVnVkQ0IwYUdVZ2JuVnRZbVZ5SUc5bUlHbHVZV04wYVhabElITnZkVzVrY3k1Y2JpQWdJQ0FnSUdadmNpQW9hVDB3T3lCcFBITmxiR1l1WDNOdmRXNWtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZjMjkxYm1SelcybGRMbDlsYm1SbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdWRDc3JPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGSmxiVzkyWlNCbGVHTmxjM01nYVc1aFkzUnBkbVVnYzI5MWJtUnpMQ0JuYjJsdVp5QnBiaUJ5WlhabGNuTmxJRzl5WkdWeUxseHVJQ0FnSUNBZ1ptOXlJQ2hwUFhObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdnZ0xTQXhPeUJwUGowd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR051ZENBOFBTQnNhVzFwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTGw5emIzVnVaSE5iYVYwdVgyVnVaR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnUkdselkyOXVibVZqZENCMGFHVWdZWFZrYVc4Z2MyOTFjbU5sSUhkb1pXNGdkWE5wYm1jZ1YyVmlJRUYxWkdsdkxseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbDkzWldKQmRXUnBieUFtSmlCelpXeG1MbDl6YjNWdVpITmJhVjB1WDI1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDNOdmRXNWtjMXRwWFM1ZmJtOWtaUzVrYVhOamIyNXVaV04wS0RBcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsYlc5MlpTQnpiM1Z1WkhNZ2RXNTBhV3dnZDJVZ2FHRjJaU0IwYUdVZ2NHOXZiQ0J6YVhwbExseHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzTnZkVzVrY3k1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnWTI1MExTMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMElHRnNiQ0JKUkNkeklHWnliMjBnZEdobElITnZkVzVrY3lCd2IyOXNMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdhV1FnVDI1c2VTQnlaWFIxY200Z2IyNWxJRWxFSUdsbUlHOXVaU0JwY3lCd1lYTnpaV1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UVhKeVlYbDlJQ0FnSUVGeWNtRjVJRzltSUVsRWN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZloyVjBVMjkxYm1SSlpITTZJR1oxYm1OMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcFpITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FUMHdPeUJwUEhObGJHWXVYM052ZFc1a2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbGtjeTV3ZFhOb0tITmxiR1l1WDNOdmRXNWtjMXRwWFM1ZmFXUXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsa2N6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmFXUmRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJNYjJGa0lIUm9aU0J6YjNWdVpDQmlZV05ySUdsdWRHOGdkR2hsSUdKMVptWmxjaUJ6YjNWeVkyVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElDQjdVMjkxYm1SOUlITnZkVzVrSUZSb1pTQnpiM1Z1WkNCdlltcGxZM1FnZEc4Z2QyOXlheUIzYVhSb0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwaHZkMng5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM0psWm5KbGMyaENkV1ptWlhJNklHWjFibU4wYVc5dUtITnZkVzVrS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQmlkV1ptWlhJZ2MyOTFjbU5sSUdadmNpQndiR0Y1WW1GamF5NWNiaUFnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbUoxWm1abGNsTnZkWEpqWlNBOUlFaHZkMnhsY2k1amRIZ3VZM0psWVhSbFFuVm1abVZ5VTI5MWNtTmxLQ2s3WEc0Z0lDQWdJQ0J6YjNWdVpDNWZibTlrWlM1aWRXWm1aWEpUYjNWeVkyVXVZblZtWm1WeUlEMGdZMkZqYUdWYmMyVnNaaTVmYzNKalhUdGNibHh1SUNBZ0lDQWdMeThnUTI5dWJtVmpkQ0IwYnlCMGFHVWdZMjl5Y21WamRDQnViMlJsTGx4dUlDQWdJQ0FnYVdZZ0tITnZkVzVrTGw5d1lXNXVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2MyOTFibVF1WDI1dlpHVXVZblZtWm1WeVUyOTFjbU5sTG1OdmJtNWxZM1FvYzI5MWJtUXVYM0JoYm01bGNpazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdVkyOXVibVZqZENoemIzVnVaQzVmYm05a1pTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJR3h2YjNCcGJtY2dZVzVrSUhCc1lYbGlZV05ySUhKaGRHVXVYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmJtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWJHOXZjQ0E5SUhOdmRXNWtMbDlzYjI5d08xeHVJQ0FnSUNBZ2FXWWdLSE52ZFc1a0xsOXNiMjl3S1NCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5dWIyUmxMbUoxWm1abGNsTnZkWEpqWlM1c2IyOXdVM1JoY25RZ1BTQnpiM1Z1WkM1ZmMzUmhjblFnZkh3Z01EdGNiaUFnSUNBZ0lDQWdjMjkxYm1RdVgyNXZaR1V1WW5WbVptVnlVMjkxY21ObExteHZiM0JGYm1RZ1BTQnpiM1Z1WkM1ZmMzUnZjRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSE52ZFc1a0xsOXViMlJsTG1KMVptWmxjbE52ZFhKalpTNXdiR0Y1WW1GamExSmhkR1V1YzJWMFZtRnNkV1ZCZEZScGJXVW9jMjkxYm1RdVgzSmhkR1VzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISmxkbVZ1ZENCdFpXMXZjbmtnYkdWaGEzTWdZbmtnWTJ4bFlXNXBibWNnZFhBZ2RHaGxJR0oxWm1abGNpQnpiM1Z5WTJVZ1lXWjBaWElnY0d4aGVXSmhZMnN1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0J1YjJSbElGTnZkVzVrSjNNZ1lYVmthVzhnYm05a1pTQmpiMjUwWVdsdWFXNW5JSFJvWlNCaWRXWm1aWElnYzI5MWNtTmxMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJOc1pXRnVRblZtWm1WeU9pQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUdsbUlDaEliM2RzWlhJdVgzTmpjbUYwWTJoQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzVpZFdabVpYSlRiM1Z5WTJVdWIyNWxibVJsWkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUc1dlpHVXVZblZtWm1WeVUyOTFjbU5sTG1ScGMyTnZibTVsWTNRb01DazdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN0lHNXZaR1V1WW5WbVptVnlVMjkxY21ObExtSjFabVpsY2lBOUlFaHZkMnhsY2k1ZmMyTnlZWFJqYUVKMVptWmxjanNnZlNCallYUmphQ2hsS1NCN2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2JtOWtaUzVpZFdabVpYSlRiM1Z5WTJVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeW9xSUZOcGJtZHNaU0JUYjNWdVpDQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFIxY0NCMGFHVWdjMjkxYm1RZ2IySnFaV04wTENCM2FHbGphQ0JsWVdOb0lHNXZaR1VnWVhSMFlXTm9aV1FnZEc4Z1lTQkliM2RzSUdkeWIzVndJR2x6SUdOdmJuUmhhVzVsWkNCcGJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdodmQyd2dWR2hsSUVodmQyd2djR0Z5Wlc1MElHZHliM1Z3TGx4dUlDQWdLaTljYmlBZ2RtRnlJRk52ZFc1a0lEMGdablZ1WTNScGIyNG9hRzkzYkNrZ2UxeHVJQ0FnSUhSb2FYTXVYM0JoY21WdWRDQTlJR2h2ZDJ3N1hHNGdJQ0FnZEdocGN5NXBibWwwS0NrN1hHNGdJSDA3WEc0Z0lGTnZkVzVrTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibWwwYVdGc2FYcGxJR0VnYm1WM0lGTnZkVzVrSUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUYjNWdVpIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCd1lYSmxiblFnUFNCelpXeG1MbDl3WVhKbGJuUTdYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJSFJvWlNCa1pXWmhkV3gwSUhCaGNtRnRaWFJsY25NdVhHNGdJQ0FnSUNCelpXeG1MbDl0ZFhSbFpDQTlJSEJoY21WdWRDNWZiWFYwWldRN1hHNGdJQ0FnSUNCelpXeG1MbDlzYjI5d0lEMGdjR0Z5Wlc1MExsOXNiMjl3TzF4dUlDQWdJQ0FnYzJWc1ppNWZkbTlzZFcxbElEMGdjR0Z5Wlc1MExsOTJiMngxYldVN1hHNGdJQ0FnSUNCelpXeG1MbDl5WVhSbElEMGdjR0Z5Wlc1MExsOXlZWFJsTzF4dUlDQWdJQ0FnYzJWc1ppNWZjMlZsYXlBOUlEQTdYRzRnSUNBZ0lDQnpaV3htTGw5d1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZlpXNWtaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzQnlhWFJsSUQwZ0oxOWZaR1ZtWVhWc2RDYzdYRzVjYmlBZ0lDQWdJQzh2SUVkbGJtVnlZWFJsSUdFZ2RXNXBjWFZsSUVsRUlHWnZjaUIwYUdseklITnZkVzVrTGx4dUlDQWdJQ0FnYzJWc1ppNWZhV1FnUFNBckswaHZkMnhsY2k1ZlkyOTFiblJsY2p0Y2JseHVJQ0FnSUNBZ0x5OGdRV1JrSUdsMGMyVnNaaUIwYnlCMGFHVWdjR0Z5Wlc1MEozTWdjRzl2YkM1Y2JpQWdJQ0FnSUhCaGNtVnVkQzVmYzI5MWJtUnpMbkIxYzJnb2MyVnNaaWs3WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCMGFHVWdibVYzSUc1dlpHVXVYRzRnSUNBZ0lDQnpaV3htTG1OeVpXRjBaU2dwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRM0psWVhSbElHRnVaQ0J6WlhSMWNDQmhJRzVsZHlCemIzVnVaQ0J2WW1wbFkzUXNJSGRvWlhSb1pYSWdTRlJOVERVZ1FYVmthVzhnYjNJZ1YyVmlJRUYxWkdsdkxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR055WldGMFpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnY0dGeVpXNTBJRDBnYzJWc1ppNWZjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ2RtRnlJSFp2YkhWdFpTQTlJQ2hJYjNkc1pYSXVYMjExZEdWa0lIeDhJSE5sYkdZdVgyMTFkR1ZrSUh4OElITmxiR1l1WDNCaGNtVnVkQzVmYlhWMFpXUXBJRDhnTUNBNklITmxiR1l1WDNadmJIVnRaVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhjbVZ1ZEM1ZmQyVmlRWFZrYVc4cElIdGNiaUFnSUNBZ0lDQWdMeThnUTNKbFlYUmxJSFJvWlNCbllXbHVJRzV2WkdVZ1ptOXlJR052Ym5SeWIyeHNhVzVuSUhadmJIVnRaU0FvZEdobElITnZkWEpqWlNCM2FXeHNJR052Ym01bFkzUWdkRzhnZEdocGN5a3VYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1VnUFNBb2RIbHdaVzltSUVodmQyeGxjaTVqZEhndVkzSmxZWFJsUjJGcGJpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElEOGdTRzkzYkdWeUxtTjBlQzVqY21WaGRHVkhZV2x1VG05a1pTZ3BJRG9nU0c5M2JHVnlMbU4wZUM1amNtVmhkR1ZIWVdsdUtDazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1V1WjJGcGJpNXpaWFJXWVd4MVpVRjBWR2x0WlNoMmIyeDFiV1VzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG5CaGRYTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyNXZaR1V1WTI5dWJtVmpkQ2hJYjNkc1pYSXViV0Z6ZEdWeVIyRnBiaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsSUQwZ2JtVjNJRUYxWkdsdktDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1RHbHpkR1Z1SUdadmNpQmxjbkp2Y25NZ0tHaDBkSEE2THk5a1pYWXVkek11YjNKbkwyaDBiV3cxTDNOd1pXTXRZWFYwYUc5eUxYWnBaWGN2YzNCbFl5NW9kRzFzSTIxbFpHbGhaWEp5YjNJcExseHVJQ0FnSUNBZ0lDQnpaV3htTGw5bGNuSnZja1p1SUQwZ2MyVnNaaTVmWlhKeWIzSk1hWE4wWlc1bGNpNWlhVzVrS0hObGJHWXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJWeWNtOXlKeXdnYzJWc1ppNWZaWEp5YjNKR2Jpd2dabUZzYzJVcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUV4cGMzUmxiaUJtYjNJZ0oyTmhibkJzWVhsMGFISnZkV2RvSnlCbGRtVnVkQ0IwYnlCc1pYUWdkWE1nYTI1dmR5QjBhR1VnYzI5MWJtUWdhWE1nY21WaFpIa3VYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyeHZZV1JHYmlBOUlITmxiR1l1WDJ4dllXUk1hWE4wWlc1bGNpNWlhVzVrS0hObGJHWXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvU0c5M2JHVnlMbDlqWVc1UWJHRjVSWFpsYm5Rc0lITmxiR1l1WDJ4dllXUkdiaXdnWm1Gc2MyVXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQnVaWGNnWVhWa2FXOGdibTlrWlM1Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmYm05a1pTNXpjbU1nUFNCd1lYSmxiblF1WDNOeVl6dGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmJtOWtaUzV3Y21Wc2IyRmtJRDBnSjJGMWRHOG5PMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXViMlJsTG5admJIVnRaU0E5SUhadmJIVnRaU0FxSUVodmQyeGxjaTUyYjJ4MWJXVW9LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkNaV2RwYmlCc2IyRmthVzVuSUhSb1pTQnpiM1Z5WTJVdVhHNGdJQ0FnSUNBZ0lITmxiR1l1WDI1dlpHVXViRzloWkNncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WelpYUWdkR2hsSUhCaGNtRnRaWFJsY25NZ2IyWWdkR2hwY3lCemIzVnVaQ0IwYnlCMGFHVWdiM0pwWjJsdVlXd2djM1JoZEdVZ0tHWnZjaUJ5WldONVkyeGxLUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUYjNWdVpIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpYTmxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ2NHRnlaVzUwSUQwZ2MyVnNaaTVmY0dGeVpXNTBPMXh1WEc0Z0lDQWdJQ0F2THlCU1pYTmxkQ0JoYkd3Z2IyWWdkR2hsSUhCaGNtRnRaWFJsY25NZ2IyWWdkR2hwY3lCemIzVnVaQzVjYmlBZ0lDQWdJSE5sYkdZdVgyMTFkR1ZrSUQwZ2NHRnlaVzUwTGw5dGRYUmxaRHRjYmlBZ0lDQWdJSE5sYkdZdVgyeHZiM0FnUFNCd1lYSmxiblF1WDJ4dmIzQTdYRzRnSUNBZ0lDQnpaV3htTGw5MmIyeDFiV1VnUFNCd1lYSmxiblF1WDNadmJIVnRaVHRjYmlBZ0lDQWdJSE5sYkdZdVgzSmhkR1VnUFNCd1lYSmxiblF1WDNKaGRHVTdYRzRnSUNBZ0lDQnpaV3htTGw5elpXVnJJRDBnTUR0Y2JpQWdJQ0FnSUhObGJHWXVYM0poZEdWVFpXVnJJRDBnTUR0Y2JpQWdJQ0FnSUhObGJHWXVYM0JoZFhObFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCelpXeG1MbDlsYm1SbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCelpXeG1MbDl6Y0hKcGRHVWdQU0FuWDE5a1pXWmhkV3gwSnp0Y2JseHVJQ0FnSUNBZ0x5OGdSMlZ1WlhKaGRHVWdZU0J1WlhjZ1NVUWdjMjhnZEdoaGRDQnBkQ0JwYzI0bmRDQmpiMjVtZFhObFpDQjNhWFJvSUhSb1pTQndjbVYyYVc5MWN5QnpiM1Z1WkM1Y2JpQWdJQ0FnSUhObGJHWXVYMmxrSUQwZ0t5dEliM2RzWlhJdVgyTnZkVzUwWlhJN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJVkUxTU5TQkJkV1JwYnlCbGNuSnZjaUJzYVhOMFpXNWxjaUJqWVd4c1ltRmpheTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZaWEp5YjNKTWFYTjBaVzVsY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDOHZJRVpwY21VZ1lXNGdaWEp5YjNJZ1pYWmxiblFnWVc1a0lIQmhjM01nWW1GamF5QjBhR1VnWTI5a1pTNWNiaUFnSUNBZ0lITmxiR1l1WDNCaGNtVnVkQzVmWlcxcGRDZ25iRzloWkdWeWNtOXlKeXdnYzJWc1ppNWZhV1FzSUhObGJHWXVYMjV2WkdVdVpYSnliM0lnUHlCelpXeG1MbDl1YjJSbExtVnljbTl5TG1OdlpHVWdPaUF3S1R0Y2JseHVJQ0FnSUNBZ0x5OGdRMnhsWVhJZ2RHaGxJR1YyWlc1MElHeHBjM1JsYm1WeUxseHVJQ0FnSUNBZ2MyVnNaaTVmYm05a1pTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2RsY25KdmNpY3NJSE5sYkdZdVgyVnljbTl5Um00c0lHWmhiSE5sS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NGUk5URFVnUVhWa2FXOGdZMkZ1Y0d4aGVYUm9jbTkxWjJnZ2JHbHpkR1Z1WlhJZ1kyRnNiR0poWTJzdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJ4dllXUk1hWE4wWlc1bGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnY0dGeVpXNTBJRDBnYzJWc1ppNWZjR0Z5Wlc1ME8xeHVYRzRnSUNBZ0lDQXZMeUJTYjNWdVpDQjFjQ0IwYUdVZ1pIVnlZWFJwYjI0Z2RHOGdZV05qYjNWdWRDQm1iM0lnZEdobElHeHZkMlZ5SUhCeVpXTnBjMmx2YmlCcGJpQklWRTFNTlNCQmRXUnBieTVjYmlBZ0lDQWdJSEJoY21WdWRDNWZaSFZ5WVhScGIyNGdQU0JOWVhSb0xtTmxhV3dvYzJWc1ppNWZibTlrWlM1a2RYSmhkR2x2YmlBcUlERXdLU0F2SURFd08xeHVYRzRnSUNBZ0lDQXZMeUJUWlhSMWNDQmhJSE53Y21sMFpTQnBaaUJ1YjI1bElHbHpJR1JsWm1sdVpXUXVYRzRnSUNBZ0lDQnBaaUFvVDJKcVpXTjBMbXRsZVhNb2NHRnlaVzUwTGw5emNISnBkR1VwTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J3WVhKbGJuUXVYM053Y21sMFpTQTlJSHRmWDJSbFptRjFiSFE2SUZzd0xDQndZWEpsYm5RdVgyUjFjbUYwYVc5dUlDb2dNVEF3TUYxOU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvY0dGeVpXNTBMbDl6ZEdGMFpTQWhQVDBnSjJ4dllXUmxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NHRnlaVzUwTGw5emRHRjBaU0E5SUNkc2IyRmtaV1FuTzF4dUlDQWdJQ0FnSUNCd1lYSmxiblF1WDJWdGFYUW9KMnh2WVdRbktUdGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MExsOXNiMkZrVVhWbGRXVW9LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1EyeGxZWElnZEdobElHVjJaVzUwSUd4cGMzUmxibVZ5TGx4dUlDQWdJQ0FnYzJWc1ppNWZibTlrWlM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtFaHZkMnhsY2k1ZlkyRnVVR3hoZVVWMlpXNTBMQ0J6Wld4bUxsOXNiMkZrUm00c0lHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5b3FJRWhsYkhCbGNpQk5aWFJvYjJSeklDb3FMMXh1SUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0Z0lIWmhjaUJqWVdOb1pTQTlJSHQ5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJDZFdabVpYSWdZU0J6YjNWdVpDQm1jbTl0SUZWU1RDd2dSR0YwWVNCVlVra2diM0lnWTJGamFHVWdZVzVrSUdSbFkyOWtaU0IwYnlCaGRXUnBieUJ6YjNWeVkyVWdLRmRsWWlCQmRXUnBieUJCVUVrcExseHVJQ0FnS2lCQWNHRnlZVzBnSUh0SWIzZHNmU0J6Wld4bVhHNGdJQ0FxTDF4dUlDQjJZWElnYkc5aFpFSjFabVpsY2lBOUlHWjFibU4wYVc5dUtITmxiR1lwSUh0Y2JpQWdJQ0IyWVhJZ2RYSnNJRDBnYzJWc1ppNWZjM0pqTzF4dVhHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2RHaGxJR0oxWm1abGNpQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHTmhZMmhsWkNCaGJtUWdkWE5sSUdsMElHbHVjM1JsWVdRdVhHNGdJQ0FnYVdZZ0tHTmhZMmhsVzNWeWJGMHBJSHRjYmlBZ0lDQWdJQzh2SUZObGRDQjBhR1VnWkhWeVlYUnBiMjRnWm5KdmJTQjBhR1VnWTJGamFHVXVYRzRnSUNBZ0lDQnpaV3htTGw5a2RYSmhkR2x2YmlBOUlHTmhZMmhsVzNWeWJGMHVaSFZ5WVhScGIyNDdYRzVjYmlBZ0lDQWdJQzh2SUV4dllXUWdkR2hsSUhOdmRXNWtJR2x1ZEc4Z2RHaHBjeUJJYjNkc0xseHVJQ0FnSUNBZ2JHOWhaRk52ZFc1a0tITmxiR1lwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0M5ZVpHRjBZVHBiWGp0ZEt6dGlZWE5sTmpRc0x5NTBaWE4wS0hWeWJDa3BJSHRjYmlBZ0lDQWdJQzh2SUVSbFkyOWtaU0IwYUdVZ1ltRnpaVFkwSUdSaGRHRWdWVkpKSUhkcGRHaHZkWFFnV0VoU0xDQnphVzVqWlNCemIyMWxJR0p5YjNkelpYSnpJR1J2YmlkMElITjFjSEJ2Y25RZ2FYUXVYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR0YwYjJJb2RYSnNMbk53YkdsMEtDY3NKeWxiTVYwcE8xeHVJQ0FnSUNBZ2RtRnlJR1JoZEdGV2FXVjNJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR1JoZEdFdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlWWnBaWGRiYVYwZ1BTQmtZWFJoTG1Ob1lYSkRiMlJsUVhRb2FTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1JsWTI5a1pVRjFaR2x2UkdGMFlTaGtZWFJoVm1sbGR5NWlkV1ptWlhJc0lITmxiR1lwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJNYjJGa0lIUm9aU0JpZFdabVpYSWdabkp2YlNCMGFHVWdWVkpNTGx4dUlDQWdJQ0FnZG1GeUlIaG9jaUE5SUc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZENncE8xeHVJQ0FnSUNBZ2VHaHlMbTl3Wlc0b0owZEZWQ2NzSUhWeWJDd2dkSEoxWlNrN1hHNGdJQ0FnSUNCNGFISXVkMmwwYUVOeVpXUmxiblJwWVd4eklEMGdjMlZzWmk1ZmVHaHlWMmwwYUVOeVpXUmxiblJwWVd4ek8xeHVJQ0FnSUNBZ2VHaHlMbkpsYzNCdmJuTmxWSGx3WlNBOUlDZGhjbkpoZVdKMVptWmxjaWM3WEc0Z0lDQWdJQ0I0YUhJdWIyNXNiMkZrSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCM1pTQm5aWFFnWVNCemRXTmpaWE56Wm5Wc0lISmxjM0J2Ym5ObElHSmhZMnN1WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMlJsSUQwZ0tIaG9jaTV6ZEdGMGRYTWdLeUFuSnlsYk1GMDdYRzRnSUNBZ0lDQWdJR2xtSUNoamIyUmxJQ0U5UFNBbk1DY2dKaVlnWTI5a1pTQWhQVDBnSnpJbklDWW1JR052WkdVZ0lUMDlJQ2N6SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyVnRhWFFvSjJ4dllXUmxjbkp2Y2ljc0lHNTFiR3dzSUNkR1lXbHNaV1FnYkc5aFpHbHVaeUJoZFdScGJ5Qm1hV3hsSUhkcGRHZ2djM1JoZEhWek9pQW5JQ3NnZUdoeUxuTjBZWFIxY3lBcklDY3VKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdaR1ZqYjJSbFFYVmthVzlFWVhSaEtIaG9jaTV5WlhOd2IyNXpaU3dnYzJWc1ppazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdlR2h5TG05dVpYSnliM0lnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxjbVVnYVhNZ1lXNGdaWEp5YjNJc0lITjNhWFJqYUNCMGJ5QklWRTFNTlNCQmRXUnBieTVjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmFIUnRiRFVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYM2RsWWtGMVpHbHZJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZjMjkxYm1SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdOaFkyaGxXM1Z5YkYwN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1c2IyRmtLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCellXWmxXR2h5VTJWdVpDaDRhSElwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaQ0IwYUdVZ1dFaFNJSEpsY1hWbGMzUWdkM0poY0hCbFpDQnBiaUJoSUhSeWVTOWpZWFJqYUM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0I0YUhJZ1dFaFNJSFJ2SUhObGJtUXVYRzRnSUNBcUwxeHVJQ0IyWVhJZ2MyRm1aVmhvY2xObGJtUWdQU0JtZFc1amRHbHZiaWg0YUhJcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdlR2h5TG5ObGJtUW9LVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0I0YUhJdWIyNWxjbkp2Y2lncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1ZqYjJSbElHRjFaR2x2SUdSaGRHRWdabkp2YlNCaGJpQmhjbkpoZVNCaWRXWm1aWEl1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMEZ5Y21GNVFuVm1abVZ5ZlNCaGNuSmhlV0oxWm1abGNpQlVhR1VnWVhWa2FXOGdaR0YwWVM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3U0c5M2JIMGdJQ0FnSUNBZ0lITmxiR1pjYmlBZ0lDb3ZYRzRnSUhaaGNpQmtaV052WkdWQmRXUnBiMFJoZEdFZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVdKMVptWmxjaXdnYzJWc1ppa2dlMXh1SUNBZ0lDOHZJRVJsWTI5a1pTQjBhR1VnWW5WbVptVnlJR2x1ZEc4Z1lXNGdZWFZrYVc4Z2MyOTFjbU5sTGx4dUlDQWdJRWh2ZDJ4bGNpNWpkSGd1WkdWamIyUmxRWFZrYVc5RVlYUmhLR0Z5Y21GNVluVm1abVZ5TENCbWRXNWpkR2x2YmloaWRXWm1aWElwSUh0Y2JpQWdJQ0FnSUdsbUlDaGlkV1ptWlhJZ0ppWWdjMlZzWmk1ZmMyOTFibVJ6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWYmMyVnNaaTVmYzNKalhTQTlJR0oxWm1abGNqdGNiaUFnSUNBZ0lDQWdiRzloWkZOdmRXNWtLSE5sYkdZc0lHSjFabVpsY2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnpaV3htTGw5bGJXbDBLQ2RzYjJGa1pYSnliM0luTENCdWRXeHNMQ0FuUkdWamIyUnBibWNnWVhWa2FXOGdaR0YwWVNCbVlXbHNaV1F1SnlrN1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk52ZFc1a0lHbHpJRzV2ZHlCc2IyRmtaV1FzSUhOdklHWnBibWx6YUNCelpYUjBhVzVuSUdWMlpYSjVkR2hwYm1jZ2RYQWdZVzVrSUdacGNtVWdkR2hsSUd4dllXUmxaQ0JsZG1WdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1NHOTNiSDBnYzJWc1pseHVJQ0FnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUdKMVptWmxjaUJVYUdVZ1pHVmpiMlJsWkNCaWRXWm1aWElnYzI5MWJtUWdjMjkxY21ObExseHVJQ0FnS2k5Y2JpQWdkbUZ5SUd4dllXUlRiM1Z1WkNBOUlHWjFibU4wYVc5dUtITmxiR1lzSUdKMVptWmxjaWtnZTF4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkhWeVlYUnBiMjR1WEc0Z0lDQWdhV1lnS0dKMVptWmxjaUFtSmlBaGMyVnNaaTVmWkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYMlIxY21GMGFXOXVJRDBnWW5WbVptVnlMbVIxY21GMGFXOXVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRk5sZEhWd0lHRWdjM0J5YVhSbElHbG1JRzV2Ym1VZ2FYTWdaR1ZtYVc1bFpDNWNiaUFnSUNCcFppQW9UMkpxWldOMExtdGxlWE1vYzJWc1ppNWZjM0J5YVhSbEtTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhObGJHWXVYM053Y21sMFpTQTlJSHRmWDJSbFptRjFiSFE2SUZzd0xDQnpaV3htTGw5a2RYSmhkR2x2YmlBcUlERXdNREJkZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCR2FYSmxJSFJvWlNCc2IyRmtaV1FnWlhabGJuUXVYRzRnSUNBZ2FXWWdLSE5sYkdZdVgzTjBZWFJsSUNFOVBTQW5iRzloWkdWa0p5a2dlMXh1SUNBZ0lDQWdjMlZzWmk1ZmMzUmhkR1VnUFNBbmJHOWhaR1ZrSnp0Y2JpQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyeHZZV1FuS1R0Y2JpQWdJQ0FnSUhObGJHWXVYMnh2WVdSUmRXVjFaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBkWEFnZEdobElHRjFaR2x2SUdOdmJuUmxlSFFnZDJobGJpQmhkbUZwYkdGaWJHVXNJRzl5SUhOM2FYUmphQ0IwYnlCSVZFMU1OU0JCZFdScGJ5QnRiMlJsTGx4dUlDQWdLaTljYmlBZ2RtRnlJSE5sZEhWd1FYVmthVzlEYjI1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2QyVWdZWEpsSUhWemFXNW5JRmRsWWlCQmRXUnBieUJoYm1RZ2MyVjBkWEFnZEdobElFRjFaR2x2UTI5dWRHVjRkQ0JwWmlCM1pTQmhjbVV1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1FYVmthVzlEYjI1MFpYaDBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0JJYjNkc1pYSXVZM1I0SUQwZ2JtVjNJRUYxWkdsdlEyOXVkR1Y0ZENncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2QyVmlhMmwwUVhWa2FXOURiMjUwWlhoMElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQkliM2RzWlhJdVkzUjRJRDBnYm1WM0lIZGxZbXRwZEVGMVpHbHZRMjl1ZEdWNGRDZ3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdTRzkzYkdWeUxuVnphVzVuVjJWaVFYVmthVzhnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJRWh2ZDJ4bGNpNTFjMmx1WjFkbFlrRjFaR2x2SUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJobFkyc2dhV1lnWVNCM1pXSjJhV1YzSUdseklHSmxhVzVuSUhWelpXUWdiMjRnYVU5VE9DQnZjaUJsWVhKc2FXVnlJQ2h5WVhSb1pYSWdkR2hoYmlCMGFHVWdZbkp2ZDNObGNpa3VYRzRnSUNBZ0x5OGdTV1lnYVhRZ2FYTXNJR1JwYzJGaWJHVWdWMlZpSUVGMVpHbHZJR0Z6SUdsMElHTmhkWE5sY3lCamNtRnphR2x1Wnk1Y2JpQWdJQ0IyWVhJZ2FVOVRJRDBnS0M5cFVDaG9iMjVsZkc5a2ZHRmtLUzh1ZEdWemRDaEliM2RzWlhJdVgyNWhkbWxuWVhSdmNpQW1KaUJJYjNkc1pYSXVYMjVoZG1sbllYUnZjaTV3YkdGMFptOXliU2twTzF4dUlDQWdJSFpoY2lCaGNIQldaWEp6YVc5dUlEMGdTRzkzYkdWeUxsOXVZWFpwWjJGMGIzSWdKaVlnU0c5M2JHVnlMbDl1WVhacFoyRjBiM0l1WVhCd1ZtVnljMmx2Ymk1dFlYUmphQ2d2VDFNZ0tGeGNaQ3NwWHloY1hHUXJLVjgvS0Z4Y1pDc3BQeThwTzF4dUlDQWdJSFpoY2lCMlpYSnphVzl1SUQwZ1lYQndWbVZ5YzJsdmJpQS9JSEJoY25ObFNXNTBLR0Z3Y0ZabGNuTnBiMjViTVYwc0lERXdLU0E2SUc1MWJHdzdYRzRnSUNBZ2FXWWdLR2xQVXlBbUppQjJaWEp6YVc5dUlDWW1JSFpsY25OcGIyNGdQQ0E1S1NCN1hHNGdJQ0FnSUNCMllYSWdjMkZtWVhKcElEMGdMM05oWm1GeWFTOHVkR1Z6ZENoSWIzZHNaWEl1WDI1aGRtbG5ZWFJ2Y2lBbUppQkliM2RzWlhJdVgyNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVkRzlNYjNkbGNrTmhjMlVvS1NrN1hHNGdJQ0FnSUNCcFppQW9TRzkzYkdWeUxsOXVZWFpwWjJGMGIzSWdKaVlnU0c5M2JHVnlMbDl1WVhacFoyRjBiM0l1YzNSaGJtUmhiRzl1WlNBbUppQWhjMkZtWVhKcElIeDhJRWh2ZDJ4bGNpNWZibUYyYVdkaGRHOXlJQ1ltSUNGSWIzZHNaWEl1WDI1aGRtbG5ZWFJ2Y2k1emRHRnVaR0ZzYjI1bElDWW1JQ0Z6WVdaaGNta3BJSHRjYmlBZ0lDQWdJQ0FnU0c5M2JHVnlMblZ6YVc1blYyVmlRWFZrYVc4Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCRGNtVmhkR1VnWVc1a0lHVjRjRzl6WlNCMGFHVWdiV0Z6ZEdWeUlFZGhhVzVPYjJSbElIZG9aVzRnZFhOcGJtY2dWMlZpSUVGMVpHbHZJQ2gxYzJWbWRXd2dabTl5SUhCc2RXZHBibk1nYjNJZ1lXUjJZVzVqWldRZ2RYTmhaMlVwTGx4dUlDQWdJR2xtSUNoSWIzZHNaWEl1ZFhOcGJtZFhaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdTRzkzYkdWeUxtMWhjM1JsY2tkaGFXNGdQU0FvZEhsd1pXOW1JRWh2ZDJ4bGNpNWpkSGd1WTNKbFlYUmxSMkZwYmlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUQ4Z1NHOTNiR1Z5TG1OMGVDNWpjbVZoZEdWSFlXbHVUbTlrWlNncElEb2dTRzkzYkdWeUxtTjBlQzVqY21WaGRHVkhZV2x1S0NrN1hHNGdJQ0FnSUNCSWIzZHNaWEl1YldGemRHVnlSMkZwYmk1bllXbHVMbk5sZEZaaGJIVmxRWFJVYVcxbEtFaHZkMnhsY2k1ZmJYVjBaV1FnUHlBd0lEb2dNU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQkliM2RzWlhJdWJXRnpkR1Z5UjJGcGJpNWpiMjV1WldOMEtFaHZkMnhsY2k1amRIZ3VaR1Z6ZEdsdVlYUnBiMjRwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZKbExYSjFiaUIwYUdVZ2MyVjBkWEFnYjI0Z1NHOTNiR1Z5TGx4dUlDQWdJRWh2ZDJ4bGNpNWZjMlYwZFhBb0tUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQlpHUWdjM1Z3Y0c5eWRDQm1iM0lnUVUxRUlDaEJjM2x1WTJoeWIyNXZkWE1nVFc5a2RXeGxJRVJsWm1sdWFYUnBiMjRwSUd4cFluSmhjbWxsY3lCemRXTm9JR0Z6SUhKbGNYVnBjbVV1YW5NdVhHNGdJR2xtSUNoMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwSUh0Y2JpQWdJQ0JrWldacGJtVW9XMTBzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ1NHOTNiR1Z5T2lCSWIzZHNaWElzWEc0Z0lDQWdJQ0FnSUVodmQydzZJRWh2ZDJ4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZMeUJCWkdRZ2MzVndjRzl5ZENCbWIzSWdRMjl0Ylc5dVNsTWdiR2xpY21GeWFXVnpJSE4xWTJnZ1lYTWdZbkp2ZDNObGNtbG1lUzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmxlSEJ2Y25SeklDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdWNGNHOXlkSE11U0c5M2JHVnlJRDBnU0c5M2JHVnlPMXh1SUNBZ0lHVjRjRzl5ZEhNdVNHOTNiQ0E5SUVodmQydzdYRzRnSUgxY2JseHVJQ0F2THlCRVpXWnBibVVnWjJ4dlltRnNiSGtnYVc0Z1kyRnpaU0JCVFVRZ2FYTWdibTkwSUdGMllXbHNZV0pzWlNCdmNpQjFiblZ6WldRdVhHNGdJR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lIZHBibVJ2ZHk1SWIzZHNaWEpIYkc5aVlXd2dQU0JJYjNkc1pYSkhiRzlpWVd3N1hHNGdJQ0FnZDJsdVpHOTNMa2h2ZDJ4bGNpQTlJRWh2ZDJ4bGNqdGNiaUFnSUNCM2FXNWtiM2N1U0c5M2JDQTlJRWh2ZDJ3N1hHNGdJQ0FnZDJsdVpHOTNMbE52ZFc1a0lEMGdVMjkxYm1RN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIc2dMeThnUVdSa0lIUnZJR2RzYjJKaGJDQnBiaUJPYjJSbExtcHpJQ2htYjNJZ2RHVnpkR2x1Wnl3Z1pYUmpLUzVjYmlBZ0lDQm5iRzlpWVd3dVNHOTNiR1Z5UjJ4dlltRnNJRDBnU0c5M2JHVnlSMnh2WW1Gc08xeHVJQ0FnSUdkc2IySmhiQzVJYjNkc1pYSWdQU0JJYjNkc1pYSTdYRzRnSUNBZ1oyeHZZbUZzTGtodmQyd2dQU0JJYjNkc08xeHVJQ0FnSUdkc2IySmhiQzVUYjNWdVpDQTlJRk52ZFc1a08xeHVJQ0I5WEc1OUtTZ3BPMXh1WEc1Y2JpOHFJVnh1SUNvZ0lGTndZWFJwWVd3Z1VHeDFaMmx1SUMwZ1FXUmtjeUJ6ZFhCd2IzSjBJR1p2Y2lCemRHVnlaVzhnWVc1a0lETkVJR0YxWkdsdklIZG9aWEpsSUZkbFlpQkJkV1JwYnlCcGN5QnpkWEJ3YjNKMFpXUXVYRzRnS2lBZ1hHNGdLaUFnYUc5M2JHVnlMbXB6SUhZeUxqQXVNVEpjYmlBcUlDQm9iM2RzWlhKcWN5NWpiMjFjYmlBcVhHNGdLaUFnS0dNcElESXdNVE10TWpBeE9Dd2dTbUZ0WlhNZ1UybHRjSE52YmlCdlppQkhiMnhrUm1seVpTQlRkSFZrYVc5elhHNGdLaUFnWjI5c1pHWnBjbVZ6ZEhWa2FXOXpMbU52YlZ4dUlDcGNiaUFxSUNCTlNWUWdUR2xqWlc1elpWeHVJQ292WEc1Y2JpaG1kVzVqZEdsdmJpZ3BJSHRjYmx4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdMeThnVTJWMGRYQWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNCSWIzZHNaWEpIYkc5aVlXd3VjSEp2ZEc5MGVYQmxMbDl3YjNNZ1BTQmJNQ3dnTUN3Z01GMDdYRzRnSUVodmQyeGxja2RzYjJKaGJDNXdjbTkwYjNSNWNHVXVYMjl5YVdWdWRHRjBhVzl1SUQwZ1d6QXNJREFzSUMweExDQXdMQ0F4TENBd1hUdGNibHh1SUNBdktpb2dSMnh2WW1Gc0lFMWxkR2h2WkhNZ0tpb3ZYRzRnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFaGxiSEJsY2lCdFpYUm9iMlFnZEc4Z2RYQmtZWFJsSUhSb1pTQnpkR1Z5Wlc4Z2NHRnVibWx1WnlCd2IzTnBkR2x2YmlCdlppQmhiR3dnWTNWeWNtVnVkQ0JJYjNkc2N5NWNiaUFnSUNvZ1JuVjBkWEpsSUVodmQyeHpJSGRwYkd3Z2JtOTBJSFZ6WlNCMGFHbHpJSFpoYkhWbElIVnViR1Z6Y3lCbGVIQnNhV05wZEd4NUlITmxkQzVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQndZVzRnUVNCMllXeDFaU0J2WmlBdE1TNHdJR2x6SUdGc2JDQjBhR1VnZDJGNUlHeGxablFnWVc1a0lERXVNQ0JwY3lCaGJHd2dkR2hsSUhkaGVTQnlhV2RvZEM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3U0c5M2JHVnlMMDUxYldKbGNuMGdJQ0FnSUZObGJHWWdiM0lnWTNWeWNtVnVkQ0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QjJZV3gxWlM1Y2JpQWdJQ292WEc0Z0lFaHZkMnhsY2tkc2IySmhiQzV3Y205MGIzUjVjR1V1YzNSbGNtVnZJRDBnWm5WdVkzUnBiMjRvY0dGdUtTQjdYRzRnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z1UzUnZjQ0J5YVdkb2RDQm9aWEpsSUdsbUlHNXZkQ0IxYzJsdVp5QlhaV0lnUVhWa2FXOHVYRzRnSUNBZ2FXWWdLQ0Z6Wld4bUxtTjBlQ0I4ZkNBaGMyVnNaaTVqZEhndWJHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJHd2dTRzkzYkhNZ1lXNWtJSFZ3WkdGMFpTQjBhR1ZwY2lCemRHVnlaVzhnY0dGdWJtbHVaeTVjYmlBZ0lDQm1iM0lnS0haaGNpQnBQWE5sYkdZdVgyaHZkMnh6TG14bGJtZDBhQzB4T3lCcFBqMHdPeUJwTFMwcElIdGNiaUFnSUNBZ0lITmxiR1l1WDJodmQyeHpXMmxkTG5OMFpYSmxieWh3WVc0cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNCd2IzTnBkR2x2YmlCdlppQjBhR1VnYkdsemRHVnVaWElnYVc0Z00wUWdZMkZ5ZEdWemFXRnVJSE53WVdObExpQlRiM1Z1WkhNZ2RYTnBibWRjYmlBZ0lDb2dNMFFnY0c5emFYUnBiMjRnZDJsc2JDQmlaU0J5Wld4aGRHbDJaU0IwYnlCMGFHVWdiR2x6ZEdWdVpYSW5jeUJ3YjNOcGRHbHZiaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjRJRlJvWlNCNExYQnZjMmwwYVc5dUlHOW1JSFJvWlNCc2FYTjBaVzVsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0I1SUZSb1pTQjVMWEJ2YzJsMGFXOXVJRzltSUhSb1pTQnNhWE4wWlc1bGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCNklGUm9aU0I2TFhCdmMybDBhVzl1SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkdWeUwwRnljbUY1ZlNBZ0lGTmxiR1lnYjNJZ1kzVnljbVZ1ZENCc2FYTjBaVzVsY2lCd2IzTnBkR2x2Ymk1Y2JpQWdJQ292WEc0Z0lFaHZkMnhsY2tkc2IySmhiQzV3Y205MGIzUjVjR1V1Y0c5eklEMGdablZ1WTNScGIyNG9lQ3dnZVN3Z2Vpa2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dklGTjBiM0FnY21sbmFIUWdhR1Z5WlNCcFppQnViM1FnZFhOcGJtY2dWMlZpSUVGMVpHbHZMbHh1SUNBZ0lHbG1JQ2doYzJWc1ppNWpkSGdnZkh3Z0lYTmxiR1l1WTNSNExteHBjM1JsYm1WeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJUWlhRZ2RHaGxJR1JsWm1GMWJIUnpJR1p2Y2lCdmNIUnBiMjVoYkNBbmVTY2dKaUFuZWljdVhHNGdJQ0FnZVNBOUlDaDBlWEJsYjJZZ2VTQWhQVDBnSjI1MWJXSmxjaWNwSUQ4Z2MyVnNaaTVmY0c5eld6RmRJRG9nZVR0Y2JpQWdJQ0I2SUQwZ0tIUjVjR1Z2WmlCNklDRTlQU0FuYm5WdFltVnlKeWtnUHlCelpXeG1MbDl3YjNOYk1sMGdPaUI2TzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCNElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnYzJWc1ppNWZjRzl6SUQwZ1czZ3NJSGtzSUhwZE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbkJ2YzJsMGFXOXVXQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWpkSGd1YkdsemRHVnVaWEl1Y0c5emFYUnBiMjVZTG5ObGRGUmhjbWRsZEVGMFZHbHRaU2h6Wld4bUxsOXdiM05iTUYwc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VzSURBdU1TazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbkJ2YzJsMGFXOXVXUzV6WlhSVVlYSm5aWFJCZEZScGJXVW9jMlZzWmk1ZmNHOXpXekZkTENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxMQ0F3TGpFcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTG1OMGVDNXNhWE4wWlc1bGNpNXdiM05wZEdsdmJsb3VjMlYwVkdGeVoyVjBRWFJVYVcxbEtITmxiR1l1WDNCdmMxc3lYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTd2dNQzR4S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVZM1I0TG14cGMzUmxibVZ5TG5ObGRGQnZjMmwwYVc5dUtITmxiR1l1WDNCdmMxc3dYU3dnYzJWc1ppNWZjRzl6V3pGZExDQnpaV3htTGw5d2IzTmJNbDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MyVnNaaTVmY0c5ek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNCa2FYSmxZM1JwYjI0Z2RHaGxJR3hwYzNSbGJtVnlJR2x6SUhCdmFXNTBhVzVuSUdsdUlIUm9aU0F6UkNCallYSjBaWE5wWVc0Z2MzQmhZMlV1WEc0Z0lDQXFJRUVnWm5KdmJuUWdZVzVrSUhWd0lIWmxZM1J2Y2lCdGRYTjBJR0psSUhCeWIzWnBaR1ZrTGlCVWFHVWdabkp2Ym5RZ2FYTWdkR2hsSUdScGNtVmpkR2x2YmlCMGFHVmNiaUFnSUNvZ1ptRmpaU0J2WmlCMGFHVWdiR2x6ZEdWdVpYSWdhWE1nY0c5cGJuUnBibWNzSUdGdVpDQjFjQ0JwY3lCMGFHVWdaR2x5WldOMGFXOXVJSFJvWlNCMGIzQWdiMllnZEdobFhHNGdJQ0FxSUd4cGMzUmxibVZ5SUdseklIQnZhVzUwYVc1bkxpQlVhSFZ6TENCMGFHVnpaU0IyWVd4MVpYTWdZWEpsSUdWNGNHVmpkR1ZrSUhSdklHSmxJR0YwSUhKcFoyaDBJR0Z1WjJ4bGMxeHVJQ0FnS2lCbWNtOXRJR1ZoWTJnZ2IzUm9aWEl1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDUxYldKbGNuMGdlQ0FnSUZSb1pTQjRMVzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjVJQ0FnVkdobElIa3RiM0pwWlc1MFlYUnBiMjRnYjJZZ2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIb2dJQ0JVYUdVZ2VpMXZjbWxsYm5SaGRHbHZiaUJ2WmlCMGFHVWdiR2x6ZEdWdVpYSXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VGVndJRlJvWlNCNExXOXlhV1Z1ZEdGMGFXOXVJRzltSUhSb1pTQjBiM0FnYjJZZ2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIbFZjQ0JVYUdVZ2VTMXZjbWxsYm5SaGRHbHZiaUJ2WmlCMGFHVWdkRzl3SUc5bUlIUm9aU0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjZWWEFnVkdobElIb3RiM0pwWlc1MFlYUnBiMjRnYjJZZ2RHaGxJSFJ2Y0NCdlppQjBhR1VnYkdsemRHVnVaWEl1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4bGNpOUJjbkpoZVgwZ0lDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0J2Y21sbGJuUmhkR2x2YmlCMlpXTjBiM0p6TGx4dUlDQWdLaTljYmlBZ1NHOTNiR1Z5UjJ4dlltRnNMbkJ5YjNSdmRIbHdaUzV2Y21sbGJuUmhkR2x2YmlBOUlHWjFibU4wYVc5dUtIZ3NJSGtzSUhvc0lIaFZjQ3dnZVZWd0xDQjZWWEFwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMeUJUZEc5d0lISnBaMmgwSUdobGNtVWdhV1lnYm05MElIVnphVzVuSUZkbFlpQkJkV1JwYnk1Y2JpQWdJQ0JwWmlBb0lYTmxiR1l1WTNSNElIeDhJQ0Z6Wld4bUxtTjBlQzVzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1UyVjBJSFJvWlNCa1pXWmhkV3gwY3lCbWIzSWdiM0IwYVc5dVlXd2dKM2tuSUNZZ0ozb25MbHh1SUNBZ0lIWmhjaUJ2Y2lBOUlITmxiR1l1WDI5eWFXVnVkR0YwYVc5dU8xeHVJQ0FnSUhrZ1BTQW9kSGx3Wlc5bUlIa2dJVDA5SUNkdWRXMWlaWEluS1NBL0lHOXlXekZkSURvZ2VUdGNiaUFnSUNCNklEMGdLSFI1Y0dWdlppQjZJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QnZjbHN5WFNBNklIbzdYRzRnSUNBZ2VGVndJRDBnS0hSNWNHVnZaaUI0VlhBZ0lUMDlJQ2R1ZFcxaVpYSW5LU0EvSUc5eVd6TmRJRG9nZUZWd08xeHVJQ0FnSUhsVmNDQTlJQ2gwZVhCbGIyWWdlVlZ3SUNFOVBTQW5iblZ0WW1WeUp5a2dQeUJ2Y2xzMFhTQTZJSGxWY0R0Y2JpQWdJQ0I2VlhBZ1BTQW9kSGx3Wlc5bUlIcFZjQ0FoUFQwZ0oyNTFiV0psY2ljcElEOGdiM0piTlYwZ09pQjZWWEE3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhnZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0J6Wld4bUxsOXZjbWxsYm5SaGRHbHZiaUE5SUZ0NExDQjVMQ0I2TENCNFZYQXNJSGxWY0N3Z2VsVndYVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpXeG1MbU4wZUM1c2FYTjBaVzVsY2k1bWIzSjNZWEprV0NBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVqZEhndWJHbHpkR1Z1WlhJdVptOXlkMkZ5WkZndWMyVjBWR0Z5WjJWMFFYUlVhVzFsS0hnc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VzSURBdU1TazdYRzRnSUNBZ0lDQWdJSE5sYkdZdVkzUjRMbXhwYzNSbGJtVnlMbVp2Y25kaGNtUlpMbk5sZEZSaGNtZGxkRUYwVkdsdFpTaDVMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbExDQXdMakVwTzF4dUlDQWdJQ0FnSUNCelpXeG1MbU4wZUM1c2FYTjBaVzVsY2k1bWIzSjNZWEprV2k1elpYUlVZWEpuWlhSQmRGUnBiV1VvZWl3Z1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaU3dnTUM0eEtUdGNiaUFnSUNBZ0lDQWdjMlZzWmk1amRIZ3ViR2x6ZEdWdVpYSXVkWEJZTG5ObGRGUmhjbWRsZEVGMFZHbHRaU2g0TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxMQ0F3TGpFcE8xeHVJQ0FnSUNBZ0lDQnpaV3htTG1OMGVDNXNhWE4wWlc1bGNpNTFjRmt1YzJWMFZHRnlaMlYwUVhSVWFXMWxLSGtzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXNJREF1TVNrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WTNSNExteHBjM1JsYm1WeUxuVndXaTV6WlhSVVlYSm5aWFJCZEZScGJXVW9laXdnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTd2dNQzR4S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVZM1I0TG14cGMzUmxibVZ5TG5ObGRFOXlhV1Z1ZEdGMGFXOXVLSGdzSUhrc0lIb3NJSGhWY0N3Z2VWVndMQ0I2VlhBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM0k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FJRWR5YjNWd0lFMWxkR2h2WkhNZ0tpb3ZYRzRnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaQ0J1WlhjZ2NISnZjR1Z5ZEdsbGN5QjBieUIwYUdVZ1kyOXlaU0JwYm1sMExseHVJQ0FnS2lCQWNHRnlZVzBnSUh0R2RXNWpkR2x2Ym4wZ1gzTjFjR1Z5SUVOdmNtVWdhVzVwZENCdFpYUm9iMlF1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMGh2ZDJ4OVhHNGdJQ0FxTDF4dUlDQkliM2RzTG5CeWIzUnZkSGx3WlM1cGJtbDBJRDBnS0daMWJtTjBhVzl1S0Y5emRYQmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHZLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQzh2SUZObGRIVndJSFZ6WlhJdFpHVm1hVzVsWkNCa1pXWmhkV3gwSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNCelpXeG1MbDl2Y21sbGJuUmhkR2x2YmlBOUlHOHViM0pwWlc1MFlYUnBiMjRnZkh3Z1d6RXNJREFzSURCZE8xeHVJQ0FnSUNBZ2MyVnNaaTVmYzNSbGNtVnZJRDBnYnk1emRHVnlaVzhnZkh3Z2JuVnNiRHRjYmlBZ0lDQWdJSE5sYkdZdVgzQnZjeUE5SUc4dWNHOXpJSHg4SUc1MWJHdzdYRzRnSUNBZ0lDQnpaV3htTGw5d1lXNXVaWEpCZEhSeUlEMGdlMXh1SUNBZ0lDQWdJQ0JqYjI1bFNXNXVaWEpCYm1kc1pUb2dkSGx3Wlc5bUlHOHVZMjl1WlVsdWJtVnlRVzVuYkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NWpiMjVsU1c1dVpYSkJibWRzWlNBNklETTJNQ3hjYmlBZ0lDQWdJQ0FnWTI5dVpVOTFkR1Z5UVc1bmJHVTZJSFI1Y0dWdlppQnZMbU52Ym1WUGRYUmxja0Z1WjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVZMjl1WlU5MWRHVnlRVzVuYkdVZ09pQXpOakFzWEc0Z0lDQWdJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNDZJSFI1Y0dWdlppQnZMbU52Ym1WUGRYUmxja2RoYVc0Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NWpiMjVsVDNWMFpYSkhZV2x1SURvZ01DeGNiaUFnSUNBZ0lDQWdaR2x6ZEdGdVkyVk5iMlJsYkRvZ2RIbHdaVzltSUc4dVpHbHpkR0Z1WTJWTmIyUmxiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2TG1ScGMzUmhibU5sVFc5a1pXd2dPaUFuYVc1MlpYSnpaU2NzWEc0Z0lDQWdJQ0FnSUcxaGVFUnBjM1JoYm1ObE9pQjBlWEJsYjJZZ2J5NXRZWGhFYVhOMFlXNWpaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ2TG0xaGVFUnBjM1JoYm1ObElEb2dNVEF3TURBc1hHNGdJQ0FnSUNBZ0lIQmhibTVwYm1kTmIyUmxiRG9nZEhsd1pXOW1JRzh1Y0dGdWJtbHVaMDF2WkdWc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVjR0Z1Ym1sdVowMXZaR1ZzSURvZ0owaFNWRVluTEZ4dUlDQWdJQ0FnSUNCeVpXWkVhWE4wWVc1alpUb2dkSGx3Wlc5bUlHOHVjbVZtUkdsemRHRnVZMlVnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYnk1eVpXWkVhWE4wWVc1alpTQTZJREVzWEc0Z0lDQWdJQ0FnSUhKdmJHeHZabVpHWVdOMGIzSTZJSFI1Y0dWdlppQnZMbkp2Ykd4dlptWkdZV04wYjNJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2J5NXliMnhzYjJabVJtRmpkRzl5SURvZ01WeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdMeThnVTJWMGRYQWdaWFpsYm5RZ2JHbHpkR1Z1WlhKekxseHVJQ0FnSUNBZ2MyVnNaaTVmYjI1emRHVnlaVzhnUFNCdkxtOXVjM1JsY21WdklEOGdXM3RtYmpvZ2J5NXZibk4wWlhKbGIzMWRJRG9nVzEwN1hHNGdJQ0FnSUNCelpXeG1MbDl2Ym5CdmN5QTlJRzh1YjI1d2IzTWdQeUJiZTJadU9pQnZMbTl1Y0c5emZWMGdPaUJiWFR0Y2JpQWdJQ0FnSUhObGJHWXVYMjl1YjNKcFpXNTBZWFJwYjI0Z1BTQnZMbTl1YjNKcFpXNTBZWFJwYjI0Z1B5QmJlMlp1T2lCdkxtOXViM0pwWlc1MFlYUnBiMjU5WFNBNklGdGRPMXh1WEc0Z0lDQWdJQ0F2THlCRGIyMXdiR1YwWlNCcGJtbDBhV3hwZW1GMGFXOXVJSGRwZEdnZ2FHOTNiR1Z5TG1weklHTnZjbVVuY3lCcGJtbDBJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdjbVYwZFhKdUlGOXpkWEJsY2k1allXeHNLSFJvYVhNc0lHOHBPMXh1SUNBZ0lIMDdYRzRnSUgwcEtFaHZkMnd1Y0hKdmRHOTBlWEJsTG1sdWFYUXBPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFF2YzJWMElIUm9aU0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QnZaaUIwYUdVZ1lYVmthVzhnYzI5MWNtTmxJR1p2Y2lCMGFHbHpJSE52ZFc1a0lHOXlJR0ZzYkNCcGJpQjBhR1VnWjNKdmRYQXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2NHRnVJQ0JCSUhaaGJIVmxJRzltSUMweExqQWdhWE1nWVd4c0lIUm9aU0IzWVhrZ2JHVm1kQ0JoYm1RZ01TNHdJR2x6SUdGc2JDQjBhR1VnZDJGNUlISnBaMmgwTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJR2xrSUNodmNIUnBiMjVoYkNrZ1ZHaGxJSE52ZFc1a0lFbEVMaUJKWmlCdWIyNWxJR2x6SUhCaGMzTmxaQ3dnWVd4c0lHbHVJR2R5YjNWd0lIZHBiR3dnWW1VZ2RYQmtZWFJsWkM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3U0c5M2JDOU9kVzFpWlhKOUlDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0J6ZEdWeVpXOGdjR0Z1Ym1sdVp5QjJZV3gxWlM1Y2JpQWdJQ292WEc0Z0lFaHZkMnd1Y0hKdmRHOTBlWEJsTG5OMFpYSmxieUE5SUdaMWJtTjBhVzl1S0hCaGJpd2dhV1FwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMeUJUZEc5d0lISnBaMmgwSUdobGNtVWdhV1lnYm05MElIVnphVzVuSUZkbFlpQkJkV1JwYnk1Y2JpQWdJQ0JwWmlBb0lYTmxiR1l1WDNkbFlrRjFaR2x2S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1pqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkpaaUIwYUdVZ2MyOTFibVFnYUdGemJpZDBJR3h2WVdSbFpDd2dZV1JrSUdsMElIUnZJSFJvWlNCc2IyRmtJSEYxWlhWbElIUnZJR05vWVc1blpTQnpkR1Z5Wlc4Z2NHRnVJSGRvWlc0Z1kyRndZV0pzWlM1Y2JpQWdJQ0JwWmlBb2MyVnNaaTVmYzNSaGRHVWdJVDA5SUNkc2IyRmtaV1FuS1NCN1hHNGdJQ0FnSUNCelpXeG1MbDl4ZFdWMVpTNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUNkemRHVnlaVzhuTEZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWMzUmxjbVZ2S0hCaGJpd2dhV1FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJobFkyc2dabTl5SUZCaGJtNWxjbE4wWlhKbGIwNXZaR1VnYzNWd2NHOXlkQ0JoYm1RZ1ptRnNiR0poWTJzZ2RHOGdVR0Z1Ym1WeVRtOWtaU0JwWmlCcGRDQmtiMlZ6YmlkMElHVjRhWE4wTGx4dUlDQWdJSFpoY2lCd1lXNXVaWEpVZVhCbElEMGdLSFI1Y0dWdlppQkliM2RzWlhJdVkzUjRMbU55WldGMFpWTjBaWEpsYjFCaGJtNWxjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRDhnSjNOd1lYUnBZV3duSURvZ0ozTjBaWEpsYnljN1hHNWNiaUFnSUNBdkx5QlRaWFIxY0NCMGFHVWdaM0p2ZFhBbmN5QnpkR1Z5Wlc4Z2NHRnVibWx1WnlCcFppQnVieUJKUkNCcGN5QndZWE56WldRdVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcFpDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDOHZJRkpsZEhWeWJpQjBhR1VnWjNKdmRYQW5jeUJ6ZEdWeVpXOGdjR0Z1Ym1sdVp5QnBaaUJ1YnlCd1lYSmhiV1YwWlhKeklHRnlaU0J3WVhOelpXUXVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSEJoYmlBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZjM1JsY21WdklEMGdjR0Z1TzF4dUlDQWdJQ0FnSUNCelpXeG1MbDl3YjNNZ1BTQmJjR0Z1TENBd0xDQXdYVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTGw5emRHVnlaVzg3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUTJoaGJtZGxJSFJvWlNCemRISmxieUJ3WVc1dWFXNW5JRzltSUc5dVpTQnZjaUJoYkd3Z2MyOTFibVJ6SUdsdUlHZHliM1Z3TGx4dUlDQWdJSFpoY2lCcFpITWdQU0J6Wld4bUxsOW5aWFJUYjNWdVpFbGtjeWhwWkNrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVQwd095QnBQR2xrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdMeThnUjJWMElIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lIWmhjaUJ6YjNWdVpDQTlJSE5sYkdZdVgzTnZkVzVrUW5sSlpDaHBaSE5iYVYwcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYzI5MWJtUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lXNGdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMjkxYm1RdVgzTjBaWEpsYnlBOUlIQmhianRjYmlBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0c5eklEMGdXM0JoYml3Z01Dd2dNRjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5MWJtUXVYMjV2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JSGRsSUdGeVpTQm1ZV3hzYVc1bklHSmhZMnNzSUcxaGEyVWdjM1Z5WlNCMGFHVWdjR0Z1Ym1sdVowMXZaR1ZzSUdseklHVnhkV0ZzY0c5M1pYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlRWFIwY2k1d1lXNXVhVzVuVFc5a1pXd2dQU0FuWlhGMVlXeHdiM2RsY2ljN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlIUm9aWEpsSUdseklHRWdjR0Z1Ym1WeUlITmxkSFZ3SUdGdVpDQmpjbVZoZEdVZ1lTQnVaWGNnYjI1bElHbG1JRzV2ZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyOTFibVF1WDNCaGJtNWxjaUI4ZkNBaGMyOTFibVF1WDNCaGJtNWxjaTV3WVc0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkWEJRWVc1dVpYSW9jMjkxYm1Rc0lIQmhibTVsY2xSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0Z1Ym1WeVZIbHdaU0E5UFQwZ0ozTndZWFJwWVd3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMjkxYm1RdVgzQmhibTVsY2k1d2IzTnBkR2x2YmxnZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9jR0Z1TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdTNXpaWFJXWVd4MVpVRjBWR2x0WlNnd0xDQkliM2RzWlhJdVkzUjRMbU4xY25KbGJuUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbkJ2YzJsMGFXOXVXaTV6WlhSV1lXeDFaVUYwVkdsdFpTZ3dMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbk5sZEZCdmMybDBhVzl1S0hCaGJpd2dNQ3dnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y0dGdUxuTmxkRlpoYkhWbFFYUlVhVzFsS0hCaGJpd2dTRzkzYkdWeUxtTjBlQzVqZFhKeVpXNTBWR2x0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmMzUmxjbVZ2Snl3Z2MyOTFibVF1WDJsa0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RdVgzTjBaWEpsYnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRdmMyVjBJSFJvWlNBelJDQnpjR0YwYVdGc0lIQnZjMmwwYVc5dUlHOW1JSFJvWlNCaGRXUnBieUJ6YjNWeVkyVWdabTl5SUhSb2FYTWdjMjkxYm1RZ2IzSWdaM0p2ZFhBZ2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUdkc2IySmhiQ0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdUblZ0WW1WeWZTQjRJQ0JVYUdVZ2VDMXdiM05wZEdsdmJpQnZaaUIwYUdVZ1lYVmthVzhnYzI5MWNtTmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE9kVzFpWlhKOUlIa2dJRlJvWlNCNUxYQnZjMmwwYVc5dUlHOW1JSFJvWlNCaGRXUnBieUJ6YjNWeVkyVXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VpQWdWR2hsSUhvdGNHOXphWFJwYjI0Z2IyWWdkR2hsSUdGMVpHbHZJSE52ZFhKalpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCcFpDQW9iM0IwYVc5dVlXd3BJRlJvWlNCemIzVnVaQ0JKUkM0Z1NXWWdibTl1WlNCcGN5QndZWE56WldRc0lHRnNiQ0JwYmlCbmNtOTFjQ0IzYVd4c0lHSmxJSFZ3WkdGMFpXUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UwaHZkMnd2UVhKeVlYbDlJQ0FnSUZKbGRIVnlibk1nYzJWc1ppQnZjaUIwYUdVZ1kzVnljbVZ1ZENBelJDQnpjR0YwYVdGc0lIQnZjMmwwYVc5dU9pQmJlQ3dnZVN3Z2VsMHVYRzRnSUNBcUwxeHVJQ0JJYjNkc0xuQnliM1J2ZEhsd1pTNXdiM01nUFNCbWRXNWpkR2x2YmloNExDQjVMQ0I2TENCcFpDa2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dklGTjBiM0FnY21sbmFIUWdhR1Z5WlNCcFppQnViM1FnZFhOcGJtY2dWMlZpSUVGMVpHbHZMbHh1SUNBZ0lHbG1JQ2doYzJWc1ppNWZkMlZpUVhWa2FXOHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVsbUlIUm9aU0J6YjNWdVpDQm9ZWE51SjNRZ2JHOWhaR1ZrTENCaFpHUWdhWFFnZEc4Z2RHaGxJR3h2WVdRZ2NYVmxkV1VnZEc4Z1kyaGhibWRsSUhCdmMybDBhVzl1SUhkb1pXNGdZMkZ3WVdKc1pTNWNiaUFnSUNCcFppQW9jMlZzWmk1ZmMzUmhkR1VnSVQwOUlDZHNiMkZrWldRbktTQjdYRzRnSUNBZ0lDQnpaV3htTGw5eGRXVjFaUzV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdaWFpsYm5RNklDZHdiM01uTEZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWNHOXpLSGdzSUhrc0lIb3NJR2xrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkdWbVlYVnNkSE1nWm05eUlHOXdkR2x2Ym1Gc0lDZDVKeUFtSUNkNkp5NWNiaUFnSUNCNUlEMGdLSFI1Y0dWdlppQjVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QXdJRG9nZVR0Y2JpQWdJQ0I2SUQwZ0tIUjVjR1Z2WmlCNklDRTlQU0FuYm5WdFltVnlKeWtnUHlBdE1DNDFJRG9nZWp0Y2JseHVJQ0FnSUM4dklGTmxkSFZ3SUhSb1pTQm5jbTkxY0NkeklITndZWFJwWVd3Z2NHOXphWFJwYjI0Z2FXWWdibThnU1VRZ2FYTWdjR0Z6YzJWa0xseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQXZMeUJTWlhSMWNtNGdkR2hsSUdkeWIzVndKM01nYzNCaGRHbGhiQ0J3YjNOcGRHbHZiaUJwWmlCdWJ5QndZWEpoYldWMFpYSnpJR0Z5WlNCd1lYTnpaV1F1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhnZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM0J2Y3lBOUlGdDRMQ0I1TENCNlhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1MbDl3YjNNN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1EyaGhibWRsSUhSb1pTQnpjR0YwYVdGc0lIQnZjMmwwYVc5dUlHOW1JRzl1WlNCdmNpQmhiR3dnYzI5MWJtUnpJR2x1SUdkeWIzVndMbHh1SUNBZ0lIWmhjaUJwWkhNZ1BTQnpaV3htTGw5blpYUlRiM1Z1WkVsa2N5aHBaQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdhVDB3T3lCcFBHbGtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0x5OGdSMlYwSUhSb1pTQnpiM1Z1WkM1Y2JpQWdJQ0FnSUhaaGNpQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNocFpITmJhVjBwTzF4dVhHNGdJQ0FnSUNCcFppQW9jMjkxYm1RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUI0SUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YjNNZ1BTQmJlQ3dnZVN3Z2VsMDdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxYm1RdVgyNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOb1pXTnJJR2xtSUhSb1pYSmxJR2x6SUdFZ2NHRnVibVZ5SUhObGRIVndJR0Z1WkNCamNtVmhkR1VnWVNCdVpYY2diMjVsSUdsbUlHNXZkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzI5MWJtUXVYM0JoYm01bGNpQjhmQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQmhiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMWNGQmhibTVsY2loemIzVnVaQ3dnSjNOd1lYUnBZV3duS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9lQ3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y0c5emFYUnBiMjVaTG5ObGRGWmhiSFZsUVhSVWFXMWxLSGtzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CdmMybDBhVzl1V2k1elpYUldZV3gxWlVGMFZHbHRaU2g2TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjMlYwVDNKcFpXNTBZWFJwYjI0b2VDd2dlU3dnZWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaVzFwZENnbmNHOXpKeXdnYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDNCdmN6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCSFpYUXZjMlYwSUhSb1pTQmthWEpsWTNScGIyNGdkR2hsSUdGMVpHbHZJSE52ZFhKalpTQnBjeUJ3YjJsdWRHbHVaeUJwYmlCMGFHVWdNMFFnWTJGeWRHVnphV0Z1SUdOdmIzSmthVzVoZEdWY2JpQWdJQ29nYzNCaFkyVXVJRVJsY0dWdVpHbHVaeUJ2YmlCb2IzY2daR2x5WldOMGFXOXVJSFJvWlNCemIzVnVaQ0JwY3l3Z1ltRnpaV1FnYjI0Z2RHaGxJR0JqYjI1bFlDQmhkSFJ5YVdKMWRHVnpMRnh1SUNBZ0tpQmhJSE52ZFc1a0lIQnZhVzUwYVc1bklHRjNZWGtnWm5KdmJTQjBhR1VnYkdsemRHVnVaWElnWTJGdUlHSmxJSEYxYVdWMElHOXlJSE5wYkdWdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RuVnRZbVZ5ZlNCNElDQlVhR1VnZUMxdmNtbGxiblJoZEdsdmJpQnZaaUIwYUdVZ2MyOTFjbU5sTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHRPZFcxaVpYSjlJSGtnSUZSb1pTQjVMVzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0J6YjNWeVkyVXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwNTFiV0psY24wZ2VpQWdWR2hsSUhvdGIzSnBaVzUwWVhScGIyNGdiMllnZEdobElITnZkWEpqWlM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VG5WdFltVnlmU0JwWkNBb2IzQjBhVzl1WVd3cElGUm9aU0J6YjNWdVpDQkpSQzRnU1dZZ2JtOXVaU0JwY3lCd1lYTnpaV1FzSUdGc2JDQnBiaUJuY205MWNDQjNhV3hzSUdKbElIVndaR0YwWldRdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBodmQyd3ZRWEp5WVhsOUlDQWdJRkpsZEhWeWJuTWdjMlZzWmlCdmNpQjBhR1VnWTNWeWNtVnVkQ0F6UkNCemNHRjBhV0ZzSUc5eWFXVnVkR0YwYVc5dU9pQmJlQ3dnZVN3Z2VsMHVYRzRnSUNBcUwxeHVJQ0JJYjNkc0xuQnliM1J2ZEhsd1pTNXZjbWxsYm5SaGRHbHZiaUE5SUdaMWJtTjBhVzl1S0hnc0lIa3NJSG9zSUdsa0tTQjdYRzRnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z1UzUnZjQ0J5YVdkb2RDQm9aWEpsSUdsbUlHNXZkQ0IxYzJsdVp5QlhaV0lnUVhWa2FXOHVYRzRnSUNBZ2FXWWdLQ0Z6Wld4bUxsOTNaV0pCZFdScGJ5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITmxiR1k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnU1dZZ2RHaGxJSE52ZFc1a0lHaGhjMjRuZENCc2IyRmtaV1FzSUdGa1pDQnBkQ0IwYnlCMGFHVWdiRzloWkNCeGRXVjFaU0IwYnlCamFHRnVaMlVnYjNKcFpXNTBZWFJwYjI0Z2QyaGxiaUJqWVhCaFlteGxMbHh1SUNBZ0lHbG1JQ2h6Wld4bUxsOXpkR0YwWlNBaFBUMGdKMnh2WVdSbFpDY3BJSHRjYmlBZ0lDQWdJSE5sYkdZdVgzRjFaWFZsTG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0JsZG1WdWREb2dKMjl5YVdWdWRHRjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxtOXlhV1Z1ZEdGMGFXOXVLSGdzSUhrc0lIb3NJR2xrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZObGRDQjBhR1VnWkdWbVlYVnNkSE1nWm05eUlHOXdkR2x2Ym1Gc0lDZDVKeUFtSUNkNkp5NWNiaUFnSUNCNUlEMGdLSFI1Y0dWdlppQjVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ1B5QnpaV3htTGw5dmNtbGxiblJoZEdsdmJsc3hYU0E2SUhrN1hHNGdJQ0FnZWlBOUlDaDBlWEJsYjJZZ2VpQWhQVDBnSjI1MWJXSmxjaWNwSUQ4Z2MyVnNaaTVmYjNKcFpXNTBZWFJwYjI1Yk1sMGdPaUI2TzF4dVhHNGdJQ0FnTHk4Z1UyVjBkWEFnZEdobElHZHliM1Z3SjNNZ2MzQmhkR2xoYkNCdmNtbGxiblJoZEdsdmJpQnBaaUJ1YnlCSlJDQnBjeUJ3WVhOelpXUXVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnBaQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQzh2SUZKbGRIVnliaUIwYUdVZ1ozSnZkWEFuY3lCemNHRjBhV0ZzSUc5eWFXVnVkR0YwYVc5dUlHbG1JRzV2SUhCaGNtRnRaWFJsY25NZ1lYSmxJSEJoYzNObFpDNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdlQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNGdQU0JiZUN3Z2VTd2dlbDA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRMmhoYm1kbElIUm9aU0J6Y0dGMGFXRnNJRzl5YVdWdWRHRjBhVzl1SUc5bUlHOXVaU0J2Y2lCaGJHd2djMjkxYm1SeklHbHVJR2R5YjNWd0xseHVJQ0FnSUhaaGNpQnBaSE1nUFNCelpXeG1MbDluWlhSVGIzVnVaRWxrY3locFpDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FUMHdPeUJwUEdsa2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnTHk4Z1IyVjBJSFJvWlNCemIzVnVaQzVjYmlBZ0lDQWdJSFpoY2lCemIzVnVaQ0E5SUhObGJHWXVYM052ZFc1a1FubEpaQ2hwWkhOYmFWMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MyOTFibVFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjRJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE52ZFc1a0xsOXZjbWxsYm5SaGRHbHZiaUE5SUZ0NExDQjVMQ0I2WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnVaQzVmYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2FXWWdkR2hsY21VZ2FYTWdZU0J3WVc1dVpYSWdjMlYwZFhBZ1lXNWtJR055WldGMFpTQmhJRzVsZHlCdmJtVWdhV1lnYm05MExseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpiM1Z1WkM1ZmNHRnVibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjNaU0JvWVhabElHRWdjRzl6YVhScGIyNGdkRzhnYzJWMGRYQWdkR2hsSUc1dlpHVWdkMmwwYUM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpiM1Z1WkM1ZmNHOXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM0J2Y3lBOUlITmxiR1l1WDNCdmN5QjhmQ0JiTUN3Z01Dd2dMVEF1TlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjFjRkJoYm01bGNpaHpiM1Z1WkN3Z0ozTndZWFJwWVd3bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWJtUXVYM0JoYm01bGNpNXZjbWxsYm5SaGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9lQ3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemIzVnVaQzVmY0dGdWJtVnlMbTl5YVdWdWRHRjBhVzl1V1M1elpYUldZV3gxWlVGMFZHbHRaU2g1TENCSWIzZHNaWEl1WTNSNExtTjFjbkpsYm5SVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1YjNKcFpXNTBZWFJwYjI1YUxuTmxkRlpoYkhWbFFYUlVhVzFsS0hvc0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhObGJHWXVYMlZ0YVhRb0oyOXlhV1Z1ZEdGMGFXOXVKeXdnYzI5MWJtUXVYMmxrS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyOTFibVF1WDI5eWFXVnVkR0YwYVc5dU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDOXpaWFFnZEdobElIQmhibTVsY2lCdWIyUmxKM01nWVhSMGNtbGlkWFJsY3lCbWIzSWdZU0J6YjNWdVpDQnZjaUJuY205MWNDQnZaaUJ6YjNWdVpITXVYRzRnSUNBcUlGUm9hWE1nYldWMGFHOWtJR05oYmlCdmNIUnBiMjVoYkd3Z2RHRnJaU0F3TENBeElHOXlJRElnWVhKbmRXMWxiblJ6TGx4dUlDQWdLaUFnSUhCaGJtNWxja0YwZEhJb0tTQXRQaUJTWlhSMWNtNXpJSFJvWlNCbmNtOTFjQ2R6SUhaaGJIVmxjeTVjYmlBZ0lDb2dJQ0J3WVc1dVpYSkJkSFJ5S0dsa0tTQXRQaUJTWlhSMWNtNXpJSFJvWlNCemIzVnVaQ0JwWkNkeklIWmhiSFZsY3k1Y2JpQWdJQ29nSUNCd1lXNXVaWEpCZEhSeUtHOHBJQzArSUZObGRDZHpJSFJvWlNCMllXeDFaWE1nYjJZZ1lXeHNJSE52ZFc1a2N5QnBiaUIwYUdseklFaHZkMndnWjNKdmRYQXVYRzRnSUNBcUlDQWdjR0Z1Ym1WeVFYUjBjaWh2TENCcFpDa2dMVDRnVTJWMEozTWdkR2hsSUhaaGJIVmxjeUJ2WmlCd1lYTnpaV1FnYzI5MWJtUWdhV1F1WEc0Z0lDQXFYRzRnSUNBcUlDQWdRWFIwY21saWRYUmxjenBjYmlBZ0lDb2dJQ0FnSUdOdmJtVkpibTVsY2tGdVoyeGxJQzBnS0RNMk1DQmllU0JrWldaaGRXeDBLU0JCSUhCaGNtRnRaWFJsY2lCbWIzSWdaR2x5WldOMGFXOXVZV3dnWVhWa2FXOGdjMjkxY21ObGN5d2dkR2hwY3lCcGN5QmhiaUJoYm1kc1pTd2dhVzRnWkdWbmNtVmxjeXhjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1emFXUmxJRzltSUhkb2FXTm9JSFJvWlhKbElIZHBiR3dnWW1VZ2JtOGdkbTlzZFcxbElISmxaSFZqZEdsdmJpNWNiaUFnSUNvZ0lDQWdJR052Ym1WUGRYUmxja0Z1WjJ4bElDMGdLRE0yTUNCaWVTQmtaV1poZFd4MEtTQkJJSEJoY21GdFpYUmxjaUJtYjNJZ1pHbHlaV04wYVc5dVlXd2dZWFZrYVc4Z2MyOTFjbU5sY3l3Z2RHaHBjeUJwY3lCaGJpQmhibWRzWlN3Z2FXNGdaR1ZuY21WbGN5eGNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwYzJsa1pTQnZaaUIzYUdsamFDQjBhR1VnZG05c2RXMWxJSGRwYkd3Z1ltVWdjbVZrZFdObFpDQjBieUJoSUdOdmJuTjBZVzUwSUhaaGJIVmxJRzltSUdCamIyNWxUM1YwWlhKSFlXbHVZQzVjYmlBZ0lDb2dJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNGdMU0FvTUNCaWVTQmtaV1poZFd4MEtTQkJJSEJoY21GdFpYUmxjaUJtYjNJZ1pHbHlaV04wYVc5dVlXd2dZWFZrYVc4Z2MyOTFjbU5sY3l3Z2RHaHBjeUJwY3lCMGFHVWdaMkZwYmlCdmRYUnphV1JsSUc5bUlIUm9aVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JqYjI1bFQzVjBaWEpCYm1kc1pXQXVJRWwwSUdseklHRWdiR2x1WldGeUlIWmhiSFZsSUdsdUlIUm9aU0J5WVc1blpTQmdXekFzSURGZFlDNWNiaUFnSUNvZ0lDQWdJR1JwYzNSaGJtTmxUVzlrWld3Z0xTQW9KMmx1ZG1WeWMyVW5JR0o1SUdSbFptRjFiSFFwSUVSbGRHVnliV2x1WlhNZ1lXeG5iM0pwZEdodElIVnpaV1FnZEc4Z2NtVmtkV05sSUhadmJIVnRaU0JoY3lCaGRXUnBieUJ0YjNabGN5QmhkMkY1SUdaeWIyMWNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNpNGdRMkZ1SUdKbElHQnNhVzVsWVhKZ0xDQmdhVzUyWlhKelpXQWdiM0lnWUdWNGNHOXVaVzUwYVdGc0xseHVJQ0FnS2lBZ0lDQWdiV0Y0UkdsemRHRnVZMlVnTFNBb01UQXdNREFnWW5rZ1pHVm1ZWFZzZENrZ1ZHaGxJRzFoZUdsdGRXMGdaR2x6ZEdGdVkyVWdZbVYwZDJWbGJpQnpiM1Z5WTJVZ1lXNWtJR3hwYzNSbGJtVnlMQ0JoWm5SbGNpQjNhR2xqYUNCMGFHVWdkbTlzZFcxbFhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJHd2dibTkwSUdKbElISmxaSFZqWldRZ1lXNTVJR1oxY25Sb1pYSXVYRzRnSUNBcUlDQWdJQ0J5WldaRWFYTjBZVzVqWlNBdElDZ3hJR0o1SUdSbFptRjFiSFFwSUVFZ2NtVm1aWEpsYm1ObElHUnBjM1JoYm1ObElHWnZjaUJ5WldSMVkybHVaeUIyYjJ4MWJXVWdZWE1nYzI5MWNtTmxJRzF2ZG1WeklHWjFjblJvWlhJZ1puSnZiU0IwYUdVZ2JHbHpkR1Z1WlhJdVhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSb2FYTWdhWE1nYzJsdGNHeDVJR0VnZG1GeWFXRmliR1VnYjJZZ2RHaGxJR1JwYzNSaGJtTmxJRzF2WkdWc0lHRnVaQ0JvWVhNZ1lTQmthV1ptWlhKbGJuUWdaV1ptWldOMElHUmxjR1Z1WkdsdVp5QnZiaUIzYUdsamFDQnRiMlJsYkZ4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwY3lCMWMyVmtJR0Z1WkNCMGFHVWdjMk5oYkdVZ2IyWWdlVzkxY2lCamIyOXlaR2x1WVhSbGN5NGdSMlZ1WlhKaGJHeDVMQ0IyYjJ4MWJXVWdkMmxzYkNCaVpTQmxjWFZoYkNCMGJ5QXhJR0YwSUhSb2FYTWdaR2x6ZEdGdVkyVXVYRzRnSUNBcUlDQWdJQ0J5YjJ4c2IyWm1SbUZqZEc5eUlDMGdLREVnWW5rZ1pHVm1ZWFZzZENrZ1NHOTNJSEYxYVdOcmJIa2dkR2hsSUhadmJIVnRaU0J5WldSMVkyVnpJR0Z6SUhOdmRYSmpaU0J0YjNabGN5Qm1jbTl0SUd4cGMzUmxibVZ5TGlCVWFHbHpJR2x6SUhOcGJYQnNlU0JoWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRmliR1VnYjJZZ2RHaGxJR1JwYzNSaGJtTmxJRzF2WkdWc0lHRnVaQ0JqWVc0Z1ltVWdhVzRnZEdobElISmhibWRsSUc5bUlHQmJNQ3dnTVYxZ0lIZHBkR2dnWUd4cGJtVmhjbUFnWVc1a0lHQmJNQ3dnNG9pZVhXQmNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhWFJvSUdCcGJuWmxjbk5sWUNCaGJtUWdZR1Y0Y0c5dVpXNTBhV0ZzWUM1Y2JpQWdJQ29nSUNBZ0lIQmhibTVwYm1kTmIyUmxiQ0F0SUNnblNGSlVSaWNnWW5rZ1pHVm1ZWFZzZENrZ1JHVjBaWEp0YVc1bGN5QjNhR2xqYUNCemNHRjBhV0ZzYVhwaGRHbHZiaUJoYkdkdmNtbDBhRzBnYVhNZ2RYTmxaQ0IwYnlCd2IzTnBkR2x2YmlCaGRXUnBieTVjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEWVc0Z1ltVWdZRWhTVkVaZ0lHOXlJR0JsY1hWaGJIQnZkMlZ5WUM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdTRzkzYkM5UFltcGxZM1I5SUZKbGRIVnlibk1nYzJWc1ppQnZjaUJqZFhKeVpXNTBJSEJoYm01bGNpQmhkSFJ5YVdKMWRHVnpMbHh1SUNBZ0tpOWNiaUFnU0c5M2JDNXdjbTkwYjNSNWNHVXVjR0Z1Ym1WeVFYUjBjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQjJZWElnYnl3Z2FXUXNJSE52ZFc1a08xeHVYRzRnSUNBZ0x5OGdVM1J2Y0NCeWFXZG9kQ0JvWlhKbElHbG1JRzV2ZENCMWMybHVaeUJYWldJZ1FYVmthVzh1WEc0Z0lDQWdhV1lnS0NGelpXeG1MbDkzWldKQmRXUnBieWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0IyWVd4MVpYTWdZbUZ6WldRZ2IyNGdZWEpuZFcxbGJuUnpMbHh1SUNBZ0lHbG1JQ2hoY21kekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnTHk4Z1VtVjBkWEp1SUhSb1pTQm5jbTkxY0NkeklIQmhibTVsY2lCaGRIUnlhV0oxZEdVZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdZdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhjbWR6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJoY21keld6QmRJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQnZJRDBnWVhKbmMxc3dYVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnZEdobElHZHliM1VuY3lCd1lXNXVaWElnWVhSMGNtbGlkWFJsSUhaaGJIVmxjeTVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCcFpDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXOHVjR0Z1Ym1WeVFYUjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdieTV3WVc1dVpYSkJkSFJ5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNWxTVzV1WlhKQmJtZHNaVG9nYnk1amIyNWxTVzV1WlhKQmJtZHNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1WlU5MWRHVnlRVzVuYkdVNklHOHVZMjl1WlU5MWRHVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtVlBkWFJsY2tkaGFXNDZJRzh1WTI5dVpVOTFkR1Z5UjJGcGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJWTmIyUmxiRG9nYnk1a2FYTjBZVzVqWlUxdlpHVnNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhFYVhOMFlXNWpaVG9nYnk1dFlYaEVhWE4wWVc1alpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1SR2x6ZEdGdVkyVTZJRzh1Y21WbVJHbHpkR0Z1WTJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmJHeHZabVpHWVdOMGIzSTZJRzh1Y205c2JHOW1aa1poWTNSdmNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnVibWx1WjAxdlpHVnNPaUJ2TG5CaGJtNXBibWROYjJSbGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDl3WVc1dVpYSkJkSFJ5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVpVbHVibVZ5UVc1bmJHVTZJSFI1Y0dWdlppQnZMbkJoYm01bGNrRjBkSEl1WTI5dVpVbHVibVZ5UVc1bmJHVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG1OdmJtVkpibTVsY2tGdVoyeGxJRG9nYzJWc1ppNWZZMjl1WlVsdWJtVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bFQzVjBaWEpCYm1kc1pUb2dkSGx3Wlc5bUlHOHVjR0Z1Ym1WeVFYUjBjaTVqYjI1bFQzVjBaWEpCYm1kc1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnZMbkJoYm01bGNrRjBkSEl1WTI5dVpVOTFkR1Z5UVc1bmJHVWdPaUJ6Wld4bUxsOWpiMjVsVDNWMFpYSkJibWRzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym1WUGRYUmxja2RoYVc0NklIUjVjR1Z2WmlCdkxuQmhibTVsY2tGMGRISXVZMjl1WlU5MWRHVnlSMkZwYmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVZMjl1WlU5MWRHVnlSMkZwYmlBNklITmxiR1l1WDJOdmJtVlBkWFJsY2tkaGFXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlUxdlpHVnNPaUIwZVhCbGIyWWdieTV3WVc1dVpYSkJkSFJ5TG1ScGMzUmhibU5sVFc5a1pXd2dJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG1ScGMzUmhibU5sVFc5a1pXd2dPaUJ6Wld4bUxsOWthWE4wWVc1alpVMXZaR1ZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0UkdsemRHRnVZMlU2SUhSNWNHVnZaaUJ2TG5CaGJtNWxja0YwZEhJdWJXRjRSR2x6ZEdGdVkyVWdJVDA5SUNkMWJtUmxabWx1WldRbklEOGdieTV3WVc1dVpYSkJkSFJ5TG0xaGVFUnBjM1JoYm1ObElEb2djMlZzWmk1ZmJXRjRSR2x6ZEdGdVkyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXWkVhWE4wWVc1alpUb2dkSGx3Wlc5bUlHOHVjR0Z1Ym1WeVFYUjBjaTV5WldaRWFYTjBZVzVqWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVjbVZtUkdsemRHRnVZMlVnT2lCelpXeG1MbDl5WldaRWFYTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEp2Ykd4dlptWkdZV04wYjNJNklIUjVjR1Z2WmlCdkxuQmhibTVsY2tGMGRISXVjbTlzYkc5bVprWmhZM1J2Y2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxuQmhibTVsY2tGMGRISXVjbTlzYkc5bVprWmhZM1J2Y2lBNklITmxiR1l1WDNKdmJHeHZabVpHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lXNXVhVzVuVFc5a1pXdzZJSFI1Y0dWdlppQnZMbkJoYm01bGNrRjBkSEl1Y0dGdWJtbHVaMDF2WkdWc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHOHVjR0Z1Ym1WeVFYUjBjaTV3WVc1dWFXNW5UVzlrWld3Z09pQnpaV3htTGw5d1lXNXVhVzVuVFc5a1pXeGNiaUFnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFIxY200Z2RHaHBjeUJ6YjNWdVpDZHpJSEJoYm01bGNpQmhkSFJ5YVdKMWRHVWdkbUZzZFdWekxseHVJQ0FnSUNBZ0lDQnpiM1Z1WkNBOUlITmxiR1l1WDNOdmRXNWtRbmxKWkNod1lYSnpaVWx1ZENoaGNtZHpXekJkTENBeE1Da3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjkxYm1RZ1B5QnpiM1Z1WkM1ZmNHRnVibVZ5UVhSMGNpQTZJSE5sYkdZdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhjbWR6TG14bGJtZDBhQ0E5UFQwZ01pa2dlMXh1SUNBZ0lDQWdieUE5SUdGeVozTmJNRjA3WEc0Z0lDQWdJQ0JwWkNBOUlIQmhjbk5sU1c1MEtHRnlaM05iTVYwc0lERXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhaaGJIVmxjeUJ2WmlCMGFHVWdjM0JsWTJsbWFXVmtJSE52ZFc1a2N5NWNiaUFnSUNCMllYSWdhV1J6SUQwZ2MyVnNaaTVmWjJWMFUyOTFibVJKWkhNb2FXUXBPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHazlNRHNnYVR4cFpITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhOdmRXNWtJRDBnYzJWc1ppNWZjMjkxYm1SQ2VVbGtLR2xrYzF0cFhTazdYRzVjYmlBZ0lDQWdJR2xtSUNoemIzVnVaQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5Qk5aWEpuWlNCMGFHVWdibVYzSUhaaGJIVmxjeUJwYm5SdklIUm9aU0J6YjNWdVpDNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaElEMGdjMjkxYm1RdVgzQmhibTVsY2tGMGRISTdYRzRnSUNBZ0lDQWdJSEJoSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym1WSmJtNWxja0Z1WjJ4bE9pQjBlWEJsYjJZZ2J5NWpiMjVsU1c1dVpYSkJibWRzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtTnZibVZKYm01bGNrRnVaMnhsSURvZ2NHRXVZMjl1WlVsdWJtVnlRVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdZMjl1WlU5MWRHVnlRVzVuYkdVNklIUjVjR1Z2WmlCdkxtTnZibVZQZFhSbGNrRnVaMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUc4dVkyOXVaVTkxZEdWeVFXNW5iR1VnT2lCd1lTNWpiMjVsVDNWMFpYSkJibWRzWlN4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjVsVDNWMFpYSkhZV2x1T2lCMGVYQmxiMllnYnk1amIyNWxUM1YwWlhKSFlXbHVJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1WTI5dVpVOTFkR1Z5UjJGcGJpQTZJSEJoTG1OdmJtVlBkWFJsY2tkaGFXNHNYRzRnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlZOYjJSbGJEb2dkSGx3Wlc5bUlHOHVaR2x6ZEdGdVkyVk5iMlJsYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtUnBjM1JoYm1ObFRXOWtaV3dnT2lCd1lTNWthWE4wWVc1alpVMXZaR1ZzTEZ4dUlDQWdJQ0FnSUNBZ0lHMWhlRVJwYzNSaGJtTmxPaUIwZVhCbGIyWWdieTV0WVhoRWFYTjBZVzVqWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdkxtMWhlRVJwYzNSaGJtTmxJRG9nY0dFdWJXRjRSR2x6ZEdGdVkyVXNYRzRnSUNBZ0lDQWdJQ0FnY21WbVJHbHpkR0Z1WTJVNklIUjVjR1Z2WmlCdkxuSmxaa1JwYzNSaGJtTmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1Y21WbVJHbHpkR0Z1WTJVZ09pQndZUzV5WldaRWFYTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ0lDQnliMnhzYjJabVJtRmpkRzl5T2lCMGVYQmxiMllnYnk1eWIyeHNiMlptUm1GamRHOXlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzh1Y205c2JHOW1aa1poWTNSdmNpQTZJSEJoTG5KdmJHeHZabVpHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnY0dGdWJtbHVaMDF2WkdWc09pQjBlWEJsYjJZZ2J5NXdZVzV1YVc1blRXOWtaV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYnk1d1lXNXVhVzVuVFc5a1pXd2dPaUJ3WVM1d1lXNXVhVzVuVFc5a1pXeGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlZjR1JoZEdVZ2RHaGxJSEJoYm01bGNpQjJZV3gxWlhNZ2IzSWdZM0psWVhSbElHRWdibVYzSUhCaGJtNWxjaUJwWmlCdWIyNWxJR1Y0YVhOMGN5NWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGJtNWxjaUE5SUhOdmRXNWtMbDl3WVc1dVpYSTdYRzRnSUNBZ0lDQWdJR2xtSUNod1lXNXVaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVWx1Ym1WeVFXNW5iR1VnUFNCd1lTNWpiMjVsU1c1dVpYSkJibWRzWlR0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVTkxZEdWeVFXNW5iR1VnUFNCd1lTNWpiMjVsVDNWMFpYSkJibWRzWlR0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdVkyOXVaVTkxZEdWeVIyRnBiaUE5SUhCaExtTnZibVZQZFhSbGNrZGhhVzQ3WEc0Z0lDQWdJQ0FnSUNBZ2NHRnVibVZ5TG1ScGMzUmhibU5sVFc5a1pXd2dQU0J3WVM1a2FYTjBZVzVqWlUxdlpHVnNPMXh1SUNBZ0lDQWdJQ0FnSUhCaGJtNWxjaTV0WVhoRWFYTjBZVzVqWlNBOUlIQmhMbTFoZUVScGMzUmhibU5sTzF4dUlDQWdJQ0FnSUNBZ0lIQmhibTVsY2k1eVpXWkVhWE4wWVc1alpTQTlJSEJoTG5KbFprUnBjM1JoYm1ObE8xeHVJQ0FnSUNBZ0lDQWdJSEJoYm01bGNpNXliMnhzYjJabVJtRmpkRzl5SUQwZ2NHRXVjbTlzYkc5bVprWmhZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQndZVzV1WlhJdWNHRnVibWx1WjAxdlpHVnNJRDBnY0dFdWNHRnVibWx1WjAxdlpHVnNPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjNaU0JvWVhabElHRWdjRzl6YVhScGIyNGdkRzhnYzJWMGRYQWdkR2hsSUc1dlpHVWdkMmwwYUM1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhOdmRXNWtMbDl3YjNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRXNWtMbDl3YjNNZ1BTQnpaV3htTGw5d2IzTWdmSHdnV3pBc0lEQXNJQzB3TGpWZE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRU55WldGMFpTQmhJRzVsZHlCd1lXNXVaWElnYm05a1pTNWNiaUFnSUNBZ0lDQWdJQ0J6WlhSMWNGQmhibTVsY2loemIzVnVaQ3dnSjNOd1lYUnBZV3duS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ6Wld4bU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2lCVGFXNW5iR1VnVTI5MWJtUWdUV1YwYUc5a2N5QXFLaTljYmlBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrSUc1bGR5QndjbTl3WlhKMGFXVnpJSFJ2SUhSb1pTQmpiM0psSUZOdmRXNWtJR2x1YVhRdVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTBaMWJtTjBhVzl1ZlNCZmMzVndaWElnUTI5eVpTQlRiM1Z1WkNCcGJtbDBJRzFsZEdodlpDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1UyOTFibVI5WEc0Z0lDQXFMMXh1SUNCVGIzVnVaQzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJQ2htZFc1amRHbHZiaWhmYzNWd1pYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdjR0Z5Wlc1MElEMGdjMlZzWmk1ZmNHRnlaVzUwTzF4dVhHNGdJQ0FnSUNBdkx5QlRaWFIxY0NCMWMyVnlMV1JsWm1sdVpXUWdaR1ZtWVhWc2RDQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0lDQWdjMlZzWmk1ZmIzSnBaVzUwWVhScGIyNGdQU0J3WVhKbGJuUXVYMjl5YVdWdWRHRjBhVzl1TzF4dUlDQWdJQ0FnYzJWc1ppNWZjM1JsY21WdklEMGdjR0Z5Wlc1MExsOXpkR1Z5Wlc4N1hHNGdJQ0FnSUNCelpXeG1MbDl3YjNNZ1BTQndZWEpsYm5RdVgzQnZjenRjYmlBZ0lDQWdJSE5sYkdZdVgzQmhibTVsY2tGMGRISWdQU0J3WVhKbGJuUXVYM0JoYm01bGNrRjBkSEk3WEc1Y2JpQWdJQ0FnSUM4dklFTnZiWEJzWlhSbElHbHVhWFJwYkdsNllYUnBiMjRnZDJsMGFDQm9iM2RzWlhJdWFuTWdZMjl5WlNCVGIzVnVaQ2R6SUdsdWFYUWdablZ1WTNScGIyNHVYRzRnSUNBZ0lDQmZjM1Z3WlhJdVkyRnNiQ2gwYUdsektUdGNibHh1SUNBZ0lDQWdMeThnU1dZZ1lTQnpkR1Z5Wlc4Z2IzSWdjRzl6YVhScGIyNGdkMkZ6SUhOd1pXTnBabWxsWkN3Z2MyVjBJR2wwSUhWd0xseHVJQ0FnSUNBZ2FXWWdLSE5sYkdZdVgzTjBaWEpsYnlrZ2UxeHVJQ0FnSUNBZ0lDQndZWEpsYm5RdWMzUmxjbVZ2S0hObGJHWXVYM04wWlhKbGJ5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5sYkdZdVgzQnZjeWtnZTF4dUlDQWdJQ0FnSUNCd1lYSmxiblF1Y0c5ektITmxiR1l1WDNCdmMxc3dYU3dnYzJWc1ppNWZjRzl6V3pGZExDQnpaV3htTGw5d2IzTmJNbDBzSUhObGJHWXVYMmxrS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlLU2hUYjNWdVpDNXdjbTkwYjNSNWNHVXVhVzVwZENrN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUU5MlpYSnlhV1JsSUhSb1pTQlRiM1Z1WkM1eVpYTmxkQ0J0WlhSb2IyUWdkRzhnWTJ4bFlXNGdkWEFnY0hKdmNHVnlkR2xsY3lCbWNtOXRJSFJvWlNCemNHRjBhV0ZzSUhCc2RXZHBiaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdSblZ1WTNScGIyNTlJRjl6ZFhCbGNpQlRiM1Z1WkNCeVpYTmxkQ0J0WlhSb2IyUXVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTnZkVzVrZlZ4dUlDQWdLaTljYmlBZ1UyOTFibVF1Y0hKdmRHOTBlWEJsTG5KbGMyVjBJRDBnS0daMWJtTjBhVzl1S0Y5emRYQmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNiaUFnSUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0J6Wld4bUxsOXdZWEpsYm5RN1hHNWNiaUFnSUNBZ0lDOHZJRkpsYzJWMElHRnNiQ0J6Y0dGMGFXRnNJSEJzZFdkcGJpQndjbTl3WlhKMGFXVnpJRzl1SUhSb2FYTWdjMjkxYm1RdVhHNGdJQ0FnSUNCelpXeG1MbDl2Y21sbGJuUmhkR2x2YmlBOUlIQmhjbVZ1ZEM1ZmIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQnpaV3htTGw5d2IzTWdQU0J3WVhKbGJuUXVYM0J2Y3p0Y2JpQWdJQ0FnSUhObGJHWXVYM0JoYm01bGNrRjBkSElnUFNCd1lYSmxiblF1WDNCaGJtNWxja0YwZEhJN1hHNWNiaUFnSUNBZ0lDOHZJRU52YlhCc1pYUmxJSEpsYzJWMGRHbHVaeUJ2WmlCMGFHVWdjMjkxYm1RdVhHNGdJQ0FnSUNCeVpYUjFjbTRnWDNOMWNHVnlMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZTa29VMjkxYm1RdWNISnZkRzkwZVhCbExuSmxjMlYwS1R0Y2JseHVJQ0F2S2lvZ1NHVnNjR1Z5SUUxbGRHaHZaSE1nS2lvdlhHNGdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QndZVzV1WlhJZ2JtOWtaU0JoYm1RZ2MyRjJaU0JwZENCdmJpQjBhR1VnYzI5MWJtUXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UxTnZkVzVrZlNCemIzVnVaQ0JUY0dWamFXWnBZeUJ6YjNWdVpDQjBieUJ6WlhSMWNDQndZVzV1YVc1bklHOXVMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RIbHdaU0JVZVhCbElHOW1JSEJoYm01bGNpQjBieUJqY21WaGRHVTZJQ2R6ZEdWeVpXOG5JRzl5SUNkemNHRjBhV0ZzSnk1Y2JpQWdJQ292WEc0Z0lIWmhjaUJ6WlhSMWNGQmhibTVsY2lBOUlHWjFibU4wYVc5dUtITnZkVzVrTENCMGVYQmxLU0I3WEc0Z0lDQWdkSGx3WlNBOUlIUjVjR1VnZkh3Z0ozTndZWFJwWVd3bk8xeHVYRzRnSUNBZ0x5OGdRM0psWVhSbElIUm9aU0J1WlhjZ2NHRnVibVZ5SUc1dlpHVXVYRzRnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R6Y0dGMGFXRnNKeWtnZTF4dUlDQWdJQ0FnYzI5MWJtUXVYM0JoYm01bGNpQTlJRWh2ZDJ4bGNpNWpkSGd1WTNKbFlYUmxVR0Z1Ym1WeUtDazdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVkpibTVsY2tGdVoyeGxJRDBnYzI5MWJtUXVYM0JoYm01bGNrRjBkSEl1WTI5dVpVbHVibVZ5UVc1bmJHVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVlBkWFJsY2tGdVoyeGxJRDBnYzI5MWJtUXVYM0JoYm01bGNrRjBkSEl1WTI5dVpVOTFkR1Z5UVc1bmJHVTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG1OdmJtVlBkWFJsY2tkaGFXNGdQU0J6YjNWdVpDNWZjR0Z1Ym1WeVFYUjBjaTVqYjI1bFQzVjBaWEpIWVdsdU8xeHVJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTVrYVhOMFlXNWpaVTF2WkdWc0lEMGdjMjkxYm1RdVgzQmhibTVsY2tGMGRISXVaR2x6ZEdGdVkyVk5iMlJsYkR0Y2JpQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXViV0Y0UkdsemRHRnVZMlVnUFNCemIzVnVaQzVmY0dGdWJtVnlRWFIwY2k1dFlYaEVhWE4wWVc1alpUdGNiaUFnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1Y21WbVJHbHpkR0Z1WTJVZ1BTQnpiM1Z1WkM1ZmNHRnVibVZ5UVhSMGNpNXlaV1pFYVhOMFlXNWpaVHRjYmlBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWNtOXNiRzltWmtaaFkzUnZjaUE5SUhOdmRXNWtMbDl3WVc1dVpYSkJkSFJ5TG5KdmJHeHZabVpHWVdOMGIzSTdYRzRnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CaGJtNXBibWROYjJSbGJDQTlJSE52ZFc1a0xsOXdZVzV1WlhKQmRIUnlMbkJoYm01cGJtZE5iMlJsYkR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpiM1Z1WkM1ZmNHRnVibVZ5TG5CdmMybDBhVzl1V0NBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyOTFibVF1WDNCaGJtNWxjaTV3YjNOcGRHbHZibGd1YzJWMFZtRnNkV1ZCZEZScGJXVW9jMjkxYm1RdVgzQnZjMXN3WFN3Z1NHOTNiR1Z5TG1OMGVDNWpkWEp5Wlc1MFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjRzl6YVhScGIyNVpMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5d2IzTmJNVjBzSUVodmQyeGxjaTVqZEhndVkzVnljbVZ1ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUxuQnZjMmwwYVc5dVdpNXpaWFJXWVd4MVpVRjBWR2x0WlNoemIzVnVaQzVmY0c5eld6SmRMQ0JJYjNkc1pYSXVZM1I0TG1OMWNuSmxiblJVYVcxbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lITnZkVzVrTGw5d1lXNXVaWEl1YzJWMFVHOXphWFJwYjI0b2MyOTFibVF1WDNCdmMxc3dYU3dnYzI5MWJtUXVYM0J2YzFzeFhTd2djMjkxYm1RdVgzQnZjMXN5WFNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMjkxYm1RdVgzQmhibTVsY2k1dmNtbGxiblJoZEdsdmJsZ2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNVlMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3dYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNVpMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3hYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdWIzSnBaVzUwWVhScGIyNWFMbk5sZEZaaGJIVmxRWFJVYVcxbEtITnZkVzVrTGw5dmNtbGxiblJoZEdsdmJsc3lYU3dnU0c5M2JHVnlMbU4wZUM1amRYSnlaVzUwVkdsdFpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z1WkM1ZmNHRnVibVZ5TG5ObGRFOXlhV1Z1ZEdGMGFXOXVLSE52ZFc1a0xsOXZjbWxsYm5SaGRHbHZibHN3WFN3Z2MyOTFibVF1WDI5eWFXVnVkR0YwYVc5dVd6RmRMQ0J6YjNWdVpDNWZiM0pwWlc1MFlYUnBiMjViTWwwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J6YjNWdVpDNWZjR0Z1Ym1WeUlEMGdTRzkzYkdWeUxtTjBlQzVqY21WaGRHVlRkR1Z5Wlc5UVlXNXVaWElvS1R0Y2JpQWdJQ0FnSUhOdmRXNWtMbDl3WVc1dVpYSXVjR0Z1TG5ObGRGWmhiSFZsUVhSVWFXMWxLSE52ZFc1a0xsOXpkR1Z5Wlc4c0lFaHZkMnhsY2k1amRIZ3VZM1Z5Y21WdWRGUnBiV1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE52ZFc1a0xsOXdZVzV1WlhJdVkyOXVibVZqZENoemIzVnVaQzVmYm05a1pTazdYRzVjYmlBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUdOdmJtNWxZM1JwYjI1ekxseHVJQ0FnSUdsbUlDZ2hjMjkxYm1RdVgzQmhkWE5sWkNrZ2UxeHVJQ0FnSUNBZ2MyOTFibVF1WDNCaGNtVnVkQzV3WVhWelpTaHpiM1Z1WkM1ZmFXUXNJSFJ5ZFdVcExuQnNZWGtvYzI5MWJtUXVYMmxrTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlLU2dwTzF4dVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTl1YjJSbFgyMXZaSFZzWlhNdmFHOTNiR1Z5TDJScGMzUXZhRzkzYkdWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTVYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNJc0luWmhjaUJuTzF4eVhHNWNjbHh1THk4Z1ZHaHBjeUIzYjNKcmN5QnBiaUJ1YjI0dGMzUnlhV04wSUcxdlpHVmNjbHh1WnlBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhIUnlaWFIxY200Z2RHaHBjenRjY2x4dWZTa29LVHRjY2x4dVhISmNiblJ5ZVNCN1hISmNibHgwTHk4Z1ZHaHBjeUIzYjNKcmN5QnBaaUJsZG1Gc0lHbHpJR0ZzYkc5M1pXUWdLSE5sWlNCRFUxQXBYSEpjYmx4MFp5QTlJR2NnZkh3Z1JuVnVZM1JwYjI0b1hDSnlaWFIxY200Z2RHaHBjMXdpS1NncElIeDhJQ2d4TEdWMllXd3BLRndpZEdocGMxd2lLVHRjY2x4dWZTQmpZWFJqYUNobEtTQjdYSEpjYmx4MEx5OGdWR2hwY3lCM2IzSnJjeUJwWmlCMGFHVWdkMmx1Wkc5M0lISmxabVZ5Wlc1alpTQnBjeUJoZG1GcGJHRmliR1ZjY2x4dVhIUnBaaWgwZVhCbGIyWWdkMmx1Wkc5M0lEMDlQU0JjSW05aWFtVmpkRndpS1Z4eVhHNWNkRngwWnlBOUlIZHBibVJ2ZHp0Y2NseHVmVnh5WEc1Y2NseHVMeThnWnlCallXNGdjM1JwYkd3Z1ltVWdkVzVrWldacGJtVmtMQ0JpZFhRZ2JtOTBhR2x1WnlCMGJ5QmtieUJoWW05MWRDQnBkQzR1TGx4eVhHNHZMeUJYWlNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTENCcGJuTjBaV0ZrSUc5bUlHNXZkR2hwYm1jZ2FHVnlaU3dnYzI4Z2FYUW5jMXh5WEc0dkx5QmxZWE5wWlhJZ2RHOGdhR0Z1Wkd4bElIUm9hWE1nWTJGelpTNGdhV1lvSVdkc2IySmhiQ2tnZXlBdUxpNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHYzdYSEpjYmx4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDaDNaV0p3WVdOcktTOWlkV2xzWkdsdUwyZHNiMkpoYkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UQmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCYmUxd2lZWFZrYVc5R2FXeGxYQ0k2WENKaWIyeHNibUZ6UW5WekxtMXdNMXdpTEZ3aWMzQmxZM1J5ZFcxY0lqcGJlMXdpWm5KbGNWd2lPakUzTWk0eU5qVTJNalVzWENKdFlXZHVhWFIxWkdWY0lqb3RNVGN1TXprNU56UTJmU3g3WENKbWNtVnhYQ0k2TmpRdU5UazVOakE1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEl4TGprMk9ESTVmU3g3WENKbWNtVnhYQ0k2TXpZMkxqQTJORFExTXl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TWk0MU1qZ3dORGw5TEh0Y0ltWnlaWEZjSWpvMU1UWXVOemsyT0RjMUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNNExqVTBNak0xT0gwc2Uxd2labkpsY1Z3aU9qWTRPUzR3TmpJMUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNNUxqQXpPRFEwTlgwc2Uxd2labkpsY1Z3aU9qZzJNUzR6TWpneE1qVXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16a3VOak00TXpFM2ZTeDdYQ0ptY21WeFhDSTZOemMxTGpFNU5UTXhNaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMHpPUzQyTmpZMU5YMHNlMXdpWm5KbGNWd2lPams1TUM0MU1qY3pORFFzWENKdFlXZHVhWFIxWkdWY0lqb3ROREF1TURFMk1qQXhmU3g3WENKbWNtVnhYQ0k2T1RJMUxqa3lOemN6TkN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTUM0MU1UYzRPVFY5TEh0Y0ltWnlaWEZjSWpveE1EazRMakU1TXpNMU9TeGNJbTFoWjI1cGRIVmtaVndpT2kwME1TNHdOakExT1ROOUxIdGNJbVp5WlhGY0lqb3hNelUyTGpVNU1UYzVOeXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBNUzR5TnpRNE56WjlMSHRjSW1aeVpYRmNJam94TWpjd0xqUTFPRGs0TkN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTXk0M01ESXlORFI5TEh0Y0ltWnlaWEZjSWpveE9EY3pMak00T0RZM01peGNJbTFoWjI1cGRIVmtaVndpT2kwME5DNHhOamswTWpaOUxIdGNJbVp5WlhGY0lqb3hOVEk0TGpnMU56UXlNaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBOUzR4TXpVeU9ERjlMSHRjSW1aeVpYRmNJam94TmpNMkxqVXlNelF6T0N4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTlM0Mk5UTTNNelo5TEh0Y0ltWnlaWEZjSWpveE56UTBMakU0T1RRMU15eGNJbTFoWjI1cGRIVmtaVndpT2kwME5TNDNPVEF3TlRoOVhYMHNlMXdpWVhWa2FXOUdhV3hsWENJNlhDSmpiMjl3TG0xd00xd2lMRndpYzNCbFkzUnlkVzFjSWpwYmUxd2labkpsY1Z3aU9qZzJMakV6TWpneE1peGNJbTFoWjI1cGRIVmtaVndpT2kweU9DNDVNekkxTXpkOUxIdGNJbVp5WlhGY0lqb3lNell1T0RZMU1qTTBMRndpYldGbmJtbDBkV1JsWENJNkxUTXlMak15TnprNU5YMHNlMXdpWm5KbGNWd2lPalExTWk0eE9UY3lOallzWENKdFlXZHVhWFIxWkdWY0lqb3RNell1TWpnNU5EbDlMSHRjSW1aeVpYRmNJam96TkRRdU5UTXhNalVzWENKdFlXZHVhWFIxWkdWY0lqb3RNell1TnpnNU1qWXhmU3g3WENKbWNtVnhYQ0k2TlRVNUxqZzJNekk0TVN4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6T0M0Mk1UWTROSDBzZTF3aVpuSmxjVndpT2pjek1pNHhNamc1TURZc1hDSnRZV2R1YVhSMVpHVmNJam90TXprdU5EazBOemM0ZlN4N1hDSm1jbVZ4WENJNk56azJMamN5T0RVeE5peGNJbTFoWjI1cGRIVmtaVndpT2kwek9TNDFNVEU1T1ROOUxIdGNJbVp5WlhGY0lqb3hNRGMyTGpZMk1ERTFOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBPQzQwTWpNd09EaDlMSHRjSW1aeVpYRmNJam94TVRnMExqTXlOakUzTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTUM0ME9EUXhPRGg5TEh0Y0ltWnlaWEZjSWpveE1qUTRMamt5TlRjNE1TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU1DNDJOalE0TkRGOUxIdGNJbVp5WlhGY0lqb3hORFkwTGpJMU56Z3hNaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDFNUzR3TnpVM016TjlMSHRjSW1aeVpYRmNJam94TXprNUxqWTFPREl3TXl4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTVM0ek1qazVNRFo5TEh0Y0ltWnlaWEZjSWpveE5qVTRMakExTmpZME1TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU1TNDNNams0T1RkOUxIdGNJbVp5WlhGY0lqb3hPRFV4TGpnMU5UUTJPU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDFNeTR3TVRZMk56aDlMSHRjSW1aeVpYRmNJam95TVRFd0xqSTFNemt3Tml4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTlM0Mk1qRXpOalY5TEh0Y0ltWnlaWEZjSWpveU1ESTBMakV5TVRBNU5DeGNJbTFoWjI1cGRIVmtaVndpT2kwMU55NDFOVEExTkRsOVhYMHNlMXdpWVhWa2FXOUdhV3hsWENJNlhDSmpiM1Z1ZEdsdVp6RXViWEF6WENJc1hDSnpjR1ZqZEhKMWJWd2lPbHQ3WENKbWNtVnhYQ0k2TVRrekxqYzVPRGd5T0N4Y0ltMWhaMjVwZEhWa1pWd2lPaTB5Tmk0d01UYzFOakY5TEh0Y0ltWnlaWEZjSWpvME1Ea3VNVE13T0RVNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNMUxqUTNOVFF3TTMwc2Uxd2labkpsY1Z3aU9qWXdNaTQ1TWprMk9EZ3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5ETXVNREl4T1RJM2ZTeDdYQ0ptY21WeFhDSTZOemsyTGpjeU9EVXhOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBOaTQwT0RBMU9UaDlMSHRjSW1aeVpYRmNJam8zTVRreUxqQTRPVGcwTkN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAxTWk0ek1EZzBPRE45TEh0Y0ltWnlaWEZjSWpvM01qTTFMakUxTmpJMUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVeUxqWXpNek0yT1gwc2Uxd2labkpsY1Z3aU9qZ3lPVEF1TWpnek1qQXpMRndpYldGbmJtbDBkV1JsWENJNkxUVXlMalkyT1RZM09IMHNlMXdpWm5KbGNWd2lPamN4TURVdU9UVTNNRE14TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV5TGprME5URXlNbjBzZTF3aVpuSmxjVndpT2pZMU5qY3VOakkyT1RVekxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVeUxqazRPREEyZlN4N1hDSm1jbVZ4WENJNk5qVXdNeTR3TWpjek5EUXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UTXVNVGcwT1RZM2ZTeDdYQ0ptY21WeFhDSTZOalF4Tmk0NE9UUTFNekVzWENKdFlXZHVhWFIxWkdWY0lqb3ROVE11TkRjek5EUTJmU3g3WENKbWNtVnhYQ0k2T0RFNE1pNDJNVGN4T0Rnc1hDSnRZV2R1YVhSMVpHVmNJam90TlRNdU5UTXhNelUzZlN4N1hDSm1jbVZ4WENJNk5UWTROQzQzTmpVMk1qVXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UTXVOakF5TlRNeGZTeDdYQ0ptY21WeFhDSTZPREV6T1M0MU5UQTNPREVzWENKdFlXZHVhWFIxWkdWY0lqb3ROVFF1TURZeU56YzRmU3g3WENKbWNtVnhYQ0k2TmpZMU15NDNOVGszTmpZc1hDSnRZV2R1YVhSMVpHVmNJam90TlRRdU1UVTNNems0ZlN4N1hDSm1jbVZ4WENJNk5UVTNOeTR3T1RrMk1Ea3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UUXVORFk1TXpnemZWMTlMSHRjSW1GMVpHbHZSbWxzWlZ3aU9sd2lZMjkxYm5ScGJtZFRkbVZ1YzJ0aExtMXdNMXdpTEZ3aWMzQmxZM1J5ZFcxY0lqcGJlMXdpWm5KbGNWd2lPakl4TlM0ek16SXdNekVzWENKdFlXZHVhWFIxWkdWY0lqb3RNVGd1T1RjMk56STNmU3g3WENKbWNtVnhYQ0k2TkRNd0xqWTJOREEyTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB5TXk0NE1EVXhPRE45TEh0Y0ltWnlaWEZjSWpvME56TXVOek13TkRZNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJekxqa3pOelF3TTMwc2Uxd2labkpsY1Z3aU9qWTJOeTQxTWpreU9UY3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16WXVORGMzTXpVMmZTeDdYQ0ptY21WeFhDSTZPVGMzTmk0d056UXlNVGtzWENKdFlXZHVhWFIxWkdWY0lqb3RORFl1TnpjNU16RTJmU3g3WENKbWNtVnhYQ0k2T1RnNE15NDNOREF5TXpRc1hDSnRZV2R1YVhSMVpHVmNJam90TkRZdU9EY3lPVGw5TEh0Y0ltWnlaWEZjSWpvNU9UUTRMak16T1RnME5DeGNJbTFoWjI1cGRIVmtaVndpT2kwME55NDRORE0zTmpGOUxIdGNJbVp5WlhGY0lqbzRNVGd1TWpZeE56RTVMRndpYldGbmJtbDBkV1JsWENJNkxUUTNMamszTlRVMU9YMHNlMXdpWm5KbGNWd2lPamt4TURndU5UUTBPVEl5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV3TGpBMk5EQXhOSDBzZTF3aVpuSmxjVndpT2pnMk5UWXVNelEzTmpVMkxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVd0xqRTBPVFl5Tkgwc2Uxd2labkpsY1Z3aU9qSXdNREl1TlRnM09Ea3hMRndpYldGbmJtbDBkV1JsWENJNkxUVXdMak0wTXpFME4zMHNlMXdpWm5KbGNWd2lPamszTVRFdU5EYzBOakE1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV3TGpRNE1qQXdNbjBzZTF3aVpuSmxjVndpT2pjek9EVXVPRGc0TmpjeUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVd0xqVTFORGt3Tlgwc2Uxd2labkpsY1Z3aU9qa3hOek11TVRRME5UTXhMRndpYldGbmJtbDBkV1JsWENJNkxUVXdMamt5TVRjek5IMHNlMXdpWm5KbGNWd2lPamsyTkRZdU9EYzFMRndpYldGbmJtbDBkV1JsWENJNkxUVXhMakEzTWpBd01uMHNlMXdpWm5KbGNWd2lPakUzTmpVdU56SXlOalUyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFV4TGpFd01UWXdNWDFkZlN4N1hDSmhkV1JwYjBacGJHVmNJanBjSW1OeWIzTnpkMkZzYXk1dGNETmNJaXhjSW5Od1pXTjBjblZ0WENJNlczdGNJbVp5WlhGY0lqb3lOVGN1T0RFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwek55NDJOalkzTWpsOUxIdGNJbVp5WlhGY0lqbzRNakF1TXpFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwME1TNDNOemN3T0RoOUxIdGNJbVp5WlhGY0lqbzNOVEFzWENKdFlXZHVhWFIxWkdWY0lqb3RORE11TmpRM09UYzJmU3g3WENKbWNtVnhYQ0k2TlRNNUxqQTJNalVzWENKdFlXZHVhWFIxWkdWY0lqb3RORGN1TURNNE5EUTRmU3g3WENKbWNtVnhYQ0k2TVRNNE1pNDRNVEkxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFEzTGpjeE16ZzNNWDBzZTF3aVpuSmxjVndpT2prMk1DNDVNemMxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFEzTGpneE5UQTRObjBzZTF3aVpuSmxjVndpT2pFME5UTXVNVEkxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFE1TGpVeU1UQXhOWDBzZTF3aVpuSmxjVndpT2pFeU1UZ3VOelVzWENKdFlXZHVhWFIxWkdWY0lqb3RORGt1T0RnMk1UZzVmU3g3WENKbWNtVnhYQ0k2TWprd05pNHlOU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDFNQzR5TkRNM01qVjlMSHRjSW1aeVpYRmNJam94TWpnNUxqQTJNalVzWENKdFlXZHVhWFIxWkdWY0lqb3ROVEF1TkRVMU5qa3lmU3g3WENKbWNtVnhYQ0k2TWpZeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU1TNDRNREV3TnpWOUxIdGNJbVp5WlhGY0lqb3hOVGt6TGpjMUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRVeExqZzBOakE1Tm4wc2Uxd2labkpsY1Z3aU9qTXdNak11TkRNM05TeGNJbTFoWjI1cGRIVmtaVndpT2kwMU1pNHhNelExTnpGOUxIdGNJbVp5WlhGY0lqb3lNRE01TGpBMk1qVXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5USXVNVFEwTkRneWZTeDdYQ0ptY21WeFhDSTZNak15TUM0ek1USTFMRndpYldGbmJtbDBkV1JsWENJNkxUVXlMalkxTnpBeU5IMHNlMXdpWm5KbGNWd2lPakU1TWpFdU9EYzFMRndpYldGbmJtbDBkV1JsWENJNkxUVXpMak16T0RJeE9YMWRmU3g3WENKaGRXUnBiMFpwYkdWY0lqcGNJbVZ0Y0hSNVYyOXlaSE5PWldFdWJYQXpYQ0lzWENKemNHVmpkSEoxYlZ3aU9sdDdYQ0ptY21WeFhDSTZNakUxTGpNek1qQXpNU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHhPUzQxTWpBeE5UbDlMSHRjSW1aeVpYRmNJam8wTXpBdU5qWTBNRFl5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEkxTGpJeE9UQXlOWDBzZTF3aVpuSmxjVndpT2pZd01pNDVNamsyT0Rnc1hDSnRZV2R1YVhSMVpHVmNJam90TXpFdU1UYzFOVEl5ZlN4N1hDSm1jbVZ4WENJNk5qUXVOVGs1TmpBNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNMUxqRTVNekkzT1gwc2Uxd2labkpsY1Z3aU9qYzVOaTQzTWpnMU1UWXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16a3VPRFk0TWpjNWZTeDdYQ0ptY21WeFhDSTZNVGM0Tnk0eU5UVTROVGtzWENKdFlXZHVhWFIxWkdWY0lqb3ROREV1TXpreE1UZ3lmU3g3WENKbWNtVnhYQ0k2T0RneUxqZzJNVE15T0N4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTWk0NE1qY3dORFY5TEh0Y0ltWnlaWEZjSWpveE1EVTFMakV5TmprMU15eGNJbTFoWjI1cGRIVmtaVndpT2kwME5TNHdNRGt4TnpGOUxIdGNJbVp5WlhGY0lqb3hOamM1TGpVNE9UZzBOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMDBOUzR3TVRrME5EUjlMSHRjSW1aeVpYRmNJam94TVRFNUxqY3lOalUyTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTlM0ek56UTVOako5TEh0Y0ltWnlaWEZjSWpveE5UY3hMamt5TXpneU9DeGNJbTFoWjI1cGRIVmtaVndpT2kwME5TNHpPVEl6T0RkOUxIdGNJbVp5WlhGY0lqb3hOREl4TGpFNU1UUXdOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBOaTR4TlRZNU9ESjlMSHRjSW1aeVpYRmNJam94TWpjd0xqUTFPRGs0TkN4Y0ltMWhaMjVwZEhWa1pWd2lPaTAwTmk0ek56Y3lNamg5TEh0Y0ltWnlaWEZjSWpveE9EazBMamt5TVRnM05TeGNJbTFoWjI1cGRIVmtaVndpT2kwME5pNDBOekF5T1RWOUxIdGNJbVp5WlhGY0lqb3hORGcxTGpjNU1UQXhOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBOeTR5TmpZek5qbDlMSHRjSW1aeVpYRmNJam80TmpFekxqSTRNVEkxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFEzTGpRNE9UWTFOWDFkZlN4N1hDSmhkV1JwYjBacGJHVmNJanBjSW1ac2FXZG9kRXhoYm1ScGJtY3ViWEF6WENJc1hDSnpjR1ZqZEhKMWJWd2lPbHQ3WENKbWNtVnhYQ0k2TVRVd0xqY3pNalF5TWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB5TXk0eU1qa3lNWDBzZTF3aVpuSmxjVndpT2pNeU1pNDVPVGd3TkRjc1hDSnRZV2R1YVhSMVpHVmNJam90TWpjdU9ERTNOak16ZlN4N1hDSm1jbVZ4WENJNk9EWXVNVE15T0RFeUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJNExqYzFOemd6TW4wc2Uxd2labkpsY1Z3aU9qZzRNaTQ0TmpFek1qZ3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16WXVNRFExT1RJMWZTeDdYQ0ptY21WeFhDSTZORFV5TGpFNU56STJOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMHpOaTR4TmpVeE5EWjlMSHRjSW1aeVpYRmNJam8xTVRZdU56azJPRGMxTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE00TGpFNU1qa3dPWDBzZTF3aVpuSmxjVndpT2pZME5TNDVPVFl3T1RRc1hDSnRZV2R1YVhSMVpHVmNJam90TXprdU5EY3lOWDBzZTF3aVpuSmxjVndpT2pFd05UVXVNVEkyT1RVekxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRRd0xqa3hPRFl4TTMwc2Uxd2labkpsY1Z3aU9qazVNQzQxTWpjek5EUXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5EQXVPVFk0TVRnNWZTeDdYQ0ptY21WeFhDSTZOek15TGpFeU9Ea3dOaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBNUzR6TnpreU9IMHNlMXdpWm5KbGNWd2lPamM1Tmk0M01qZzFNVFlzWENKdFlXZHVhWFIxWkdWY0lqb3ROREV1TlRFNE9UWTNmU3g3WENKbWNtVnhYQ0k2TVRRNE5TNDNPVEV3TVRZc1hDSnRZV2R1YVhSMVpHVmNJam90TkRJdU5ETTROemd5ZlN4N1hDSm1jbVZ4WENJNk1USTBPQzQ1TWpVM09ERXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5EUXVNamd6TmpZMWZTeDdYQ0ptY21WeFhDSTZNVGMyTlM0M01qSTJOVFlzWENKdFlXZHVhWFIxWkdWY0lqb3RORFF1T0RNME56VXhmU3g3WENKbWNtVnhYQ0k2TVRFMk1pNDNPVEk1Tmprc1hDSnRZV2R1YVhSMVpHVmNJam90TkRVdU9UWXhOVE0yZlN4N1hDSm1jbVZ4WENJNk1UTTFOaTQxT1RFM09UY3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5EWXVOVFF3TlRNeGZWMTlMSHRjSW1GMVpHbHZSbWxzWlZ3aU9sd2labkp2YlVKbGNteHBiaTV0Y0ROY0lpeGNJbk53WldOMGNuVnRYQ0k2VzN0Y0ltWnlaWEZjSWpveE1qa3VNVGs1TWpFNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRFNUxqTXpOek15T0gwc2Uxd2labkpsY1Z3aU9qRTNNaTR5TmpVMk1qVXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qQXVNRFl4TVRVM2ZTeDdYQ0ptY21WeFhDSTZNak0yTGpnMk5USXpOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHlNUzR5TkRNek9ESjlMSHRjSW1aeVpYRmNJam96TmpZdU1EWTBORFV6TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEkxTGpJME9UWXhOMzBzZTF3aVpuSmxjVndpT2pRd09TNHhNekE0TlRrc1hDSnRZV2R1YVhSMVpHVmNJam90TWpVdU1qVXdNakF5ZlN4N1hDSm1jbVZ4WENJNk16SXlMams1T0RBME55eGNJbTFoWjI1cGRIVmtaVndpT2kweU5TNHpNalE1TTMwc2Uxd2labkpsY1Z3aU9qUTNNeTQzTXpBME5qa3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qVXVORGN6T0RZMGZTeDdYQ0ptY21WeFhDSTZOalExTGprNU5qQTVOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHlOaTR5T1RFeU16ZDlMSHRjSW1aeVpYRmNJam8yTURJdU9USTVOamc0TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEkyTGpneU1EYzVOMzBzZTF3aVpuSmxjVndpT2prMk9DNDVPVFF4TkRFc1hDSnRZV2R1YVhSMVpHVmNJam90TWpndU5ESXpNRGMxZlN4N1hDSm1jbVZ4WENJNk56azJMamN5T0RVeE5peGNJbTFoWjI1cGRIVmtaVndpT2kweU9DNDJNVFk0TmpWOUxIdGNJbVp5WlhGY0lqbzVNRFF1TXprME5UTXhMRndpYldGbmJtbDBkV1JsWENJNkxUTXdMak15TnpJNU1YMHNlMXdpWm5KbGNWd2lPakUwTmpRdU1qVTNPREV5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE15TGpjeE9EVXhmU3g3WENKbWNtVnhYQ0k2TVRFNE5DNHpNall4TnpJc1hDSnRZV2R1YVhSMVpHVmNJam90TXpNdU5UTTRNemN5ZlN4N1hDSm1jbVZ4WENJNk1URXhPUzQzTWpZMU5qSXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16TXVOak00TWpZNGZTeDdYQ0ptY21WeFhDSTZNVEkzTUM0ME5UZzVPRFFzWENKdFlXZHVhWFIxWkdWY0lqb3RNelF1TWpBd01UY3lmVjE5TEh0Y0ltRjFaR2x2Um1sc1pWd2lPbHdpYTJsMFkyaGxiakV1YlhBelhDSXNYQ0p6Y0dWamRISjFiVndpT2x0N1hDSm1jbVZ4WENJNk1UQTNMalkyTmpBeE5peGNJbTFoWjI1cGRIVmtaVndpT2kweU15NHdNVGd3TXpKOUxIdGNJbVp5WlhGY0lqb3hOVEF1TnpNeU5ESXlMRndpYldGbmJtbDBkV1JsWENJNkxUSXpMakEyTXpBNU0zMHNlMXdpWm5KbGNWd2lPakV3Tnk0Mk5qWXdNVFlzWENKdFlXZHVhWFIxWkdWY0lqb3RNak11Tmpnek9ETXlmU3g3WENKbWNtVnhYQ0k2TVRVd0xqY3pNalF5TWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB5TXk0NE56QTJOamg5TEh0Y0ltWnlaWEZjSWpveU16WXVPRFkxTWpNMExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJM0xqVTNPREE0TjMwc2Uxd2labkpsY1Z3aU9qSXpOaTQ0TmpVeU16UXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qZ3VORFU0TkRNNWZTeDdYQ0ptY21WeFhDSTZNekF4TGpRMk5EZzBOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHlPQzQxTWpnM09UVjlMSHRjSW1aeVpYRmNJam96TURFdU5EWTBPRFEwTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEk1TGpFME5qUTJNWDBzZTF3aVpuSmxjVndpT2pRek1DNDJOalF3TmpJc1hDSnRZV2R1YVhSMVpHVmNJam90TXpFdU1USXlPVEkxZlN4N1hDSm1jbVZ4WENJNk5ETXdMalkyTkRBMk1peGNJbTFoWjI1cGRIVmtaVndpT2kwek1TNDJNakEzTWpaOUxIdGNJbVp5WlhGY0lqbzFNemd1TXpNd01EYzRMRndpYldGbmJtbDBkV1JsWENJNkxUTXlMakkzT1RnME5uMHNlMXdpWm5KbGNWd2lPalV6T0M0ek16QXdOemdzWENKdFlXZHVhWFIxWkdWY0lqb3RNekl1TnpZMk56TXhmU3g3WENKbWNtVnhYQ0k2TkRrMUxqSTJNelkzTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TWk0M09ESXhNalI5TEh0Y0ltWnlaWEZjSWpvME9UVXVNall6TmpjeUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNeUxqZ3pNemcyTW4wc2Uxd2labkpsY1Z3aU9qWTBOUzQ1T1RZd09UUXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16TXVNVEl4TmpRM2ZTeDdYQ0ptY21WeFhDSTZOalExTGprNU5qQTVOQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNeTR5TVRneU16RjlYWDBzZTF3aVlYVmthVzlHYVd4bFhDSTZYQ0p3Wlc1a1pXeFVZV2N1YlhBelhDSXNYQ0p6Y0dWamRISjFiVndpT2x0N1hDSm1jbVZ4WENJNk1qTTJMamcyTlRJek5DeGNJbTFoWjI1cGRIVmtaVndpT2kweE5pNHlNakUxT1RKOUxIdGNJbVp5WlhGY0lqbzJOQzQxT1RrMk1Ea3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1UZ3VOamc0TURreGZTeDdYQ0ptY21WeFhDSTZOREE1TGpFek1EZzFPU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHlNQzR6TXpZeE56aDlMSHRjSW1aeVpYRmNJam8xTlRrdU9EWXpNamd4TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEl4TGpZeU1EVXlOMzBzZTF3aVpuSmxjVndpT2pZeU5DNDBOakk0T1RFc1hDSnRZV2R1YVhSMVpHVmNJam90TWpNdU5qZzFOREk1ZlN4N1hDSm1jbVZ4WENJNk9EWXhMak15T0RFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kweU5TNHdOamMyTXpWOUxIdGNJbVp5WlhGY0lqbzVNalV1T1RJM056TTBMRndpYldGbmJtbDBkV1JsWENJNkxUSTFMamd6TWpZM09IMHNlMXdpWm5KbGNWd2lPakUzTWpJdU5qVTJNalVzWENKdFlXZHVhWFIxWkdWY0lqb3RNamN1TVRBNU9EQXlmU3g3WENKbWNtVnhYQ0k2TVRnM015NHpPRGcyTnpJc1hDSnRZV2R1YVhSMVpHVmNJam90TWpjdU1UZzVOek0xZlN4N1hDSm1jbVZ4WENJNk1UQTFOUzR4TWpZNU5UTXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qa3VOVEEzTnpZM2ZTeDdYQ0ptY21WeFhDSTZNVEkwT0M0NU1qVTNPREVzWENKdFlXZHVhWFIxWkdWY0lqb3RNamt1T0RBMk1qRXhmU3g3WENKbWNtVnhYQ0k2TVRFME1TNHlOVGszTmpZc1hDSnRZV2R1YVhSMVpHVmNJam90TXpBdU1EWTFNVGczZlN4N1hDSm1jbVZ4WENJNk1UTXhNeTQxTWpVek9URXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16QXVNalV6TnpZM2ZTeDdYQ0ptY21WeFhDSTZNVGt4Tmk0ME5UVXdOemdzWENKdFlXZHVhWFIxWkdWY0lqb3RNekF1TXpZM01UWXpmU3g3WENKbWNtVnhYQ0k2TVRReU1TNHhPVEUwTURZc1hDSnRZV2R1YVhSMVpHVmNJam90TXpFdU5UTTVOekU1ZlN4N1hDSm1jbVZ4WENJNk1UVXlPQzQ0TlRjME1qSXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16RXVOekl5TlRBM2ZWMTlMSHRjSW1GMVpHbHZSbWxzWlZ3aU9sd2ljR1Z1WkdWc1ZHRm5NaTV0Y0ROY0lpeGNJbk53WldOMGNuVnRYQ0k2VzN0Y0ltWnlaWEZjSWpvek1ERXVORFkwT0RRMExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJNExqVTRPREkxTjMwc2Uxd2labkpsY1Z3aU9qRTFNQzQzTXpJME1qSXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qa3VNamt6T1RoOUxIdGNJbVp5WlhGY0lqb3pOall1TURZME5EVXpMRndpYldGbmJtbDBkV1JsWENJNkxUTXhMalF5T1RrME4zMHNlMXdpWm5KbGNWd2lPamcyTGpFek1qZ3hNaXhjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNUzQ1T1Rjek5EbDlMSHRjSW1aeVpYRmNJam8yT0RrdU1EWXlOU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNaTR5TmpJME9UZDlMSHRjSW1aeVpYRmNJam8zTnpVdU1UazFNekV5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE16TGpnMU5UWXhOSDBzZTF3aVpuSmxjVndpT2pVMU9TNDROak15T0RFc1hDSnRZV2R1YVhSMVpHVmNJam90TXpRdU1UWXlOVFV5ZlN4N1hDSm1jbVZ4WENJNk9UUTNMalEyTURrek9DeGNJbTFoWjI1cGRIVmtaVndpT2kwek5TNHpOekEyTmpkOUxIdGNJbVp5WlhGY0lqbzROakV1TXpJNE1USTFMRndpYldGbmJtbDBkV1JsWENJNkxUTTJMalkwTURRM05uMHNlMXdpWm5KbGNWd2lPakV3TnpZdU5qWXdNVFUyTEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE01TGpBMU5UTTNPSDBzZTF3aVpuSmxjVndpT2pFeU5EZ3VPVEkxTnpneExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRRd0xqYzBNRFE1T0gwc2Uxd2labkpsY1Z3aU9qRXpNVE11TlRJMU16a3hMRndpYldGbmJtbDBkV1JsWENJNkxUUXhMakkwT0RFM04zMHNlMXdpWm5KbGNWd2lPakUwTkRJdU56STBOakE1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFF6TGpReE5USTBOWDBzZTF3aVpuSmxjVndpT2pFMU5UQXVNemt3TmpJMUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRRMExqRTNOREF5Tm4wc2Uxd2labkpsY1Z3aU9qRTJOVGd1TURVMk5qUXhMRndpYldGbmJtbDBkV1JsWENJNkxUUTBMalF5TmpBeU9YMHNlMXdpWm5KbGNWd2lPakl3TURJdU5UZzNPRGt4TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFExTGpFek56UXdOWDFkZlN4N1hDSmhkV1JwYjBacGJHVmNJanBjSW5OcGNtVnVRbWx5WkhNdWJYQXpYQ0lzWENKemNHVmpkSEoxYlZ3aU9sdDdYQ0ptY21WeFhDSTZNamt3Tmk0NU9ESTBNaklzWENKdFlXZHVhWFIxWkdWY0lqb3RNak11TVRVMk5qSTBmU3g3WENKbWNtVnhYQ0k2TnpNeUxqRXlPRGt3Tml4Y0ltMWhaMjVwZEhWa1pWd2lPaTB5Tmk0Mk5EVTNNekY5TEh0Y0ltWnlaWEZjSWpvek1qSXVPVGs0TURRM0xGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJM0xqUXlNRGt3T0gwc2Uxd2labkpsY1Z3aU9qazJPQzQ1T1RReE5ERXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qY3VOVEUxTlRNMWZTeDdYQ0ptY21WeFhDSTZNVGN5TGpJMk5UWXlOU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHlOeTQyT0RBeU5qVjlMSHRjSW1aeVpYRmNJam94TWprdU1UazVNakU1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVEkzTGpjMU56ZzFNWDBzZTF3aVpuSmxjVndpT2pFNU16Y3VPVGc0TWpneExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJNUxqQTBORGcwZlN4N1hDSm1jbVZ4WENJNk9EZ3lMamcyTVRNeU9DeGNJbTFoWjI1cGRIVmtaVndpT2kweU9TNDFPREExZlN4N1hDSm1jbVZ4WENJNk5qQXlMamt5T1RZNE9DeGNJbTFoWjI1cGRIVmtaVndpT2kweU9TNDRORFEyTWpSOUxIdGNJbVp5WlhGY0lqbzBOVEl1TVRrM01qWTJMRndpYldGbmJtbDBkV1JsWENJNkxUTXdMakl6TlRRM2ZTeDdYQ0ptY21WeFhDSTZOVE00TGpNek1EQTNPQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNQzQzTVRFek1EUjlMSHRjSW1aeVpYRmNJam94TURrNExqRTVNek0xT1N4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TVM0d05qVXlOamg5TEh0Y0ltWnlaWEZjSWpveE16RXpMalV5TlRNNU1TeGNJbTFoWjI1cGRIVmtaVndpT2kwek15NDVNak0xTlROOUxIdGNJbVp5WlhGY0lqb3lNVGsyTGpNNE5qY3hPU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNeTQ1TWpjd016SjlMSHRjSW1aeVpYRmNJam95TVRNeExqYzROekV3T1N4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TlM0eE9EZ3hObjBzZTF3aVpuSmxjVndpT2pJek1EUXVNRFV5TnpNMExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNMUxqSTNNRE16TW4xZGZTeDdYQ0poZFdScGIwWnBiR1ZjSWpwY0luTnViM2N1YlhBelhDSXNYQ0p6Y0dWamRISjFiVndpT2x0N1hDSm1jbVZ4WENJNk5qUXVOVGs1TmpBNUxGd2liV0ZuYm1sMGRXUmxYQ0k2TFRJNUxqWTNOekUyTm4wc2Uxd2labkpsY1Z3aU9qTTBOQzQxTXpFeU5TeGNJbTFoWjI1cGRIVmtaVndpT2kwME1DNHpORGMwT0RWOUxIdGNJbVp5WlhGY0lqbzJNREl1T1RJNU5qZzRMRndpYldGbmJtbDBkV1JsWENJNkxUUTBMakEwTURVMU9IMHNlMXdpWm5KbGNWd2lPalk0T1M0d05qSTFMRndpYldGbmJtbDBkV1JsWENJNkxUUTBMamc1TnpreE5YMHNlMXdpWm5KbGNWd2lPamt5TlM0NU1qYzNNelFzWENKdFlXZHVhWFIxWkdWY0lqb3RORGd1T0Rjd01UQTJmU3g3WENKbWNtVnhYQ0k2TVRJd05TNDROVGt6TnpVc1hDSnRZV2R1YVhSMVpHVmNJam90TkRrdU1EZzJNekU1ZlN4N1hDSm1jbVZ4WENJNk1UQTVPQzR4T1RNek5Ua3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UQXVPVGMyTURFemZTeDdYQ0ptY21WeFhDSTZNVEk1TVM0NU9USXhPRGdzWENKdFlXZHVhWFIxWkdWY0lqb3ROVEl1TWpJME1qTTJmU3g3WENKbWNtVnhYQ0k2TVRReU1TNHhPVEUwTURZc1hDSnRZV2R1YVhSMVpHVmNJam90TlRNdU16TXdOVEkwZlN4N1hDSm1jbVZ4WENJNk1UUTROUzQzT1RFd01UWXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UTXVORGMyTWpFMWZTeDdYQ0ptY21WeFhDSTZNVE0zT0M0eE1qVXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UTXVOakUxT0RNM2ZTeDdYQ0ptY21WeFhDSTZNVFl6Tmk0MU1qTTBNemdzWENKdFlXZHVhWFIxWkdWY0lqb3ROVFF1TlRnek9UazJmU3g3WENKbWNtVnhYQ0k2TVRjME5DNHhPRGswTlRNc1hDSnRZV2R1YVhSMVpHVmNJam90TlRVdU1qUXhNREExZlN4N1hDSm1jbVZ4WENJNk1UZ3dPQzQzT0Rrd05qSXNYQ0p0WVdkdWFYUjFaR1ZjSWpvdE5UVXVOekkyTVRFMmZTeDdYQ0ptY21WeFhDSTZNVGt6Tnk0NU9EZ3lPREVzWENKdFlXZHVhWFIxWkdWY0lqb3ROVGN1TmpZMU1qYzJmU3g3WENKbWNtVnhYQ0k2TWpBeU5DNHhNakV3T1RRc1hDSnRZV2R1YVhSMVpHVmNJam90TlRrdU1qVXlPREUxZlYxOUxIdGNJbUYxWkdsdlJtbHNaVndpT2x3aWQyRnNhMmx1WjBsdVUzUnlaV1YwTG0xd00xd2lMRndpYzNCbFkzUnlkVzFjSWpwYmUxd2labkpsY1Z3aU9qRXlPUzR4T1RreU1Ua3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE1qUXVPRGs1TkRjemZTeDdYQ0ptY21WeFhDSTZNalU0TGpNNU9EUXpPQ3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpNQzQ0TURBMk5qVjlMSHRjSW1aeVpYRmNJam95TVRVdU16TXlNRE14TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE14TGpBd016VTFNMzBzZTF3aVpuSmxjVndpT2pZMExqVTVPVFl3T1N4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6TWk0M05EWTJNeko5TEh0Y0ltWnlaWEZjSWpvNU1EUXVNemswTlRNeExGd2liV0ZuYm1sMGRXUmxYQ0k2TFRNMUxqVTBOVFV6Tm4wc2Uxd2labkpsY1Z3aU9qWXdNaTQ1TWprMk9EZ3NYQ0p0WVdkdWFYUjFaR1ZjSWpvdE16VXVOelUxTkRrM2ZTeDdYQ0ptY21WeFhDSTZNelkyTGpBMk5EUTFNeXhjSW0xaFoyNXBkSFZrWlZ3aU9pMHpOUzQ1TURjeE16RjlMSHRjSW1aeVpYRmNJam80TXprdU56azBPVEl5TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVE0yTGpFME5qQXdOSDBzZTF3aVpuSmxjVndpT2pRMU1pNHhPVGN5TmpZc1hDSnRZV2R1YVhSMVpHVmNJam90TXpZdU1UYzBNelkyZlN4N1hDSm1jbVZ4WENJNk5qZzVMakEyTWpVc1hDSnRZV2R1YVhSMVpHVmNJam90TXpZdU56azJOVE01ZlN4N1hDSm1jbVZ4WENJNk9UWTRMams1TkRFME1TeGNJbTFoWjI1cGRIVmtaVndpT2kwek55NHpOVEl6TkRWOUxIdGNJbVp5WlhGY0lqb3hNRGs0TGpFNU16TTFPU3hjSW0xaFoyNXBkSFZrWlZ3aU9pMHpPQzR4TXpBeE9EUjlMSHRjSW1aeVpYRmNJam94TVRnMExqTXlOakUzTWl4Y0ltMWhaMjVwZEhWa1pWd2lPaTB6T0M0eU1qSTROemg5TEh0Y0ltWnlaWEZjSWpveE1UUXhMakkxT1RjMk5peGNJbTFoWjI1cGRIVmtaVndpT2kwek9DNHlPRE0yTWpkOUxIdGNJbVp5WlhGY0lqb3hNems1TGpZMU9ESXdNeXhjSW0xaFoyNXBkSFZrWlZ3aU9pMDBNUzR4TnpBd09YMHNlMXdpWm5KbGNWd2lPakUzT0RjdU1qVTFPRFU1TEZ3aWJXRm5ibWwwZFdSbFhDSTZMVFF6TGpZMU1EUTRObjFkZlYxY2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMM055WXk5emNHVmpkSEpoYkVSaGRHRXVhbk52Ymx4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRGY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vYnVpbGQvd25zLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=