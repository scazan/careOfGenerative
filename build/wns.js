!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("WNS",[],t):"object"==typeof exports?exports.WNS=t():e.WNS=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){(function(n){var r;
/*!
 *  howler.js v2.0.15
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/*!
 *  howler.js v2.0.15
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
!function(){"use strict";var i=function(){this.init()};i.prototype={init:function(){var e=this||o;return e._counter=1e3,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.mobileAutoEnable=!0,e._setup(),e},volume:function(e){var t=this||o;if(e=parseFloat(e),t.ctx||_(),void 0!==e&&e>=0&&e<=1){if(t._volume=e,t._muted)return t;t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e,o.ctx.currentTime);for(var n=0;n<t._howls.length;n++)if(!t._howls[n]._webAudio)for(var r=t._howls[n]._getSoundIds(),i=0;i<r.length;i++){var a=t._howls[n]._soundById(r[i]);a&&a._node&&(a._node.volume=a._volume*e)}return t}return t._volume},mute:function(e){var t=this||o;t.ctx||_(),t._muted=e,t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e?0:t._volume,o.ctx.currentTime);for(var n=0;n<t._howls.length;n++)if(!t._howls[n]._webAudio)for(var r=t._howls[n]._getSoundIds(),i=0;i<r.length;i++){var a=t._howls[n]._soundById(r[i]);a&&a._node&&(a._node.muted=!!e||a._muted)}return t},unload:function(){for(var e=this||o,t=e._howls.length-1;t>=0;t--)e._howls[t].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||o)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||o;if(e.state=e.ctx&&e.ctx.state||"running",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{void 0===(new Audio).oncanplaythrough&&(e._canPlayEvent="canplay")}catch(t){e.noAudio=!0}else e.noAudio=!0;try{(new Audio).muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||o,t=null;try{t="undefined"!=typeof Audio?new Audio:null}catch(t){return e}if(!t||"function"!=typeof t.canPlayType)return e;var n=t.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),i=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(i||!n&&!t.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!n,opus:!!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!t.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!t.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(t.canPlayType("audio/x-mp4;")||t.canPlayType("audio/mp4;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(t.canPlayType("audio/x-flac;")||t.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_enableMobileAudio:function(){var e=this||o,t=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome/i.test(e._navigator&&e._navigator.userAgent);if(!e._mobileEnabled&&e.ctx&&t){e._mobileEnabled=!1,e.mobileAutoEnable=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var n=function(t){o._autoResume();var r=e.ctx.createBufferSource();r.buffer=e._scratchBuffer,r.connect(e.ctx.destination),void 0===r.start?r.noteOn(0):r.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),r.onended=function(){r.disconnect(0),e._mobileEnabled=!0,document.removeEventListener("touchstart",n,!0),document.removeEventListener("touchend",n,!0),document.removeEventListener("click",n,!0);for(var t=0;t<e._howls.length;t++)e._howls[t]._emit("unlock")}};return document.addEventListener("touchstart",n,!0),document.addEventListener("touchend",n,!0),document.addEventListener("click",n,!0),e}},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&o.usingWebAudio){for(var t=0;t<e._howls.length;t++)if(e._howls[t]._webAudio)for(var n=0;n<e._howls[t]._sounds.length;n++)if(!e._howls[t]._sounds[n]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&o.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var t=0;t<e._howls.length;t++)e._howls[t]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var o=new i,a=function(e){e.src&&0!==e.src.length?this.init(e):console.error("An array of source files must be passed with any new Howl.")};a.prototype={init:function(e){var t=this;return o.ctx||_(),t._autoplay=e.autoplay||!1,t._format="string"!=typeof e.format?e.format:[e.format],t._html5=e.html5||!1,t._muted=e.mute||!1,t._loop=e.loop||!1,t._pool=e.pool||5,t._preload="boolean"!=typeof e.preload||e.preload,t._rate=e.rate||1,t._sprite=e.sprite||{},t._src="string"!=typeof e.src?e.src:[e.src],t._volume=void 0!==e.volume?e.volume:1,t._xhrWithCredentials=e.xhrWithCredentials||!1,t._duration=0,t._state="unloaded",t._sounds=[],t._endTimers={},t._queue=[],t._playLock=!1,t._onend=e.onend?[{fn:e.onend}]:[],t._onfade=e.onfade?[{fn:e.onfade}]:[],t._onload=e.onload?[{fn:e.onload}]:[],t._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],t._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],t._onpause=e.onpause?[{fn:e.onpause}]:[],t._onplay=e.onplay?[{fn:e.onplay}]:[],t._onstop=e.onstop?[{fn:e.onstop}]:[],t._onmute=e.onmute?[{fn:e.onmute}]:[],t._onvolume=e.onvolume?[{fn:e.onvolume}]:[],t._onrate=e.onrate?[{fn:e.onrate}]:[],t._onseek=e.onseek?[{fn:e.onseek}]:[],t._onunlock=e.onunlock?[{fn:e.onunlock}]:[],t._onresume=[],t._webAudio=o.usingWebAudio&&!t._html5,void 0!==o.ctx&&o.ctx&&o.mobileAutoEnable&&o._enableMobileAudio(),o._howls.push(t),t._autoplay&&t._queue.push({event:"play",action:function(){t.play()}}),t._preload&&t.load(),t},load:function(){var e=null;if(o.noAudio)this._emit("loaderror",null,"No audio support.");else{"string"==typeof this._src&&(this._src=[this._src]);for(var t=0;t<this._src.length;t++){var n,r;if(this._format&&this._format[t])n=this._format[t];else{if("string"!=typeof(r=this._src[t])){this._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}(n=/^data:audio\/([^;,]+);/i.exec(r))||(n=/\.([^.]+)$/.exec(r.split("?",1)[0])),n&&(n=n[1].toLowerCase())}if(n||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),n&&o.codecs(n)){e=this._src[t];break}}if(e)return this._src=e,this._state="loading","https:"===window.location.protocol&&"http:"===e.slice(0,5)&&(this._html5=!0,this._webAudio=!1),new s(this),this._webAudio&&d(this),this;this._emit("loaderror",null,"No codec support for selected audio sources.")}},play:function(e,t){var n=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===n._state&&!n._sprite[e])return null;if(void 0===e){e="__default";for(var i=0,a=0;a<n._sounds.length;a++)n._sounds[a]._paused&&!n._sounds[a]._ended&&(i++,r=n._sounds[a]._id);1===i?e=null:r=null}}var s=r?n._soundById(r):n._inactiveSound();if(!s)return null;if(r&&!e&&(e=s._sprite||"__default"),"loaded"!==n._state){s._sprite=e,s._ended=!1;var u=s._id;return n._queue.push({event:"play",action:function(){n.play(u)}}),u}if(r&&!s._paused)return t||n._loadQueue("play"),s._id;n._webAudio&&o._autoResume();var d=Math.max(0,s._seek>0?s._seek:n._sprite[e][0]/1e3),l=Math.max(0,(n._sprite[e][0]+n._sprite[e][1])/1e3-d),c=1e3*l/Math.abs(s._rate);if(s._paused=!1,s._ended=!1,s._sprite=e,s._seek=d,s._start=n._sprite[e][0]/1e3,s._stop=(n._sprite[e][0]+n._sprite[e][1])/1e3,s._loop=!(!s._loop&&!n._sprite[e][2]),!(s._seek>=s._stop)){var f=s._node;if(n._webAudio){var _=function(){n._refreshBuffer(s);var e=s._muted||n._muted?0:s._volume;f.gain.setValueAtTime(e,o.ctx.currentTime),s._playStart=o.ctx.currentTime,void 0===f.bufferSource.start?s._loop?f.bufferSource.noteGrainOn(0,d,86400):f.bufferSource.noteGrainOn(0,d,l):s._loop?f.bufferSource.start(0,d,86400):f.bufferSource.start(0,d,l),c!==1/0&&(n._endTimers[s._id]=setTimeout(n._ended.bind(n,s),c)),t||setTimeout(function(){n._emit("play",s._id)},0)};"running"===o.state?_():(n.once("resume",_),n._clearTimer(s._id))}else{var p=function(){f.currentTime=d,f.muted=s._muted||n._muted||o._muted||f.muted,f.volume=s._volume*o.volume(),f.playbackRate=s._rate;try{var r=f.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(n._playLock=!0,r.then(function(){n._playLock=!1,t||n._emit("play",s._id)}).catch(function(){n._playLock=!1,n._emit("playerror",s._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.")})):t||n._emit("play",s._id),f.playbackRate=s._rate,f.paused)return void n._emit("playerror",s._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||s._loop?n._endTimers[s._id]=setTimeout(n._ended.bind(n,s),c):(n._endTimers[s._id]=function(){n._ended(s),f.removeEventListener("ended",n._endTimers[s._id],!1)},f.addEventListener("ended",n._endTimers[s._id],!1))}catch(e){n._emit("playerror",s._id,e)}},m=window&&window.ejecta||!f.readyState&&o._navigator.isCocoonJS;if(f.readyState>=3||m)p();else{var h=function(){p(),f.removeEventListener(o._canPlayEvent,h,!1)};f.addEventListener(o._canPlayEvent,h,!1),n._clearTimer(s._id)}}return s._id}n._ended(s)},pause:function(e){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"pause",action:function(){t.pause(e)}}),t;for(var n=t._getSoundIds(e),r=0;r<n.length;r++){t._clearTimer(n[r]);var i=t._soundById(n[r]);if(i&&!i._paused&&(i._seek=t.seek(n[r]),i._rateSeek=0,i._paused=!0,t._stopFade(n[r]),i._node))if(t._webAudio){if(!i._node.bufferSource)continue;void 0===i._node.bufferSource.stop?i._node.bufferSource.noteOff(0):i._node.bufferSource.stop(0),t._cleanBuffer(i._node)}else isNaN(i._node.duration)&&i._node.duration!==1/0||i._node.pause();arguments[1]||t._emit("pause",i?i._id:null)}return t},stop:function(e,t){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"stop",action:function(){n.stop(e)}}),n;for(var r=n._getSoundIds(e),i=0;i<r.length;i++){n._clearTimer(r[i]);var o=n._soundById(r[i]);o&&(o._seek=o._start||0,o._rateSeek=0,o._paused=!0,o._ended=!0,n._stopFade(r[i]),o._node&&(n._webAudio?o._node.bufferSource&&(void 0===o._node.bufferSource.stop?o._node.bufferSource.noteOff(0):o._node.bufferSource.stop(0),n._cleanBuffer(o._node)):isNaN(o._node.duration)&&o._node.duration!==1/0||(o._node.currentTime=o._start||0,o._node.pause())),t||n._emit("stop",o._id))}return n},mute:function(e,t){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"mute",action:function(){n.mute(e,t)}}),n;if(void 0===t){if("boolean"!=typeof e)return n._muted;n._muted=e}for(var r=n._getSoundIds(t),i=0;i<r.length;i++){var a=n._soundById(r[i]);a&&(a._muted=e,a._interval&&n._stopFade(a._id),n._webAudio&&a._node?a._node.gain.setValueAtTime(e?0:a._volume,o.ctx.currentTime):a._node&&(a._node.muted=!!o._muted||e),n._emit("mute",a._id))}return n},volume:function(){var e,t,n,r=this,i=arguments;if(0===i.length)return r._volume;if(1===i.length||2===i.length&&void 0===i[1]?r._getSoundIds().indexOf(i[0])>=0?t=parseInt(i[0],10):e=parseFloat(i[0]):i.length>=2&&(e=parseFloat(i[0]),t=parseInt(i[1],10)),!(void 0!==e&&e>=0&&e<=1))return(n=t?r._soundById(t):r._sounds[0])?n._volume:0;if("loaded"!==r._state||r._playLock)return r._queue.push({event:"volume",action:function(){r.volume.apply(r,i)}}),r;void 0===t&&(r._volume=e),t=r._getSoundIds(t);for(var a=0;a<t.length;a++)(n=r._soundById(t[a]))&&(n._volume=e,i[2]||r._stopFade(t[a]),r._webAudio&&n._node&&!n._muted?n._node.gain.setValueAtTime(e,o.ctx.currentTime):n._node&&!n._muted&&(n._node.volume=e*o.volume()),r._emit("volume",n._id));return r},fade:function(e,t,n,r){var i=this;if("loaded"!==i._state||i._playLock)return i._queue.push({event:"fade",action:function(){i.fade(e,t,n,r)}}),i;i.volume(e,r);for(var a=i._getSoundIds(r),s=0;s<a.length;s++){var u=i._soundById(a[s]);if(u){if(r||i._stopFade(a[s]),i._webAudio&&!u._muted){var d=o.ctx.currentTime,l=d+n/1e3;u._volume=e,u._node.gain.setValueAtTime(e,d),u._node.gain.linearRampToValueAtTime(t,l)}i._startFadeInterval(u,e,t,n,a[s],void 0===r)}}return i},_startFadeInterval:function(e,t,n,r,i,o){var a=this,s=t,u=n-t,d=Math.abs(u/.01),l=Math.max(4,d>0?r/d:r),c=Date.now();e._fadeTo=n,e._interval=setInterval(function(){var i=(Date.now()-c)/r;c=Date.now(),s+=u*i,s=Math.max(0,s),s=Math.min(1,s),s=Math.round(100*s)/100,a._webAudio?e._volume=s:a.volume(s,e._id,!0),o&&(a._volume=s),(n<t&&s<=n||n>t&&s>=n)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,a.volume(n,e._id),a._emit("fade",e._id))},l)},_stopFade:function(e){var t=this._soundById(e);return t&&t._interval&&(this._webAudio&&t._node.gain.cancelScheduledValues(o.ctx.currentTime),clearInterval(t._interval),t._interval=null,this.volume(t._fadeTo,e),t._fadeTo=null,this._emit("fade",e)),this},loop:function(){var e,t,n,r=arguments;if(0===r.length)return this._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(n=this._soundById(parseInt(r[0],10)))&&n._loop;e=r[0],this._loop=e}else 2===r.length&&(e=r[0],t=parseInt(r[1],10));for(var i=this._getSoundIds(t),o=0;o<i.length;o++)(n=this._soundById(i[o]))&&(n._loop=e,this._webAudio&&n._node&&n._node.bufferSource&&(n._node.bufferSource.loop=e,e&&(n._node.bufferSource.loopStart=n._start||0,n._node.bufferSource.loopEnd=n._stop)));return this},rate:function(){var e,t,n,r=this,i=arguments;if(0===i.length)t=r._sounds[0]._id;else if(1===i.length){r._getSoundIds().indexOf(i[0])>=0?t=parseInt(i[0],10):e=parseFloat(i[0])}else 2===i.length&&(e=parseFloat(i[0]),t=parseInt(i[1],10));if("number"!=typeof e)return(n=r._soundById(t))?n._rate:r._rate;if("loaded"!==r._state||r._playLock)return r._queue.push({event:"rate",action:function(){r.rate.apply(r,i)}}),r;void 0===t&&(r._rate=e),t=r._getSoundIds(t);for(var a=0;a<t.length;a++)if(n=r._soundById(t[a])){n._rateSeek=r.seek(t[a]),n._playStart=r._webAudio?o.ctx.currentTime:n._playStart,n._rate=e,r._webAudio&&n._node&&n._node.bufferSource?n._node.bufferSource.playbackRate.setValueAtTime(e,o.ctx.currentTime):n._node&&(n._node.playbackRate=e);var s=r.seek(t[a]),u=1e3*((r._sprite[n._sprite][0]+r._sprite[n._sprite][1])/1e3-s)/Math.abs(n._rate);!r._endTimers[t[a]]&&n._paused||(r._clearTimer(t[a]),r._endTimers[t[a]]=setTimeout(r._ended.bind(r,n),u)),r._emit("rate",n._id)}return r},seek:function(){var e,t,n=this,r=arguments;if(0===r.length)t=n._sounds[0]._id;else if(1===r.length){n._getSoundIds().indexOf(r[0])>=0?t=parseInt(r[0],10):n._sounds.length&&(t=n._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),t=parseInt(r[1],10));if(void 0===t)return n;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"seek",action:function(){n.seek.apply(n,r)}}),n;var i=n._soundById(t);if(i){if(!("number"==typeof e&&e>=0)){if(n._webAudio){var a=n.playing(t)?o.ctx.currentTime-i._playStart:0,s=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(s+a*Math.abs(i._rate))}return i._node.currentTime}var u=n.playing(t);u&&n.pause(t,!0),i._seek=e,i._ended=!1,n._clearTimer(t),!n._webAudio&&i._node&&(i._node.currentTime=e);var d=function(){n._emit("seek",t),u&&n.play(t,!0)};if(u&&!n._webAudio){var l=function(){n._playLock?setTimeout(l,0):d()};setTimeout(l,0)}else d()}return n},playing:function(e){if("number"==typeof e){var t=this._soundById(e);return!!t&&!t._paused}for(var n=0;n<this._sounds.length;n++)if(!this._sounds[n]._paused)return!0;return!1},duration:function(e){var t=this._duration,n=this._soundById(e);return n&&(t=this._sprite[n._sprite][1]/1e3),t},state:function(){return this._state},unload:function(){for(var e=this,t=e._sounds,n=0;n<t.length;n++){if(t[n]._paused||e.stop(t[n]._id),!e._webAudio)/MSIE |Trident\//.test(o._navigator&&o._navigator.userAgent)||(t[n]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),t[n]._node.removeEventListener("error",t[n]._errorFn,!1),t[n]._node.removeEventListener(o._canPlayEvent,t[n]._loadFn,!1);delete t[n]._node,e._clearTimer(t[n]._id)}var r=o._howls.indexOf(e);r>=0&&o._howls.splice(r,1);var i=!0;for(n=0;n<o._howls.length;n++)if(o._howls[n]._src===e._src){i=!1;break}return u&&i&&delete u[e._src],o.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,t,n,r){var i=this["_on"+e];return"function"==typeof t&&i.push(r?{id:n,fn:t,once:r}:{id:n,fn:t}),this},off:function(e,t,n){var r=this["_on"+e],i=0;if("number"==typeof t&&(n=t,t=null),t||n)for(i=0;i<r.length;i++){var o=n===r[i].id;if(t===r[i].fn&&o||!t&&o){r.splice(i,1);break}}else if(e)this["_on"+e]=[];else{var a=Object.keys(this);for(i=0;i<a.length;i++)0===a[i].indexOf("_on")&&Array.isArray(this[a[i]])&&(this[a[i]]=[])}return this},once:function(e,t,n){return this.on(e,t,n,1),this},_emit:function(e,t,n){for(var r=this["_on"+e],i=r.length-1;i>=0;i--)r[i].id&&r[i].id!==t&&"load"!==e||(setTimeout(function(e){e.call(this,t,n)}.bind(this,r[i].fn),0),r[i].once&&this.off(e,r[i].fn,r[i].id));return this._loadQueue(e),this},_loadQueue:function(e){if(this._queue.length>0){var t=this._queue[0];t.event===e&&(this._queue.shift(),this._loadQueue()),e||t.action()}return this},_ended:function(e){var t=e._sprite;if(!this._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(this._ended.bind(this,e),100),this;var n=!(!e._loop&&!this._sprite[t][2]);if(this._emit("end",e._id),!this._webAudio&&n&&this.stop(e._id,!0).play(e._id),this._webAudio&&n){this._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=o.ctx.currentTime;var r=1e3*(e._stop-e._start)/Math.abs(e._rate);this._endTimers[e._id]=setTimeout(this._ended.bind(this,e),r)}return this._webAudio&&!n&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,this._clearTimer(e._id),this._cleanBuffer(e._node),o._autoSuspend()),this._webAudio||n||this.stop(e._id,!0),this},_clearTimer:function(e){if(this._endTimers[e]){if("function"!=typeof this._endTimers[e])clearTimeout(this._endTimers[e]);else{var t=this._soundById(e);t&&t._node&&t._node.removeEventListener("ended",this._endTimers[e],!1)}delete this._endTimers[e]}return this},_soundById:function(e){for(var t=0;t<this._sounds.length;t++)if(e===this._sounds[t]._id)return this._sounds[t];return null},_inactiveSound:function(){this._drain();for(var e=0;e<this._sounds.length;e++)if(this._sounds[e]._ended)return this._sounds[e].reset();return new s(this)},_drain:function(){var e=this._pool,t=0,n=0;if(!(this._sounds.length<e)){for(n=0;n<this._sounds.length;n++)this._sounds[n]._ended&&t++;for(n=this._sounds.length-1;n>=0;n--){if(t<=e)return;this._sounds[n]._ended&&(this._webAudio&&this._sounds[n]._node&&this._sounds[n]._node.disconnect(0),this._sounds.splice(n,1),t--)}}},_getSoundIds:function(e){if(void 0===e){for(var t=[],n=0;n<this._sounds.length;n++)t.push(this._sounds[n]._id);return t}return[e]},_refreshBuffer:function(e){return e._node.bufferSource=o.ctx.createBufferSource(),e._node.bufferSource.buffer=u[this._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,o.ctx.currentTime),this},_cleanBuffer:function(e){if(o._scratchBuffer&&e.bufferSource){e.bufferSource.onended=null,e.bufferSource.disconnect(0);try{e.bufferSource.buffer=o._scratchBuffer}catch(e){}}return e.bufferSource=null,this}};var s=function(e){this._parent=e,this.init()};s.prototype={init:function(){var e=this._parent;return this._muted=e._muted,this._loop=e._loop,this._volume=e._volume,this._rate=e._rate,this._seek=0,this._paused=!0,this._ended=!0,this._sprite="__default",this._id=++o._counter,e._sounds.push(this),this.create(),this},create:function(){var e=this._parent,t=o._muted||this._muted||this._parent._muted?0:this._volume;return e._webAudio?(this._node=void 0===o.ctx.createGain?o.ctx.createGainNode():o.ctx.createGain(),this._node.gain.setValueAtTime(t,o.ctx.currentTime),this._node.paused=!0,this._node.connect(o.masterGain)):(this._node=new Audio,this._errorFn=this._errorListener.bind(this),this._node.addEventListener("error",this._errorFn,!1),this._loadFn=this._loadListener.bind(this),this._node.addEventListener(o._canPlayEvent,this._loadFn,!1),this._node.src=e._src,this._node.preload="auto",this._node.volume=t*o.volume(),this._node.load()),this},reset:function(){var e=this._parent;return this._muted=e._muted,this._loop=e._loop,this._volume=e._volume,this._rate=e._rate,this._seek=0,this._rateSeek=0,this._paused=!0,this._ended=!0,this._sprite="__default",this._id=++o._counter,this},_errorListener:function(){this._parent._emit("loaderror",this._id,this._node.error?this._node.error.code:0),this._node.removeEventListener("error",this._errorFn,!1)},_loadListener:function(){var e=this._parent;e._duration=Math.ceil(10*this._node.duration)/10,0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue()),this._node.removeEventListener(o._canPlayEvent,this._loadFn,!1)}};var u={},d=function(e){var t=e._src;if(u[t])return e._duration=u[t].duration,void f(e);if(/^data:[^;]+;base64,/.test(t)){for(var n=atob(t.split(",")[1]),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);c(r.buffer,e)}else{var o=new XMLHttpRequest;o.open("GET",t,!0),o.withCredentials=e._xhrWithCredentials,o.responseType="arraybuffer",o.onload=function(){var t=(o.status+"")[0];"0"===t||"2"===t||"3"===t?c(o.response,e):e._emit("loaderror",null,"Failed loading audio file with status: "+o.status+".")},o.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete u[t],e.load())},l(o)}},l=function(e){try{e.send()}catch(t){e.onerror()}},c=function(e,t){var n=function(){t._emit("loaderror",null,"Decoding audio data failed.")},r=function(e){e&&t._sounds.length>0?(u[t._src]=e,f(t,e)):n()};"undefined"!=typeof Promise&&1===o.ctx.decodeAudioData.length?o.ctx.decodeAudioData(e).then(r).catch(n):o.ctx.decodeAudioData(e,r,n)},f=function(e,t){t&&!e._duration&&(e._duration=t.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){try{"undefined"!=typeof AudioContext?o.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?o.ctx=new webkitAudioContext:o.usingWebAudio=!1}catch(e){o.usingWebAudio=!1}var e=/iP(hone|od|ad)/.test(o._navigator&&o._navigator.platform),t=o._navigator&&o._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),n=t?parseInt(t[1],10):null;if(e&&n&&n<9){var r=/safari/.test(o._navigator&&o._navigator.userAgent.toLowerCase());(o._navigator&&o._navigator.standalone&&!r||o._navigator&&!o._navigator.standalone&&!r)&&(o.usingWebAudio=!1)}o.usingWebAudio&&(o.masterGain=void 0===o.ctx.createGain?o.ctx.createGainNode():o.ctx.createGain(),o.masterGain.gain.setValueAtTime(o._muted?0:1,o.ctx.currentTime),o.masterGain.connect(o.ctx.destination)),o._setup()};void 0===(r=function(){return{Howler:o,Howl:a}}.apply(t,[]))||(e.exports=r),t.Howler=o,t.Howl=a,"undefined"!=typeof window?(window.HowlerGlobal=i,window.Howler=o,window.Howl=a,window.Sound=s):void 0!==n&&(n.HowlerGlobal=i,n.Howler=o,n.Howl=a,n.Sound=s)}(),
/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.0.15
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){if(!this.ctx||!this.ctx.listener)return this;for(var t=this._howls.length-1;t>=0;t--)this._howls[t].stereo(e);return this},HowlerGlobal.prototype.pos=function(e,t,n){return this.ctx&&this.ctx.listener?(t="number"!=typeof t?this._pos[1]:t,n="number"!=typeof n?this._pos[2]:n,"number"!=typeof e?this._pos:(this._pos=[e,t,n],void 0!==this.ctx.listener.positionX?(this.ctx.listener.positionX.setTargetAtTime(this._pos[0],Howler.ctx.currentTime,.1),this.ctx.listener.positionY.setTargetAtTime(this._pos[1],Howler.ctx.currentTime,.1),this.ctx.listener.positionZ.setTargetAtTime(this._pos[2],Howler.ctx.currentTime,.1)):this.ctx.listener.setPosition(this._pos[0],this._pos[1],this._pos[2]),this)):this},HowlerGlobal.prototype.orientation=function(e,t,n,r,i,o){if(!this.ctx||!this.ctx.listener)return this;var a=this._orientation;return t="number"!=typeof t?a[1]:t,n="number"!=typeof n?a[2]:n,r="number"!=typeof r?a[3]:r,i="number"!=typeof i?a[4]:i,o="number"!=typeof o?a[5]:o,"number"!=typeof e?a:(this._orientation=[e,t,n,r,i,o],void 0!==this.ctx.listener.forwardX?(this.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),this.ctx.listener.forwardY.setTargetAtTime(t,Howler.ctx.currentTime,.1),this.ctx.listener.forwardZ.setTargetAtTime(n,Howler.ctx.currentTime,.1),this.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),this.ctx.listener.upY.setTargetAtTime(t,Howler.ctx.currentTime,.1),this.ctx.listener.upZ.setTargetAtTime(n,Howler.ctx.currentTime,.1)):this.ctx.listener.setOrientation(e,t,n,r,i,o),this)},Howl.prototype.init=function(e){return function(t){return this._orientation=t.orientation||[1,0,0],this._stereo=t.stereo||null,this._pos=t.pos||null,this._pannerAttr={coneInnerAngle:void 0!==t.coneInnerAngle?t.coneInnerAngle:360,coneOuterAngle:void 0!==t.coneOuterAngle?t.coneOuterAngle:360,coneOuterGain:void 0!==t.coneOuterGain?t.coneOuterGain:0,distanceModel:void 0!==t.distanceModel?t.distanceModel:"inverse",maxDistance:void 0!==t.maxDistance?t.maxDistance:1e4,panningModel:void 0!==t.panningModel?t.panningModel:"HRTF",refDistance:void 0!==t.refDistance?t.refDistance:1,rolloffFactor:void 0!==t.rolloffFactor?t.rolloffFactor:1},this._onstereo=t.onstereo?[{fn:t.onstereo}]:[],this._onpos=t.onpos?[{fn:t.onpos}]:[],this._onorientation=t.onorientation?[{fn:t.onorientation}]:[],e.call(this,t)}}(Howl.prototype.init),Howl.prototype.stereo=function(t,n){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(t,n)}}),r;var i=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===n){if("number"!=typeof t)return r._stereo;r._stereo=t,r._pos=[t,0,0]}for(var o=r._getSoundIds(n),a=0;a<o.length;a++){var s=r._soundById(o[a]);if(s){if("number"!=typeof t)return s._stereo;s._stereo=t,s._pos=[t,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,i),"spatial"===i?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(t,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(t,0,0):s._panner.pan.setValueAtTime(t,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(t,n,r,i){var o=this;if(!o._webAudio)return o;if("loaded"!==o._state)return o._queue.push({event:"pos",action:function(){o.pos(t,n,r,i)}}),o;if(n="number"!=typeof n?0:n,r="number"!=typeof r?-.5:r,void 0===i){if("number"!=typeof t)return o._pos;o._pos=[t,n,r]}for(var a=o._getSoundIds(i),s=0;s<a.length;s++){var u=o._soundById(a[s]);if(u){if("number"!=typeof t)return u._pos;u._pos=[t,n,r],u._node&&(u._panner&&!u._panner.pan||e(u,"spatial"),void 0!==u._panner.positionX?(u._panner.positionX.setValueAtTime(t,Howler.ctx.currentTime),u._panner.positionY.setValueAtTime(n,Howler.ctx.currentTime),u._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):u._panner.setOrientation(t,n,r)),o._emit("pos",u._id)}}return o},Howl.prototype.orientation=function(t,n,r,i){var o=this;if(!o._webAudio)return o;if("loaded"!==o._state)return o._queue.push({event:"orientation",action:function(){o.orientation(t,n,r,i)}}),o;if(n="number"!=typeof n?o._orientation[1]:n,r="number"!=typeof r?o._orientation[2]:r,void 0===i){if("number"!=typeof t)return o._orientation;o._orientation=[t,n,r]}for(var a=o._getSoundIds(i),s=0;s<a.length;s++){var u=o._soundById(a[s]);if(u){if("number"!=typeof t)return u._orientation;u._orientation=[t,n,r],u._node&&(u._panner||(u._pos||(u._pos=o._pos||[0,0,-.5]),e(u,"spatial")),void 0!==u._panner.orientationX?(u._panner.orientationX.setValueAtTime(t,Howler.ctx.currentTime),u._panner.orientationY.setValueAtTime(n,Howler.ctx.currentTime),u._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):u._panner.setOrientation(t,n,r)),o._emit("orientation",u._id)}}return o},Howl.prototype.pannerAttr=function(){var t,n,r,i=arguments;if(!this._webAudio)return this;if(0===i.length)return this._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return(r=this._soundById(parseInt(i[0],10)))?r._pannerAttr:this._pannerAttr;t=i[0],void 0===n&&(t.pannerAttr||(t.pannerAttr={coneInnerAngle:t.coneInnerAngle,coneOuterAngle:t.coneOuterAngle,coneOuterGain:t.coneOuterGain,distanceModel:t.distanceModel,maxDistance:t.maxDistance,refDistance:t.refDistance,rolloffFactor:t.rolloffFactor,panningModel:t.panningModel}),this._pannerAttr={coneInnerAngle:void 0!==t.pannerAttr.coneInnerAngle?t.pannerAttr.coneInnerAngle:this._coneInnerAngle,coneOuterAngle:void 0!==t.pannerAttr.coneOuterAngle?t.pannerAttr.coneOuterAngle:this._coneOuterAngle,coneOuterGain:void 0!==t.pannerAttr.coneOuterGain?t.pannerAttr.coneOuterGain:this._coneOuterGain,distanceModel:void 0!==t.pannerAttr.distanceModel?t.pannerAttr.distanceModel:this._distanceModel,maxDistance:void 0!==t.pannerAttr.maxDistance?t.pannerAttr.maxDistance:this._maxDistance,refDistance:void 0!==t.pannerAttr.refDistance?t.pannerAttr.refDistance:this._refDistance,rolloffFactor:void 0!==t.pannerAttr.rolloffFactor?t.pannerAttr.rolloffFactor:this._rolloffFactor,panningModel:void 0!==t.pannerAttr.panningModel?t.pannerAttr.panningModel:this._panningModel})}else 2===i.length&&(t=i[0],n=parseInt(i[1],10));for(var o=this._getSoundIds(n),a=0;a<o.length;a++)if(r=this._soundById(o[a])){var s=r._pannerAttr;s={coneInnerAngle:void 0!==t.coneInnerAngle?t.coneInnerAngle:s.coneInnerAngle,coneOuterAngle:void 0!==t.coneOuterAngle?t.coneOuterAngle:s.coneOuterAngle,coneOuterGain:void 0!==t.coneOuterGain?t.coneOuterGain:s.coneOuterGain,distanceModel:void 0!==t.distanceModel?t.distanceModel:s.distanceModel,maxDistance:void 0!==t.maxDistance?t.maxDistance:s.maxDistance,refDistance:void 0!==t.refDistance?t.refDistance:s.refDistance,rolloffFactor:void 0!==t.rolloffFactor?t.rolloffFactor:s.rolloffFactor,panningModel:void 0!==t.panningModel?t.panningModel:s.panningModel};var u=r._panner;u?(u.coneInnerAngle=s.coneInnerAngle,u.coneOuterAngle=s.coneOuterAngle,u.coneOuterGain=s.coneOuterGain,u.distanceModel=s.distanceModel,u.maxDistance=s.maxDistance,u.refDistance=s.refDistance,u.rolloffFactor=s.rolloffFactor,u.panningModel=s.panningModel):(r._pos||(r._pos=this._pos||[0,0,-.5]),e(r,"spatial"))}return this},Sound.prototype.init=function(e){return function(){var t=this._parent;this._orientation=t._orientation,this._stereo=t._stereo,this._pos=t._pos,this._pannerAttr=t._pannerAttr,e.call(this),this._stereo?t.stereo(this._stereo):this._pos&&t.pos(this._pos[0],this._pos[1],this._pos[2],this._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var t=this._parent;return this._orientation=t._orientation,this._stereo=t._stereo,this._pos=t._pos,this._pannerAttr=t._pannerAttr,this._stereo?t.stereo(this._stereo):this._pos?t.pos(this._pos[0],this._pos[1],this._pos[2],this._id):this._panner&&(this._panner.disconnect(0),this._panner=void 0,t._refreshBuffer(this)),e.call(this)}}(Sound.prototype.reset);var e=function(e,t){"spatial"===(t=t||"spatial")?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}()}).call(this,n(3))},function(e){e.exports=[{audioFile:"bollnasBus.mp3",spectrum:[{freq:172.265625,magnitude:-17.399746},{freq:64.599609,magnitude:-21.96829},{freq:366.064453,magnitude:-32.528049},{freq:516.796875,magnitude:-38.542358},{freq:689.0625,magnitude:-39.038445},{freq:861.328125,magnitude:-39.638317},{freq:775.195312,magnitude:-39.66655},{freq:990.527344,magnitude:-40.016201},{freq:925.927734,magnitude:-40.517895},{freq:1098.193359,magnitude:-41.060593},{freq:1356.591797,magnitude:-41.274876},{freq:1270.458984,magnitude:-43.702244},{freq:1873.388672,magnitude:-44.169426},{freq:1528.857422,magnitude:-45.135281},{freq:1636.523438,magnitude:-45.653736},{freq:1744.189453,magnitude:-45.790058}]},{audioFile:"coop.mp3",spectrum:[{freq:86.132812,magnitude:-28.932537},{freq:236.865234,magnitude:-32.327995},{freq:452.197266,magnitude:-36.28949},{freq:344.53125,magnitude:-36.789261},{freq:559.863281,magnitude:-38.61684},{freq:732.128906,magnitude:-39.494778},{freq:796.728516,magnitude:-39.511993},{freq:1076.660156,magnitude:-48.423088},{freq:1184.326172,magnitude:-50.484188},{freq:1248.925781,magnitude:-50.664841},{freq:1464.257812,magnitude:-51.075733},{freq:1399.658203,magnitude:-51.329906},{freq:1658.056641,magnitude:-51.729897},{freq:1851.855469,magnitude:-53.016678},{freq:2110.253906,magnitude:-55.621365},{freq:2024.121094,magnitude:-57.550549}]},{audioFile:"counting1.mp3",spectrum:[{freq:193.798828,magnitude:-26.017561},{freq:409.130859,magnitude:-35.475403},{freq:602.929688,magnitude:-43.021927},{freq:796.728516,magnitude:-46.480598},{freq:7192.089844,magnitude:-52.308483},{freq:7235.15625,magnitude:-52.633369},{freq:8290.283203,magnitude:-52.669678},{freq:7105.957031,magnitude:-52.945122},{freq:6567.626953,magnitude:-52.98806},{freq:6503.027344,magnitude:-53.184967},{freq:6416.894531,magnitude:-53.473446},{freq:8182.617188,magnitude:-53.531357},{freq:5684.765625,magnitude:-53.602531},{freq:8139.550781,magnitude:-54.062778},{freq:6653.759766,magnitude:-54.157398},{freq:5577.099609,magnitude:-54.469383}]},{audioFile:"countingSvenska.mp3",spectrum:[{freq:215.332031,magnitude:-18.976727},{freq:430.664062,magnitude:-23.805183},{freq:473.730469,magnitude:-23.937403},{freq:667.529297,magnitude:-36.477356},{freq:9776.074219,magnitude:-46.779316},{freq:9883.740234,magnitude:-46.87299},{freq:9948.339844,magnitude:-47.843761},{freq:818.261719,magnitude:-47.975559},{freq:9108.544922,magnitude:-50.064014},{freq:8656.347656,magnitude:-50.149624},{freq:2002.587891,magnitude:-50.343147},{freq:9711.474609,magnitude:-50.482002},{freq:7385.888672,magnitude:-50.554905},{freq:9173.144531,magnitude:-50.921734},{freq:9646.875,magnitude:-51.072002},{freq:1765.722656,magnitude:-51.101601}]},{audioFile:"crosswalk.mp3",spectrum:[{freq:257.8125,magnitude:-37.666729},{freq:820.3125,magnitude:-41.777088},{freq:750,magnitude:-43.647976},{freq:539.0625,magnitude:-47.038448},{freq:1382.8125,magnitude:-47.713871},{freq:960.9375,magnitude:-47.815086},{freq:1453.125,magnitude:-49.521015},{freq:1218.75,magnitude:-49.886189},{freq:2906.25,magnitude:-50.243725},{freq:1289.0625,magnitude:-50.455692},{freq:2625,magnitude:-51.801075},{freq:1593.75,magnitude:-51.846096},{freq:3023.4375,magnitude:-52.134571},{freq:2039.0625,magnitude:-52.144482},{freq:2320.3125,magnitude:-52.657024},{freq:1921.875,magnitude:-53.338219}]},{audioFile:"emptyWordsNea.mp3",spectrum:[{freq:215.332031,magnitude:-19.520159},{freq:430.664062,magnitude:-25.219025},{freq:602.929688,magnitude:-31.175522},{freq:64.599609,magnitude:-35.193279},{freq:796.728516,magnitude:-39.868279},{freq:1787.255859,magnitude:-41.391182},{freq:882.861328,magnitude:-42.827045},{freq:1055.126953,magnitude:-45.009171},{freq:1679.589844,magnitude:-45.019444},{freq:1119.726562,magnitude:-45.374962},{freq:1571.923828,magnitude:-45.392387},{freq:1421.191406,magnitude:-46.156982},{freq:1270.458984,magnitude:-46.377228},{freq:1894.921875,magnitude:-46.470295},{freq:1485.791016,magnitude:-47.266369},{freq:8613.28125,magnitude:-47.489655}]},{audioFile:"flightLanding.mp3",spectrum:[{freq:150.732422,magnitude:-23.22921},{freq:322.998047,magnitude:-27.817633},{freq:86.132812,magnitude:-28.757832},{freq:882.861328,magnitude:-36.045925},{freq:452.197266,magnitude:-36.165146},{freq:516.796875,magnitude:-38.192909},{freq:645.996094,magnitude:-39.4725},{freq:1055.126953,magnitude:-40.918613},{freq:990.527344,magnitude:-40.968189},{freq:732.128906,magnitude:-41.37928},{freq:796.728516,magnitude:-41.518967},{freq:1485.791016,magnitude:-42.438782},{freq:1248.925781,magnitude:-44.283665},{freq:1765.722656,magnitude:-44.834751},{freq:1162.792969,magnitude:-45.961536},{freq:1356.591797,magnitude:-46.540531}]},{audioFile:"fromBerlin.mp3",spectrum:[{freq:129.199219,magnitude:-19.337328},{freq:172.265625,magnitude:-20.061157},{freq:236.865234,magnitude:-21.243382},{freq:366.064453,magnitude:-25.249617},{freq:409.130859,magnitude:-25.250202},{freq:322.998047,magnitude:-25.32493},{freq:473.730469,magnitude:-25.473864},{freq:645.996094,magnitude:-26.291237},{freq:602.929688,magnitude:-26.820797},{freq:968.994141,magnitude:-28.423075},{freq:796.728516,magnitude:-28.616865},{freq:904.394531,magnitude:-30.327291},{freq:1464.257812,magnitude:-32.71851},{freq:1184.326172,magnitude:-33.538372},{freq:1119.726562,magnitude:-33.638268},{freq:1270.458984,magnitude:-34.200172}]},{audioFile:"kitchen1.mp3",spectrum:[{freq:107.666016,magnitude:-23.018032},{freq:150.732422,magnitude:-23.063093},{freq:107.666016,magnitude:-23.683832},{freq:150.732422,magnitude:-23.870668},{freq:236.865234,magnitude:-27.578087},{freq:236.865234,magnitude:-28.458439},{freq:301.464844,magnitude:-28.528795},{freq:301.464844,magnitude:-29.146461},{freq:430.664062,magnitude:-31.122925},{freq:430.664062,magnitude:-31.620726},{freq:538.330078,magnitude:-32.279846},{freq:538.330078,magnitude:-32.766731},{freq:495.263672,magnitude:-32.782124},{freq:495.263672,magnitude:-32.833862},{freq:645.996094,magnitude:-33.121647},{freq:645.996094,magnitude:-33.218231}]},{audioFile:"pendelTag.mp3",spectrum:[{freq:236.865234,magnitude:-16.221592},{freq:64.599609,magnitude:-18.688091},{freq:409.130859,magnitude:-20.336178},{freq:559.863281,magnitude:-21.620527},{freq:624.462891,magnitude:-23.685429},{freq:861.328125,magnitude:-25.067635},{freq:925.927734,magnitude:-25.832678},{freq:1722.65625,magnitude:-27.109802},{freq:1873.388672,magnitude:-27.189735},{freq:1055.126953,magnitude:-29.507767},{freq:1248.925781,magnitude:-29.806211},{freq:1141.259766,magnitude:-30.065187},{freq:1313.525391,magnitude:-30.253767},{freq:1916.455078,magnitude:-30.367163},{freq:1421.191406,magnitude:-31.539719},{freq:1528.857422,magnitude:-31.722507}]},{audioFile:"pendelTag2.mp3",spectrum:[{freq:301.464844,magnitude:-28.588257},{freq:150.732422,magnitude:-29.29398},{freq:366.064453,magnitude:-31.429947},{freq:86.132812,magnitude:-31.997349},{freq:689.0625,magnitude:-32.262497},{freq:775.195312,magnitude:-33.855614},{freq:559.863281,magnitude:-34.162552},{freq:947.460938,magnitude:-35.370667},{freq:861.328125,magnitude:-36.640476},{freq:1076.660156,magnitude:-39.055378},{freq:1248.925781,magnitude:-40.740498},{freq:1313.525391,magnitude:-41.248177},{freq:1442.724609,magnitude:-43.415245},{freq:1550.390625,magnitude:-44.174026},{freq:1658.056641,magnitude:-44.426029},{freq:2002.587891,magnitude:-45.137405}]},{audioFile:"sirenBirds.mp3",spectrum:[{freq:2906.982422,magnitude:-23.156624},{freq:732.128906,magnitude:-26.645731},{freq:322.998047,magnitude:-27.420908},{freq:968.994141,magnitude:-27.515535},{freq:172.265625,magnitude:-27.680265},{freq:129.199219,magnitude:-27.757851},{freq:1937.988281,magnitude:-29.04484},{freq:882.861328,magnitude:-29.5805},{freq:602.929688,magnitude:-29.844624},{freq:452.197266,magnitude:-30.23547},{freq:538.330078,magnitude:-30.711304},{freq:1098.193359,magnitude:-31.065268},{freq:1313.525391,magnitude:-33.923553},{freq:2196.386719,magnitude:-33.927032},{freq:2131.787109,magnitude:-35.18816},{freq:2304.052734,magnitude:-35.270332}]},{audioFile:"snow.mp3",spectrum:[{freq:64.599609,magnitude:-29.677166},{freq:344.53125,magnitude:-40.347485},{freq:602.929688,magnitude:-44.040558},{freq:689.0625,magnitude:-44.897915},{freq:925.927734,magnitude:-48.870106},{freq:1205.859375,magnitude:-49.086319},{freq:1098.193359,magnitude:-50.976013},{freq:1291.992188,magnitude:-52.224236},{freq:1421.191406,magnitude:-53.330524},{freq:1485.791016,magnitude:-53.476215},{freq:1378.125,magnitude:-53.615837},{freq:1636.523438,magnitude:-54.583996},{freq:1744.189453,magnitude:-55.241005},{freq:1808.789062,magnitude:-55.726116},{freq:1937.988281,magnitude:-57.665276},{freq:2024.121094,magnitude:-59.252815}]},{audioFile:"walkingInStreet.mp3",spectrum:[{freq:129.199219,magnitude:-24.899473},{freq:258.398438,magnitude:-30.800665},{freq:215.332031,magnitude:-31.003553},{freq:64.599609,magnitude:-32.746632},{freq:904.394531,magnitude:-35.545536},{freq:602.929688,magnitude:-35.755497},{freq:366.064453,magnitude:-35.907131},{freq:839.794922,magnitude:-36.146004},{freq:452.197266,magnitude:-36.174366},{freq:689.0625,magnitude:-36.796539},{freq:968.994141,magnitude:-37.352345},{freq:1098.193359,magnitude:-38.130184},{freq:1184.326172,magnitude:-38.222878},{freq:1141.259766,magnitude:-38.283627},{freq:1399.658203,magnitude:-41.17009},{freq:1787.255859,magnitude:-43.650486}]}]},function(e,t,n){"undefined"!=typeof self&&self,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r=e=>{let t=e.reduce((e,t)=>e+t),n=Math.random()*t,r=0;for(let t=0;t<e.length;t++)if(n<=(r=+(r+=e[t]).toFixed(2)))return t},i=e=>{let t=e.reduce((e,t)=>e+t);return t>0?e.map(e=>e/t):e.map(()=>0)},o=(e,t)=>{var n=Object.getOwnPropertyNames(e),r=Object.getOwnPropertyNames(t);if(n.length!=r.length)return!1;for(var i=0;i<n.length;i++){var o=n[i];if(e[o]!==t[o])return!1}return!0},a=(e,t)=>(e%t+t)%t;n.d(t,"getAllTransitions",function(){return s}),n.d(t,"MarkovN",function(){return d});const s=(e,t)=>e.reduce((n,r,i)=>{const o=[];for(let n=t;n>=0;n--)o.push(e[a(i-n,e.length)]);return n.push(o),n},[]),u=(e,t)=>{const n=[...e];return n.shift(),n.push(t),n};class d{constructor(e,t){this.dictionary=[],this.combinations=[],this.lastState=[];for(let n=0;n<t;n++)this.lastState.push(e[n]);this.transitionMatrix=this.createTransitionMatrix(e,t)}createTransitionMatrix(e,t){this.dictionary=Array.from(new Set(e)),this.combinations=s(e,t);let n=[];for(let e=0;e<this.combinations.length;e++){let e=[];for(let t=0;t<this.dictionary.length;t++)e.push(0);n.push(e)}for(let r=0;r<e.length;r++){let i=[];for(let n=t;n>=0;n--)i.push(e[a(r-n,e.length)]);let s=this.combinations.findIndex(e=>o(i,e)),u=e[(r+1)%e.length],d=this.dictionary.indexOf(u);n[s][d]++}return n=n.map(i)}getNextState(e){const t=this.transitionMatrix[this.combinations.findIndex(t=>o(e,t))],n=r(t);return this.dictionary[n]}*asPattern(e){for(this.lastState=e;;){let e=this.getNextState(this.lastState);this.lastState=u(this.lastState,e),yield e}}}t.default=d}])},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);const r=e=>e[Math.floor(Math.random()*e.length)],i=(e,t)=>e/t,o=(e,t)=>t.reduce((t,n)=>{const r=t-e,i=n-e;return Math.abs(i)<Math.abs(r)?n:t},t[0]),a=(e,t)=>e.reduce((e,n)=>t(n)?n:e),s=(e,t)=>{const n=Math.min(...t)-Math.min(...e),r=Math.max(...t)-Math.min(...t),i=Math.max(...e)-Math.min(...e);return e.map(a=>o((a-Math.min(...e))/i*r+n,t))},u=(e=.5)=>!(Math.random()<e),d=e=>"function"==typeof e?e:()=>e,l=(e,t)=>(e%t+t)%t;const c=n(2).default,f=function(e,t,n){return new c(e,t).asPattern(n)},_=function*(e,t){let n=new class{constructor(e,t){this.population=e,this.scores=Array(e.length).fill(0),this.goal=t,this.lastState=e[Math.floor(Math.random()*(e.length-1))]}getTotalFitnessRating(e,t){let n=0,r=e.map(t=>t-Math.min.apply(null,e));for(let e=r.length-1;e>=0;e--)n+=this.getDistance(r[e],t[e]);return n}getTopTwoGenerations(e,t){let n=0;for(let t=e.length-1;t>=0;t--)e[n]<e[t]&&(n=t),e[n]===e[t]&&(n=Math.random()>.5?n:t);let r=0;const i=e[n];if(u(.25))r=Math.floor(Math.random()*e.length);else for(let t=e.length-1;t>=0;t--)e[t]!==i&&(e[r]<e[t]&&(r=t),e[r]===e[t])&&(r=Math.random()>.5?r:t);return[t[n],t[r]]}mateGenerations(e){return[this.getSplicedOffspring(e[0],e[1]),this.getInterlacedOffspring(e[0],e[1])]}getInterlacedOffspring(e,t){const n=Array(e.length);for(let r=n.length-1;r>=0;r--)n[r]=r%2==0?e[r]:t[r];return n}getSplicedOffspring(e,t){const n=0==(Math.random()>.5?1:0)?[e,t]:[t,e],r=Math.floor(e.length/2);return[...n[0].slice(0,r),...n[1].slice(r-1,n[1].length-1)]}getDistance(e,t){return t-e}getPopulationScores(e,t){let n=Array(e.length).fill(0);for(let r=e.length-1;r>=0;r--)n[r]=this.getTotalFitnessRating(e[r],t);return n}getNextGeneration(e,t){const n=this.getPopulationScores(e,t),r=this.getTopTwoGenerations(n,e),i=this.mateGenerations(r);for(let e=0;e<i.length-1;e++)this.population.splice(Math.floor(Math.random()*(this.population.length-1)),1);return this.population=[...this.population,...i],i[Math.floor(Math.random()*(.999*i.length))]}getNextState(e){return this.getNextGeneration(this.population,this.goal)}asPattern(){const e=this;return function*(t){for(e.lastState=t;;){const t=e.getNextState(e.lastState);e.lastState=t,yield t}}}}(e,t),r=t;for(;;){let e=n.getNextState(r);r=[r[r.length-1],e],yield e}};const p=e=>{for(var t,n="number"==typeof e?e:50,r=new Float32Array(44100),i=Math.PI/180,o=0;o<44100;++o)t=2*o/44100-1,r[o]=(3+n)*t*20*i/(Math.PI+n*Math.abs(t));return r};var m=class{constructor(e,t){this.context=e,this.config=t||{}}init(){const e=this.context,t=e.createOscillator();this.config.waveformType&&(t.type=this.config.waveformType);const n=e.createGain(),r=e.createStereoPanner(),i=e.createWaveShaper();i.curve=p(800),i.oversample="4x",t.connect(n),n.connect(r),r.connect(i),i.connect(e.destination),t.type=this.config.waveformType?this.config.waveformType:u()?"triangle":"sine",n.gain.value=0,this.synthNodes={oscillator:t,gainNode:n,waveShaper:i,panner:r}}play(e){const{freq:t=220,time:n=1,pan:r=0,vol:i=1}=e;this.init();const{oscillator:o,gainNode:a,waveShaper:s,panner:u}=this.synthNodes;let d=.01;o.frequency.value=t,e.distortion&&(s.curve=p(e.distortion)),t>200&&(d*=.12),t>6e3&&(d*=.08),u.pan.value=r,o.start(0),a.gain.setTargetAtTime(i*d*(.55-.01*Math.random()),this.context.currentTime,.85*n);var l=this;return window.setTimeout(function(){l.stop(.25*n)},1e3*(n-.25*n)),this}stop(e){const t=this.context,{oscillator:n,gainNode:r}=this.synthNodes;return r.gain.setTargetAtTime(0,t.currentTime,.9*e),n.stop(t.currentTime+4*e),this}};const h=e=>{for(var t,n="number"==typeof e?e:50,r=new Float32Array(44100),i=Math.PI/180,o=0;o<44100;++o)t=2*o/44100-1,r[o]=(3+n)*t*20*i/(Math.PI+n*Math.abs(t));return r},g=e=>{var t=0,n=e.createScriptProcessor(4096,1,1);return n.onaudioprocess=function(e){for(var n=e.outputBuffer.getChannelData(0),r=0;r<4096;r++){var i=2*Math.random()-1;n[r]=(t+.02*i)/1.02,t=n[r],n[r]*=3.5}},n};var v=n(0);var y=class{constructor(e,t){this.context=e,this.players=t.samples.map(e=>({player:new v.Howl({src:e.files}),baseFreq:e.freq}))}play(e){const{freq:t=220,time:n=1,pan:r=0,vol:o=1}=e;let a=1;const s=this.findClosestSamplePlayer(t),u=s.player.play();return s.player.loop(!1,u),s.player.rate(i(t,s.baseFreq),u),t>200&&(a*=.2),s.player.fade(0,a*o,200,u),s.player.stereo(r,u),window.setTimeout(function(){s.player.fade(a*o,0,200,u),this.stop(n,s,u)}.bind(this),1e3*n+200),this}stop(e,t,n){return window.setTimeout(function(){t.player.stop()}.bind(this),300),this}findClosestSamplePlayer(e){const t=o(e,this.players.map(e=>e.baseFreq));return a(this.players,e=>e===t)}},q=n(1);n.d(t,"WNS",function(){return A});const w={samplePath:"samples/"},A=e=>{e=e?Object.assign({},w,e):w;const t=q,n=new AudioContext,i=Array(16).fill(0).map(()=>new m(n)),o={samples:[{files:[e.samplePath+"pipeA.mp3"],freq:445},{files:[e.samplePath+"pipeE.mp3"],freq:666},{files:[e.samplePath+"piano2-324.mp3"],freq:324},{files:[e.samplePath+"piano3-814.mp3"],freq:814}]},a=Array(16).fill(0).map(()=>u()?new y(n,o):new m(n)),c=t.map(t=>new y(n,{samples:[{files:[e.samplePath+t.audioFile],freq:1}]})),p=new y(n,{samples:[{files:[e.samplePath+"lowDrone.mp3"],freq:1}]}),v=Array(2).fill(0).map(()=>new class{constructor(e,t){this.context=e,this.config=t||{}}init(){this.oscillator=g(this.context),this.gainNode=this.context.createGain(),this.panner=this.context.createStereoPanner(),this.filter=this.context.createBiquadFilter(),this.filter.type="peaking",this.filter2=this.context.createBiquadFilter(),this.filter2.type="bandpass",this.waveShaper=this.context.createWaveShaper(),this.waveShaper.curve=h(80),this.waveShaper.oversample="4x",this.oscillator.connect(this.waveShaper),this.waveShaper.connect(this.filter),this.filter.connect(this.filter2),this.filter2.connect(this.panner),this.panner.connect(this.gainNode),this.gainNode.connect(this.context.destination),this.gainNode.gain.value=0}play(e){const{freq:t=220,time:n=1,pan:r=0,vol:i=1}=e;this.init();let o=1;return this.filter.frequency.value=t,this.filter.Q.value=50.901,this.filter.gain.value=20,this.filter2.frequency.value=t,this.filter2.Q.value=15.901,this.filter2.gain.value=60,e.distortion&&(this.waveShaper.curve=h(e.distortion)),t>200&&(o*=.12),this.panner.pan.value=r,this.gainNode.gain.value=.001,this.gainNode.gain.exponentialRampToValueAtTime(i*o,this.context.currentTime+n),setTimeout(this.stop.bind(this),1e3*(n+1)),this}stop(){return this.gainNode.gain.setTargetAtTime(0,this.context.currentTime,.01),this}}(n)),A=()=>{v.forEach((e,t)=>{const n=.25*Math.random()+1;e.play({pan:2*t-1,freq:[2090,2393][t]*n,vol:7.8,time:45})}),setTimeout(S,57e3)};let b=0,T=!1,x=!1;const S=()=>{const e=u(.8),n=u(.85);if(e&&!T)return T=!0,A(),setTimeout(()=>{c.forEach(e=>e.stop(0,e.players[0])),i.forEach(e=>e.stop(0))},15e3),!1;n&&!x&&(x=!0,setTimeout(()=>{x=!1},33e4),p.play({freq:1,time:3e5,vol:1})),T=!1,b=((e,t)=>{const n=Array(t).fill(0).map((e,t)=>t).filter(t=>t!==e);return r(n)})(b,t.length);const o=t[b],m=Array(80).fill(o.spectrum.map(e=>e.freq)),h=(e=>e.reduce((e,t)=>e[0].magnitude<t.magnitude?[t]:e,[{freq:0,magnitude:-100}]).map(e=>e.freq).map(t=>Array(e.length).fill(0).map((e,n)=>{const r=t*(n+1);return r>7e3?r/Math.ceil(r/7e3):r}))[0])(o.spectrum),g={initialPopulation:m.map(e=>e.map(e=>Math.random()*(h[h.length-1]-h[0])+(h[0]-20))),populationSize:16,maxGenerations:2,target:h,timeBetweenEvents:()=>15*Math.random()+10,gapBetweenEvents:()=>r([25,10]),melodyOscillators:a,chordOscillators:i,onFinish:S};c[b].play({freq:1,time:18e4,vol:.28}),new class{constructor(e){this.config=e,this.config.timeBetweenEvents=d(this.config.timeBetweenEvents),this.config.gapBetweenEvents=d(this.config.gapBetweenEvents),this.notes=_(e.initialPopulation,e.target),this.config.maxGenerations=e.maxGenerations,this.currentGeneration=0,this.config.onFinish=e.onFinish}play(){const e=this.notes.next().value;let t=0,n=Math.random()>.5?0:1;return this.config.chordOscillators.map(r=>{const i=Math.ceil(5*Math.random());r.play({freq:e[t]/i,time:this.config.timeBetweenEvents(),pan:n%2*2-1,vol:.45}),t++,n++}),this.playMelody(e,this.currentGeneration),this.currentGeneration<=this.config.maxGenerations-1?window.setTimeout(()=>{this.currentGeneration++,this.play()},1e3*(this.config.timeBetweenEvents()+this.config.gapBetweenEvents())):(this.currentGeneration++,this.endOfScene()),this}playMelody(e,t){const n=s([0,4,2,0,7,4,2,7,7,4,2,2,4,4,2,0],e),i=[.5,.5,.5,.5,.5,1,2,.25,.5,1,1,.5,.5,.5,.25,2].map((e,t)=>[n[t],e]),o=Math.floor(Math.random()*n.length),a=[];for(let e=3;e>=0;e--)a.push(n[l(o-e,n.length)]);const d=f(n,3,a);let c=0;const _=e=>{const t=Math.ceil(3*Math.random())+Math.ceil(3*Math.random())+2,n=d.next().value,o=i.filter(e=>e[0]===n);void 0!==n&&u(.55)&&this.config.melodyOscillators[c%this.config.melodyOscillators.length].play({freq:n/t,time:1+6*Math.random(),pan:1*Math.random()-.5,vol:.35}),c++,window.setTimeout(()=>{e===this.currentGeneration&&this.currentGeneration<=this.config.maxGenerations&&_(e)},1e3*(2*r(o)[1]+.5))};_(t)}endOfScene(){const e=this.config.onFinish;this.config.chordOscillators.map(e=>e.stop(1)),window.setTimeout(e,1e3)}}(g).play()};A()};t.default=A}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,